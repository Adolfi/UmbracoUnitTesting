<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpTest.Net.Collections</name>
    </assembly>
    <members>
        <member name="T:CSharpTest.Net.Bases.Disposable">
            <summary>
            Wraps the IDisposable object interface for classes that desire to be sure of being called 
            a single time for the dispose.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.#ctor">
            <summary> </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.Finalize">
            <summary> last-chance dispose </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.Dispose">
            <summary> disposes of the object if it has not already been disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.Assert">
            <summary> Raises the ObjectDisposedException if this object has already been disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Disposable.Dispose(System.Boolean)">
            <summary> Your implementation of the dispose method </summary>
        </member>
        <member name="E:CSharpTest.Net.Bases.Disposable.Disposed">
            <summary> Raised when the object is disposed </summary>
        </member>
        <member name="T:CSharpTest.Net.Bases.Equatable`1">
            <summary> Provides a base-class for non-reference equality objects </summary>
        </member>
        <member name="F:CSharpTest.Net.Bases.Equatable`1.Comparer">
            <summary> return a non-reference equality comparer for this class </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.Equals(`0)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.Equals(System.Object)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.GetHashCode">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.Equals(`0,`0)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.GetHashCode(`0)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.op_Equality(CSharpTest.Net.Bases.Equatable{`0},CSharpTest.Net.Bases.Equatable{`0})">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.op_Inequality(CSharpTest.Net.Bases.Equatable{`0},CSharpTest.Net.Bases.Equatable{`0})">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="P:CSharpTest.Net.Bases.Equatable`1.HashCode">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="T:CSharpTest.Net.Bases.Equatable`1.EqualityComparer">
            <summary> Implements the equality comparer </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.EqualityComparer.Equals(`0,`0)">
            <summary> Compares the two objects for non-reference equality </summary>
        </member>
        <member name="M:CSharpTest.Net.Bases.Equatable`1.EqualityComparer.GetHashCode(`0)">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BPlusTree`2">
            <summary>
            Implements an IDictionary interface for a simple file-based database
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.ITransactable">
            <summary> Supplies a common interface to transaction based objects </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.ITransactable.Commit">
            <summary> Completes the operation </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.ITransactable.Rollback">
            <summary> Aborts the operation and reverts pending changes </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.IDictionaryEx`2">
            <summary>
            Extends the IDictionary interface to encompass the TryXxxx operations
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IDictionaryEx`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the  <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.IDictionaryEx`2.TryAdd(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.IDictionaryEx`2.TryUpdate(`0,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.IDictionaryEx`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <param name="comparisonValue">The value that is compared to the value of the element with key.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.IDictionaryEx`2.TryRemove(`0,`1@)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value that was removed.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="T:CSharpTest.Net.Collections.IConcurrentDictionary`2">
            <summary>
            Extends the IDictionaryEx interface to encompass concurrent/atomic operations
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.GetOrAdd(`0,System.Converter{`0,`1})">
            <summary>
            Adds a key/value pair to the  <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="fnCreate">Constructs a new value for the key.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.AddOrUpdate(`0,`1,CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist, 
            or updates a key/value pair if the key already exists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.AddOrUpdate(`0,System.Converter{`0,`1},CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist, 
            or updates a key/value pair if the key already exists.
            </summary>
            <remarks>
            Adds or modifies an element with the provided key and value.  If the key does not exist in the collection,
            the factory method fnCreate will be called to produce the new value, if the key exists, the converter method
            fnUpdate will be called to create an updated value.
            </remarks>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.AddOrUpdate``1(`0,``0@)">
            <summary>
            Add, update, or fetche a key/value pair from the dictionary via an implementation of the
            <see cref="T:CSharpTest.Net.Collections.ICreateOrUpdateValue`2"/> interface.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.TryAdd(`0,System.Converter{`0,`1})">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            by calling the provided factory method to construct the value if the key is not already present in the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.TryUpdate(`0,CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Modify the value associated with the result of the provided update method
            as an atomic operation, Allows for reading/writing a single record within
            the tree lock.  Be cautious about the behavior and performance of the code 
            provided as it can cause a dead-lock to occur.  If the method returns an
            instance who .Equals the original, no update is applied.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.TryRemove(`0,CSharpTest.Net.Collections.KeyValuePredicate{`0,`1})">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            if the fnCondition predicate is null or returns true.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IConcurrentDictionary`2.TryRemove``1(`0,``0@)">
            <summary>
            Conditionally removes a key/value pair from the dictionary via an implementation of the
            <see cref="T:CSharpTest.Net.Collections.IRemoveValue`2"/> interface.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.DebugSetOutput(System.IO.TextWriter)">
            <summary>
            Sets a text writter that the entire btree will be dumped to after every read/write/seek operation.
            The format is a single line of text in abbreviated form: {k1{k1,k2,k3},k4{k4,k5}}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.DebugSetValidateOnCheckpoint(System.Boolean)">
            <summary>
            Sets a boolean condition that will validate the state of the entire btree after every operation.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Print(System.IO.TextWriter,CSharpTest.Net.Collections.BPlusTree{`0,`1}.DebugFormat)">
            <summary>
            Prints the entire tree to the text writer
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Validate">
            <summary>
            Forces a top-down, depth-first, crawl of the entire tree in which every node and
            every link or key is checked for accuracy.  Throws on error.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.#ctor">
            <summary>
            Constructs an in-memory BPlusTree
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructs an in-memory BPlusTree
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.#ctor(CSharpTest.Net.Collections.BPlusTree{`0,`1}.OptionsV2)">
            <summary>
            Constructs a BPlusTree using a Version 2 file format
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.#ctor(CSharpTest.Net.Collections.BPlusTree{`0,`1}.Options)">
            <summary>
            Constructs a BPlusTree using a Version 1 file format
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.#ctor(CSharpTest.Net.Collections.BPlusTreeOptions{`0,`1})">
            <summary>
            Constructs a BPlusTree
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Dispose">
            <summary>
            Closes the storage and clears memory used by the instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Commit">
            <summary>
            When using TransactionLog, this method commits the changes in the current
            instance to the output file and truncates the log.  For all other cases the method is a 
            no-op and no exception is raised.  This method is NOT thread safe UNLESS the CallLevelLock
            property has been set to valid reader/writer lock.  If you need to call this method while
            writers are currently accessing the tree, make sure the CallLevelLock options is specified.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Rollback">
            <summary>
            With version 2 storage this will revert the contents of tree to it's initial state when
            the file was first opened, or to the state captured with the last call to commit.  Any
            transaction log data will be truncated.
            </summary>
            <exception cref="T:System.InvalidOperationException">Raised when called for a BPlusTree that is not using v2 files</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.EnableCount">
            <summary> 
            Due to the cost of upkeep, this must be enable each time the object is created via a call to
            EnableCount() which itself must be done before any writer threads are active for it to be
            accurate.  This requires that the entire tree be loaded (sequentially) in order to build
            the initial working count.  Once completed, members like Add() and Remove() will keep the
            initial count accurate.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.UnloadCache">
            <summary>
            Safely removes all items from the in-memory cache.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.TryUpdate(`0,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <param name="comparisonValue">The value that is compared to the value of the element with key.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.TryUpdate(`0,CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Modify the value associated with the result of the provided update method
            as an atomic operation, Allows for reading/writing a single record within
            the tree lock.  Be cautious about the behavior and performance of the code 
            provided as it can cause a dead-lock to occur.  If the method returns an
            instance who .Equals the original, no update is applied.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Presorts the provided enumeration in batches and then performs an optimized insert on the resulting set(s).
            </summary>
            <param name="unorderedItems">The items to insert</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)">
            <summary>
            Presorts the provided enumeration in batches and then performs an optimized insert on the resulting set(s).
            </summary>
            <param name="unorderedItems">The items to insert</param>
            <param name="allowUpdates">True to overwrite any existing records</param>
            <returns>The total number of records inserted or updated</returns>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.AddRangeSorted(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary> 
            Optimized insert of presorted key/value pairs.  
            If the input is not presorted, please use AddRange() instead.
            </summary>
            <param name="items">The ordered list of items to insert</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.AddRangeSorted(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)">
            <summary>
            Optimized insert of presorted key/value pairs.  
            If the input is not presorted, please use AddRange() instead.
            </summary>
            <param name="items">The ordered list of items to insert</param>
            <param name="allowUpdates">True to overwrite any existing records</param>
            <returns>The total number of records inserted or updated</returns>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the  <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.GetOrAdd(`0,System.Converter{`0,`1})">
            <summary>
            Adds a key/value pair to the  <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="fnCreate">Constructs a new value for the key.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.TryAdd(`0,System.Converter{`0,`1})">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            by calling the provided factory method to construct the value if the key is not already present in the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.TryAdd(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.AddOrUpdate(`0,`1)">
            <summary>
            Adds or modifies an element with the provided key and value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.AddOrUpdate(`0,`1,CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist, 
            or updates a key/value pair if the key already exists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.AddOrUpdate(`0,System.Converter{`0,`1},CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist, 
            or updates a key/value pair if the key already exists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.AddOrUpdate``1(`0,``0@)">
            <summary>
            Add, update, or fetche a key/value pair from the dictionary via an implementation of the
            <see cref="T:CSharpTest.Net.Collections.ICreateOrUpdateValue`2"/> interface.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.TryRemove(`0,`1@)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value that was removed.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.TryRemove(`0,CSharpTest.Net.Collections.KeyValuePredicate{`0,`1})">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            if the fnCondition predicate is null or returns true.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.TryRemove``1(`0,``0@)">
            <summary>
            Conditionally removes a key/value pair from the dictionary via an implementation of the
            <see cref="T:CSharpTest.Net.Collections.IRemoveValue`2"/> interface.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.First">
            <summary>
            Returns the first key and it's associated value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.TryGetFirst(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Returns the first key and it's associated value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Last">
            <summary>
            Returns the last key and it's associated value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.TryGetLast(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Returns the last key and it's associated value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.EnumerateFrom(`0)">
            <summary>
            Inclusivly enumerates from start key to the end of the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.EnumerateRange(`0,`0)">
            <summary>
            Inclusivly enumerates from start key to stop key
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Clear">
            <summary>
            Removes all items from the collection and permanently destroys all storage.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.EnumerateFile(CSharpTest.Net.Collections.BPlusTreeOptions{`0,`1})">
            <summary>
            Directly enumerates the contents of BPlusTree from disk in read-only mode.
            </summary>
            <param name="options"> The options normally used to create the <see cref="T:CSharpTest.Net.Collections.BPlusTree`2"/> instance </param>
            <returns> Yields the Key/Value pairs found in the file </returns>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.RecoverFile(CSharpTest.Net.Collections.BPlusTree{`0,`1}.Options)">
            <summary>
            Recovers as much file content as possible into a newly created <see cref="T:CSharpTest.Net.Collections.BPlusTree`2"/>, if the operation returns
            a non-zero result it was successful and the file has been replaced with a new database containing
            the recovered data.  The original file remains in-tact but was renamed with a '.deleted' extension.
            </summary>
            <remarks> 
            If an exception occurs during the parsing of the file and one or more records were recovered, they will
            be stored in a file by the same name with an added extension of '.recovered'.  This recovered file can be
            opened as a normal <see cref="T:CSharpTest.Net.Collections.BPlusTree`2"/> to view it's contents.  During the restore it is possible that
            a single Key was found multiple times, in this case the first occurrence found will be used.
            </remarks>
            <param name="options"> The options normally used to create the <see cref="T:CSharpTest.Net.Collections.BPlusTree`2"/> instance </param>
            <returns>Returns 0 on failure, or the number of records successfully retrieved from the original file </returns>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.RecoveryScan(CSharpTest.Net.Collections.BPlusTree{`0,`1}.Options,System.IO.FileShare)">
            <summary>
            Performs a low-level scan of the storage file to yield all Key/Value pairs it was able to read from the file.
            </summary>
            <param name="options"> The options normally used to create the <see cref="T:CSharpTest.Net.Collections.BPlusTree`2"/> instance </param>
            <param name="sharing"> <see cref="T:System.IO.FileShare"/> options used to open the file </param>
            <returns> Yields the Key/Value pairs found in the file </returns>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.BulkInsert(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Rewrite the entire BTree as a transaction to include the provided items.  This method is Thread safe.
            If the input is already sorted, use BulkInsertOptions overload to specify InputIsSorted = true.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.BulkInsert(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},CSharpTest.Net.Collections.BulkInsertOptions)">
            <summary>
            Rewrite the entire BTree as a transaction to include the provided items.  This method is Thread safe.
            If the input is already sorted, use BulkInsertOptions overload to specify InputIsSorted = true.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.EnumerateNodeContents(CSharpTest.Net.Collections.BPlusTree{`0,`1}.NodePin)">
            <summary>
            Exclusive access, deep-locking enumeration for bulk-insert, essentially this enumerates
            while at the same time it chases existing writers out of the tree.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.CallLevelLock">
            <summary>
            Defines the lock used to provide tree-level exclusive operations.  This should be set at the time of construction, or not at all since
            operations depending on this (Clear, EnableCount, and UnloadCache) may behave poorly if operations that started prior to setting this
            value are still being processed.  Out of the locks I've tested the ReaderWriterLocking implementation performs best here since it is
            a highly read-intensive lock.  All public APIs that access tree content will aquire this lock as a reader except the tree exclusive 
            operations.  This also allows you, by way of aquiring a write lock, to gain exclusive access and perform mass updates, atomic 
            enumeration, etc.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.Count">
            <summary> See comments on EnableCount() for usage of this property </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.LockTimeout">
            <summary> Returns the lock timeout being used by this instance. </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.IsReadOnly">
            <summary>
            Returns true if the file was opened in ReadOnly mode.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BPlusTree`2.DebugFormat">
            <summary> Print formatting for nodes </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.BPlusTree`2.DebugFormat.Full">
            <summary> Full information for all nodes </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.BPlusTree`2.DebugFormat.Formatted">
            <summary> Formatted new lines and tabbify, but reduced information </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.BPlusTree`2.DebugFormat.Compact">
            <summary> Compact single line format </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2">
            <summary>
            Defines the options nessessary to construct a BPlusTree implementation
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BPlusTreeOptions`2">
            <summary>
            Defines the options nessessary to construct a BPlusTree implementation
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTreeOptions`2.#ctor(CSharpTest.Net.Serialization.ISerializer{`0},CSharpTest.Net.Serialization.ISerializer{`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructs the options configuration to initialize a BPlusTree instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTreeOptions`2.CalcBTreeOrder(System.Int32,System.Int32)">
            <summary>
            Calculates default node-threasholds based upon the average number of bytes in key and value
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTreeOptions`2.CalculateOrder(System.Int32,System.Int32)">
            <summary>
            Calculates default node-threasholds based upon the average number of bytes in key and value
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTreeOptions`2.Clone">
            <summary>
            Creates a shallow clone of the configuration options.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTreeOptions`2.SetStorageCache(System.Boolean)">
            <summary> Enables or disables the caching and reordering of node write operations </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTreeOptions`2.SetLogFile(CSharpTest.Net.Collections.ITransactionLog{`0,`1})">
            <summary> Sets the transaction log to use </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTreeOptions`2.CreateStorage">
            <summary> Used to create the correct storage type </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTreeOptions`2.CreateCacheKeepAlive">
            <summary>
            Creates the keep-alive object reference tracking implementation
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.KeySerializer">
            <summary> Accesses the key serializer given to the constructor </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.ValueSerializer">
            <summary> Accesses the key serializer given to the constructor </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.KeyComparer">
            <summary> Defines a custom IComparer&lt;T> to be used for comparing keys </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.FileVersion">
            <summary>
            Returns the version this option set is compatable with.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.StorageType">
            <summary> 
            Can be used to explicitly specify the storage type, or by simply providing a file name this
            will be done for you.  If no file name was specified the default is to use a memory store.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.ReadOnly">
            <summary>
            Sets the BTree into a read-only mode (only supported when opening an existing file)
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.StorageSystem">
            <summary>
            Sets the custom implementation of the storage back-end to use for the BTree
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.FileName">
            <summary>
            Gets or sets the FileName that should be used to store the BTree
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.CreateFile">
            <summary>
            Gets or sets the file-create policy used when backing with a file storage
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.FileBlockSize">
            <summary>
            Gets or sets the number of bytes per file-block used in the file storage
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.LockTimeout">
            <summary>
            Gets or sets the number of milliseconds to wait before failing a lock request, the default
            of two minutes should be more than adequate.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.LockingFactory">
            <summary>
            Gets or sets the locking factory to use for accessing shared data. The default is WriterOnlyLocking() 
            which does not perform read locks, rather it will rely on the cache of the btree and may preform dirty
            reads.  You can use any implementation of ILockFactory; however, the SimpleReadWriteLocking seems to 
            perform the most efficiently for both reader/writer locks.  Additionally wrapping that instance in a
            ReserveredWriterLocking() instance will allow reads to continue up until a writer begins the commit
            process.  If you are only accessing the BTree instance from a single thread this can be set to 
            IgnoreLocking. Be careful of using ReaderWriterLocking as the write-intesive nature of the BTree will 
            suffer extreme performance penalties with this lock.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.CallLevelLock">
            <summary>
            Defines a reader/writer lock that used to control exclusive tree access when needed.  The public
            methods for EnableCount(), Clear(), and UnloadCache() each acquire an exclusive (write) lock while
            all other public methods acquire a shared (read) lock.  By default this lock is non-operational
            (an instance of IgnoreLocking) so if you need the above methods to work while multiple threads are
            accessing the tree, or if you exclusive access to the tree, specify a lock instance.  Since this
            lock is primarily a read-heavy lock consider using the ReaderWriterLocking or SimpleReadWriteLocking.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.BTreeOrder">
            <summary>
            A quick means of setting all the min/max values for the node counts using this value as a basis
            for the Maximum fields and one-quarter of this value for Minimum fields provided the result is in
            range.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.MinimumChildNodes">
            <summary>
            The smallest number of child nodes that should be linked to before refactoring the tree to remove
            this node.  In a 'normal' and/or purest B+Tree this is always half of max; however for performance
            reasons this B+Tree allow any value equal to or less than half of max but at least 2.
            </summary>
            <value>A number in the range of 2 to 128 that is at most half of MaximumChildNodes.</value>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.MaximumChildNodes">
            <summary>
            The largest number of child nodes that should be linked to before refactoring the tree to split
            this node into two.  This property has a side-effect on MinimumChildNodes to ensure that it continues
            to be at most half of MaximumChildNodes.
            </summary>
            <value>A number in the range of 4 to 256.</value>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.MinimumValueNodes">
            <summary>
            The smallest number of values that should be contained in this node before refactoring the tree to remove
            this node.  In a 'normal' and/or purest B+Tree this is always half of max; however for performance
            reasons this B+Tree allow any value equal to or less than half of max but at least 2.
            </summary>
            <value>A number in the range of 2 to 128 that is at most half of MaximumValueNodes.</value>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.MaximumValueNodes">
            <summary>
            The largest number of values that should be contained in this node before refactoring the tree to split
            this node into two.  This property has a side-effect on MinimumValueNodes to ensure that it continues
            to be at most half of MaximumValueNodes.
            </summary>
            <value>A number in the range of 4 to 256.</value>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.CachePolicy">
            <summary>
            Determines how long loaded nodes stay in memory, Full keeps all loaded nodes alive and is the
            most efficient, The default Recent keeps recently visited nodes alive based on the CacheKeepAlive
            properties, and None does not cache the nodes at all but does maintain a cache of locks for 
            each node visited.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.CacheKeepAliveFactory">
            <summary>
            CacheKeepAliveFactory provides a delegate to inject an implementation of the IObjectKeepAlive
            interface while then igoring all the other CacheKeepAliveXXX properties.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.CacheKeepAliveMinimumHistory">
            <summary> 
            Determins minimum number of recently visited nodes to keep alive in memory.  This number defines
            the history size, not the number of distinct nodes.  This number will always be kept reguardless
            of the timeout.  Specify a value of 0 to allow the timeout to empty the cache.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.CacheKeepAliveMaximumHistory">
            <summary> 
            Determins maximum number of recently visited nodes to keep alive in memory.  This number defines
            the history size, not the number of distinct nodes.  The ceiling is always respected reguardless
            of the timeout.  Specify a value of 0 to disable history keep alive.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.CacheKeepAliveTimeout">
            <summary>
            If the cache contains more that CacheKeepAliveMinimumHistory items, this timeout will start to
            remove those items until the cache history is reduced to CacheKeepAliveMinimumHistory.  It is 
            important to know that the BPlusTree itself contains no theads and this timeout will not be 
            respected if cache is not in use.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.FillChildNodes">
            <summary> The desired fill-size of node that contain children </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTreeOptions`2.FillValueNodes">
            <summary> The desired fill-size of node that contain values </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.#ctor(CSharpTest.Net.Serialization.ISerializer{`0},CSharpTest.Net.Serialization.ISerializer{`1})">
            <summary>
            Constructs the options configuration to initialize a BPlusTree instance using the default Comparer for TKey
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.#ctor(CSharpTest.Net.Serialization.ISerializer{`0},CSharpTest.Net.Serialization.ISerializer{`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructs the options configuration to initialize a BPlusTree instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.Clone">
            <summary>
            Creates a shallow clone of the configuration options.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.CalcBTreeOrder(System.Int32,System.Int32)">
            <summary>
            Calculates default node-thresholds based upon the average number of bytes in key and value
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.CalculateOrder(System.Int32,System.Int32)">
            <summary>
            Calculates default node-thresholds based upon the average number of bytes in key and value
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.CreateStorage">
            <summary> Used to create the correct storage type </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.CallLevelLock">
            <summary>
            Defines a reader/writer lock that used to control exclusive tree access when needed.  
            Version2 files using trasacation logs will use this to gain exclusive access to the tree
            during calls to Commit, Rollback, etc.  The default is to use a SimpleReadWriteLocking
            class.  If you are accessing the tree from a single thread, consider using the IgnoreLocking
            class for better performance.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.FileVersion">
            <summary>
            Returns the version this option set is compatible with.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.StoragePerformance">
            <summary>
            Returns the DurabilityProtection of the underlying storage to create.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.TransactionLogFileName">
            <summary>
            Gets or sets a filename to write binary log files to.
            </summary>
            <remarks> 
            This is just a short-hand way of setting the TransactionLog instance.  For better performance
            at the risk of loosing a record or two, consider creating the TransactionLog instance with the
            FileOptions set to (FileOptions.WriteThrough | FileOptions.Asynchronous).
            </remarks>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.TransactionLog">
            <summary>
            Gets or sets an implementation of ITransactionLog&lt;TKey, TValue> used to log writes to this
            tree for recovery and/or monitoring.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.ExistingLogAction">
            <summary>
            Defines the action to perform when opening a BPlusTree with an existing log file.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.OptionsV2.TransactionLogLimit">
            <summary>
            Defines the number of bytes in the transaction log file before the BPlusTree will auto-commit
            and truncate the log.  Values equal to or less than zero will not auto-commit (default).
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BPlusTree`2.Options">
            <summary>
            Defines the options nessessary to construct a BPlusTree implementation
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Options.#ctor(CSharpTest.Net.Serialization.ISerializer{`0},CSharpTest.Net.Serialization.ISerializer{`1})">
            <summary>
            Constructs the options configuration to initialize a BPlusTree instance using the default Comparer for TKey
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Options.#ctor(CSharpTest.Net.Serialization.ISerializer{`0},CSharpTest.Net.Serialization.ISerializer{`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructs the options configuration to initialize a BPlusTree instance
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Options.Clone">
            <summary>
            Creates a shallow clone of the configuration options.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Options.CalcBTreeOrder(System.Int32,System.Int32)">
            <summary>
            Calculates default node-threasholds based upon the average number of bytes in key and value
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Options.CalculateOrder(System.Int32,System.Int32)">
            <summary>
            Calculates default node-threasholds based upon the average number of bytes in key and value
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Options.CreateStorage">
            <summary> Used to create the correct storage type </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.Options.FileOpenOptions">
            <summary>
            Gets or sets the number of bytes per file-block used in the file storage
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.Options.FileGrowthRate">
            <summary>
            Gets or sets the number of blocks that a file will grow by when all blocks are used, use zero for incremental growth
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.Options.ConcurrentWriters">
            <summary>
            Gets or sets the number of streams that will be created for threads to write in the file store
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BPlusTree`2.Options.FileVersion">
            <summary>
            Returns the version this option set is compatable with.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BPlusTree`2.NodeCacheBase">
            <summary> Provides base functionality of a node cache, not much exciting here </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BPlusTree`2.NodeCacheFull">
            <summary> performs a perfect cache of the entire tree </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BPlusTree`2.NodeCacheNone">
            <summary> performs a perfect cache of the entire tree </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BPlusTree`2.Node.CopyTo(CSharpTest.Net.Collections.BPlusTree{`0,`1}.Element[],System.Int32@)">
            <summary> For enumeration </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.IRemoveValue`2">
            <summary>
            An interface to provide conditional removal of an item from a concurrent dictionary.
            </summary>
            <remarks>
            Generally implemented as a struct and passed by ref to save stack space and to retrieve the values
            that where inserted or updated.
            </remarks>
        </member>
        <member name="M:CSharpTest.Net.Collections.IRemoveValue`2.RemoveValue(`0,`1)">
            <summary>
            Called when the dictionary is about to remove the key/value pair provided, return true to allow
            it's removal, or false to prevent it from being removed.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.ICreateOrUpdateValue`2">
            <summary>
            An interface to provide conditional or custom creation or update logic to a concurrent dictionary.
            </summary>
            <remarks>
            Generally implemented as a struct and passed by ref to save stack space and to retrieve the values
            that where inserted or updated.
            </remarks>
        </member>
        <member name="T:CSharpTest.Net.Collections.ICreateValue`2">
            <summary>
            An interface to provide conditional or custom creation logic to a concurrent dictionary.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ICreateValue`2.CreateValue(`0,`1@)">
            <summary>
            Called when the key was not found within the dictionary to produce a new value that can be added.
            Return true to continue with the insertion, or false to prevent the key/value from being inserted.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.IUpdateValue`2">
            <summary>
            An interface to provide conditional or custom update logic to a concurrent dictionary.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.IUpdateValue`2.UpdateValue(`0,`1@)">
            <summary>
            Called when the key was found within the dictionary to produce a modified value to update the item
            to. Return true to continue with the update, or false to prevent the key/value from being updated.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.ISerializer`1">
            <summary> Provides serialization for a type </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.ISerializer`1.WriteTo(`0,System.IO.Stream)">
            <summary> Writes the object to the stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.ISerializer`1.ReadFrom(System.IO.Stream)">
            <summary> Reads the object from a stream </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BPlusTree`2.NodeCacheNormal">
            <summary>
            This is the default cache type, uses weakreferences and the GC to collect unused nodes after they exit
            the ObjectKeepAlive containment policy.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.INodeStorage">
            <summary> Represents a persistance mechanic for node data </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.INodeStorage.OpenRoot(System.Boolean@)">
            <summary> Returns an immutable handle to the root node, sets isNew to true if no data exists </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.INodeStorage.Reset">
            <summary> Destroys the entire contents of the storage system except for the root handle which remains valid </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.INodeStorage.TryGetNode``1(CSharpTest.Net.Collections.IStorageHandle,``0@,CSharpTest.Net.Serialization.ISerializer{``0})">
            <summary> Retrieves a single node from storage </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.INodeStorage.Create">
            <summary> Creates a node handle that will represent a new node instance </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.INodeStorage.Destroy(CSharpTest.Net.Collections.IStorageHandle)">
            <summary> Destroys the node that was formally stored by the specified handle </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.INodeStorage.Update``1(CSharpTest.Net.Collections.IStorageHandle,CSharpTest.Net.Serialization.ISerializer{``0},``0)">
            <summary> Updates the node of the specified handle with the instance given </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.INodeStoreWithCount">
            <summary> An optional interface that allows storage provides to persist the record count </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.INodeStoreWithCount.Count">
            <summary>
            Used to retrieve the current record count after opening a store, -1 indicates an invalid entry.
            Prior to Commit() the count will be set to the actual record count.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.DisposingList">
            <summary>
            Disposes of each element in the collection when the collection is disposed.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.DisposingList`1">
            <summary>
            Disposes of each element in the collection when the collection is disposed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList`1.#ctor">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that is empty and has the default initial capacity.
             </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that contains elements copied from the specified collection and has sufficient
                 capacity to accommodate the number of elements copied.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList`1.#ctor(System.Int32)">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that is empty and has the specified initial capacity.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList`1.Dispose">
            <summary>
            Disposes of each element in the collection when the collection is disposed.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList.#ctor">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that is empty and has the default initial capacity.
             </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that contains elements copied from the specified collection and has sufficient
                 capacity to accommodate the number of elements copied.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.DisposingList.#ctor(System.Int32)">
            <summary>
                 Initializes a new instance of the System.Collections.Generic.List&gt;T> class
                 that is empty and has the specified initial capacity.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.SetList`1">
            <summary> Represents an immutable collection of unique items that can be manipulated as a set, intersect/union/etc. </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.ICloneable`1">
            <summary>
            Provides a strongly typed shallow copy of the current object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.ICloneable`1.Clone">
            <summary>
            Returns a shallow clone of this object.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Int32)">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.IComparer{`0})">
            <summary> Constructs a SetList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IndexOf(`0)">
            <summary> Returns the zero-based index of the item or -1 </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Contains(`0)">
            <summary> Returns true if the item is already in the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.CopyTo(`0[],System.Int32)">
            <summary> Copy the collection to an array </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.ToArray">
            <summary> Returns this collection as an array </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Clear">
            <summary> Removes all items from the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Add(`0)">
            <summary> Returns a new collection adding the item provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Add(`0,System.Int32@)">
            <summary> Returns a new collection adding the item provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary> Adds a range of items to the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Replace(`0)">
            <summary> Adds or replaces an item in the collection, returns true if an entry was replaced </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary> Adds or replaces an item in the collection, returns true if any item was replaced </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary> Not supported, the list is sorted. </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Remove(`0)">
            <summary> Returns a new collection with the item provided removed </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.RemoveAt(System.Int32)">
            <summary> Removes an item by it's ordinal index in the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary> Removes the items in this set that are not in the provided set </summary>
            <example>{ 1, 2, 3 }.RemoveAll({ 2, 3, 4 }) == { 1 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IntersectWith(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the set of items that are in both this set and the provided set </summary>
            <example>{ 1, 2, 3 }.IntersectWith({ 2, 3, 4 }) == { 2, 3 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.UnionWith(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the set of items that are in either this set or the provided set </summary>
            <example>{ 1, 2, 3 }.UnionWith({ 2, 3, 4 }) == { 1, 2, 3, 4 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.ComplementOf(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the items in the provided set that are not in this set </summary>
            <example>{ 1, 2, 3 }.ComplementOf({ 2, 3, 4 }) == { 4 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.SubtractSet(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the items in this set that are not in the provided set </summary>
            <example>{ 1, 2, 3 }.RemoveAll({ 2, 3, 4 }) == { 1 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.ExclusiveOrWith(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns the items in this set that are not in the provided set </summary>
            <example>{ 1, 2, 3 }.ExclusiveOrWith({ 2, 3, 4 }) == { 1, 4 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IsEqualTo(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns true if all items in this set are also in the provided set </summary>
            <example>{ 1, 2 }.IsEqualTo({ 1, 2 }) == true &amp;&amp; {}.IsEqualTo({}) == true</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IsSubsetOf(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns true if all items in this set are also in the provided set </summary>
            <example>{ 1, 2, 4 }.IsSubsetOf({ 1, 2, 3, 4 }) == true &amp;&amp; {}.IsSubsetOf({ 1 }) == true</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.IsSupersetOf(CSharpTest.Net.Collections.SetList{`0})">
            <summary> Returns true if all items in the provided set are also in this set </summary>
            <example>{ 1, 2, 3, 4 }.IsSupersetOf({ 1, 2, 4 }) == true &amp;&amp; { 1 }.IsSupersetOf({}) == true</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary> Copies collection to array </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary> Returns an enumerator </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.GetEnumerator">
            <summary> Returns a typed enumerator </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.SetList`1.Clone">
            <summary> Returns a shallow clone of this object </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.EmptySet">
            <summary> Provides an empty set </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.Item(System.Int32)">
            <summary> Access an item by it's ordinal offset in the list </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.IsReadOnly">
            <summary> Returns true if the list is read-only </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.Count">
            <summary> Returns the count of items in the list </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.System#Collections#ICollection#IsSynchronized">
            <summary> Returns false </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.SetList`1.System#Collections#ICollection#SyncRoot">
            <summary> Returns SyncRoot </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.BinaryComparer">
            <summary>
            Dictionary comparer for comparing arrays of bytes by value equality
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BinaryComparer.Equals(System.Byte[],System.Byte[])">
            <summary> returns true if both arrays contain the exact same set of bytes. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BinaryComparer.Compare(System.Byte[],System.Byte[])">
            <summary> Compares the contents of the byte arrays and returns the result. </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BinaryComparer.GetHashCode(System.Byte[])">
            <summary> Returns a hash code the instance of the object </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BinaryComparer.System#Collections#Generic#IComparer{System#Byte[]}#Compare(System.Byte[],System.Byte[])">
            <summary> Compares the contents of the byte arrays and returns the result. </summary> 
        </member>
        <member name="M:CSharpTest.Net.IO.BinaryComparer.System#Collections#Generic#IEqualityComparer{System#Byte[]}#Equals(System.Byte[],System.Byte[])">
            <summary> Returns true if the two objects are the same instance </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.BinaryComparer.System#Collections#Generic#IEqualityComparer{System#Byte[]}#GetHashCode(System.Byte[])">
            <summary> Returns a hash code the instance of the object </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.StorageType">
            <summary> Defines the storage type to use </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.StorageType.Memory">
            <summary> Uses in-memory storage </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.StorageType.Disk">
            <summary> Uses a file to store data, (Set by setting the FileName property) </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.StorageType.Custom">
            <summary> Uses a custom data store, (Set by setting the StorageSystem property) </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.CreatePolicy">
            <summary> Determines if the file specified should be created </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.CreatePolicy.Never">
            <summary> Does not create a new file </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.CreatePolicy.Always">
            <summary> Creates a new file even if one already exists </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.CreatePolicy.IfNeeded">
            <summary> Creates a new file only if it does not exist </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.CachePolicy">
            <summary> Determines the type of node caching used in the tree </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.CachePolicy.None">
            <summary> Does not cache, allways loads from storage. </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.CachePolicy.All">
            <summary> Keeps every loaded object in memory. </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.CachePolicy.Recent">
            <summary> Keeps a history of objects in memory (see CacheKeepAliveXXX properties) </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.ExistingLogAction">
            <summary>
            Defines the action to perform when opening a BPlusTree with an existing log file.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.ExistingLogAction.Default">
            <summary> 
            Infers the default wether or not the data file was created.  For newly created data
            files (CreatePolicy = Always, or IfNeeded and the file is missing) the default will
            be Truncate.  When existing data files are opened the default will ReplayAndCommit.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.ExistingLogAction.Ignore">
            <summary> Ignore the existing entries in the log </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.ExistingLogAction.Replay">
            <summary> Replay the log entries uncommitted </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.ExistingLogAction.ReplayAndCommit">
            <summary> Replay the log entries and commit the changes to the store </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.ExistingLogAction.Truncate">
            <summary> Ignore the existing entries and truncate the log </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.StoragePerformance">
            <summary>
            Defines the levels of durability the store will try to achieve.  'Uncommitted changes' in the descriptions below
            refers to all changes made to the tree since the last call to CommitChanges() on the BPlusTree class.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.StoragePerformance.Fastest">
            <summary> (100k rps) Uncommitted changes will be lost, a crash durring commit may corrupt state. </summary>
            <remarks> 
            No changes are committed until a call to Commit is made, durring the commit a partial write may corrupt the store.
            </remarks>
        </member>
        <member name="F:CSharpTest.Net.Collections.StoragePerformance.LogFileInCache">
            <summary> (30k rps) Uses a system-cached transaction log to recover uncommitted changes after a process crash. </summary>
            <remarks> Will not corrupt state; however, in a power outage or system failure it may loose some comitted records. </remarks>
        </member>
        <member name="F:CSharpTest.Net.Collections.StoragePerformance.CommitToCache">
            <summary> (8k rps) Every write will commit changes to the storage file immediately into system cache </summary>
            <remarks> May corrupt state and/or loose data in the event of a power outage </remarks>
        </member>
        <member name="F:CSharpTest.Net.Collections.StoragePerformance.LogFileNoCache">
            <summary> (2k rps) Uses a cache-writethrough transaction log to recover uncommitted changes after a power outage or system crash. </summary>
            <remarks> Complies with ACID durability requirements, can be expensive to recover from the log. </remarks>
        </member>
        <member name="F:CSharpTest.Net.Collections.StoragePerformance.CommitToDisk">
            <summary> (1k rps) Every write will commit changes to the storage file immediately bypassing system cache (Slowest/Safest) </summary>
            <remarks> Complies with ACID durability requirements </remarks>
        </member>
        <member name="F:CSharpTest.Net.Collections.StoragePerformance.Default">
            <summary> Defaults to using a transaction log in system cache for best performance/durability. </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.FileVersion">
            <summary> Determines the binary file format and backwards compatibility </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.FileVersion.Version1">
            <summary> Version 1 compatable </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.FileVersion.Version2">
            <summary> Version 2 compatable </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BTreeDictionary`2">
            <summary>
            Implements an IDictionary interface for an in-memory B+Tree
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.BTreeDictionary`2.DefaultOrder">
            <summary>The default `order` of the B+Tree structure.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.#ctor">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The Collection is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Adds a set of items to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="items">The items to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific key and value pair.
            </summary>
            <returns>true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. 
            This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the  <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryAdd(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryUpdate(`0,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <param name="comparisonValue">The value that is compared to the value of the element with key.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value that was removed.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.ToArray">
            <summary>
            Returns all the items of this collection as an array of  <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.First">
            <summary>
            Returns the first key and it's associated value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryGetFirst(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Returns the first key and it's associated value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Last">
            <summary>
            Returns the last key and it's associated value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.TryGetLast(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Returns the last key and it's associated value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.EnumerateFrom(`0)">
            <summary>
            Inclusivly enumerates from start key to the end of the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.EnumerateRange(`0,`0)">
            <summary>
            Inclusivly enumerates from start key to stop key
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.Clone">
            <summary>
            Returns a writable clone of this collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.MakeReadOnly">
            <summary>
            Returns a read-only clone of this collection.  If this instance is already read-only the method will return this.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeDictionary`2.DebugAssert">
            <summary>
            Ensures data integrity or raises exception
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeDictionary`2.Comparer">
            <summary>
            Gets the Comparer provided to the constructor or Comparer&lt;TKey>.Default if it was not provided.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BTreeList`1">
            <summary>
            Implements an IList interface for an in-memory B+Tree of unique values
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.BTreeList`1.DefaultOrder">
            <summary>The default `order` of the B+Tree structure.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.#ctor">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructs a BTreeList instance.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The Collection is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.Add(`0)">
            <summary>
            Adds an element with the provided value to the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same value already exists in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a set of items to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="items">The items to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.ArgumentException">An element with the same value already exists in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value pair.
            </summary>
            <returns>true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
            <summary>
            Warning O(n) operation: This method works; however, it is not intended for use on sufficiently large lists. 
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            Warning O(n) operation: This method works; however, it is not intended for use on sufficiently large lists. 
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.Remove(`0)">
            <summary>
            Removes the element with the specified value from the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="value"/> was not found in the original <see cref="T:System.Collections.Generic.IList`1"/>.
            </returns>
            <param name="value">The value of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.TryAddItem(`0)">
            <summary>
            Adds an element with the provided value to the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.ToArray">
            <summary>
            Returns all the items of this collection as an array of  <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.EnumerateFrom(`0)">
            <summary>
            Inclusivly enumerates from start value to the end of the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.EnumerateRange(`0,`0)">
            <summary>
            Inclusivly enumerates from start value to stop value
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.Clone">
            <summary>
            Returns a writable clone of this collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BTreeList`1.MakeReadOnly">
            <summary>
            Returns a read-only clone of this collection.  If this instance is already read-only the method will return this.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeList`1.Comparer">
            <summary>
            Gets the Comparer provided to the constructor or Comparer&lt;TKey>.Default if it was not provided.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BTreeList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Warning O(n) operation: This method works; however, it is not intended for use on sufficiently large lists. 
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.KeyValueUpdate`2">
            <summary> Provides a delegate that performs an atomic update of a key/value pair </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.KeyValuePredicate`2">
            <summary> Provides a delegate that performs a test on key/value pair </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.KeyValueComparer`2">
            <summary>
            Represents a key-value comparison
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.KeyValueComparer`2.#ctor">
            <summary>
            Creates a key-value comparison using the default comparer for type TKey
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.KeyValueComparer`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a key-value comparison with the specified comparer
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.KeyValueComparer`2.Compare(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.KeyValueComparer`2.Default">
            <summary>
            Represents a key-value comparison using the default comparer for type TKey
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.KeyValueComparer`2.Comparer">
            <summary>
            Returns the comparer being used by this instance
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LurchTableOrder">
            <summary>
            Defines if and how items added to a LurchTable are linked together, this defines
            the value returned from Peek/Dequeue as the oldest entry of the specified operation.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.LurchTableOrder.None">
            <summary> No linking </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.LurchTableOrder.Insertion">
            <summary> Linked in insertion order </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.LurchTableOrder.Modified">
            <summary> Linked by most recently inserted or updated </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.LurchTableOrder.Access">
            <summary> Linked by most recently inserted, updated, or fetched </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LurchTable`2">
            <summary>
            LurchTable stands for "Least Used Recently Concurrent Hash Table" and has definate
            similarities to both the .NET 4 ConcurrentDictionary as well as Java's LinkedHashMap.
            This gives you a thread-safe dictionary/hashtable that stores element ordering by
            insertion, updates, or access.  In addition it can be configured to use a 'hard-limit'
            count of items that will automatically 'pop' the oldest item in the collection.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.#ctor(System.Int32)">
            <summary>Creates a LurchTable that can store up to (capacity) items efficiently.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.#ctor(System.Int32,CSharpTest.Net.Collections.LurchTableOrder)">
            <summary>Creates a LurchTable that can store up to (capacity) items efficiently.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.#ctor(System.Int32,CSharpTest.Net.Collections.LurchTableOrder,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Creates a LurchTable that can store up to (capacity) items efficiently.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.#ctor(CSharpTest.Net.Collections.LurchTableOrder,System.Int32)">
            <summary>Creates a LurchTable that orders items by (ordering) and removes items once the specified (limit) is reached.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.#ctor(CSharpTest.Net.Collections.LurchTableOrder,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Creates a LurchTable that orders items by (ordering) and removes items once the specified (limit) is reached.</summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.#ctor(CSharpTest.Net.Collections.LurchTableOrder,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a LurchTable that orders items by (ordering) and removes items once the specified (limit) is reached.
            </summary>
            <param name="ordering">The type of linking for the items</param>
            <param name="limit">The maximum allowable number of items, or int.MaxValue for unlimited</param>
            <param name="hashSize">The number of hash buckets to use for the collection, usually 1/2 estimated capacity</param>
            <param name="allocSize">The number of entries to allocate at a time, usually 1/16 estimated capacity</param>
            <param name="lockSize">The number of concurrency locks to preallocate, usually 1/256 estimated capacity</param>
            <param name="comparer">The element hash generator for keys</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.Dispose">
            <summary>
            Clears references to all objects and invalidates the collection
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.Initialize">
            <summary>
            WARNING: not thread-safe, reinitializes all internal structures.  Use Clear() for a thread-safe
            delete all.  If you have externally provided exclusive access this method may be used to more
            efficiently clear the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the  <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.TryAdd(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.TryUpdate(`0,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates an element with the provided key to the value if it exists.
            </summary>
            <returns>Returns true if the key provided was found and updated to the value.</returns>
            <param name="key">The object to use as the key of the element to update.</param>
            <param name="value">The new value for the key if found.</param>
            <param name="comparisonValue">The value that is compared to the value of the element with key.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.TryRemove(`0,`1@)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value that was removed.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.GetOrAdd(`0,System.Converter{`0,`1})">
            <summary>
            Adds a key/value pair to the  <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="fnCreate">Constructs a new value for the key.</param>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.AddOrUpdate(`0,`1,CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist, 
            or updates a key/value pair if the key already exists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.AddOrUpdate(`0,System.Converter{`0,`1},CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist, 
            or updates a key/value pair if the key already exists.
            </summary>
            <remarks>
            Adds or modifies an element with the provided key and value.  If the key does not exist in the collection,
            the factory method fnCreate will be called to produce the new value, if the key exists, the converter method
            fnUpdate will be called to create an updated value.
            </remarks>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.AddOrUpdate``1(`0,``0@)">
            <summary>
            Add, update, or fetche a key/value pair from the dictionary via an implementation of the
            <see cref="T:CSharpTest.Net.Collections.ICreateOrUpdateValue`2"/> interface.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.TryAdd(`0,System.Converter{`0,`1})">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            by calling the provided factory method to construct the value if the key is not already present in the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.TryUpdate(`0,CSharpTest.Net.Collections.KeyValueUpdate{`0,`1})">
            <summary>
            Modify the value associated with the result of the provided update method
            as an atomic operation, Allows for reading/writing a single record within
            the syncronization lock.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.TryRemove(`0,CSharpTest.Net.Collections.KeyValuePredicate{`0,`1})">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            if the fnCondition predicate is null or returns true.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.TryRemove``1(`0,``0@)">
            <summary>
            Conditionally removes a key/value pair from the dictionary via an implementation of the
            <see cref="T:CSharpTest.Net.Collections.IRemoveValue`2"/> interface.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.Peek(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Retrieves the oldest entry in the collection based on the ordering supplied to the constructor.
            </summary>
            <returns>True if the out parameter value was set.</returns>
            <exception cref="T:System.InvalidOperationException">Raised if the table is unordered</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.Dequeue">
            <summary>
            Removes the oldest entry in the collection based on the ordering supplied to the constructor.
            If an item is not available a busy-wait loop is used to wait for for an item.
            </summary>
            <returns>The Key/Value pair removed.</returns>
            <exception cref="T:System.InvalidOperationException">Raised if the table is unordered</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.TryDequeue(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Removes the oldest entry in the collection based on the ordering supplied to the constructor.
            </summary>
            <returns>False if no item was available</returns>
            <exception cref="T:System.InvalidOperationException">Raised if the table is unordered</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.TryDequeue(System.Predicate{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Removes the oldest entry in the collection based on the ordering supplied to the constructor.
            </summary>
            <returns>False if no item was available</returns>
            <exception cref="T:System.InvalidOperationException">Raised if the table is unordered</exception>
        </member>
        <member name="E:CSharpTest.Net.Collections.LurchTable`2.ItemRemoved">
            <summary> Event raised after an item is removed from the collection </summary>
        </member>
        <member name="E:CSharpTest.Net.Collections.LurchTable`2.ItemUpdated">
            <summary> Event raised after an item is updated in the collection </summary>
        </member>
        <member name="E:CSharpTest.Net.Collections.LurchTable`2.ItemAdded">
            <summary> Event raised after an item is added to the collection </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LurchTable`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LurchTable`2.Ordering">
            <summary>
            Retrieves the LurchTableOrder Ordering enumeration this instance was created with.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LurchTable`2.Comparer">
            <summary>
            Retrives the key comparer being used by this instance.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LurchTable`2.Limit">
            <summary>
            Retrives the record limit allowed in this instance.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LurchTable`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LurchTable`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LurchTable`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LurchTable`2.ItemUpdatedMethod">
            <summary> Method signature for the ItemUpdated event </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LurchTable`2.Enumerator">
            <summary>
            Provides an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LurchTable`2.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LurchTable`2.KeyCollection">
            <summary>
            Provides the collection of Keys for the LurchTable
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.KeyCollection.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.KeyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LurchTable`2.KeyCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LurchTable`2.KeyCollection.Enumerator">
            <summary>
            Provides an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.KeyCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.KeyCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.KeyCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LurchTable`2.KeyCollection.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LurchTable`2.ValueCollection">
            <summary>
            Provides the collection of Values for the LurchTable
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.ValueCollection.Contains(`1)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.ValueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LurchTable`2.ValueCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.LurchTable`2.ValueCollection.Enumerator">
            <summary>
            Provides an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.ValueCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.ValueCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.LurchTable`2.ValueCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.LurchTable`2.ValueCollection.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.MergeSort">
            <summary>
            Provides a stable array sort based on merge-sort using O(n) additional memory.  As a release build,
            this routine will operate faster than Array.Sort when using a custom (non-default) comparison.  It
            also has the advantange of being stable, that is it preserves the order of elements that compare as
            being of equal value.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.MergeSort.Sort``1(``0[])">
            <summary> Sorts the contents of the array using a stable merge-sort with O(n) additional memory </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.MergeSort.Sort``1(``0[],``0[]@,System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary> Sorts the contents of the array using a stable merge-sort with O(n) additional memory </summary>
            <remarks> This overload also yields the working copy of the array which is unsorted. </remarks>
        </member>
        <member name="M:CSharpTest.Net.Collections.MergeSort.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary> Sorts the contents of the array using a stable merge-sort with O(n) additional memory </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.MergeSort.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary> Sorts the contents of the array using a stable merge-sort with O(n) additional memory </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.MergeSort.Sort``1(``0[],System.Comparison{``0})">
            <summary> Sorts the contents of the array using a stable merge-sort with O(n) additional memory </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.MergeSort.Sort``1(``0[],System.Int32,System.Int32,System.Comparison{``0})">
            <summary> Sorts the contents of the array using a stable merge-sort with O(n) additional memory </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.BulkInsertOptions">
            <summary>
            Options for bulk insertion
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.BulkInsertOptions.#ctor">
            <summary> Constructs with defaults: false/RaisesException </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BulkInsertOptions.InputIsSorted">
            <summary> Gets or sets a value that controls input presorting </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BulkInsertOptions.DuplicateHandling">
            <summary> Gets or sets the handling for duplicate key collisions </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BulkInsertOptions.CommitOnCompletion">
            <summary> When true (default) BulkInsert will call CommitChanges() on successfull completion </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.BulkInsertOptions.ReplaceContents">
            <summary> When false merges the data with the existing contents, set to true to replace all content </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.DuplicateHandling">
            <summary> Defines how duplicate keys are handled </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.DuplicateHandling.None">
            <summary> Do nothing and pass-through all duplicates </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.DuplicateHandling.FirstValueWins">
            <summary> Remove all but the first item of duplicates </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.DuplicateHandling.LastValueWins">
            <summary> Remove all but the last item of duplicates </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.DuplicateHandling.RaisesException">
            <summary> Throw an error on duplicates </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.OrderedEnumeration`1">
            <summary>
            Creates an ordered enumeration from an unordered enumeration by paginating the data, sorting the page,
            and then performing a binary-tree grouped mergesort on the resulting pages.  When the page size (memoryLimit)
            is hit, the page will be unloaded to disk and restored on demand if a serializer is provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary> Constructs an ordered enumeration from an unordered enumeration </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary> Constructs an ordered enumeration from an unordered enumeration </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0},CSharpTest.Net.Serialization.ISerializer{`0})">
            <summary> Constructs an ordered enumeration from an unordered enumeration </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0},CSharpTest.Net.Serialization.ISerializer{`0},System.Int32)">
            <summary> Constructs an ordered enumeration from an unordered enumeration </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">GetEnumerator() may only be called once.</exception>
            <exception cref="T:System.IO.InvalidDataException">Enumeration is out of sequence.</exception>
            <exception cref="T:System.ArgumentException">Duplicate item in enumeration.</exception>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.Merge(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Merges two ordered enumerations based on the comparer provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.Merge(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Merges n-number of ordered enumerations based on the default comparer of T.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.Merge(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Merges n-number of ordered enumerations based on the comparer provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.Merge(System.Collections.Generic.IComparer{`0},CSharpTest.Net.Collections.DuplicateHandling,System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Merges n-number of ordered enumerations based on the comparer provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedEnumeration`1.WithDuplicateHandling(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0},CSharpTest.Net.Collections.DuplicateHandling)">
            <summary>
            Wraps an existing enumeration of Key/value pairs with an assertion about ascending order and handling
            for duplicate keys.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrderedEnumeration`1.Comparer">
            <summary>
            Gets or sets the comparer to use when ordering the items.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrderedEnumeration`1.Serializer">
            <summary>
            Gets or sets the serializer to use when paging to disk.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrderedEnumeration`1.InMemoryLimit">
            <summary>
            Gets or sets the number of instances to keep in memory before sorting/paging to disk.
            </summary>
            <exception cref="T:System.InvalidOperationException">You must specify the Serializer before setting this property</exception>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrderedEnumeration`1.DuplicateHandling">
            <summary> Gets or sets the duplicate item handling policy </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.OrderedKeyValuePairs`2">
            <summary>
            Speicalizes the OrderedEnumeration of T to use key/value pairs with a key comparer.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary> Constructs an ordered set of KeyValuePair structs </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary> Constructs an ordered set of KeyValuePair structs </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},CSharpTest.Net.Serialization.ISerializer{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary> Constructs an ordered set of KeyValuePair structs </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},CSharpTest.Net.Serialization.ISerializer{System.Collections.Generic.KeyValuePair{`0,`1}},System.Int32)">
            <summary> Constructs an ordered set of KeyValuePair structs </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},CSharpTest.Net.Serialization.ISerializer{`0},CSharpTest.Net.Serialization.ISerializer{`1})">
            <summary> Constructs an ordered set of KeyValuePair structs </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},CSharpTest.Net.Serialization.ISerializer{`0},CSharpTest.Net.Serialization.ISerializer{`1},System.Int32)">
            <summary> Constructs an ordered set of KeyValuePair structs </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.Merge(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}[])">
            <summary>
            Merges n-number of ordered enumerations based on the comparer provided.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrderedKeyValuePairs`2.Merge(System.Collections.Generic.IComparer{`0},CSharpTest.Net.Collections.DuplicateHandling,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}[])">
            <summary>
            Merges n-number of ordered enumerations based on the comparer provided.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.OrdinalList">
            <summary>
            An ordinal list is a list optimized to store lists of integer data that can then be manipulated 
            as a set with intersect/union etc.  Each integer stored is translated to a bit offset and thus
            cann't be stored more than once or in any particular order.  Note: adding the value int.Max will 
            allocate int.Max/8 bytes of memory, so this is best used with ordinal indexes into a list that 
            is smaller than 8,388,608 (one megabyte of bits).  Pre-allocate with Ceiling = max for better
            performance, or add the integers in reverse order (highest to lowest).
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.#ctor">
            <summary> Constructs an empty OrdinalList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.#ctor(System.Byte[])">
            <summary> Constructs an OrdinalList from a set of bits represeting the ordinals </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary> Constructs an OrdinalList from the integer ordinals provided </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Clear">
            <summary> Empty the OrdinalList </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary> Adds a range of integer ordinals into the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Add(System.Int32)">
            <summary> Adds an integer ordinal into the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Remove(System.Int32)">
            <summary> Removes an ordinal from the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Contains(System.Int32)">
            <summary> Returns true if the ordinal is in the collection </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.CopyTo(System.Int32[],System.Int32)">
            <summary> Extracts the ordinals into an array </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.ToArray">
            <summary> Returns the array of ordinals that have been added. </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.ToByteArray">
            <summary> Returns the complete set of raw bytes for storage and reconstitution </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Invert(System.Int32)">
            <summary> Returns the 1's compliment (inverts) of the list up to Ceiling </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.IntersectWith(CSharpTest.Net.Collections.OrdinalList)">
            <summary> Returns the set of items that are in both this set and the provided set </summary>
            <example>{ 1, 2, 3 }.IntersectWith({ 2, 3, 4 }) == { 2, 3 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.UnionWith(CSharpTest.Net.Collections.OrdinalList)">
            <summary> Returns the set of items that are in either this set or the provided set </summary>
            <example>{ 1, 2, 3 }.UnionWith({ 2, 3, 4 }) == { 1, 2, 3, 4 }</example>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.EnumerateFrom(System.Int32)">
            <summary> Returns an enumeration of the ordinal values </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.EnumerateRange(System.Int32,System.Int32)">
            <summary> Returns an enumeration of the ordinal values </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.GetEnumerator">
            <summary> Returns an enumeration of the ordinal values </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.OrdinalList.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrdinalList.Count">
            <summary> Semi-expensive, returns the count of ordinals in the collection </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrdinalList.Ceiling">
            <summary> 
            Gets or sets the maximum inclusive ordinal that can be stored in the memory currently
            allocated, ranges from -1 to int.MaxValue
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.OrdinalList.IsReadOnly">
            <summary> Returns false </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.TransactionToken">
            <summary>
            A value representing the state/identifer/object of a single transaction.  The field's
            meaning is defined by the ITrasactionLog implementation and is otherwise treated as an
            opaque token identifier of the transaction.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.TransactionToken.State">
            <summary> Undefined </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.TransactionToken.Handle">
            <summary> Undefined </summary>
        </member>
        <member name="F:CSharpTest.Net.Collections.TransactionToken.Object">
            <summary> Undefined </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.TransactionLogOptions`2">
            <summary>
            Options used to initialize a TransactionLog
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLogOptions`2.#ctor(System.String,CSharpTest.Net.Serialization.ISerializer{`0},CSharpTest.Net.Serialization.ISerializer{`1})">
            <summary>
            Options used to initialize a TransactionLog
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLogOptions`2.Clone">
            <summary> Creates a shallow clone of the instance </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.TransactionLogOptions`2.KeySerializer">
            <summary> The serializer for the TKey type </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.TransactionLogOptions`2.ValueSerializer">
            <summary> The serializer for the TValue type </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.TransactionLogOptions`2.FileName">
            <summary> The file name to read/write the log </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.TransactionLogOptions`2.FileOptions">
            <summary> The file open options for appending to a log, default = WriteThrough </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.TransactionLogOptions`2.FileBuffer">
            <summary> The file buffer size, CAUTION: values above 16 bytes may leave data in memory </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.TransactionLogOptions`2.ReadOnly">
            <summary> Gets or sets if the transaction log is treated as read-only </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.ITransactionLog`2">
            <summary>
            Represents a transaction log of writes to a dictionary.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ITransactionLog`2.ReplayLog(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Replay the entire log file to the provided dictionary interface
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ITransactionLog`2.ReplayLog(System.Collections.Generic.IDictionary{`0,`1},System.Int64@)">
            <summary>
            Replay the log file from the position provided and output the new log position
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ITransactionLog`2.MergeLog(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Merges the contents of the log with an existing ordered key/value pair collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ITransactionLog`2.TruncateLog">
            <summary>
            Truncate the log and remove all existing entries
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ITransactionLog`2.BeginTransaction">
            <summary>
            Notifies the log that a transaction is begining and create a token for this
            transaction scope.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ITransactionLog`2.AddValue(CSharpTest.Net.Collections.TransactionToken@,`0,`1)">
            <summary> The provided key/value pair was added in the provided transaction </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ITransactionLog`2.UpdateValue(CSharpTest.Net.Collections.TransactionToken@,`0,`1)">
            <summary> The provided key/value pair was updated in the provided transaction </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ITransactionLog`2.RemoveValue(CSharpTest.Net.Collections.TransactionToken@,`0)">
            <summary> The provided key/value pair was removed in the provided transaction </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ITransactionLog`2.CommitTransaction(CSharpTest.Net.Collections.TransactionToken@)">
            <summary>
            Commits the provided transaction
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.ITransactionLog`2.RollbackTransaction(CSharpTest.Net.Collections.TransactionToken@)">
            <summary>
            Abandons the provided transaction
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.ITransactionLog`2.FileName">
            <summary>
            Returns the filename being currently used for transaction logging
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.ITransactionLog`2.Size">
            <summary>
            Returns the current size of the log file in bytes
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.TransactionLog`2">
            <summary>
            The default transaction log for a BPlusTree instance to provide backup+log recovery
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.#ctor(CSharpTest.Net.Collections.TransactionLogOptions{`0,`1})">
            <summary>
            Creates an instance of a transaction log
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.Close">
            <summary>
            Flushes any pending writes and closes the writer.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.ReplayLog(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Replay the entire log file to the provided dictionary interface
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.ReplayLog(System.Collections.Generic.IDictionary{`0,`1},System.Int64@)">
            <summary>
            Replay the log file from the position provided and output the new log position
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.MergeLog(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Merges the contents of the log with an existing ordered key/value pair collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.EnumerateLog(System.Int64[])">
            <summary>
            Replay the log file from the position provided and output the new log position
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.TruncateLog">
            <summary>
            Truncate the log and remove all existing entries
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.BeginTransaction">
            <summary>
            Notifies the log that a transaction is begining and create a token for this
            transaction scope.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.AddValue(CSharpTest.Net.Collections.TransactionToken@,`0,`1)">
            <summary> The provided key/value pair was added in the provided transaction </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.UpdateValue(CSharpTest.Net.Collections.TransactionToken@,`0,`1)">
            <summary> The provided key/value pair was updated in the provided transaction </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.RemoveValue(CSharpTest.Net.Collections.TransactionToken@,`0)">
            <summary> The provided key/value pair was removed in the provided transaction </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.CommitTransaction(CSharpTest.Net.Collections.TransactionToken@)">
            <summary>
            Commits the provided transaction
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Collections.TransactionLog`2.RollbackTransaction(CSharpTest.Net.Collections.TransactionToken@)">
            <summary>
            Abandons the provided transaction
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.TransactionLog`2.FileName">
            <summary>
            Returns the file name of the current transaction log file
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Collections.TransactionLog`2.Size">
            <summary>
            Returns the current size of the log file in bytes
            </summary>
        </member>
        <member name="T:CSharpTest.Net.BaseAssertionException">
            <summary> The base class for BPlutTree runtime assertions </summary>
        </member>
        <member name="M:CSharpTest.Net.BaseAssertionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> The base class for BPlutTree runtime assertions </summary>
        </member>
        <member name="M:CSharpTest.Net.BaseAssertionException.#ctor(System.String)">
            <summary> The base class for BPlutTree runtime assertions </summary>
        </member>
        <member name="M:CSharpTest.Net.BaseAssertionException.#ctor(System.String,System.Exception)">
            <summary> The base class for BPlutTree runtime assertions </summary>
        </member>
        <member name="T:CSharpTest.Net.AssertionFailedException">
            <summary>
            Exception class: AssertionFailedException
            A runtime assertion failed while performing the operation.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AssertionFailedException.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            if(condition == false) throws A runtime assertion failed: {0}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AssertionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AssertionFailedException.Create(System.Int32,System.String)">
            <summary>
            Used to create this exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AssertionFailedException.#ctor(System.Exception,System.Int32,System.String)">
            <summary>
            Constructs the exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AssertionFailedException.#ctor">
            <summary>
            A runtime assertion failed while performing the operation.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AssertionFailedException.#ctor(System.Exception)">
            <summary>
            A runtime assertion failed while performing the operation.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AssertionFailedException.Assert(System.Boolean)">
            <summary>
            if(condition == false) throws A runtime assertion failed while performing the operation.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AssertionFailedException.#ctor(System.String)">
            <summary>
            A runtime assertion failed: {0}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AssertionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            A runtime assertion failed: {0}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.AssertionFailedException.Assert(System.Boolean,System.String)">
            <summary>
            if(condition == false) throws A runtime assertion failed: {0}
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Collections.IStorageHandle">
            <summary> Identifies a class as a reference to a node instance </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.Singleton`1">
            <summary>
            A static singleton and factory that uses a globally common instance.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Interfaces.Singleton`1.Instance">
            <summary>
            Returns the singleton instance of T
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Interfaces.Singleton`1.Factory">
            <summary>
            Returns a factory that returns the singleton instance
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.IFactory`1">
            <summary> Generic factory for instances of type T </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.IFactory`1.Create">
            <summary> Creates an instance of an object assignable to type T </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.NewFactory`1">
            <summary>
            A factory that creates a new instance of an object each time Create() is called.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.NewFactory`1.Create">
            <summary> Returns a new instance of T </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.FactoryMethod`1">
            <summary>
            A delegate that takes no arguemnts and returns a single value
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.DelegateFactory`1">
            <summary>
            A factory that creates a new instance of an object each time Create() is called.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.DelegateFactory`1.#ctor(CSharpTest.Net.Interfaces.FactoryMethod{`0})">
            <summary> A factory that delegates instance creation </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.DelegateFactory`1.Create">
            <summary> Returns an instance of T </summary>
        </member>
        <member name="T:CSharpTest.Net.Interfaces.InstanceFactory`1">
            <summary>
            A factory that always returns the same instance of an object each time Create() is called.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.InstanceFactory`1.#ctor(`0)">
            <summary> Provide the instance of T </summary>
        </member>
        <member name="M:CSharpTest.Net.Interfaces.InstanceFactory`1.Create">
            <summary> Returns the instance of T given to the constructor </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.AggregateStream">
            <summary>
            Provides a base-class that aggregates another stream object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.#ctor">
            <summary> Creates the wrapper without an underlying stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.#ctor(System.IO.Stream)">
            <summary> Creates the wrapper with the underlying stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Dispose(System.Boolean)">
            <summary> Disposes of this.Stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Close">
            <summary> Disposes of this.Stream </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.AggregateStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.Stream">
            <summary> Allows modifying the underlying stream </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.AggregateStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.Crc32">
            <summary> Provides a simple CRC32 checksum for a set of bytes </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.#ctor(System.Int32)">
            <summary> Resumes the computation of a CRC32 value </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.#ctor(System.String)">
            <summary> Initailizes the Crc32 value to the checksum of the string as a series of 16-bit values </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.#ctor(System.Byte[])">
            <summary> Initailizes the Crc32 value to the checksum of the bytes provided </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.ToString">
            <summary> Returns the computed CRC32 value as a Hex string </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Add(System.Byte)">
            <summary> Adds a byte to the checksum </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Addition(CSharpTest.Net.IO.Crc32,System.Byte)">
            <summary> Adds a byte to the checksum </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Add(System.Byte[])">
            <summary> Adds an entire array of bytes to the checksum </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Add(System.Byte[],System.Int32,System.Int32)">
            <summary> Adds a range from an array of bytes to the checksum </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Addition(CSharpTest.Net.IO.Crc32,System.Byte[])">
            <summary> Adds an entire array of bytes to the checksum </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Add(System.String)">
            <summary> Adds a string to the checksum as a series of 16-bit values (big endian) </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Addition(CSharpTest.Net.IO.Crc32,System.String)">
            <summary> Adds a string to the checksum as a series of 16-bit values </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.GetHashCode">
            <summary> Extracts the correct hash code </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Equals(System.Object)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Equals(CSharpTest.Net.IO.Crc32)">
            <summary> Returns true if the other object is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.Equals(System.Int32)">
            <summary> Returns true if the CRC32 provided is equal to this one </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Equality(CSharpTest.Net.IO.Crc32,CSharpTest.Net.IO.Crc32)">
            <summary> Compares the two objects for equality </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Inequality(CSharpTest.Net.IO.Crc32,CSharpTest.Net.IO.Crc32)">
            <summary> Compares the two objects for equality </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Equality(CSharpTest.Net.IO.Crc32,System.Int32)">
            <summary> Compares the two objects for equality </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.Crc32.op_Inequality(CSharpTest.Net.IO.Crc32,System.Int32)">
            <summary> Compares the two objects for equality </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.Crc32.Value">
            <summary> Returns the computed CRC32 value </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.FileStreamFactory">
            <summary>
            Provides a default implementation of an IFactory for creating streams on a single file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FileStreamFactory.#ctor(System.String,System.IO.FileMode)">
            <summary> Creates an IFactory for creating streams on a single file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary> Creates an IFactory for creating streams on a single file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary> Creates an IFactory for creating streams on a single file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary> Creates an IFactory for creating streams on a single file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary> Creates an IFactory for creating streams on a single file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FileStreamFactory.Create">
            <summary>
            Creates the file stream
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.FileStreamFactory.FileName">
            <summary> The FileName that this factory produces streams for </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.FragmentedFile">
            <summary>
            Provides a means of storing multitudes of small files inside one big one.  I doubt this is a
            good name for it, but it works.  Anyway, the file is broken into fixed size blocks and each
            block can be chained to another to allow the sub-allocation to grow larger than the block size.
            This is the primary storage vehicle for the BPlusTree implementation.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.FragmentedFile.OptionsDefault">
            <summary> Common operational values for 'normal' files </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.FragmentedFile.OptionsWriteThrough">
            <summary> Common operational values for using OS cache write-through (SLOW) </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.FragmentedFile.OptionsNoBuffering">
            <summary> Uses FILE_FLAG_NO_BUFFERING see http://msdn.microsoft.com/en-us/library/cc644950(v=vs.85).aspx (SLOWEST) </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.#ctor(System.String,System.Int32)">
            <summary>
            Opens an existing fragmented file store, to create a new one call the CreateNew() static
            </summary>
            <param name="filename">The file name that will store the data</param>
            <param name="blockSize">The block size that was specified when CreateNew() was called</param>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.IO.FileOptions)">
            <summary>
            Opens an existing fragmented file store, to create a new one call the CreateNew() static
            </summary>
            <param name="filename">The file name that will store the data</param>
            <param name="blockSize">The block size that was specified when CreateNew() was called</param>
            <param name="growthRate">The number of blocks to grow the file by when needed, or zero for on-demand </param>
            <param name="cacheLimit">The number of threads that can simultaneously access the file</param>
            <param name="options">The file options to use when opening the file</param>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.IO.FileAccess,System.IO.FileShare,System.IO.FileOptions)">
            <summary>
            Opens an existing fragmented file store, to create a new one call the CreateNew() static
            </summary>
            <param name="filename">The file name that will store the data</param>
            <param name="blockSize">The block size on disk to be used for allocations</param>
            <param name="growthRate">The number of blocks to grow the file by when needed, or zero for on-demand </param>
            <param name="cacheLimit">The number of threads that can simultaneously access the file</param>
            <param name="access">The file access requested</param>
            <param name="share">The file share permissions</param>
            <param name="options">The file options to use when opening the file</param>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.#ctor(CSharpTest.Net.Interfaces.IFactory{System.IO.Stream},System.Int32,System.Int32,System.Int32)">
            <summary>
            Opens an existing fragmented file store, to create a new one call the CreateNew() static
            </summary>
            <param name="streamFactory">An IFactory that produces streams for a storage</param>
            <param name="blockSize">The block size to be used for allocations</param>
            <param name="growthRate">The number of blocks to grow the file by when needed, or zero for on-demand </param>
            <param name="cacheLimit">The number of threads that can simultaneously access the file</param>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.#ctor(CSharpTest.Net.Interfaces.IFactory{System.IO.Stream},System.Int32,System.Int32,System.Int32,System.IO.FileOptions)">
            <summary> Internal use to specify aligned IO when using NoBuffering file option </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.Dispose">
            <summary>
            Closes the storage, a must-do to save a costly recomputation of free block on open
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.CreateNew(System.String,System.Int32)">
            <summary>
            Creates a new file (or truncates an existing one) that stores multiple smaller files
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.CreateNew(System.String,System.Int32,System.Int32,System.Int32,System.IO.FileOptions)">
            <summary>
            Creates a new file (or truncates an existing one) that stores multiple smaller files
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.CreateNew(CSharpTest.Net.Interfaces.IFactory{System.IO.Stream},System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new file (or truncates an existing one) that stores multiple smaller files
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.WriteEmtpy(CSharpTest.Net.Interfaces.IFactory{System.IO.Stream},System.Int32)">
            <summary>
            Creates a new file (or truncates an existing one) that stores multiple smaller files
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.Clear">
            <summary> Destroys all contents of the file and resets to an initial state </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.Create">
            <summary> Creates a new allocation block within the file </summary>
            <returns> A unique integer id for the block to be used with Open/Delete </returns>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.Create(System.Int64@)">
            <summary> Creates a new allocation block within the file </summary>
            <param name="identity">A unique integer id for the block to be used with Open/Delete</param>
            <returns>The stream to write to the newly created block</returns>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.Open(System.Int64,System.IO.FileAccess)">
            <summary>
            Opens the file with the identity previously obtained by Create() using the 
            access provided; however, Read+Write is not supported, use either Read or
            Write but not both.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.Delete(System.Int64)">
            <summary>
            Deletes the contents written to the identity provided and returns the
            identity to the available pool.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.FragmentedFile.ForeachBlock(System.Boolean,System.Boolean,System.Converter{System.Exception,System.Boolean})">
            <summary> Used for enumeration of the storage blocks in the file. </summary>
            <param name="allocatedOnly"> Allows enumeration of all stream, or of just the externally allocated streams </param>
            <param name="verifyReads"> Determines if the checksum should be verified while reading the block bytes </param>
            <param name="ignoreException"> A method that returns true to ignore the exception and continue processing </param>
            <returns>Enumeration of the identity and data stream of each block in the file</returns>
        </member>
        <member name="P:CSharpTest.Net.IO.FragmentedFile.FirstIdentity">
            <summary> Returns the 'first' block identity that can be allocated </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.IOStream">
            <summary>
            A collection of Stream helpers
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.ReadAllBytes(System.IO.Stream)">
            <summary> Reads all of the bytes from the input stream, input stream will be disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.ReadAllText(System.IO.Stream,System.Text.Encoding)">
            <summary> Reads all of the bytes from the input stream, input stream will be disposed </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Read(System.IO.Stream,System.Byte[])">
            <summary> Reads a the number of bytes specified or throws IOException </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Read(System.IO.Stream,System.Int32)">
            <summary> Reads a the number of bytes specified or throws IOException </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.Read(System.IO.Stream,System.Byte[],System.Int32)">
            <summary> Reads a the number of bytes specified or throws IOException </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.ReadChunk(System.IO.Stream,System.Byte[],System.Int32)">
            <summary> Attempts to read the number of bytes specified and returns the actual count </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.ReadChunk(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary> Attempts to read the number of bytes specified and returns the actual count </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary> Copy the entire input stream to the provided output stream, input stream will be disposed </summary>
            <returns> The number of bytes copied </returns>
        </member>
        <member name="M:CSharpTest.Net.IO.IOStream.CopyStream(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary> Copy the specified number of bytes from the input stream to the provided output stream </summary>
            <returns> The number of bytes copied </returns>
        </member>
        <member name="T:CSharpTest.Net.IO.StreamCache">
            <summary>
            Provides a simple means of caching several streams on a single file and for a thread 
            to  quickly exclusive access to one of those streams.  This class provides the base
            implementation used by FileStreamCache and FragmentedFile.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.StreamCache.#ctor(CSharpTest.Net.Interfaces.IFactory{System.IO.Stream})">
            <summary>
            Constructs the stream cache allowing one stream per thread
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.StreamCache.#ctor(CSharpTest.Net.Interfaces.IFactory{System.IO.Stream},System.Int32)">
            <summary>
            Constructs the stream cache with the maximum allowed stream items
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.StreamCache.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:CSharpTest.Net.IO.StreamCache.Open">
            <summary>
            Waits for a stream to become available and returns a wrapper on that stream. Just dispose like
            any other stream to return the resource to the stream pool.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.StreamCache.Open(System.IO.FileAccess)">
            <summary>
            Waits for a stream to become available and returns a wrapper on that stream. Just dispose like
            any other stream to return the resource to the stream pool.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TempFile">
            <summary>
            Provides a class for managing a temporary file and making reasonable a attempt to remove it upon disposal.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Attach(System.String)">
            <summary>
            Attaches a new instances of a TempFile to the provided file path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.FromExtension(System.String)">
            <summary>
            Creates a temp file having the provided extension
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.CreateTempPath(System.String)">
            <summary>
            Creates a temp file having the provided extension
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.FromCopy(System.String)">
            <summary>
            Creates a temp file having a copy of the specified file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Delete(System.String)">
            <summary>
            Safely delete the provided file name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.#ctor">
            <summary>
            Constructs a new temp file with a newly created/empty file.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.#ctor(System.String)">
            <summary>
            Manage the provided file path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Finalize">
            <summary>
            Removes the file if Dispose() is not called
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Dispose">
            <summary> Disposes of the temporary file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Dispose(System.Boolean)">
            <summary>
            Disposes of the temporary file
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Detatch">
            <summary>
            Detatches this instance from the temporary file and returns the temp file's path
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.ReadAllBytes">
            <summary> Reads all bytes from the file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.WriteAllBytes(System.Byte[])">
            <summary> Writes all bytes to the file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.ReadAllText">
            <summary> Reads all UTF8 text from the file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.WriteAllText(System.String)">
            <summary> Writes all UTF8 text to the file </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Delete">
            <summary>
            Deletes the current temp file immediatly if it exists.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Create">
            <summary>
            Re-Creates and Opens the temporary file for writing, multiple calls will truncate existing data.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Open">
            <summary>
            Open or Create the temporary file for reading and writing
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Read">
            <summary>
            Opens the temporary file for reading
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.Read(System.IO.FileShare)">
            <summary>
            Opens the temporary file for reading
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.CopyTo(System.String)">
            <summary>
            Copies the file content to the specified target file name
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TempFile.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies the file content to the specified target file name
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempFile.TempPath">
            <summary>
            Returns the temporary file path being managed.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempFile.Exists">
            <summary>
            Returns true if the current temp file exists.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempFile.Length">
            <summary>
            Gets or sets the current length of the temp file.  If setting the length on a file that
            does not exist one will be created.  If getting the length of a file that doesnt exist
            zero will be returned.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TempFile.Info">
            <summary>
            Returns the FileInfo object for this temp file.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TransactedCompoundFile">
            <summary>
            Similar behavior to the FragmentedFile; however, a much improved implementation.  Allows for
            file-level commit/rollback or write-by-write commits to disk.  By default provides data-protection
            against process-crashes but not OS crashes.  Use FileOptions.WriteThrough to protect against
            OS crashes and power outtages.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.#ctor(System.String)">
            <summary>
            Creates or opens a TransactedCompoundFile using the filename specified.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.#ctor(CSharpTest.Net.IO.TransactedCompoundFile.Options)">
            <summary>
            Creates or opens a TransactedCompoundFile using the filename specified.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Dispose">
            <summary>
            Closes all streams and clears all in-memory data.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Flush(System.Boolean)">
            <summary>
            Flushes any pending writes to the disk and returns.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Commit">
            <summary>
            For file-level transactions, performs a two-stage commit of all changed handles.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Commit``1(System.Action{``0},``0)">
            <summary>
            For file-level transactions, performs a two-stage commit of all changed handles.
            After the first stage has completed, the stageCommit() delegate is invoked.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Rollback">
            <summary>
            For file-level transactions, Reloads the file from it's original (or last committed) state.
            </summary>
            <exception cref="T:System.InvalidOperationException">When CommitOnWrite is true, there is no going back.</exception>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Create">
            <summary>
            Allocates a handle for data, you MUST call Write to commit the handle, otherwise the handle
            may be reallocated after closing and re-opening this file.  If you do not intend to commit
            the handle by writing to it, you should still call Delete() so that it may be reused.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Write(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the bytes provided to the handle that was previously obtained by a call to Create().
            The length must not be more than ((16*BlockSize)-32) bytes in length.  The exact header size
            (32 bytes) may change without notice in a future release.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Read(System.UInt32)">
            <summary>
            Reads all bytes from the from the handle specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Delete(System.UInt32)">
            <summary>
            Deletes the handle and frees the associated block space for reuse.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Clear">
            <summary>
            Immediatly truncates the file to zero-length and re-initializes an empty file
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.FirstIdentity">
            <summary>
            Returns the first block that *would* be allocated by a call to Create() on an empty file.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TransactedCompoundFile.Options">
            <summary>
            Advanced Options used to construct a TransactedCompoundFile
            </summary>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Options.#ctor(System.String)">
            <summary>
            Constructs an Options instance
            </summary>
            <param name="filePath">The file name to use</param>
        </member>
        <member name="M:CSharpTest.Net.IO.TransactedCompoundFile.Options.Clone">
            <summary>
            Returns a copy of the options currently specified.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.FilePath">
            <summary>
            Retrieves the file name that was provided to the constructor
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.BlockSize">
            <summary>
            Defines the block-size used for storing data.  Data storred in a given handle must be less than ((16*BlockSize)-8)
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.MaxWriteSize">
            <summary>
            Returns the maximum number of bytes that can be written to a single handle base on the current BlockSize setting.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.FileOptions">
            <summary>
            The FileOptions used for writing to the file
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.ReadOnly">
            <summary>
            Gets or sets a flag that controls if the file is opened in read-only mode.  For ReadOnly
            files, another writer may exist; however, changes to the file will not be reflected until
            reload.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.CreateNew">
            <summary>
            True to create a new file, false to use the existing file.  If this value is false and the
            file does not exist an exception will be raised.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.CommitOnWrite">
            <summary>
            When true every write will rewrite the modified handle(s) back to disk, otherwise the
            handle state is kept in memory until a call to commit has been made.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.CommitOnDispose">
            <summary>
            Automatically Commit the storage file when it's disposed.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.IO.TransactedCompoundFile.Options.LoadingRule">
            <summary>
            See comments on the LoadingRule enumerated type and Commit(Action,T)
            </summary>
        </member>
        <member name="T:CSharpTest.Net.IO.TransactedCompoundFile.LoadingRule">
            <summary>
            Defines the loading rule to apply when using a transacted file that was interrupted
            durring the commit process.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.TransactedCompoundFile.LoadingRule.Default">
            <summary>
            Load all from Primary if valid, else load all from Secondary.  If both fail,
            load either Primary or Secondary for each segment.  This is the normal option,
            use the other options only when recovering from a commit that was incomplete.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.TransactedCompoundFile.LoadingRule.Primary">
            <summary>
            If you previously called Commit(Action,T) on a prior instance and the Action
            delegate *was* called, then setting this value will ensure that only the 
            primary state storage is loaded, thereby ensuring you load the 'previous'
            state.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.IO.TransactedCompoundFile.LoadingRule.Secondary">
            <summary>
            If you previously called Commit(Action,T) on a prior instance and the Action
            delegate was *not* called, then setting this value will ensure that only the 
            secondary state storage is loaded, thereby ensuring you load the 'previous'
            state.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Resources.FailedToConstructSingleton(System.Type)">
            <summary>
            The singleton for type {0} threw an excpetion.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Resources.InvalidFileExtension(System.String)">
            <summary>
            Invalid file extension: &#39;{0}&#39;.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Resources.StringConverterTryParse(System.Type)">
            <summary>
            The type {0} is not convertable from a string.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.IOStreamCompressionFailed">
            <summary>
              Looks up a localized string similar to Failed to compress/decompress the full input stream..
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.IOStreamFailedToRead">
            <summary>
              Looks up a localized string similar to Failed to read from input stream..
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ProcessRunnerAlreadyRunning">
            <summary>
              Looks up a localized string similar to The running process must first exit..
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Resources.FormatStrings">
            <summary>
            Returns the raw format strings.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.FormatStrings.FailedToConstructSingleton_System_Type_type_">
            <summary>
            The singleton for type {0} threw an excpetion.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.FormatStrings.InvalidFileExtension_string_ext_">
            <summary>
            Invalid file extension: &#39;{0}&#39;.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.FormatStrings.StringConverterTryParse_System_Type_type_">
            <summary>
            The type {0} is not convertable from a string.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Resources.ExceptionStrings">
            <summary>
            Returns the raw exception strings.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Resources.ExceptionStrings.SafeFormat(System.String,System.Object[])">
            <summary>
            Formats a message for an exception
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Resources.ExceptionStrings.HelpLinkFormat(System.Int32,System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ExceptionStrings.AssertionFailedException">
            <summary>
            A runtime assertion failed while performing the operation.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ExceptionStrings.AssertionFailedException_string_message_">
            <summary>
            A runtime assertion failed: {0}
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ExceptionStrings.DeadlockException">
            <summary>
            A lock timeout has expired due to a possible deadlock.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ExceptionStrings.DebugAssertionFailedException_string_message_">
            <summary>
            Debug Assertion Failed: {0}
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ExceptionStrings.DuplicateKeyException">
            <summary>
            The specified key already exists in the collection.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ExceptionStrings.InvalidConfigurationValueException_string_property_">
            <summary>
            The configuration value &#39;{0}&#39; is invalid.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ExceptionStrings.InvalidConfigurationValueException_string_property__string_message_">
            <summary>
            The configuration value &#39;{0}&#39; is invalid.
            {1}
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ExceptionStrings.InvalidNodeHandleException">
            <summary>
            A storage handle was invalid or has been corrupted.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Resources.ExceptionStrings.LurchTableCorruptionException">
            <summary>
            The LurchTable internal datastructure appears to be corrupted.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.DeadlockException">
            <summary>
            Exception class: DeadlockException
            A lock timeout has expired due to a possible deadlock.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DeadlockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DeadlockException.Create(System.Int32,System.String)">
            <summary>
            Used to create this exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DeadlockException.#ctor(System.Exception,System.Int32,System.String)">
            <summary>
            Constructs the exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DeadlockException.#ctor">
            <summary>
            A lock timeout has expired due to a possible deadlock.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DeadlockException.#ctor(System.Exception)">
            <summary>
            A lock timeout has expired due to a possible deadlock.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DeadlockException.Assert(System.Boolean)">
            <summary>
            if(condition == false) throws A lock timeout has expired due to a possible deadlock.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.DebugAssertionFailedException">
            <summary>
            Exception class: DebugAssertionFailedException
            Debug Assertion Failed: {0}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DebugAssertionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DebugAssertionFailedException.Create(System.Int32,System.String)">
            <summary>
            Used to create this exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DebugAssertionFailedException.#ctor(System.Exception,System.Int32,System.String)">
            <summary>
            Constructs the exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DebugAssertionFailedException.#ctor(System.String)">
            <summary>
            Debug Assertion Failed: {0}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DebugAssertionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Debug Assertion Failed: {0}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DebugAssertionFailedException.Assert(System.Boolean,System.String)">
            <summary>
            if(condition == false) throws Debug Assertion Failed: {0}
            </summary>
        </member>
        <member name="T:CSharpTest.Net.DuplicateKeyException">
            <summary>
            Exception class: DuplicateKeyException
            The specified key already exists in the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DuplicateKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DuplicateKeyException.Create(System.Int32,System.String)">
            <summary>
            Used to create this exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DuplicateKeyException.#ctor(System.Exception,System.Int32,System.String)">
            <summary>
            Constructs the exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DuplicateKeyException.#ctor">
            <summary>
            The specified key already exists in the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DuplicateKeyException.#ctor(System.Exception)">
            <summary>
            The specified key already exists in the collection.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.DuplicateKeyException.Assert(System.Boolean)">
            <summary>
            if(condition == false) throws The specified key already exists in the collection.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.InvalidConfigurationValueException">
            <summary>
            Exception class: InvalidConfigurationValueException
            The configuration value &#39;{0}&#39; is invalid.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidConfigurationValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidConfigurationValueException.Create(System.Int32,System.String)">
            <summary>
            Used to create this exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidConfigurationValueException.#ctor(System.Exception,System.Int32,System.String)">
            <summary>
            Constructs the exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidConfigurationValueException.#ctor(System.String)">
            <summary>
            The configuration value &#39;{0}&#39; is invalid.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidConfigurationValueException.#ctor(System.String,System.Exception)">
            <summary>
            The configuration value &#39;{0}&#39; is invalid.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidConfigurationValueException.Assert(System.Boolean,System.String)">
            <summary>
            if(condition == false) throws The configuration value &#39;{0}&#39; is invalid.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidConfigurationValueException.#ctor(System.String,System.String)">
            <summary>
            The configuration value &#39;{0}&#39; is invalid.
            {1}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidConfigurationValueException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            The configuration value &#39;{0}&#39; is invalid.
            {1}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidConfigurationValueException.Assert(System.Boolean,System.String,System.String)">
            <summary>
            if(condition == false) throws The configuration value &#39;{0}&#39; is invalid.
            {1}
            </summary>
        </member>
        <member name="T:CSharpTest.Net.InvalidNodeHandleException">
            <summary>
            Exception class: InvalidNodeHandleException
            A storage handle was invalid or has been corrupted.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidNodeHandleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidNodeHandleException.Create(System.Int32,System.String)">
            <summary>
            Used to create this exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidNodeHandleException.#ctor(System.Exception,System.Int32,System.String)">
            <summary>
            Constructs the exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidNodeHandleException.#ctor">
            <summary>
            A storage handle was invalid or has been corrupted.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidNodeHandleException.#ctor(System.Exception)">
            <summary>
            A storage handle was invalid or has been corrupted.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.InvalidNodeHandleException.Assert(System.Boolean)">
            <summary>
            if(condition == false) throws A storage handle was invalid or has been corrupted.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.LurchTableCorruptionException">
            <summary>
            Exception class: LurchTableCorruptionException
            The LurchTable internal datastructure appears to be corrupted.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.LurchTableCorruptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:CSharpTest.Net.LurchTableCorruptionException.Create(System.Int32,System.String)">
            <summary>
            Used to create this exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.LurchTableCorruptionException.#ctor(System.Exception,System.Int32,System.String)">
            <summary>
            Constructs the exception from an hresult and message bypassing the message formatting
            </summary>
        </member>
        <member name="M:CSharpTest.Net.LurchTableCorruptionException.#ctor">
            <summary>
            The LurchTable internal datastructure appears to be corrupted.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.LurchTableCorruptionException.#ctor(System.Exception)">
            <summary>
            The LurchTable internal datastructure appears to be corrupted.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.LurchTableCorruptionException.Assert(System.Boolean)">
            <summary>
            if(condition == false) throws The LurchTable internal datastructure appears to be corrupted.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.BytesSerializer">
            <summary>
            Returns all bytes in the stream, or writes all bytes to the stream
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.BytesSerializer.RawBytes">
            <summary> Gets a singleton of the BytesSerializer class </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.KeyValueSerializer`2">
            <summary>
            Implements ISerializer of KeyValuePair&lt;TKey, TValue&gt;
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.KeyValueSerializer`2.#ctor(CSharpTest.Net.Serialization.ISerializer{`0},CSharpTest.Net.Serialization.ISerializer{`1})">
            <summary>
            Provide the key/value serializers to use.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.KeyValueSerializer`2.WriteTo(System.Collections.Generic.KeyValuePair{`0,`1},System.IO.Stream)">
            <summary> Writes the object to the stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.KeyValueSerializer`2.ReadFrom(System.IO.Stream)">
            <summary> Reads the object from a stream </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.LimitedSerializer">
            <summary>
            Reads the same variant prefixed string and byte[] but with a hard-limit on size
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.LimitedSerializer.#ctor(System.Int32)">
            <summary>
            Constructs a limited length-prefix data reader/writer
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.Bytes1024">
            <summary> Reads up to 1024 length-prefixed byte array </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.Bytes2048">
            <summary> Reads up to 2048 length-prefixed byte array </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.Bytes4092">
            <summary> Reads up to 4092 length-prefixed byte array </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.Bytes8196">
            <summary> Reads up to 8196 length-prefixed byte array </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.String256">
            <summary> Reads up to 256 length-prefixed string </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.String512">
            <summary> Reads up to 512 length-prefixed string </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.String1024">
            <summary> Reads up to 1024 length-prefixed string </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.LimitedSerializer.Unlimited">
            <summary> This is the only class with read/write prefixed data </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.PrimitiveSerializer">
            <summary>
            Provides simple implementations of ISerializer&lt;T> for the primitive .Net types.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Instance">
            <summary> Gets a singleton of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.String">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Boolean">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Byte">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.SByte">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Bytes">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Char">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.DateTime">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.TimeSpan">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Int16">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.UInt16">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Int32">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.UInt32">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Int64">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.UInt64">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Double">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Float">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.Guid">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.IntPtr">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.PrimitiveSerializer.UIntPtr">
            <summary> Gets a typed version of the PrimitiveSerializer </summary>
        </member>
        <member name="T:CSharpTest.Net.Serialization.VariantNumberSerializer">
            <summary>
            Provides numeric serializers for packed int/long values.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.VariantNumberSerializer.Instance">
            <summary> Gets a singleton of the VariantNumberSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.VariantNumberSerializer.Int32">
            <summary> Gets a typed version of the VariantNumberSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.VariantNumberSerializer.UInt32">
            <summary> Gets a typed version of the VariantNumberSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.VariantNumberSerializer.Int64">
            <summary> Gets a typed version of the VariantNumberSerializer </summary>
        </member>
        <member name="F:CSharpTest.Net.Serialization.VariantNumberSerializer.UInt64">
            <summary> Gets a typed version of the VariantNumberSerializer </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.VariantNumberSerializer.CSharpTest#Net#Serialization#ISerializer{System#UInt64}#WriteTo(System.UInt64,System.IO.Stream)">
            <summary> Writes the object to the stream </summary>
        </member>
        <member name="M:CSharpTest.Net.Serialization.VariantNumberSerializer.CSharpTest#Net#Serialization#ISerializer{System#UInt64}#ReadFrom(System.IO.Stream)">
            <summary> Reads the object from a stream </summary>
        </member>
        <member name="T:CSharpTest.Net.Storage.BTreeFileStoreV2">
            <summary>
            Provides a file-based storage for the BPlusTree dictionary
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Storage.BTreeFileStoreV2.#ctor(CSharpTest.Net.IO.TransactedCompoundFile.Options)">
            <summary>
            Opens an existing BPlusTree file at the path specified, for a new file use CreateNew()
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Storage.BTreeFileStoreV2.Dispose">
            <summary>
            Closes the file in it's current state.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Storage.BTreeFileStore">
            <summary>
            Provides a file-based storage for the BPlusTree dictionary
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Storage.BTreeFileStore.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.IO.FileOptions,System.Boolean)">
            <summary>
            Opens an existing BPlusTree file at the path specified, for a new file use CreateNew()
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Storage.BTreeFileStore.Dispose">
            <summary>
            Closes the file in it's current state.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Storage.BTreeFileStore.CreateNew(System.String,System.Int32,System.Int32,System.Int32,System.IO.FileOptions)">
            <summary>
            Creates an empty file store in the path specified
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Storage.BTreeMemoryStore">
            <summary>
            Provides an in-memory implementation of the storage services for BPlusTree, useful when testing :)
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Storage.BTreeMemoryStore.#ctor">
            <summary> Default in-memory storage </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ExclusiveLocking">
            <summary>
            wraps the reader/writer lock around Monitor
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ILockStrategy">
            <summary>
            An interface that allows reader/writer locking with the using() statement
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ILockStrategy.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.ILockStrategy.WriteVersion">
            <summary>
            The the current writer sequence number
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.ExclusiveLocking._writeVersion">
            <summary> The writer version </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ExclusiveLocking.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.ExclusiveLocking.WriteVersion">
            <summary> Changes every time a write lock is aquired.  If WriteVersion == 0, no write locks have been issued. </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.IgnoreLockFactory">
            <summary> Singleton instance of ignore locking </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ILockFactory">
            <summary> A factory that produces instances of ILockStrategy to aquire/release read/write locks </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLockFactory.Create">
            <summary> Returns the IgnoreLocking.Instance singleton </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.IgnoreLocking">
            <summary>
            wraps the reader/writer lock around Monitor
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.IgnoreLocking.Instance">
            <summary> Singleton instance of ignore locking </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.IgnoreLocking.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.IgnoreLocking.WriteVersion">
            <summary> Returns Zero. </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.LockFactory`1">
            <summary> A generic implementation that constructs a lock by type </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.LockFactory`1.Create">
            <summary> Returns a new lock of type T </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ReaderWriterLocking">
            <summary>
            wraps the System.Threading.ReaderWriterLock lock, does not support read->write upgrades
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.#ctor">
            <summary>
            wraps the reader/writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.#ctor(System.Threading.ReaderWriterLock)">
            <summary>
            wraps the reader/writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReaderWriterLocking.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.ReaderWriterLocking.WriteVersion">
            <summary> Changes every time a write lock is aquired.  If WriteVersion == 0, no write locks have been issued. </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.ReadLock">
            <summary>
            Allows a read lock to be disposed or elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReadLock.Acquire(CSharpTest.Net.Synchronization.ILockStrategy,System.Int32)">
            <summary> Acquires the lock within the timeout or throws TimeoutException </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReadLock.#ctor(CSharpTest.Net.Synchronization.ILockStrategy,System.Boolean)">
            <summary> Tracks an existing read lock on a resource </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReadLock.#ctor(CSharpTest.Net.Synchronization.ILockStrategy,System.Int32)">
            <summary> Acquires a read lock on the resource </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.ReadLock.Dispose">
            <summary> Unlocks the resource </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.ReadLock.HasReadLock">
            <summary>
            Returns true if read access is locked
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.SafeLock">
            <summary>
            Used to acquire a lock(object) with a timeout, either specified or the default of 2 minutes.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SafeLock.DefaultTimeout">
            <summary>
            The default timeout value used when one is not provided to the constructor
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SafeLock.#ctor(System.Object)">
            <summary>
            Acquires the monitor lock on the object within 2 minutes, or throws TimeoutException
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SafeLock.#ctor(System.Object,System.Int32)">
            <summary>
            Acquires the monitor lock on the object within timeoutMilliseconds, or throws TimeoutException
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SafeLock.Dispose">
            <summary> Releases the lock acquired by the constructor </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.SafeLock`1">
            <summary>
            Exactly as SafeLock except that &lt;T> specifies the exception type to throw.
            Used to acquire a lock(object) with a timeout, either specified or the default of 2 minutes.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SafeLock`1.#ctor(System.Object)">
            <summary>
            Acquires the monitor lock on the object within 2 minutes, or throws TimeoutException
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SafeLock`1.#ctor(System.Object,System.Int32)">
            <summary>
            Acquires the monitor lock on the object within timeoutMilliseconds, or throws TimeoutException
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SafeLock`1.Dispose">
            <summary> Releases the lock acquired by the constructor </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.SimpleReadWriteLocking">
            <summary>
            provides a simple and fast, reader-writer lock, does not support read->write upgrades,
            if you need an upgradeable lock, use UpgradeableReadWriteLocking
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.SpinLoops">
            <summary> Max number of Spin loops before polling the _event </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.SpinWaitTime">
            <summary> Number of iterations used for Thread.SpinWait(x) </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.#cctor">
            <summary> Setup of the SpinWaitTime/SpinLoops by processor count </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._event">
            <summary> The event used to wake a waiting writer when a read lock is released </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._sync">
            <summary> The syncronization object writers and potential readers use to lock </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._readersCount">
            <summary> The total number of read locks on this lock </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._targetReaders">
            <summary> The number of readers the pending writer is waiting upon </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._writeVersion">
            <summary> The number of time a write lock has been issued </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._exclusiveThreadId">
            <summary> The managed thread id for the thread holding the write lock </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.SimpleReadWriteLocking._writeRecursiveCount">
            <summary> The number of times the write lock thread has acquired a write lock </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.#ctor">
            <summary>
            Constructs the reader-writer lock using 'this' as the syncronization object
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.#ctor(System.Object)">
            <summary>
            Constructs the reader-writer lock using the specified object for syncronization
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.WaitForExclusive(System.Int32,System.Int32)">
            <summary>
            This is the only real work to be done, once we've acquired the write lock
            we have to wait for all readers to complete.  If/when that happens we can
            then own the write lock.  The case where this does not take place is when
            a thread that already owns the lock calls us to lock again.  In this case
            we can just return success and ignore the outstanding read requests.  The
            major problem with this approach is that if function A() does a read-lock
            and calls function B() which does a write lock, this will fail.  So the
            solution is to either use the upgradeable version (see the derived class 
            UpgradableReadWriteLocking) and upgrade, or to start with a write lock in
            function A().
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.SimpleReadWriteLocking.WriteVersion">
            <summary> Changes every time a write lock is aquired.  If WriteVersion == 0, no write locks have been issued. </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.WriteLock">
            <summary>
            Allows a write lock to be disposed
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriteLock.Acquire(CSharpTest.Net.Synchronization.ILockStrategy,System.Int32)">
            <summary> Acquires the lock within the timeout or throws TimeoutException </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriteLock.#ctor(CSharpTest.Net.Synchronization.ILockStrategy,System.Boolean)">
            <summary> Tracks an existing read lock on a resource </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriteLock.#ctor(CSharpTest.Net.Synchronization.ILockStrategy,System.Int32)">
            <summary> Acquires a read lock on the resource </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriteLock.Dispose">
            <summary> Unlocks the resource </summary>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.WriteLock.HasWriteLock">
            <summary>
            Returns true if write access is locked
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Synchronization.WriterOnlyLocking">
            <summary>
            provides a writer-only lock around Monitor.  The TryRead/ReleaseRead methods are no-ops and
            always return true.
            </summary>
        </member>
        <member name="F:CSharpTest.Net.Synchronization.WriterOnlyLocking._writeVersion">
            <summary> The writer version </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.TryRead(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.ReleaseRead">
            <summary>
            Releases a read lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.TryWrite(System.Int32)">
            <summary>
            Returns true if the lock was successfully obtained within the timeout specified
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.ReleaseWrite">
            <summary>
            Releases a writer lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.Read">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.Read(System.Int32)">
            <summary>
            Returns a reader lock that can be elevated to a write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.Write">
            <summary>
            Returns a read and write lock
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Synchronization.WriterOnlyLocking.Write(System.Int32)">
            <summary>
            Returns a read and write lock
            </summary>
            <exception cref="T:System.TimeoutException"/>
        </member>
        <member name="P:CSharpTest.Net.Synchronization.WriterOnlyLocking.WriteVersion">
            <summary> Changes every time a write lock is aquired.  If WriteVersion == 0, no write locks have been issued. </summary>
        </member>
        <member name="T:Check">
            <summary>
            provides a set of runtime validations for inputs
            </summary>
        </member>
        <member name="M:Check.Assert``1(System.Boolean)">
            <summary>
            Verifies that the condition is true and if it fails constructs the specified type of
            exception and throws.
            </summary>
        </member>
        <member name="M:Check.Assert``1(System.Boolean,System.String)">
            <summary>
            Verifies that the condition is true and if it fails constructs the specified type of
            exception with any arguments provided and throws.
            </summary>
        </member>
        <member name="M:Check.Assert(System.Boolean,Check.ExceptionBuilder)">
            <summary>
            Verifies that the condition is true and if it fails throws the execption returned
            by fnExceptionBuilder()
            </summary>
        </member>
        <member name="M:Check.Assert``1(System.Boolean,System.String,System.Exception)">
            <summary>
            Verifies that the condition is true and if it fails constructs the specified type of
            exception with any arguments provided and throws.
            </summary>
        </member>
        <member name="M:Check.NotNull``1(``0)">
            <summary>
            Verifies that value is not null and returns the value or throws ArgumentNullException
            </summary>
        </member>
        <member name="M:Check.NotEmpty(System.String)">
            <summary>
            Verfies that the string is not null and not empty and returns the string.
            throws ArgumentNullException, ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.NotEmpty(System.Guid)">
            <summary>
            Verfies that the Guid is not empty.
            throws ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.NotEmpty``1(``0)">
            <summary>
            Verfies that the collection is not null and not empty and returns the collection.
            throws ArgumentNullException, ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.IsEqual``1(``0,``0)">
            <summary>
            Verifies that the two values are the same
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.NotEqual``1(``0,``0)">
            <summary>
            Verifies that the two values are NOT the same
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.ArraySize``1(``0[],System.Int32,System.Int32)">
            <summary>
            Verifies that the array is not empty and has at least min, but not more than max items.
            throws ArgumentNullExcpetion
            throws ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.InRange``1(``0,``0,``0)">
            <summary>
            Verifies that the value is min, max, or between the two.
            throws ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.IsAssignable``1(System.Object)">
            <summary>
            Returns (T)value if the object provided can be assinged to a variable of type T
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.IsAssignable(System.Type,System.Object)">
            <summary>
            Returns value if the object provided can be assinged to a variable of type toType
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.IsAssignable(System.Type,System.Type)">
            <summary>
            Throws ArgumentException if the type fromType cannot be assigned to variable of type toType
            </summary>
        </member>
        <member name="T:Check.ExceptionBuilder">
            <summary>
            Used to delay creation of the excpetion until the condition fails.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.IObjectKeepAlive">
            <summary>
            Provides an interface for tracking a limited number of references to objects for use in a WeakReference
            cache.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.IObjectKeepAlive.Clear">
            <summary>
            Clears the entire keep-alive cache
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.IObjectKeepAlive.Tick">
            <summary>
            Can be called periodically by external threads to ensure cleanup instead of depending upon calls to Add()
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.IObjectKeepAlive.Add(System.Object)">
            <summary>
            Cleans up expired items and adds the object to the list of items to keep alive.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.ObjectKeepAlive">
            <summary>
            Provides a means of forcing the garbage collector to wait on objects aquired from permanent 
            storage while only holding WeakReference's of the object.  Essentially uses a simple lockless 
            algorithm to track the most recently loaded objects so that they will stay alive longer.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ObjectKeepAlive.#ctor(System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Configures the keep-alive policy for this container
            </summary>
            <param name="minItems">The minimum number of items desired in the list (kept event after age expires)</param>
            <param name="maxItems">The maximum number of items desired in the list (discarded even if age has not expired)</param>
            <param name="maxAge">Determines how long to keep an object if the count is between min and max</param>
        </member>
        <member name="M:CSharpTest.Net.Utils.ObjectKeepAlive.#ctor(System.Int32,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Configures the keep-alive policy for this container
            </summary>
            <param name="minItems">The minimum number of items desired in the list (kept event after age expires)</param>
            <param name="maxItems">The maximum number of items desired in the list (discarded even if age has not expired)</param>
            <param name="maxAge">Determines how long to keep an object if the count is between min and max</param>
            <param name="externalTicks">True if you want to perform cleanup exclusivly on another thread by calling Tick(), otherwise false</param>
        </member>
        <member name="M:CSharpTest.Net.Utils.ObjectKeepAlive.Clear">
            <summary>
            Clears the entire keep-alive cache
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ObjectKeepAlive.Tick">
            <summary>
            Can be called periodically by external threads to ensure cleanup instead of depending upon calls to Add()
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.ObjectKeepAlive.Add(System.Object)">
            <summary>
            Cleans up expired items and adds the object to the list of items to keep alive.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.Utils.WeakReference`1">
            <summary>
            A strong-typed derivation of the WeakReference class
            </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.WeakReference`1.#ctor(`0)">
            <summary> Creates a new WeakReference that keeps track of target. </summary>
        </member>
        <member name="M:CSharpTest.Net.Utils.WeakReference`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary />
        </member>
        <member name="M:CSharpTest.Net.Utils.WeakReference`1.TryGetTarget(`0@)">
            <summary> Returns true if the Object was retrieved. </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.WeakReference`1.IsAlive">
            <summary>
            Gets an indication whether the object referenced by the current object has been garbage collected.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.Utils.WeakReference`1.Target">
            <summary> Gets or sets the Object stored in the handle if it's accessible. </summary>
        </member>
    </members>
</doc>
