<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Serilog.Filters.Expressions</name>
    </assembly>
    <members>
        <member name="T:Serilog.Filters.Expressions.FilterLanguage">
            <summary>
            Helper methods to assist with construction of well-formed filters.
            </summary>
        </member>
        <member name="M:Serilog.Filters.Expressions.FilterLanguage.CreateFilter(System.String)">
            <summary>
            Create a log event filter based on the provided expression.
            </summary>
            <param name="expression">A filter expression.</param>
            <returns>A function that evaluates the expression in the context of the log event.</returns>
        </member>
        <member name="M:Serilog.Filters.Expressions.FilterLanguage.TryCreateFilter(System.String,System.Func{Serilog.Events.LogEvent,System.Object}@,System.String@)">
            <summary>
            Create a log event filter based on the provided expression.
            </summary>
            <param name="expression">A filter expression.</param>
            <param name="filter">A function that evaluates the expression in the context of the log event.</param>
            <param name="error">The reported error, if compilation was unsuccessful.</param>
            <returns>True if the filter could be created; otherwise, false.</returns>
        </member>
        <member name="M:Serilog.Filters.Expressions.FilterLanguage.EscapeLikeExpressionContent(System.String)">
            <summary>
            Escape a value that is to appear in a `like` expression.
            </summary>
            <param name="text">The text to escape.</param>
            <returns>The text with any special values escaped. Will need to be passed through
            <see cref="M:Serilog.Filters.Expressions.FilterLanguage.EscapeStringContent(System.String)"/> if it is being embedded directly into a filter expression.</returns>
        </member>
        <member name="M:Serilog.Filters.Expressions.FilterLanguage.EscapeStringContent(System.String)">
            <summary>
            Escape a fragment of text that will appear within a string.
            </summary>
            <param name="text">The text to escape.</param>
            <returns>The text with any special values escaped.</returns>
        </member>
        <member name="M:Serilog.Filters.Expressions.FilterLanguage.IsValidPropertyName(System.String)">
            <summary>
            Determine if the specified text is a valid property name.
            </summary>
            <param name="propertyName">The text to check.</param>
            <returns>True if the text can be used verbatim as a property name.</returns>
        </member>
        <member name="T:Serilog.Filters.Expressions.LoggingFilterSwitch">
            <summary>
            A log event filter that can be modified at runtime.
            </summary>
        </member>
        <member name="M:Serilog.Filters.Expressions.LoggingFilterSwitch.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Serilog.Filters.Expressions.LoggingFilterSwitch"/>, optionally initialized
            with the <paramref name="expression"/>.
            </summary>
            <param name="expression">A filter expression against which log events will be tested.
            Only expressions that evaluate to <c>true</c> are included
            by the filter. A <c>null</c> expression will accept all
            events.</param>
        </member>
        <member name="P:Serilog.Filters.Expressions.LoggingFilterSwitch.Expression">
            <summary>
            A filter expression against which log events will be tested.
            Only expressions that evaluate to <c>true</c> are included
            by the filter. A <c>null</c> expression will accept all
            events.
            </summary>
        </member>
        <member name="M:Serilog.Filters.Expressions.LoggingFilterSwitch.IsEnabled(Serilog.Events.LogEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Serilog.Filters.Expressions.LoggingFilterSwitch.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Serilog.LoggerFilterConfigurationExtensions">
            <summary>
            Extends logger configuration with methods for filtering with expressions.
            </summary>
        </member>
        <member name="M:Serilog.LoggerFilterConfigurationExtensions.ByIncludingOnly(Serilog.Configuration.LoggerFilterConfiguration,System.String)">
            <summary>
            Include only log events that match the provided expression.
            </summary>
            <param name="loggerFilterConfiguration">Filter configuration.</param>
            <param name="expression">The expression to apply.</param>
            <returns>The underlying <see cref="T:Serilog.LoggerConfiguration"/>.</returns>
        </member>
        <member name="M:Serilog.LoggerFilterConfigurationExtensions.ByExcluding(Serilog.Configuration.LoggerFilterConfiguration,System.String)">
            <summary>
            Exclude log events that match the provided expression.
            </summary>
            <param name="loggerFilterConfiguration">Filter configuration.</param>
            <param name="expression">The expression to apply.</param>
            <returns>The underlying <see cref="T:Serilog.LoggerConfiguration"/>.</returns>
        </member>
        <member name="M:Serilog.LoggerFilterConfigurationExtensions.ControlledBy(Serilog.Configuration.LoggerFilterConfiguration,Serilog.Filters.Expressions.LoggingFilterSwitch)">
            <summary>
            Use a <see cref="T:Serilog.Filters.Expressions.LoggingFilterSwitch"/> to dynamically control filtering.
            </summary>
            <param name="loggerFilterConfiguration">Filter configuration.</param>
            <param name="switch">A <see cref="T:Serilog.Filters.Expressions.LoggingFilterSwitch"/> that can be used to dynamically control
            log filtering.</param>
            <returns>The underlying <see cref="T:Serilog.LoggerConfiguration"/>.</returns>
        </member>
    </members>
</doc>
