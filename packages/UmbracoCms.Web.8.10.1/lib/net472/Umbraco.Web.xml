<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Umbraco.Web</name>
    </assembly>
    <members>
        <member name="T:Umbraco.Web.AppBuilderExtensions">
            <summary>
            Provides general extension methods to IAppBuilder.
            </summary>
        </member>
        <member name="M:Umbraco.Web.AppBuilderExtensions.FinalizeMiddlewareConfiguration(Owin.IAppBuilder)">
             <summary>
             Called at the end of configuring middleware
             </summary>
             <param name="app">The app builder.</param>
             <remarks>
             This could be used for something else in the future - maybe to inform Umbraco that middleware is done/ready, but for
             now this is used to raise the custom event
            
             This is an extension method in case developer entirely replace the UmbracoDefaultOwinStartup class, in which case they will
             need to ensure they call this extension method in their startup class.
             </remarks>
        </member>
        <member name="M:Umbraco.Web.AppBuilderExtensions.SetUmbracoLoggerFactory(Owin.IAppBuilder)">
            <summary>
            Sets the OWIN logger to use Umbraco's logging system.
            </summary>
            <param name="app">The app builder.</param>
        </member>
        <member name="M:Umbraco.Web.AppBuilderExtensions.UseSignalR(Owin.IAppBuilder,Umbraco.Core.Configuration.IGlobalSettings)">
            <summary>
            Configures SignalR.
            </summary>
            <param name="app">The app builder.</param>
            <param name="globalSettings"></param>
        </member>
        <member name="T:Umbraco.Web.Cache.DistributedCacheBinder">
            <summary>
            Default <see cref="T:Umbraco.Web.Cache.IDistributedCacheBinder"/> implementation.
            </summary>
            <summary>
            Default <see cref="T:Umbraco.Web.Cache.IDistributedCacheBinder"/> implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheBinder.#ctor(Umbraco.Web.Cache.DistributedCache,Umbraco.Web.IUmbracoContextFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Cache.DistributedCacheBinder"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheBinder.HandleEvents(System.Collections.Generic.IEnumerable{Umbraco.Core.Events.IEventDefinition})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheBinder.UnbindEvents">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheBinder.BindEvents(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheBinder.ContentService_Copied(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.CopyEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            Handles cache refreshing for when content is copied
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            When an entity is copied new permissions may be assigned to it based on it's parent, if that is the
            case then we need to clear all user permissions cache.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheBinder.ContentService_Saved(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            Handles cache refreshing for when content is saved (not published)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            When an entity is saved we need to notify other servers about the change in order for the Examine indexes to
            stay up-to-date for unpublished content.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheBinder.LocalizationService_DeletedLanguage(Umbraco.Core.Services.ILocalizationService,Umbraco.Core.Events.DeleteEventArgs{Umbraco.Core.Models.ILanguage})">
            <summary>
            Fires when a language is deleted
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheBinder.LocalizationService_SavedLanguage(Umbraco.Core.Services.ILocalizationService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.ILanguage})">
            <summary>
            Fires when a language is saved
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheBinder.FileService_DeletedTemplate(Umbraco.Core.Services.IFileService,Umbraco.Core.Events.DeleteEventArgs{Umbraco.Core.Models.ITemplate})">
            <summary>
            Removes cache for template
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheBinder.FileService_SavedTemplate(Umbraco.Core.Services.IFileService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.ITemplate})">
            <summary>
            Refresh cache for template
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Umbraco.Web.Cache.DistributedCacheBinderComposer">
            <summary>
            Installs listeners on service events in order to refresh our caches.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.ContentCacheRefresher.NotifyPublishedSnapshotService(Umbraco.Web.PublishedCache.IPublishedSnapshotService,Umbraco.Core.Cache.AppCaches,Umbraco.Web.Cache.ContentCacheRefresher.JsonPayload[])">
            <summary>
            Refreshes the publish snapshot service and if there are published changes ensures that partial view caches are refreshed too
            </summary>
            <param name="service"></param>
            <param name="appCaches"></param>
            <param name="payloads"></param>
        </member>
        <member name="T:Umbraco.Web.Cache.IDistributedCacheBinder">
            <summary>
            Binds events to the distributed cache.
            </summary>
            <remarks>
            <para>Use <see cref="M:Umbraco.Web.Cache.IDistributedCacheBinder.BindEvents(System.Boolean)"/> to bind actual events, eg <see cref="E:Umbraco.Core.Services.Implement.ContentService.Saved"/>, to
            the distributed cache, so that the proper refresh operations are executed when these events trigger.</para>
            <para>Use <see cref="M:Umbraco.Web.Cache.IDistributedCacheBinder.HandleEvents(System.Collections.Generic.IEnumerable{Umbraco.Core.Events.IEventDefinition})"/> to handle events that have not actually triggered, but have
            been queued, so that the proper refresh operations are also executed.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.IDistributedCacheBinder.HandleEvents(System.Collections.Generic.IEnumerable{Umbraco.Core.Events.IEventDefinition})">
            <summary>
            Handles events from definitions.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.IDistributedCacheBinder.BindEvents(System.Boolean)">
            <summary>
            Binds actual events to the distributed cache.
            </summary>
            <param name="enableUnbinding">A value indicating whether to support unbinding the events.</param>
        </member>
        <member name="M:Umbraco.Web.Cache.IDistributedCacheBinder.UnbindEvents">
            <summary>
            Unbinds bounded events.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Cache.UserGroupCacheRefresher">
            <summary>
            Handles User group cache invalidation/refreshing
            </summary>
            <remarks>
            This also needs to clear the user cache since IReadOnlyUserGroup's are attached to IUser objects
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Cache.DistributedCache">
            <summary>
            Represents the entry point into Umbraco's distributed cache infrastructure.
            </summary>
            <remarks>
            <para>
            The distributed cache infrastructure ensures that distributed caches are
            invalidated properly in load balancing environments.
            </para>
            <para>
            Distribute caches include static (in-memory) cache, runtime cache, front-end content cache, Examine/Lucene indexes
            </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.Refresh``1(System.Guid,System.Func{``0,System.Int32},``0[])">
            <summary>
            Notifies the distributed cache of specified item invalidation, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <typeparam name="T">The type of the invalidated items.</typeparam>
            <param name="refresherGuid">The unique identifier of the ICacheRefresher.</param>
            <param name="getNumericId">A function returning the unique identifier of items.</param>
            <param name="instances">The invalidated items.</param>
            <remarks>
            This method is much better for performance because it does not need to re-lookup object instances.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.Refresh(System.Guid,System.Int32)">
            <summary>
            Notifies the distributed cache of a specified item invalidation, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <param name="refresherGuid">The unique identifier of the ICacheRefresher.</param>
            <param name="id">The unique identifier of the invalidated item.</param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.Refresh(System.Guid,System.Guid)">
            <summary>
            Notifies the distributed cache of a specified item invalidation, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <param name="refresherGuid">The unique identifier of the ICacheRefresher.</param>
            <param name="id">The unique identifier of the invalidated item.</param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.RefreshByJson(System.Guid,System.String)">
            <summary>
            Notifies the distributed cache, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <param name="refresherGuid">The unique identifier of the ICacheRefresher.</param>
            <param name="jsonPayload">The notification content.</param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.RefreshAll(System.Guid)">
            <summary>
            Notifies the distributed cache of a global invalidation for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <param name="refresherGuid">The unique identifier of the ICacheRefresher.</param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.Remove(System.Guid,System.Int32)">
            <summary>
            Notifies the distributed cache of a specified item removal, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <param name="refresherGuid">The unique identifier of the ICacheRefresher.</param>
            <param name="id">The unique identifier of the removed item.</param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.Remove``1(System.Guid,System.Func{``0,System.Int32},``0[])">
            <summary>
            Notifies the distributed cache of specified item removal, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <typeparam name="T">The type of the removed items.</typeparam>
            <param name="refresherGuid">The unique identifier of the ICacheRefresher.</param>
            <param name="getNumericId">A function returning the unique identifier of items.</param>
            <param name="instances">The removed items.</param>
            <remarks>
            This method is much better for performance because it does not need to re-lookup object instances.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Cache.DistributedCacheExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Web.Cache.DistributedCache"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.LanguageCacheRefresher.RefreshDomains">
            <summary>
            Clears all domain caches
            </summary>
        </member>
        <member name="F:Umbraco.Web.Cache.LanguageCacheRefresher.JsonPayload.LanguageChangeType.Add">
            <summary>
            A new languages has been added
            </summary>
        </member>
        <member name="F:Umbraco.Web.Cache.LanguageCacheRefresher.JsonPayload.LanguageChangeType.Remove">
            <summary>
            A language has been deleted
            </summary>
        </member>
        <member name="F:Umbraco.Web.Cache.LanguageCacheRefresher.JsonPayload.LanguageChangeType.Update">
            <summary>
            A language has been updated - but it's culture remains the same
            </summary>
        </member>
        <member name="F:Umbraco.Web.Cache.LanguageCacheRefresher.JsonPayload.LanguageChangeType.ChangeCulture">
            <summary>
            A language has been updated - it's culture has changed
            </summary>
        </member>
        <member name="T:Umbraco.Web.Compose.BlockEditorComponent">
            <summary>
            A component for Block editors used to bind to events
            </summary>
        </member>
        <member name="T:Umbraco.Web.Compose.BlockEditorComposer">
            <summary>
            A composer for Block editors to run a component
            </summary>
        </member>
        <member name="T:Umbraco.Web.Compose.NestedContentPropertyComponent">
            <summary>
            A component for NestedContent used to bind to events
            </summary>
        </member>
        <member name="T:Umbraco.Web.Compose.PublicAccessComposer">
            <summary>
            Used to ensure that the public access data file is kept up to date properly
            </summary>
        </member>
        <member name="T:Umbraco.Web.Compose.NestedContentPropertyComposer">
            <summary>
            A composer for nested content to run a component
            </summary>
        </member>
        <member name="T:Umbraco.Web.Compose.NotificationsComponent.Notifier">
            <summary>
            This class is used to send the notifications
            </summary>
        </member>
        <member name="M:Umbraco.Web.Compose.NotificationsComponent.Notifier.#ctor(Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.IRuntimeState,Umbraco.Core.Services.INotificationService,Umbraco.Core.Services.IUserService,Umbraco.Core.Services.ILocalizedTextService,Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Core.Configuration.UmbracoSettings.IContentSection,Umbraco.Core.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="umbracoContextAccessor"></param>
            <param name="notificationService"></param>
            <param name="userService"></param>
            <param name="textService"></param>
            <param name="globalSettings"></param>
            <param name="contentConfig"></param>
            <param name="logger"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Web.Compose.DatabaseServerRegistrarAndMessengerComposer" -->
        <member name="M:Umbraco.Web.Compose.DatabaseServerRegistrarAndMessengerComponent.RegisterBackgroundTasksOnce(System.Object,Umbraco.Web.Routing.RoutableAttemptEventArgs)">
            <summary>
            Handle when a request is made
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            We require this because:
            - ApplicationContext.UmbracoApplicationUrl is initialized by UmbracoModule in BeginRequest
            - RegisterServer is called on UmbracoModule.RouteAttempt which is triggered in ProcessRequest
                 we are safe, UmbracoApplicationUrl has been initialized
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Compose.DatabaseServerRegistrarAndMessengerComponent.InstructionProcessTask.PerformRun">
            <summary>
            Runs the background task.
            </summary>
            <returns>A value indicating whether to repeat the task.</returns>
        </member>
        <member name="M:Umbraco.Web.Compose.DatabaseServerRegistrarAndMessengerComponent.TouchServerTask.#ctor(Umbraco.Web.Scheduling.IBackgroundTaskRunner{Umbraco.Web.Scheduling.RecurringTaskBase},System.Int32,System.Int32,Umbraco.Core.Services.IServerRegistrationService,Umbraco.Core.Sync.DatabaseServerRegistrar,System.String,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Compose.DatabaseServerRegistrarAndMessengerComponent.TouchServerTask"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Compose.DatabaseServerRegistrarAndMessengerComponent.TouchServerTask.PerformRun">
            <summary>
            Runs the background task.
            </summary>
            <returns>A value indicating whether to repeat the task.</returns>
        </member>
        <member name="M:Umbraco.Web.Composing.CompositionExtensions.Controllers.ComposeUmbracoControllers(Umbraco.Core.Composing.Composition,System.Reflection.Assembly)">
            <summary>
            Registers Umbraco controllers.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Composing.LightInject.LightInjectContainer">
            <summary>
            Implements DI with LightInject.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Composing.LightInject.LightInjectContainer.#ctor(LightInject.ServiceContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Composing.LightInject.LightInjectContainer"/> with a LightInject container.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Composing.LightInject.LightInjectContainer.Create">
            <summary>
            Creates a new instance of the <see cref="T:Umbraco.Web.Composing.LightInject.LightInjectContainer"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Composing.LightInject.LightInjectContainer.ConfigureForWeb">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Composing.Current.Factory">
            <summary>
            Gets the factory.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Composing.ModuleInjector`1">
            <summary>
            Provides a base class for module injectors.
            </summary>
            <typeparam name="TModule">The type of the injected module.</typeparam>
        </member>
        <member name="M:Umbraco.Web.Composing.ModuleInjector`1.Init(System.Web.HttpApplication)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Composing.ModuleInjector`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Dashboards.DashboardCollectionBuilder.SetWeight``1(System.Int32)">
            <summary>
            Changes the default weight of a dashboard
            </summary>
            <typeparam name="T">The type of dashboard</typeparam>
            <param name="weight">The new dashboard weight</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.Filters.ContentSaveModelValidator">
            <summary>
            Validator for <see cref="T:Umbraco.Web.Models.ContentEditing.ContentItemSave"/>
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.Filters.MediaSaveModelValidator">
            <summary>
            Validator for <see cref="T:Umbraco.Web.Models.ContentEditing.MediaItemSave"/>
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.Filters.MemberSaveModelValidator">
            <summary>
            Custom validation helper so that we can exclude the Member.StandardPropertyTypeStubs from being validating for existence
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.MemberSaveModelValidator.ValidatePropertiesData(Umbraco.Web.Models.ContentEditing.MemberSave,Umbraco.Web.Models.ContentEditing.IContentProperties{Umbraco.Web.Models.ContentEditing.ContentPropertyBasic},Umbraco.Web.Models.ContentEditing.ContentPropertyCollectionDto,System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            We need to manually validate a few things here like email and login to make sure they are valid and aren't duplicates
            </summary>
            <param name="model"></param>
            <param name="dto"></param>
            <param name="modelState"></param>
            <param name="modelWithProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.MemberSaveModelValidator.ValidateProperties(Umbraco.Web.Models.ContentEditing.MemberSave,Umbraco.Web.Models.ContentEditing.IContentProperties{Umbraco.Web.Models.ContentEditing.ContentPropertyBasic},System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            This ensures that the internal membership property types are removed from validation before processing the validation
            since those properties are actually mapped to real properties of the IMember.
            This also validates any posted data for fields that are sensitive.
            </summary>
            <param name="model"></param>
            <param name="modelWithProperties"></param>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.Filters.IsCurrentUserModelFilterAttribute">
            <summary>
            This sets the IsCurrentUser property on any outgoing <see cref="T:Umbraco.Web.Models.ContentEditing.UserDisplay"/> model or any collection of <see cref="T:Umbraco.Web.Models.ContentEditing.UserDisplay"/> models
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.Filters.UserGroupAuthorizationAttribute">
            <summary>
            Authorizes that the current user has access to the user group Id in the request
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.UserGroupAuthorizationAttribute.#ctor(System.String,Umbraco.Web.IUmbracoContextAccessor)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="paramName"></param>
            <param name="umbracoContextAccessor"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.UserGroupEditorAuthorizationHelper.AuthorizeGroupAccess(Umbraco.Core.Models.Membership.IUser,System.Int32[])">
            <summary>
            Authorize that the current user belongs to these groups
            </summary>
            <param name="currentUser"></param>
            <param name="groupIds"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.UserGroupEditorAuthorizationHelper.AuthorizeGroupAccess(Umbraco.Core.Models.Membership.IUser,System.String[])">
            <summary>
            Authorize that the current user belongs to these groups
            </summary>
            <param name="currentUser"></param>
            <param name="groupAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.UserGroupEditorAuthorizationHelper.AuthorizeSectionChanges(Umbraco.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Authorize that the user is not adding a section to the group that they don't have access to
            </summary>
            <param name="currentUser"></param>
            <param name="currentAllowedSections"></param>
            <param name="proposedAllowedSections"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.UserGroupEditorAuthorizationHelper.AuthorizeStartNodeChanges(Umbraco.Core.Models.Membership.IUser,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Authorize that the user is not changing to a start node that they don't have access to (including admins)
            </summary>
            <param name="currentUser"></param>
            <param name="currentContentStartId"></param>
            <param name="proposedContentStartId"></param>
            <param name="currentMediaStartId"></param>
            <param name="proposedMediaStartId"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.Filters.MediaItemSaveValidationAttribute">
            <summary>
            Validates the incoming <see cref="T:Umbraco.Web.Models.ContentEditing.MediaItemSave"/> model
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.MediaItemSaveValidationAttribute.ValidateUserAccess(Umbraco.Web.Models.ContentEditing.MediaItemSave,System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Checks if the user has access to post a content item based on whether it's being created or saved.
            </summary>
            <param name="mediaItem"></param>
            <param name="actionContext"></param>
        </member>
        <member name="T:Umbraco.Web.Editors.Filters.MemberSaveValidationAttribute">
            <summary>
            Validates the incoming <see cref="T:Umbraco.Web.Models.ContentEditing.MemberSave"/> model
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.Filters.ContentSaveValidationAttribute">
            <summary>
            Validates the incoming <see cref="T:Umbraco.Web.Models.ContentEditing.ContentItemSave"/> model along with if the user is allowed to perform the operation
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.ContentSaveValidationAttribute.ValidateAtLeastOneVariantIsBeingSaved(Umbraco.Web.Models.ContentEditing.ContentItemSave,System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            If there are no variants tagged for Saving, then this is an invalid request
            </summary>
            <param name="contentItem"></param>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.ContentSaveValidationAttribute.ValidateUserAccess(Umbraco.Web.Models.ContentEditing.ContentItemSave,System.Web.Http.Controllers.HttpActionContext,Umbraco.Web.Security.WebSecurity)">
            <summary>
            Checks if the user has access to post a content item based on whether it's being created or saved.
            </summary>
            <param name="actionContext"></param>
            <param name="contentItem"></param>
            <param name="webSecurity"></param>
        </member>
        <member name="T:Umbraco.Web.Editors.Filters.ContentModelValidator">
            <summary>
            A base class purely used for logging without generics
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.Filters.ContentModelValidator`3">
            <summary>
            A validation helper class used with ContentItemValidationFilterAttribute to be shared between content, media, etc...
            </summary>
            <typeparam name="TPersisted"></typeparam>
            <typeparam name="TModelSave"></typeparam>
            <typeparam name="TModelWithProperties"></typeparam>
            <remarks>
            If any severe errors occur then the response gets set to an error and execution will not continue. Property validation
            errors will just be added to the ModelState.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.ContentModelValidator`3.ValidateExistingContent(`1,System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Ensure the content exists
            </summary>
            <param name="postedItem"></param>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.ContentModelValidator`3.ValidateProperties(`1,Umbraco.Web.Models.ContentEditing.IContentProperties{Umbraco.Web.Models.ContentEditing.ContentPropertyBasic},System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Ensure all of the ids in the post are valid
            </summary>
            <param name="model"></param>
            <param name="modelWithProperties"></param>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.ContentModelValidator`3.ValidateProperties(System.Collections.Generic.List{Umbraco.Web.Models.ContentEditing.ContentPropertyBasic},System.Collections.Generic.List{Umbraco.Core.Models.Property},System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            This validates that all of the posted properties exist on the persisted entity
            </summary>
            <param name="postedProperties"></param>
            <param name="persistedProperties"></param>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.ContentModelValidator`3.ValidatePropertiesData(`1,`2,Umbraco.Web.Models.ContentEditing.ContentPropertyCollectionDto,System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Validates the data for each property
            </summary>
            <param name="model"></param>
            <param name="modelWithProperties"></param>
            <param name="dto"></param>
            <param name="modelState"></param>
            <returns></returns>
            <remarks>
            All property data validation goes into the model state with a prefix of "Properties"
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.Filters.ContentModelValidator`3.ValidatePropertyValue(`1,`2,Umbraco.Core.PropertyEditors.IDataEditor,Umbraco.Web.Models.ContentEditing.ContentPropertyDto,System.Object,System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Validates a property's value and adds the error to model state if found
            </summary>
            <param name="model"></param>
            <param name="modelWithProperties"></param>
            <param name="editor"></param>
            <param name="property"></param>
            <param name="postedValue"></param>
            <param name="modelState"></param>
            <param name="requiredDefaultMessages"></param>
            <param name="formatDefaultMessages"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.IconController.GetIcon(System.String)">
            <summary>
            Gets an IconModel containing the icon name and SvgString according to an icon name found at the global icons path
            </summary>
            <param name="iconName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.IconController.GetAllIcons">
            <summary>
            Gets a list of all svg icons found at at the global icons path.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.ImageUrlGeneratorController">
            <summary>
            The API controller used for getting URLs for images with parameters
            </summary>
            <remarks>
            <para>
            This controller allows for retrieving URLs for processed images, such as resized, cropped,
            or otherwise altered.  These can be different based on the IImageUrlGenerator
            implementation in use, and so the BackOffice could should not rely on hard-coded string
            building to generate correct URLs
            </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.PackageController">
            <summary>
            A controller used for managing packages in the back office
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.PackageController.PostSavePackage(Umbraco.Core.Models.Packaging.PackageDefinition)">
            <summary>
            Creates or updates a package
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.PackageController.DeleteCreatedPackage(System.Int32)">
            <summary>
            Deletes a created package
            </summary>
            <param name="packageId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.PackageController.GetInstalled">
            <summary>
            Returns all installed packages - only shows their latest versions
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.MacrosController">
            <summary>
            The API controller used for editing dictionary items
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.MacrosController.MacrosControllerConfigurationAttribute">
            <summary>
            Configures this controller with a custom action selector
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MacrosController.Create(System.String)">
            <summary>
            Creates a new macro
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MacrosController.GetPartialViews">
            <summary>
            Gets a list of available macro partials
            </summary>
            <returns>
            The <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MacrosController.GetParameterEditors">
            <summary>
            Gets the available parameter editors
            </summary>
            <returns>
            The <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MacrosController.GetGroupedParameterEditors">
            <summary>
            Gets the available parameter editors grouped by their group.
            </summary>
            <returns>
            The <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MacrosController.GetParameterEditorByAlias(System.String)">
            <summary>
            Get parameter editor by alias.
            </summary>
            <returns>
            The <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MacrosController.ReturnErrorResponse(System.String,System.Boolean,System.Exception)">
            <summary>
            Returns a error response and optionally logs it
            </summary>
            <param name="message">
            The error message.
            </param>
            <param name="logError">
            Value to indicate if the error needs to be logged
            </param>
            <param name="exception">
            The exception to log
            </param>
            <returns>
            The <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MacrosController.FindPartialViewsFiles">
            <summary>
            Finds all the macro partials
            </summary>
            <returns>
            The <see cref="!:IEnumerable"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MacrosController.FindPartialViewFilesInViewsFolder">
            <summary>
            Finds all macro partials in the views folder
            </summary>
            <returns>
            The <see cref="!:IEnumerable"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MacrosController.FindPartialViewFilesInPluginFolders">
            <summary>
            Finds partial view files in app plugin folders.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MacrosController.FindPartialViewFilesInFolder(System.String,System.String,System.String)">
            <summary>
            Finds all partial views in a folder and subfolders
            </summary>
            <param name="orgPath">
            The org path.
            </param>
            <param name="path">
            The path.
            </param>
            <param name="prefixVirtualPath">
            The prefix virtual path.
            </param>
            <returns>
            The <see cref="!:IEnumerable"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MacrosController.MapToDisplay(Umbraco.Core.Models.IMacro)">
            <summary>
            Used to map an <see cref="T:Umbraco.Core.Models.IMacro"/> instance to a <see cref="T:Umbraco.Web.Models.ContentEditing.MacroDisplay"/>
            </summary>
            <param name="macro"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.RelationTypeController">
            <summary>
            The API controller for editing relation types.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.RelationTypeController.RelationTypeControllerConfigurationAttribute">
            <summary>
            Configures this controller with a custom action selector
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.RelationTypeController.GetById(System.Int32)">
            <summary>
            Gets a relation type by id
            </summary>
            <param name="id">The relation type ID.</param>
            <returns>Returns the <see cref="T:Umbraco.Web.Models.ContentEditing.RelationTypeDisplay"/>.</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.RelationTypeController.GetById(System.Guid)">
            <summary>
            Gets a relation type by guid
            </summary>
            <param name="id">The relation type ID.</param>
            <returns>Returns the <see cref="T:Umbraco.Web.Models.ContentEditing.RelationTypeDisplay"/>.</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.RelationTypeController.GetById(Umbraco.Core.Udi)">
            <summary>
            Gets a relation type by udi
            </summary>
            <param name="id">The relation type ID.</param>
            <returns>Returns the <see cref="T:Umbraco.Web.Models.ContentEditing.RelationTypeDisplay"/>.</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.RelationTypeController.GetRelationObjectTypes">
            <summary>
            Gets a list of object types which can be associated via relations.
            </summary>
            <returns>A list of available object types.</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.RelationTypeController.PostCreate(Umbraco.Web.Models.ContentEditing.RelationTypeSave)">
            <summary>
            Creates a new relation type.
            </summary>
            <param name="relationType">The relation type to create.</param>
            <returns>A <see cref="T:System.Net.Http.HttpResponseMessage"/> containing the persisted relation type's ID.</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.RelationTypeController.PostSave(Umbraco.Web.Models.ContentEditing.RelationTypeSave)">
            <summary>
            Updates an existing relation type.
            </summary>
            <param name="relationType">The relation type to update.</param>
            <returns>A display object containing the updated relation type.</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.RelationTypeController.DeleteById(System.Int32)">
            <summary>
            Deletes a relation type with a given ID.
            </summary>
            <param name="id">The ID of the relation type to delete.</param>
            <returns>A <see cref="T:System.Net.Http.HttpResponseMessage"/>.</returns>
        </member>
        <member name="T:Umbraco.Web.Editors.BackOfficeServerVariables">
            <summary>
            Used to collect the server variables for use in the back office angular app
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeServerVariables.BareMinimumServerVariables">
            <summary>
            Returns the server variables for non-authenticated users
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeServerVariables.GetServerVariables">
            <summary>
            Returns the server variables for authenticated users
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeServerVariables.GetApplicationState">
            <summary>
            Returns the server variables regarding the application state
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Web.Editors.LogViewerController" -->
        <member name="T:Umbraco.Web.Editors.Binders.MemberBinder">
            <summary>
            The model binder for <see cref="T:Umbraco.Web.Models.ContentEditing.MemberSave" />
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.Binders.MemberBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
            <summary>
            Creates the model from the request and binds it to the context
            </summary>
            <param name="actionContext"></param>
            <param name="bindingContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.Binders.MemberBinder.GetExisting(Umbraco.Web.Models.ContentEditing.MemberSave)">
            <summary>
            Returns an IMember instance used to bind values to and save (depending on the membership scenario)
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.Binders.MemberBinder.CreateNew(Umbraco.Web.Models.ContentEditing.MemberSave)">
            <summary>
            Gets an instance of IMember used when creating a member
            </summary>
            <param name="model"></param>
            <returns></returns>
            <remarks>
            Depending on whether a custom membership provider is configured this will return different results.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.Binders.MemberBinder.FilterMembershipProviderProperties(Umbraco.Core.Models.IContentTypeBase)">
            <summary>
            This will remove all of the special membership provider properties which were required to display the property editors
            for editing - but the values have been mapped back to the MemberSave object directly - we don't want to keep these properties
            on the IMember because they will attempt to be persisted which we don't want since they might not even exist.
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="T:Umbraco.Web.Editors.Binders.ContentModelBinderHelper">
            <summary>
            Helper methods to bind media/member models
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.Binders.ContentModelBinderHelper.MapPropertyValuesFromSaved(Umbraco.Web.Models.ContentEditing.IContentProperties{Umbraco.Web.Models.ContentEditing.ContentPropertyBasic},Umbraco.Web.Models.ContentEditing.ContentPropertyCollectionDto)">
            <summary>
            we will now assign all of the values in the 'save' model to the DTO object
            </summary>
            <param name="saveModel"></param>
            <param name="dto"></param>
        </member>
        <member name="T:Umbraco.Web.Editors.Binders.ContentItemBinder">
            <summary>
            The model binder for <see cref="T:Umbraco.Web.Models.ContentEditing.ContentItemSave" />
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.Binders.ContentItemBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
            <summary>
            Creates the model from the request and binds it to the context
            </summary>
            <param name="actionContext"></param>
            <param name="bindingContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.Binders.MediaItemBinder">
            <summary>
            The model binder for <see cref="T:Umbraco.Web.Models.ContentEditing.MediaItemSave" />
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.Binders.MediaItemBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
            <summary>
            Creates the model from the request and binds it to the context
            </summary>
            <param name="actionContext"></param>
            <param name="bindingContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CodeFileController.PostCreate(System.String,Umbraco.Web.Models.ContentEditing.CodeFileDisplay)">
            <summary>
            Used to create a brand new file
            </summary>
            <param name="type">This is a string but will be 'scripts' 'partialViews', 'partialViewMacros'</param>
            <param name="display"></param>
            <returns>Will return a simple 200 if file creation succeeds</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CodeFileController.PostCreateContainer(System.String,System.String,System.String)">
            <summary>
            Used to create a container/folder in 'partialViews', 'partialViewMacros', 'scripts' or 'stylesheets'
            </summary>
            <param name="type">'partialViews', 'partialViewMacros' or 'scripts'</param>
            <param name="parentId">The virtual path of the parent.</param>
            <param name="name">The name of the container/folder</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CodeFileController.GetByPath(System.String,System.String)">
            <summary>
            Used to get a specific file from disk via the FileService
            </summary>
            <param name="type">This is a string but will be 'scripts' 'partialViews', 'partialViewMacros' or 'stylesheets'</param>
            <param name="virtualPath">The filename or URL encoded path of the file to open</param>
            <returns>The file and its contents from the virtualPath</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CodeFileController.GetSnippets(System.String)">
            <summary>
            Used to get a list of available templates/snippets to base a new Partial View or Partial View Macro from
            </summary>
            <param name="type">This is a string but will be 'partialViews', 'partialViewMacros'</param>
            <returns>Returns a list of <see cref="T:Umbraco.Web.Models.ContentEditing.SnippetDisplay"/> if a correct type is sent</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CodeFileController.GetScaffold(System.String,System.String,System.String)">
            <summary>
            Used to scaffold the json object for the editors for 'scripts', 'partialViews', 'partialViewMacros' and 'stylesheets'
            </summary>
            <param name="type">This is a string but will be 'scripts' 'partialViews', 'partialViewMacros' or 'stylesheets'</param>
            <param name="id"></param>
            <param name="snippetName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CodeFileController.Delete(System.String,System.String)">
            <summary>
            Used to delete a specific file from disk via the FileService
            </summary>
            <param name="type">This is a string but will be 'scripts' 'partialViews', 'partialViewMacros' or 'stylesheets'</param>
            <param name="virtualPath">The filename or URL encoded path of the file to delete</param>
            <returns>Will return a simple 200 if file deletion succeeds</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CodeFileController.PostSave(Umbraco.Web.Models.ContentEditing.CodeFileDisplay)">
            <summary>
            Used to create or update a 'partialview', 'partialviewmacro', 'script' or 'stylesheets' file
            </summary>
            <param name="display"></param>
            <returns>The updated CodeFileDisplay model</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CodeFileController.PostExtractStylesheetRules(Umbraco.Web.Editors.CodeFileController.StylesheetData)">
            <summary>
            Extracts "umbraco style rules" from a style sheet
            </summary>
            <param name="data">The style sheet data</param>
            <returns>The style rules</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CodeFileController.PostInterpolateStylesheetRules(Umbraco.Web.Editors.CodeFileController.StylesheetData)">
            <summary>
            Creates a style sheet from CSS and style rules
            </summary>
            <param name="data">The style sheet data</param>
            <returns>The style sheet combined from the CSS and the rules</returns>
            <remarks>
            Any "umbraco style rules" in the CSS will be removed and replaced with the rules passed in <see cref="!:data"/>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.CodeFileController.CreateOrUpdateScript(Umbraco.Web.Models.ContentEditing.CodeFileDisplay)">
            <summary>
            Create or Update a Script
            </summary>
            <param name="display"></param>
            <returns></returns>
            <remarks>
            It's important to note that Scripts are DIFFERENT from cshtml files since scripts use IFileSystem and cshtml files
            use a normal file system because they must exist on a real file system for ASP.NET to work.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.CodeFileController.CreateOrUpdatePartialView(Umbraco.Web.Models.ContentEditing.CodeFileDisplay,System.String,System.Func{System.String,Umbraco.Core.Models.IPartialView},System.Func{Umbraco.Core.Models.IPartialView,System.Int32,Umbraco.Core.Attempt{Umbraco.Core.Models.IPartialView}},System.Func{Umbraco.Core.Models.IPartialView,System.String,System.Int32,Umbraco.Core.Attempt{Umbraco.Core.Models.IPartialView}})">
            <summary>
            Helper method to take care of persisting partial views or partial view macros - so we're not duplicating the same logic
            </summary>
            <param name="display"></param>
            <param name="systemDirectory"></param>
            <param name="getView"></param>
            <param name="saveView"></param>
            <param name="createView"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.DictionaryController">
            <inheritdoc />
            <summary>
            The API controller used for editing dictionary items
            </summary>
            <remarks>
            The security for this controller is defined to allow full CRUD access to dictionary if the user has access to either:
            Dictionary
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.DictionaryController.DictionaryControllerConfigurationAttribute">
            <summary>
            Configures this controller with a custom action selector
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.DictionaryController.DeleteById(System.Int32)">
            <summary>
            Deletes a data type with a given ID
            </summary>
            <param name="id"></param>
            <returns><see cref="T:System.Net.Http.HttpResponseMessage"/></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DictionaryController.Create(System.Int32,System.String)">
            <summary>
            Creates a new dictionary item
            </summary>
            <param name="parentId">
            The parent id.
            </param>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DictionaryController.GetById(System.Int32)">
            <summary>
            Gets a dictionary item by id
            </summary>
            <param name="id">
            The id.
            </param>
            <returns>
            The <see cref="T:Umbraco.Web.Models.ContentEditing.DictionaryDisplay"/>.
            </returns>
            <exception cref="T:System.Web.Http.HttpResponseException">
             Returns a not found response when dictionary item does not exist
            </exception>
        </member>
        <member name="M:Umbraco.Web.Editors.DictionaryController.GetById(System.Guid)">
            <summary>
            Gets a dictionary item by guid
            </summary>
            <param name="id">
            The id.
            </param>
            <returns>
            The <see cref="T:Umbraco.Web.Models.ContentEditing.DictionaryDisplay"/>.
            </returns>
            <exception cref="T:System.Web.Http.HttpResponseException">
             Returns a not found response when dictionary item does not exist
            </exception>
        </member>
        <member name="M:Umbraco.Web.Editors.DictionaryController.GetById(Umbraco.Core.Udi)">
            <summary>
            Gets a dictionary item by udi
            </summary>
            <param name="id">
            The id.
            </param>
            <returns>
            The <see cref="T:Umbraco.Web.Models.ContentEditing.DictionaryDisplay"/>.
            </returns>
            <exception cref="T:System.Web.Http.HttpResponseException">
             Returns a not found response when dictionary item does not exist
            </exception>
        </member>
        <member name="M:Umbraco.Web.Editors.DictionaryController.PostSave(Umbraco.Web.Models.ContentEditing.DictionarySave)">
            <summary>
            Saves a dictionary item
            </summary>
            <param name="dictionary">
            The dictionary.
            </param>
            <returns>
            The <see cref="T:Umbraco.Web.Models.ContentEditing.DictionaryDisplay"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DictionaryController.GetList">
            <summary>
            Retrieves a list with all dictionary items
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:Umbraco.Web.Editors.EditorValidator`1">
            <summary>
            Provides a base class for <see cref="T:Umbraco.Web.Editors.IEditorValidator"/> implementations.
            </summary>
            <typeparam name="T">The validated object type.</typeparam>
        </member>
        <member name="M:Umbraco.Web.Editors.ExamineManagementController.GetIndexerDetails">
            <summary>
            Get the details for indexers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ExamineManagementController.GetSearcherDetails">
            <summary>
            Get the details for searchers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ExamineManagementController.PostCheckRebuildIndex(System.String)">
            <summary>
            Check if the index has been rebuilt
            </summary>
            <param name="indexName"></param>
            <returns></returns>
            <remarks>
            This is kind of rudimentary since there's no way we can know that the index has rebuilt, we
            have a listener for the index op complete so we'll just check if that key is no longer there in the runtime cache
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ExamineManagementController.PostRebuildIndex(System.String)">
            <summary>
            Rebuilds the index
            </summary>
            <param name="indexName"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.FromJsonPathAttribute">
             <summary>
             Used to bind a value from an inner json property
             </summary>
             <remarks>
             An example would be if you had json like:
             { ids: [1,2,3,4] }
            
             And you had an action like: GetByIds(int[] ids, UmbracoEntityTypes type)
            
             The ids array will not bind because the object being sent up is an object and not an array so the
             normal json formatter will not figure this out.
            
             This would also let you bind sub levels of the JSON being sent up too if you wanted with any jsonpath
             </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.LanguageController">
            <summary>
            Backoffice controller supporting the dashboard for language administration.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.LanguageController.GetAllCultures">
            <summary>
            Returns all cultures available for creating languages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.LanguageController.GetAllLanguages">
            <summary>
            Returns all currently configured languages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.LanguageController.DeleteLanguage(System.Int32)">
            <summary>
            Deletes a language with a given ID
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.LanguageController.SaveLanguage(Umbraco.Web.Models.ContentEditing.Language)">
            <summary>
            Creates or saves a language
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.PasswordChanger.ChangePasswordWithIdentityAsync(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.Membership.IUser,Umbraco.Web.Models.ChangingPasswordModel,Umbraco.Web.Security.BackOfficeUserManager{Umbraco.Core.Models.Identity.BackOfficeIdentityUser})">
            <summary>
            Changes the password for a user based on the many different rules and config options
            </summary>
            <param name="currentUser">The user performing the password save action</param>
            <param name="savingUser">The user who's password is being changed</param>
            <param name="passwordModel"></param>
            <param name="userMgr"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.PasswordChanger.ChangePasswordWithMembershipProvider(System.String,Umbraco.Web.Models.ChangingPasswordModel,System.Web.Security.MembershipProvider)">
            <summary>
            Changes password for a member/user given the membership provider and the password change model
            </summary>
            <param name="username">The username of the user having their password changed</param>
            <param name="passwordModel"></param>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.PreviewController.Application">
            <summary>
            Returns the JavaScript file for preview
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.PreviewController.Frame(System.Int32,System.String)">
            <summary>
            The endpoint that is loaded within the preview iframe
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.TemplateController.TemplateControllerConfigurationAttribute">
            <summary>
            Configures this controller with a custom action selector
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateController.GetByAlias(System.String)">
            <summary>
            Gets data type by alias
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateController.GetAll">
            <summary>
            Get all templates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateController.GetById(System.Int32)">
            <summary>
            Gets the template json for the template id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateController.GetById(System.Guid)">
            <summary>
            Gets the template json for the template guid
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateController.GetById(Umbraco.Core.Udi)">
            <summary>
            Gets the template json for the template udi
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateController.DeleteById(System.Int32)">
            <summary>
            Deletes a template with a given ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateController.PostSave(Umbraco.Web.Models.ContentEditing.TemplateDisplay)">
            <summary>
            Saves the data type
            </summary>
            <param name="display"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.TourController.GetToursForDoctype(System.String)">
            <summary>
            Gets a tours for a specific doctype
            </summary>
            <param name="doctypeAlias">The documenttype alias</param>
            <returns>A <see cref="T:Umbraco.Web.Models.BackOfficeTour"/></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UserEditorAuthorizationHelper.IsAuthorized(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks if the current user has access to save the user data
            </summary>
            <param name="currentUser">The current user trying to save user data</param>
            <param name="savingUser">The user instance being saved (can be null if it's a new user)</param>
            <param name="startContentIds">The start content ids of the user being saved (can be null or empty)</param>
            <param name="startMediaIds">The start media ids of the user being saved (can be null or empty)</param>
            <param name="userGroupAliases">The user aliases of the user being saved (can be null or empty)</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UserGroupsController.GetEmptyUserGroup">
            <summary>
            Returns the scaffold for creating a new user group
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UserGroupsController.GetUserGroups(System.Boolean)">
            <summary>
            Returns all user groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UserGroupsController.GetUserGroup(System.Int32)">
            <summary>
            Return a user group
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UsersController.GetCurrentUserAvatarUrls">
            <summary>
            Returns a list of the sizes of gravatar URLs for the user or null if the gravatar server cannot be reached
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UsersController.GetById(System.Int32)">
            <summary>
            Gets a user by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UsersController.GetByIds(System.Int32[])">
            <summary>
            Get users by integer ids
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UsersController.GetPagedUsers(System.Int32,System.Int32,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String[],Umbraco.Core.Models.Membership.UserState[],System.String)">
            <summary>
            Returns a paged users collection
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="userGroups"></param>
            <param name="userStates"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UsersController.PostCreateUser(Umbraco.Web.Models.ContentEditing.UserInvite)">
            <summary>
            Creates a new user
            </summary>
            <param name="userSave"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UsersController.PostInviteUser(Umbraco.Web.Models.ContentEditing.UserInvite)">
            <summary>
            Invites a user
            </summary>
            <param name="userSave"></param>
            <returns></returns>
            <remarks>
            This will email the user an invite and generate a token that will be validated in the email
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.UsersController.PostSaveUser(Umbraco.Web.Models.ContentEditing.UserSave)">
            <summary>
            Saves a user
            </summary>
            <param name="userSave"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UsersController.PostChangePassword(Umbraco.Web.Models.ChangingPasswordModel)">
            <summary>
            
            </summary>
            <param name="changingPasswordModel"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UsersController.PostDisableUsers(System.Int32[])">
            <summary>
            Disables the users with the given user ids
            </summary>
            <param name="userIds"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.UsersController.PostEnableUsers(System.Int32[])">
            <summary>
            Enables the users with the given user ids
            </summary>
            <param name="userIds"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.UsersController.PostUnlockUsers(System.Int32[])">
            <summary>
            Unlocks the users with the given user ids
            </summary>
            <param name="userIds"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.UsersController.PostDeleteNonLoggedInUser(System.Int32)">
            <summary>
            Deletes the non-logged in user provided id
            </summary>
            <param name="id">User Id</param>
            <remarks>
            Limited to users that haven't logged in to avoid issues with related records constrained
            with a foreign key on the user Id
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Editors.UsersController.PagedUserResult.UserStates">
            <summary>
            This is basically facets of UserStates key = state, value = count
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.BackOfficeNotificationsController">
            <summary>
            An abstract controller that automatically checks if any request is a non-GET and if the
            resulting message is INotificationModel in which case it will append any Event Messages
            currently in the request.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.MemberGroupController">
            <summary>
            An API controller used for dealing with member groups
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.MemberGroupController.MemberGroupControllerConfigurationAttribute">
            <summary>
            Configures this controller with a custom action selector
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberGroupController.GetById(System.Int32)">
            <summary>
            Gets the member group json for the member group id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberGroupController.GetById(System.Guid)">
            <summary>
            Gets the member group json for the member group guid
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberGroupController.GetById(Umbraco.Core.Udi)">
            <summary>
            Gets the member group json for the member group udi
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.EditorValidator">
            <summary>
            Provides a method to validate an object using <see cref="T:Umbraco.Web.Editors.IEditorValidator"/> validation.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.EditorValidator.Validate(System.Web.Http.ModelBinding.ModelStateDictionary,System.Object)">
            <summary>
            Validates an object.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.IEditorValidator">
            <summary>
            Provides a general object validator.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Editors.IEditorValidator.ModelType">
            <summary>
            Gets the object type validated by this validator.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.IEditorValidator.Validate(System.Object)">
            <summary>
            Validates an object.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.EditorModelEventManager">
            <summary>
            Used to emit events for editor models in the back office
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.EditorModelEventManager.EmitEvent(System.Web.Http.Filters.HttpActionExecutedContext,Umbraco.Web.Editors.EditorModelEventArgs)">
            <summary>
            Based on the type, emit's a specific event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.RedirectUrlManagementController.GetEnableState">
            <summary>
            Returns true/false of whether redirect tracking is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.RedirectUrlManagementController.RedirectUrlsForContentItem(System.String)">
            <summary>
            This lists the RedirectUrls for a particular content item
            Do we need to consider paging here?
            </summary>
            <param name="contentUdi">Udi of content item to retrieve RedirectUrls for</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.AuthenticationController">
            <summary>
            The API controller used for editing content
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.GetMembershipProviderConfig">
            <summary>
            Returns the configuration for the backoffice user membership provider - used to configure the change password dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.PostVerifyInvite(System.Int32,System.String)">
            <summary>
            Checks if a valid token is specified for an invited user and if so logs the user in and returns the user object
            </summary>
            <param name="id"></param>
            <param name="token"></param>
            <returns></returns>
            <remarks>
            This will also update the security stamp for the user so it can only be used once
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.IsAuthenticated">
            <summary>
            Checks if the current user's cookie is valid and if so returns OK or a 400 (BadRequest)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.GetCurrentUser">
            <summary>
            Returns the currently logged in Umbraco user
            </summary>
            <returns></returns>
            <remarks>
            We have the attribute [SetAngularAntiForgeryTokens] applied because this method is called initially to determine if the user
            is valid before the login screen is displayed. The Auth cookie can be persisted for up to a day but the csrf cookies are only session
            cookies which means that the auth cookie could be valid but the csrf cookies are no longer there, in that case we need to re-set the csrf cookies.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.GetCurrentInvitedUser">
            <summary>
            When a user is invited they are not approved but we need to resolve the partially logged on (non approved)
            user.
            </summary>
            <returns></returns>
            <remarks>
            We cannot user GetCurrentUser since that requires they are approved, this is the same as GetCurrentUser but doesn't require them to be approved
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.PostLogin(Umbraco.Web.Models.LoginModel)">
            <summary>
            Logs a user in
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.PostRequestPasswordReset(Umbraco.Web.Models.RequestPasswordResetModel)">
            <summary>
            Processes a password reset request.  Looks for a match on the provided email address
            and if found sends an email with a link to reset it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.Get2FAProviders">
            <summary>
            Used to retrieve the 2FA providers for code submission
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.PostSetPassword(Umbraco.Web.Models.SetPasswordModel)">
            <summary>
            Processes a set password request.  Validates the request and sets a new password.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.PostLogout">
            <summary>
            Logs the current user out
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.SetPrincipalAndReturnUserDetail(Umbraco.Core.Models.Membership.IUser,System.Security.Principal.IPrincipal)">
            <summary>
            This is used when the user is auth'd successfully and we need to return an OK with user details along with setting the current Principal in the request
            </summary>
            <param name="user"></param>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.ContentController">
            <summary>
            The API controller used for editing content
            </summary>
            <remarks>
            This controller is decorated with the UmbracoApplicationAuthorizeAttribute which means that any user requesting
            access to ALL of the methods on this controller will need access to the content application.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.ContentController.ContentControllerConfigurationAttribute">
            <summary>
            Configures this controller with a custom action selector
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.AllowsCultureVariation">
            <summary>
            Returns true if any content types have culture variation enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetByIds(System.Int32[])">
            <summary>
            Return content for the specified ids
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostSaveUserGroupPermissions(Umbraco.Web.Models.ContentEditing.UserGroupPermissionsSave)">
            <summary>
            Updates the permissions for a content item for a particular user group
            </summary>
            <param name="saveModel"></param>
            <returns></returns>
            <remarks>
            Permission check is done for letter 'R' which is for <see cref="T:Umbraco.Web.Actions.ActionRights"/> which the user must have access to update
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetDetailedPermissions(System.Int32)">
            <summary>
            Returns the user group permissions for user groups assigned to this node
            </summary>
            <param name="contentId"></param>
            <returns></returns>
            <remarks>
            Permission check is done for letter 'R' which is for <see cref="T:Umbraco.Web.Actions.ActionRights"/> which the user must have access to view
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetRecycleBin">
            <summary>
            Returns an item to be used to display the recycle bin for content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetById(System.Int32)">
            <summary>
            Gets the content json for the content id
            </summary>
            <param name="id"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetById(System.Guid)">
            <summary>
            Gets the content json for the content guid
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetById(Umbraco.Core.Udi)">
            <summary>
            Gets the content json for the content udi
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetEmpty(System.String,System.Int32)">
            <summary>
            Gets an empty content item for the document type.
            </summary>
            <param name="contentTypeAlias"></param>
            <param name="parentId"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetEmptyByKey(System.Guid,System.Int32)">
            <summary>
            Gets an empty content item for the document type.
            </summary>
            <param name="contentTypeKey"></param>
            <param name="parentId"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetNiceUrl(System.Int32)">
            <summary>
            Gets the Url for a given node ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetNiceUrl(System.Guid)">
            <summary>
            Gets the Url for a given node ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetNiceUrl(Umbraco.Core.Udi)">
            <summary>
            Gets the Url for a given node ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetChildren(System.Int32,System.Int32,System.Int32,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.Boolean,System.String)">
            <summary>
            Gets the children for the content id passed in
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetChildren(System.Int32,System.String,System.Int32,System.Int32,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.Boolean,System.String,System.String)">
            <summary>
            Gets the children for the content id passed in
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.CreateBlueprintFromContent(System.Int32,System.String)">
            <summary>
            Creates a blueprint from a content item
            </summary>
            <param name="contentId">The content id to copy</param>
            <param name="name">The name of the blueprint</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostSaveBlueprint(Umbraco.Web.Models.ContentEditing.ContentItemSave)">
            <summary>
            Saves content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostSave(Umbraco.Web.Models.ContentEditing.ContentItemSave)">
            <summary>
            Saves content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.ValidateCriticalData(Umbraco.Web.Models.ContentEditing.ContentItemSave,System.Int32@)">
             <summary>
             Validates critical data for persistence and updates the ModelState and result accordingly
             </summary>
             <param name="contentItem"></param>
             <param name="variantCount">Returns the total number of variants (will be one if it's an invariant content item)</param>
             <returns></returns>
             <remarks>
             For invariant, the variants collection count will be 1 and this will check if that invariant item has the critical values for persistence (i.e. Name)
            
             For variant, each variant will be checked for critical data for persistence and if it's not there then it's flags will be reset and it will not
             be persisted. However, we also need to deal with the case where all variants don't pass this check and then there is nothing to save. This also deals
             with removing the Name validation keys based on data annotations validation for items that haven't been marked to be saved.
             </remarks>
             <returns>
             returns false if persistence cannot take place, returns true if persistence can take place even if there are validation errors
             </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.SaveAndNotify(Umbraco.Web.Models.ContentEditing.ContentItemSave,System.Func{Umbraco.Core.Models.IContent,Umbraco.Core.Services.OperationResult},System.Int32,System.Collections.Generic.Dictionary{System.String,Umbraco.Web.Models.ContentEditing.SimpleNotificationModel},Umbraco.Web.Models.ContentEditing.SimpleNotificationModel,System.String,System.String,System.String,System.Boolean@)">
            <summary>
            Helper method to perform the saving of the content and add the notifications to the result
            </summary>
            <param name="contentItem"></param>
            <param name="saveMethod"></param>
            <param name="variantCount"></param>
            <param name="notifications"></param>
            <param name="globalNotifications"></param>
            <param name="invariantSavedLocalizationKey"></param>
            <param name="variantSavedLocalizationKey"></param>
            <param name="wasCancelled"></param>
            <remarks>
            Method is used for normal Saving and Scheduled Publishing
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.SaveSchedule(Umbraco.Web.Models.ContentEditing.ContentItemSave,Umbraco.Web.Models.ContentEditing.SimpleNotificationModel)">
            <summary>
            Validates the incoming schedule and update the model
            </summary>
            <param name="contentItem"></param>
            <param name="globalNotifications"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.AddSuccessNotification(System.Collections.Generic.IDictionary{System.String,Umbraco.Web.Models.ContentEditing.SimpleNotificationModel},System.String,System.String,System.String,System.String)">
            <summary>
            Used to add success notifications globally and for the culture
            </summary>
            <param name="notifications"></param>
            <param name="culture"></param>
            <param name="header"></param>
            <param name="msg"></param>
            <remarks>
            global notifications will be shown if all variant processing is successful and the save/publish dialog is closed, otherwise
            variant specific notifications are used to show success messages in the save/publish dialog.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.ValidatePublishBranchPermissions(Umbraco.Web.Models.ContentEditing.ContentItemSave,System.Collections.Generic.IReadOnlyList{Umbraco.Core.Models.Entities.IUmbracoEntity}@)">
            <summary>
            The user must have publish access to all descendant nodes of the content item in order to continue
            </summary>
            <param name="contentItem"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PublishInternal(Umbraco.Web.Models.ContentEditing.ContentItemSave,System.String,System.String,System.Boolean@,System.String[]@)">
            <summary>
            Performs the publishing operation for a content item
            </summary>
            <param name="contentItem"></param>
            <param name="wasCancelled"></param>
            <param name="successfulCultures">
            if the content is variant this will return an array of cultures that will be published (passed validation rules)
            </param>
            <remarks>
            If this is a culture variant than we need to do some validation, if it's not we'll publish as normal
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.ValidatePublishingMandatoryLanguages(System.Collections.Generic.IReadOnlyCollection{System.ValueTuple{System.String,System.String}},Umbraco.Web.Models.ContentEditing.ContentItemSave,System.Collections.Generic.IReadOnlyCollection{Umbraco.Web.Models.ContentEditing.ContentVariantSave},System.Collections.Generic.IReadOnlyList{System.String},System.Func{Umbraco.Web.Models.ContentEditing.ContentVariantSave,System.Boolean})">
            <summary>
            Validate if publishing is possible based on the mandatory language requirements
            </summary>
            <param name="variantsWithValidationErrors"></param>
            <param name="contentItem"></param>
            <param name="variants"></param>
            <param name="mandatoryCultures"></param>
            <param name="publishingCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PublishCulture(Umbraco.Core.Models.IContent,System.Collections.Generic.IEnumerable{Umbraco.Web.Models.ContentEditing.ContentVariantSave},System.String)">
            <summary>
            Call PublishCulture on the content item for each culture to get a validation result for each culture
            </summary>
            <param name="persistentContent"></param>
            <param name="cultureVariants"></param>
            <returns></returns>
            <remarks>
            This would generally never fail unless someone is tampering with the request
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.AddVariantValidationError(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a generic culture error for use in displaying the culture validation error in the save/publish/etc... dialogs
            </summary>
            <param name="culture">Culture to assign the error to</param>
            <param name="segment">Segment to assign the error to</param>
            <param name="localizationKey"></param>
            <param name="cultureToken">
            The culture used in the localization message, null by default which means <see cref="!:culture"/> will be used.
            </param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetVariantName(System.String,System.String)">
            <summary>
            Creates the human readable variant name based on culture and segment
            </summary>
            <param name="culture">Culture</param>
            <param name="segment">Segment</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostPublishById(System.Int32)">
             <summary>
             Publishes a document with a given ID
             </summary>
             <param name="id"></param>
             <returns></returns>
             <remarks>
             The EnsureUserPermissionForContent attribute will deny access to this method if the current user
             does not have Publish access to this node.
             </remarks>
            
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.DeleteById(System.Int32)">
            <summary>
            Moves an item to the recycle bin, if it is already there then it will permanently delete it
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            The CanAccessContentAuthorize attribute will deny access to this method if the current user
            does not have Delete access to this node.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.EmptyRecycleBin">
            <summary>
            Empties the recycle bin
            </summary>
            <returns></returns>
            <remarks>
            attributed with EnsureUserPermissionForContent to verify the user has access to the recycle bin
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostSort(Umbraco.Web.Models.ContentEditing.ContentSortOrder)">
            <summary>
            Change the sort order for content
            </summary>
            <param name="sorted"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostMove(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Change the sort order for media
            </summary>
            <param name="move"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostCopy(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Copies a content item and places the copy as a child of a given parent Id
            </summary>
            <param name="copy"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostUnpublish(Umbraco.Web.Models.ContentEditing.UnpublishContent)">
            <summary>
            Unpublishes a node with a given Id and returns the unpublished entity
            </summary>
            <param name="model">The content and variants to unpublish</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.HandleInvalidModelState(Umbraco.Web.Models.ContentEditing.ContentItemDisplay,System.String)">
            <summary>
            Ensure there is culture specific errors in the result if any errors are for culture properties
            and we're dealing with variant content, then call the base class HandleInvalidModelState
            </summary>
            <param name="display"></param>
            <remarks>
            This is required to wire up the validation in the save/publish dialog
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.MapValuesForPersistence(Umbraco.Web.Models.ContentEditing.ContentItemSave)">
            <summary>
            Maps the dto property values and names to the persisted model
            </summary>
            <param name="contentSave"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.ValidateMoveOrCopy(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Ensures the item can be moved/copied to the new location
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.AddMessageForPublishStatus(System.Collections.Generic.IReadOnlyCollection{Umbraco.Core.Services.PublishResult},Umbraco.Web.Models.ContentEditing.INotificationModel,System.String[])">
            <summary>
            Adds notification messages to the outbound display model for a given published status
            </summary>
            <param name="statuses"></param>
            <param name="display"></param>
            <param name="successfulCultures">
            This is null when dealing with invariant content, else it's the cultures that were successfully published
            </param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.MapToDisplay(Umbraco.Core.Models.IContent)">
            <summary>
            Used to map an <see cref="T:Umbraco.Core.Models.IContent"/> instance to a <see cref="T:Umbraco.Web.Models.ContentEditing.ContentItemDisplay"/> and ensuring a language is present if required
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.ContentTypeControllerBase`1">
            <summary>
            Am abstract API controller providing functionality used for dealing with content and media types
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeControllerBase`1.PerformGetAvailableCompositeContentTypes(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes,System.String[],System.String[],System.Boolean)">
            <summary>
            Returns the available composite content types for a given content type
            </summary>
            <param name="type"></param>
            <param name="filterContentTypes">
            This is normally an empty list but if additional content type aliases are passed in, any content types containing those aliases will be filtered out
            along with any content types that have matching property types that are included in the filtered content types
            </param>
            <param name="filterPropertyTypes">
            This is normally an empty list but if additional property type aliases are passed in, any content types that have these aliases will be filtered out.
            This is required because in the case of creating/modifying a content type because new property types being added to it are not yet persisted so cannot
            be looked up via the db, they need to be passed in.
            </param>
            <param name="contentTypeId"></param>
            <param name="isElement">Wether the composite content types should be applicable for an element type</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeControllerBase`1.PerformGetWhereCompositionIsUsedInContentTypes(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Returns a list of content types where a particular composition content type is used
            </summary>
            <param name="type">Type of content Type, eg documentType or mediaType</param>
            <param name="contentTypeId">Id of composition content type</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeControllerBase`1.PerformMove(Umbraco.Web.Models.ContentEditing.MoveOrCopy,System.Func{System.Int32,`0},System.Func{`0,System.Int32,Umbraco.Core.Attempt{Umbraco.Core.Services.OperationResult{Umbraco.Core.Services.MoveOperationStatusType}}})">
            <summary>
            Move
            </summary>
            <param name="move"></param>
            <param name="getContentType"></param>
            <param name="doMove"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeControllerBase`1.PerformCopy(Umbraco.Web.Models.ContentEditing.MoveOrCopy,System.Func{System.Int32,`0},System.Func{`0,System.Int32,Umbraco.Core.Attempt{Umbraco.Core.Services.OperationResult{Umbraco.Core.Services.MoveOperationStatusType,`0}}})">
            <summary>
            Move
            </summary>
            <param name="move"></param>
            <param name="getContentType"></param>
            <param name="doCopy"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeControllerBase`1.CreateCompositionValidationExceptionIfInvalid``3(``0,`0)">
            <summary>
            Validates the composition and adds errors to the model state if any are found then throws an error response if there are errors
            </summary>
            <param name="contentTypeSave"></param>
            <param name="composition"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeControllerBase`1.AddCompositionValidationErrors``2(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds errors to the model state if any invalid aliases are found then throws an error response if there are errors
            </summary>
            <param name="contentTypeSave"></param>
            <param name="invalidPropertyAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeControllerBase`1.CreateInvalidCompositionResponseException``3(System.Exception,``1,`0,System.Int32)">
            <summary>
            If the exception is an InvalidCompositionException create a response exception to be thrown for validation errors
            </summary>
            <typeparam name="TContentTypeDisplay"></typeparam>
            <typeparam name="TContentTypeSave"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="ex"></param>
            <param name="contentTypeSave"></param>
            <param name="ct"></param>
            <param name="ctId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeControllerBase`1.CreateModelStateValidationException``2(System.Int32,``0,`0)">
            <summary>
            Used to throw the ModelState validation results when the ModelState is invalid
            </summary>
            <typeparam name="TContentTypeDisplay"></typeparam>
            <typeparam name="TContentTypeSave"></typeparam>
            <param name="ctId"></param>
            <param name="contentTypeSave"></param>
            <param name="ct"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.DashboardController.#ctor(Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.Persistence.ISqlContext,Umbraco.Core.Services.ServiceContext,Umbraco.Core.Cache.AppCaches,Umbraco.Core.Logging.IProfilingLogger,Umbraco.Core.IRuntimeState,Umbraco.Web.Services.IDashboardService,Umbraco.Web.UmbracoHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Editors.DashboardController"/> with all its dependencies.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.DataTypeController">
            <summary>
            The API controller used for editing data types
            </summary>
            <remarks>
            The security for this controller is defined to allow full CRUD access to data types if the user has access to either:
            Content Types, Member Types or Media Types ... and of course to Data Types
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.DataTypeController.DataTypeControllerConfigurationAttribute">
            <summary>
            Configures this controller with a custom action selector
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetByName(System.String)">
            <summary>
            Gets data type by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetById(System.Int32)">
            <summary>
            Gets the datatype json for the datatype id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetById(System.Guid)">
            <summary>
            Gets the datatype json for the datatype guid
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetById(Umbraco.Core.Udi)">
            <summary>
            Gets the datatype json for the datatype udi
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.DeleteById(System.Int32)">
            <summary>
            Deletes a data type with a given ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetCustomListView(System.String)">
            <summary>
            Returns a custom listview, based on a content type alias, if found
            </summary>
            <param name="contentTypeAlias"></param>
            <returns>a DataTypeDisplay</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.PostCreateCustomListView(System.String)">
            <summary>
            Creates a custom list view - give a document type alias
            </summary>
            <param name="contentTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetPreValues(System.String,System.Int32)">
            <summary>
            Returns the pre-values for the specified property editor
            </summary>
            <param name="editorAlias"></param>
            <param name="dataTypeId">The data type id for the pre-values, -1 if it is a new data type</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.DeleteContainer(System.Int32)">
            <summary>
            Deletes a data type container with a given ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.PostSave(Umbraco.Web.Models.ContentEditing.DataTypeSave)">
            <summary>
            Saves the data type
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.PostMove(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Move the media type
            </summary>
            <param name="move"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetReferences(System.Int32)">
            <summary>
            Returns the references (usages) for the data type
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetContentTypeUsages(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContentTypeBase},System.Collections.Generic.IReadOnlyDictionary{System.Guid,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Maps the found content types and usages to the resulting model
            </summary>
            <param name="cts"></param>
            <param name="usages"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetAll">
            <summary>
            Gets the content json for all data types
            </summary>
            <returns></returns>
            <remarks>
            Permission is granted to this method if the user has access to any of these sections: Content, media, settings, developer, members
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetGroupedDataTypes">
            <summary>
            Returns all data types grouped by their property editor group
            </summary>
            <returns></returns>
            <remarks>
            Permission is granted to this method if the user has access to any of these sections: Content, media, settings, developer, members
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetGroupedPropertyEditors">
            <summary>
            Returns all property editors grouped
            </summary>
            <returns></returns>
            <remarks>
            Permission is granted to this method if the user has access to any of these sections: Content, media, settings, developer, members
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetAllPropertyEditors">
            <summary>
            Gets all property editors defined
            </summary>
            <returns></returns>
            <remarks>
            Permission is granted to this method if the user has access to any of these sections: Content, media, settings, developer, members
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.DataTypeValidateAttribute">
            <summary>
            An action filter that wires up the persisted entity of the DataTypeSave model and validates the whole request
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeValidateAttribute.#ctor(Umbraco.Core.Services.IDataTypeService,Umbraco.Core.PropertyEditors.PropertyEditorCollection)">
            <summary>
            For use in unit tests. Not possible to use as attribute ctor.
            </summary>
            <param name="dataTypeService"></param>
            <param name="propertyEditors"></param>
        </member>
        <member name="T:Umbraco.Web.Editors.ImagesController">
            <summary>
            A controller used to return images for media
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ImagesController.GetBigThumbnail(System.String)">
            <summary>
            Gets the big thumbnail image for the original image path
            </summary>
            <param name="originalImagePath"></param>
            <returns></returns>
            <remarks>
            If there is no original image is found then this will return not found.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ImagesController.GetResized(System.String,System.Int32)">
            <summary>
            Gets a resized image for the image at the given path
            </summary>
            <param name="imagePath"></param>
            <param name="width"></param>
            <returns></returns>
            <remarks>
            If there is no media, image property or image file is found then this will return not found.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.PackageInstallController">
            <summary>
            A controller used for installing packages and managing all of the data in the packages section in the back office
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Web.Editors.PackageInstallController.ValidateInstalled(System.String,System.String)" -->
        <member name="M:Umbraco.Web.Editors.PackageInstallController.Fetch(System.String)">
            <summary>
            Gets the package from Our to install
            </summary>
            <param name="packageGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.PackageInstallController.Import(Umbraco.Web.Models.PackageInstallModel)">
            <summary>
            Extracts the package zip and gets the packages information
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.PackageInstallController.InstallFiles(Umbraco.Web.Models.PackageInstallModel)">
            <summary>
            Installs the package files
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.PackageInstallController.InstallData(Umbraco.Web.Models.PackageInstallModel)">
            <summary>
            Installs the packages data/business logic
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.PackageInstallController.CleanUp(Umbraco.Web.Models.PackageInstallModel)">
            <summary>
            Cleans up the package installation
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.TemplateQueryController">
            <summary>
            The API controller used for building content queries within the template
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateQueryController.GetContentTypes">
            <summary>
            Gets a list of all content types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateQueryController.GetAllowedProperties">
            <summary>
            Returns a collection of allowed properties.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateQueryController.GetFilterConditions">
            <summary>
            Returns a collection of constraint conditions that can be used in the query
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.LogController">
            <summary>
            The API controller used for getting log history
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.MacroRenderingController">
            <summary>
            API controller to deal with Macro data
            </summary>
            <remarks>
            Note that this implements IRequiresSessionState which will enable HttpContext.Session - generally speaking we don't normally
            enable this for webapi controllers, however since this controller is used to render macro content and macros can access
            Session, we don't want it to throw null reference exceptions.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.MacroRenderingController.GetMacroParameters(System.Int32)">
            <summary>
            Gets the macro parameters to be filled in for a particular macro
            </summary>
            <returns></returns>
            <remarks>
            Note that ALL logged in users have access to this method because editors will need to insert macros into rte (content/media/members) and it's used for
            inserting into templates/views/etc... it doesn't expose any sensitive data.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Web.Editors.MacroRenderingController.GetMacroResultAsHtmlForEditor(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})" -->
        <member name="M:Umbraco.Web.Editors.MacroRenderingController.GetMacroResultAsHtmlForEditor(Umbraco.Web.Editors.MacroRenderingController.MacroParameterModel)">
            <summary>
            Gets a rendered macro as HTML for rendering in the rich text editor.
            Using HTTP POST instead of GET allows for more parameters to be passed as it's not dependent on URL-length limitations like GET.
            The method using GET is kept to maintain backwards compatibility
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.MemberTypeController">
            <summary>
            An API controller used for dealing with member types
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.MemberTypeController.MemberTypeControllerConfigurationAttribute">
            <summary>
            Configures this controller with a custom action selector
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberTypeController.GetById(System.Int32)">
            <summary>
            Gets the member type a given id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberTypeController.GetById(System.Guid)">
            <summary>
            Gets the member type a given guid
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberTypeController.GetById(Umbraco.Core.Udi)">
            <summary>
            Gets the member type a given udi
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberTypeController.DeleteById(System.Int32)">
            <summary>
            Deletes a document type with a given id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberTypeController.GetAvailableCompositeMemberTypes(System.Int32,System.String[],System.String[])">
            <summary>
            Returns the available compositions for this content type
            </summary>
            <param name="contentTypeId"></param>
            <param name="filterContentTypes">
            This is normally an empty list but if additional content type aliases are passed in, any content types containing those aliases will be filtered out
            along with any content types that have matching property types that are included in the filtered content types
            </param>
            <param name="filterPropertyTypes">
            This is normally an empty list but if additional property type aliases are passed in, any content types that have these aliases will be filtered out.
            This is required because in the case of creating/modifying a content type because new property types being added to it are not yet persisted so cannot
            be looked up via the db, they need to be passed in.
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberTypeController.GetAllTypes">
            <summary>
            Returns all member types
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.UpdateCheckController.UpdateCheckResponseFilter">
            <summary>
            Adds the cookie response if it was successful
            </summary>
            <remarks>
            A filter is required because we are returning an object from the get method and not an HttpResponseMessage
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.StylesheetController">
            <summary>
            The API controller used for retrieving available stylesheets
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.EntityController">
            <summary>
            The API controller used for getting entity objects, basic name, icon, id representation of umbraco objects that are based on CMSNode
            </summary>
            <remarks>
            <para>
            This controller allows resolving basic entity data for various entities without placing the hard restrictions on users that may not have access
            to the sections these entities entities exist in. This is to allow pickers, etc... of data to work for all users. In some cases such as accessing
            Members, more explicit security checks are done.
            </para>
            <para>Some objects such as macros are not based on CMSNode</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.EntityController.EntityControllerConfigurationAttribute">
            <summary>
            Configures this controller with a custom action selector
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetSafeAlias(System.String,System.Boolean)">
            <summary>
            Returns an Umbraco alias given a string
            </summary>
            <param name="value"></param>
            <param name="camelCase"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.Search(System.String,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes,System.String,System.Nullable{System.Guid})">
            <summary>
            Searches for results based on the entity type
            </summary>
            <param name="query"></param>
            <param name="type"></param>
            <param name="searchFrom">
            A starting point for the search, generally a node id, but for members this is a member type alias
            </param>
            <param name="dataTypeKey">If set used to look up whether user and group start node permissions will be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.SearchAll(System.String)">
             <summary>
             Searches for all content that the user is allowed to see (based on their allowed sections)
             </summary>
             <param name="query"></param>
             <returns></returns>
             <remarks>
             Even though a normal entity search will allow any user to search on a entity type that they may not have access to edit, we need
             to filter these results to the sections they are allowed to edit since this search function is explicitly for the global search
             so if we showed entities that they weren't allowed to edit they would get errors when clicking on the result.
            
             The reason a user is allowed to search individual entity types that they are not allowed to edit is because those search
             methods might be used in things like pickers in the content editor.
             </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetPath(System.Int32,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Gets the path for a given node ID
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetPath(System.Guid,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Gets the path for a given node ID
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetPath(Umbraco.Core.Udi,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Gets the path for a given node ID
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetUrl(Umbraco.Core.Udi,System.String)">
            <summary>
            Gets the URL of an entity
            </summary>
            <param name="udi">UDI of the entity to fetch URL for</param>
            <param name="culture">The culture to fetch the URL for</param>
            <returns>The URL or path to the item</returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetUrl(System.Int32,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes,System.String)">
            <summary>
            Gets the URL of an entity
            </summary>
            <param name="id">Int id of the entity to fetch URL for</param>
            <param name="type">The type of entity such as Document, Media, Member</param>
            <param name="culture">The culture to fetch the URL for</param>
            <returns>The URL or path to the item</returns>
            <remarks>
            We are not restricting this with security because there is no sensitive data
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetByQuery(System.String,System.Int32,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Gets an entity by a xpath query
            </summary>
            <param name="query"></param>
            <param name="nodeContextId"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetById(System.Int32,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Gets an entity by it's id
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetById(System.Guid,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Gets an entity by it's key
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetById(Umbraco.Core.Udi,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Gets an entity by it's UDI
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetByIds(System.Int32[],Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Get entities by integer ids
            </summary>
            <param name="ids"></param>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            We allow for POST because there could be quite a lot of Ids
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetByIds(System.Guid[],Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Get entities by GUID ids
            </summary>
            <param name="ids"></param>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            We allow for POST because there could be quite a lot of Ids
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetByIds(Umbraco.Core.Udi[],Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Get entities by UDIs
            </summary>
            <param name="ids">
            A list of UDIs to lookup items by, all UDIs must be of the same UDI type!
            </param>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            We allow for POST because there could be quite a lot of Ids.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetPagedChildren(System.String,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes,System.Int32,System.Int32,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String,System.Nullable{System.Guid})">
            <summary>
            Get paged child entities by id
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetPagedChildren(System.Int32,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes,System.Int32,System.Int32,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String,System.Nullable{System.Guid})">
            <summary>
            Get paged child entities by id
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.ExamineSearch(System.String,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes,System.String,System.Boolean)">
            <summary>
            Searches for results based on the entity type
            </summary>
            <param name="query"></param>
            <param name="entityType"></param>
            <param name="searchFrom"></param>
            <param name="ignoreUserStartNodes">If set to true, user and group start node permissions will be ignored.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Web.Editors.EntityController.GetAll(Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes,System.String)" -->
        <member name="M:Umbraco.Web.Editors.EntityController.GetResultForAll(Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes,System.String)">
            <summary>
            Gets the result for the entity list based on the type
            </summary>
            <param name="entityType"></param>
            <param name="postFilter">A string where filter that will filter the results dynamically with linq - optional</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.MemberController">
            <remarks>
            This controller is decorated with the UmbracoApplicationAuthorizeAttribute which means that any user requesting
            access to ALL of the methods on this controller will need access to the member application.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Editors.MemberController.MembershipScenario">
            <summary>
            Returns the currently configured membership scenario for members in umbraco
            </summary>
            <value></value>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.GetListNodeDisplay(System.String)">
            <summary>
            Returns a display node with a list view to render members
            </summary>
            <param name="listName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.GetByKey(System.Guid)">
            <summary>
            Gets the content json for the member
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.GetEmpty(System.String)">
            <summary>
            Gets an empty content item for the
            </summary>
            <param name="contentTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.PostSave(Umbraco.Web.Models.ContentEditing.MemberSave)">
            <summary>
            Saves member
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.MapPropertyValues(Umbraco.Web.Models.ContentEditing.MemberSave)">
            <summary>
            Maps the property values to the persisted entity
            </summary>
            <param name="contentItem"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.UpdateWithMembershipProvider(Umbraco.Web.Models.ContentEditing.MemberSave)">
            <summary>
            Update the membership user using the membership provider (for things like email, etc...)
            If a password change is detected then we'll try that too.
            </summary>
            <param name="contentItem"></param>
            <returns>
            If the password has been reset then this method will return the reset/generated password, otherwise will return null.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.RefetchMemberData(Umbraco.Web.Models.ContentEditing.MemberSave,Umbraco.Web.Editors.MemberController.LookupType)">
            <summary>
            Re-fetches the database data to map to the PersistedContent object and re-assigns the already mapped the posted properties so that the display object is up-to-date
            </summary>
            <param name="contentItem"></param>
            <param name="lookup"></param>
            <remarks>
            This is done during an update if the membership provider has changed some underlying data - we need to ensure that our model is consistent with that data
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.RestoreProvidedUserName(Umbraco.Web.Models.ContentEditing.MemberSave,System.String)">
            <summary>
            Following a refresh of member data called during an update if the membership provider has changed some underlying data,
            we don't want to lose the provided, and potentially changed, username
            </summary>
            <param name="contentItem"></param>
            <param name="providedUserName"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.CreateWithMembershipProvider(Umbraco.Web.Models.ContentEditing.MemberSave,System.Web.Security.MembershipCreateStatus@)">
             <summary>
             This is going to create the user with the membership provider and check for validation
             </summary>
             <param name="contentItem"></param>
             <param name="status"></param>
             <returns></returns>
             <remarks>
             Depending on if the Umbraco membership provider is active or not, the process differs slightly:
            
             * If the umbraco membership provider is used - we create the membership user first with the membership provider, since
                 it's the umbraco membership provider, this writes to the umbraco tables. When that is complete we re-fetch the IMember
                 model data from the db. In this case we don't care what the provider user key is.
             * If we're using a non-umbraco membership provider - we check if there is a 'Member' member type - if so
                 we create an empty IMember instance first (of type 'Member'), this gives us a unique ID (GUID)
                 that we then use to create the member in the custom membership provider. This acts as the link between Umbraco data and
                 the custom membership provider data. This gives us the ability to eventually have custom membership properties but still use
                 a custom membership provider. If there is no 'Member' member type, then we will simply just create the membership provider member
                 with no link to our data.
            
             If this is successful, it will go and re-fetch the IMember from the db because it will now have an ID because the Umbraco provider
             uses the umbraco data store - then of course we need to re-map it to the saved property values.
             </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.DeleteByKey(System.Guid)">
             <summary>
             Permanently deletes a member
             </summary>
             <param name="key"></param>
             <returns></returns>
            
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.ExportMemberData(System.Guid)">
            <summary>
            Exports member data based on their unique Id
            </summary>
            <param name="key">The unique <see cref="T:System.Guid">member identifier</see></param>
            <returns><see cref="T:System.Net.Http.HttpResponseMessage"/></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.CurrentUserController">
            <summary>
            Controller to back the User.Resource service, used for fetching user data when already authenticated. user.service is currently used for handling authentication
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.CurrentUserController.GetPermissions(System.Int32[])">
            <summary>
            Returns permissions for all nodes passed in for the current user
            </summary>
            <param name="nodeIds"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CurrentUserController.HasPermission(System.String,System.Int32)">
            <summary>
            Checks a nodes permission for the current user
            </summary>
            <param name="permissionToCheck"></param>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CurrentUserController.PostSetUserTour(Umbraco.Web.Models.UserTourStatus)">
            <summary>
            Saves a tour status for the current user
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CurrentUserController.GetUserTours">
            <summary>
            Returns the user's tours
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CurrentUserController.PostSetInvitedUserPassword(System.String)">
            <summary>
            When a user is invited and they click on the invitation link, they will be partially logged in
            where they can set their username/password
            </summary>
            <param name="newPassword"></param>
            <returns></returns>
            <remarks>
            This only works when the user is logged in (partially)
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.CurrentUserController.PostChangePassword(Umbraco.Web.Models.ChangingPasswordModel)">
            <summary>
            Changes the users password
            </summary>
            <param name="data"></param>
            <returns>
            If the password is being reset it will return the newly reset password, otherwise will return an empty value
            </returns>
        </member>
        <member name="T:Umbraco.Web.Editors.ContentControllerBase">
            <summary>
            An abstract base controller used for media/content/members to try to reduce code replication.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentControllerBase.MapPropertyValuesForPersistence``2(``1,Umbraco.Web.Models.ContentEditing.ContentPropertyCollectionDto,System.Func{``1,Umbraco.Core.Models.Property,System.Object},System.Action{``1,Umbraco.Core.Models.Property,System.Object},System.String)">
            <summary>
            Maps the dto property values to the persisted model
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentControllerBase.GetObjectFromRequest``1(System.Func{``0})">
            <summary>
            A helper method to attempt to get the instance from the request storage if it can be found there,
            otherwise gets it from the callback specified
            </summary>
            <typeparam name="TPersisted"></typeparam>
            <param name="getFromService"></param>
            <returns></returns>
            <remarks>
            This is useful for when filters have already looked up a persisted entity and we don't want to have
            to look it up again.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentControllerBase.IsCreatingAction(Umbraco.Web.Models.ContentEditing.ContentSaveAction)">
            <summary>
            Returns true if the action passed in means we need to create something new
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.ContentTypeController">
            <summary>
            An API controller used for dealing with content types
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.ContentTypeController.ContentTypeControllerConfigurationAttribute">
            <summary>
            Configures this controller with a custom action selector
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.GetById(System.Int32)">
            <summary>
            Gets the document type a given id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.GetById(System.Guid)">
            <summary>
            Gets the document type a given guid
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.GetById(Umbraco.Core.Udi)">
            <summary>
            Gets the document type a given udi
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.DeleteById(System.Int32)">
            <summary>
            Deletes a document type with a given ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.GetAllPropertyTypeAliases">
            <summary>
            Gets all user defined properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.GetAllStandardFields">
            <summary>
            Gets all the standard fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.GetAvailableCompositeContentTypes(Umbraco.Web.Models.ContentEditing.GetAvailableCompositionsFilter)">
            <summary>
            Returns the available compositions for this content type
            This has been wrapped in a dto instead of simple parameters to support having multiple parameters in post request body
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.GetWhereCompositionIsUsedInContentTypes(Umbraco.Web.Models.ContentEditing.GetAvailableCompositionsFilter)">
            <summary>
            Returns where a particular composition has been used
            This has been wrapped in a dto instead of simple parameters to support having multiple parameters in post request body
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.DeleteContainer(System.Int32)">
            <summary>
            Deletes a document type container with a given ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.GetEmpty(System.Int32)">
            <summary>
            Returns an empty content type for use as a scaffold when creating a new type
            </summary>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.GetAll">
            <summary>
            Returns all content type objects
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.GetAllowedChildren(System.Int32)">
            <summary>
            Returns the allowed child content type objects for the content item id passed in
            </summary>
            <param name="contentId"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.PostMove(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Move the content type
            </summary>
            <param name="move"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.PostCopy(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Copy the content type
            </summary>
            <param name="copy"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.MediaTypeController">
            <summary>
            An API controller used for dealing with content types
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.MediaTypeController.MediaTypeControllerControllerConfigurationAttribute">
            <summary>
            Configures this controller with a custom action selector
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.GetById(System.Int32)">
            <summary>
            Gets the media type a given id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.GetById(System.Guid)">
            <summary>
            Gets the media type a given guid
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.GetById(Umbraco.Core.Udi)">
            <summary>
            Gets the media type a given udi
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.DeleteById(System.Int32)">
            <summary>
            Deletes a media type with a given id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.GetAvailableCompositeMediaTypes(Umbraco.Web.Models.ContentEditing.GetAvailableCompositionsFilter)">
            <summary>
            Returns the available compositions for this content type
            This has been wrapped in a dto instead of simple parameters to support having multiple parameters in post request body
            </summary>
            <param name="filter.contentTypeId.contentTypeId"></param>
            <param name="filter.ContentTypes.ContentTypes">
            This is normally an empty list but if additional content type aliases are passed in, any content types containing those aliases will be filtered out
            along with any content types that have matching property types that are included in the filtered content types
            </param>
            <param name="filter.PropertyTypes.PropertyTypes">
            This is normally an empty list but if additional property type aliases are passed in, any content types that have these aliases will be filtered out.
            This is required because in the case of creating/modifying a content type because new property types being added to it are not yet persisted so cannot
            be looked up via the db, they need to be passed in.
            </param>
            <param name="filter">
            Filter applied when resolving compositions</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.GetWhereCompositionIsUsedInContentTypes(Umbraco.Web.Models.ContentEditing.GetAvailableCompositionsFilter)">
            <summary>
            Returns where a particular composition has been used
            This has been wrapped in a dto instead of simple parameters to support having multiple parameters in post request body
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.GetAll">
            <summary>
            Returns all media types
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.DeleteContainer(System.Int32)">
            <summary>
            Deletes a media type container with a given ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.GetAllowedChildren(System.Int32)">
            <summary>
            Returns the allowed child content type objects for the content item id passed in - based on an INT id
            </summary>
            <param name="contentId"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.GetAllowedChildren(System.Guid)">
            <summary>
            Returns the allowed child content type objects for the content item id passed in - based on a GUID id
            </summary>
            <param name="contentId"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.GetAllowedChildren(Umbraco.Core.Udi)">
            <summary>
            Returns the allowed child content type objects for the content item id passed in - based on a UDI id
            </summary>
            <param name="contentId"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.PostMove(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Move the media type
            </summary>
            <param name="move"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.PostCopy(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Copy the media type
            </summary>
            <param name="copy"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.SectionController">
            <summary>
            The API controller used for using the list of sections
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.SectionController.GetRoutePathForFirstTree(Umbraco.Web.Models.Trees.TreeRootNode)">
            <summary>
            Returns the first non root/group node's route path
            </summary>
            <param name="rootNode"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.SectionController.GetAllSections">
            <summary>
            Returns all the sections that the user has access to
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.UmbracoAuthorizedJsonController">
            <summary>
            An abstract API controller that only supports JSON and all requests must contain the correct csrf header
            </summary>
            <remarks>
            Inheriting from this controller means that ALL of your methods are JSON methods that are called by Angular,
            methods that are not called by Angular or don't contain a valid csrf header will NOT work.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.BackOfficeController">
            <summary>
            Represents a controller user to render out the default back office view and JS results.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.Default">
            <summary>
            Render the default view
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.AuthorizeUpgrade">
            <summary>
            This Action is used by the installer when an upgrade is detected but the admin user is not logged in. We need to
            ensure the user is authenticated before the install takes place so we redirect here to show the standard login screen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.LocalizedText(System.String)">
            <summary>
            Get the json localized text for a given culture or the culture for the current user
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.Application">
            <summary>
            Returns the JavaScript main file including all references found in manifests
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.GetManifestAssetList">
            <summary>
            Returns a js array of all of the manifest assets
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.ServerVariables">
            <summary>
            Returns the JavaScript object representing the static server variables javascript object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.RenderDefaultOrProcessExternalLoginAsync(System.Func{System.Web.Mvc.ActionResult},System.Func{System.Web.Mvc.ActionResult})">
            <summary>
            Used by Default and AuthorizeUpgrade to render as per normal if there's no external login info,
            otherwise process the external login info.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.MediaController">
            <remarks>
            This controller is decorated with the UmbracoApplicationAuthorizeAttribute which means that any user requesting
            access to ALL of the methods on this controller will need access to the media application.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.MediaController.MediaControllerControllerConfigurationAttribute">
            <summary>
            Configures this controller with a custom action selector
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetEmpty(System.String,System.Int32)">
            <summary>
            Gets an empty content item for the
            </summary>
            <param name="contentTypeAlias"></param>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetRecycleBin">
            <summary>
            Returns an item to be used to display the recycle bin for media
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetById(System.Int32)">
            <summary>
            Gets the media item by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetById(System.Guid)">
            <summary>
            Gets the media item by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetById(Umbraco.Core.Udi)">
            <summary>
            Gets the media item by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetByIds(System.Int32[])">
            <summary>
            Return media for the specified ids
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetChildFolders(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a paged result of media items known to be of a "Folder" type
            </summary>
            <param name="id"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetRootMedia">
            <summary>
            Returns the root media objects
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetChildren(System.Int32,System.Int32,System.Int32,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.Boolean,System.String)">
            <summary>
            Returns the child media objects - using the entity INT id
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetChildren(System.Guid,System.Int32,System.Int32,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.Boolean,System.String)">
            <summary>
            Returns the child media objects - using the entity GUID id
            </summary>
            <param name="id"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="orderBySystemField"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetChildren(Umbraco.Core.Udi,System.Int32,System.Int32,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.Boolean,System.String)">
            <summary>
            Returns the child media objects - using the entity UDI id
            </summary>
            <param name="id"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="orderBySystemField"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.DeleteById(System.Int32)">
            <summary>
            Moves an item to the recycle bin, if it is already there then it will permanently delete it
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.PostMove(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Change the sort order for media
            </summary>
            <param name="move"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.PostSave(Umbraco.Web.Models.ContentEditing.MediaItemSave)">
            <summary>
            Saves content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.EmptyRecycleBin">
            <summary>
            Empties the recycle bin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.PostSort(Umbraco.Web.Models.ContentEditing.ContentSortOrder)">
            <summary>
            Change the sort order for media
            </summary>
            <param name="sorted"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.PostAddFile">
            <summary>
            Used to submit a media file
            </summary>
            <returns></returns>
            <remarks>
            We cannot validate this request with attributes (nicely) due to the nature of the multi-part for data.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetParentIdAsInt(System.String,System.Boolean)">
            <summary>
            Given a parent id which could be a GUID, UDI or an INT, this will resolve the INT
            </summary>
            <param name="parentId"></param>
            <param name="validatePermissions">
            If true, this will check if the current user has access to the resolved integer parent id
            and if that check fails an unauthorized exception will occur
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.ValidateMoveOrCopy(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Ensures the item can be moved/copied to the new location
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.CheckPermissions(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Services.IMediaService,Umbraco.Core.Services.IEntityService,System.Int32,Umbraco.Core.Models.IMedia)">
            <summary>
            Performs a permissions check for the user to check if it has access to the node based on
            start node and/or permissions for the node
            </summary>
            <param name="storage">The storage to add the content item to so it can be reused</param>
            <param name="user"></param>
            <param name="mediaService"></param>
            <param name="entityService"></param>
            <param name="nodeId">The content to lookup, if the contentItem is not specified</param>
            <param name="media">Specifies the already resolved content item to check against, setting this ignores the nodeId</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Data.DatabaseIntegrityCheck.GetStatus">
            <summary>
            Get the status for this health check
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Security.BaseHttpHeaderCheck.GetStatus">
            <summary>
            Get the status for this health check
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Security.BaseHttpHeaderCheck.ExecuteAction(Umbraco.Web.HealthCheck.HealthCheckAction)">
            <summary>
            Executes the action and returns it's status
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Security.ExcessiveHeadersCheck.GetStatus">
            <summary>
            Get the status for this health check
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Security.ExcessiveHeadersCheck.ExecuteAction(Umbraco.Web.HealthCheck.HealthCheckAction)">
            <summary>
            Executes the action and returns it's status
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Security.HttpsCheck.GetStatus">
            <summary>
            Get the status for this health check
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Security.HttpsCheck.ExecuteAction(Umbraco.Web.HealthCheck.HealthCheckAction)">
            <summary>
            Executes the action and returns it's status
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.FilePath">
            <summary>
            Gets the config file path.
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.XPath">
            <summary>
            Gets XPath statement to the config element to check.
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.Values">
            <summary>
            Gets the values to compare against.
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.CurrentValue">
            <summary>
            Gets the current value
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.ProvidedValue">
            <summary>
            Gets the provided value
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.ValueComparisonType">
            <summary>
            Gets the comparison type for checking the value.
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.ValidIfConfigMissing">
            <summary>
            Gets the flag indicating if the check is considered successful if the config value is missing (defaults to false - an error - if missing)
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.FileName">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.AbsoluteFilePath">
            <summary>
            Gets the absolute file path.
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.CheckSuccessMessage">
            <summary>
            Gets the message for when the check has succeeded.
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.CheckErrorMessage">
            <summary>
            Gets the message for when the check has failed.
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.RectifySuccessMessage">
            <summary>
            Gets the rectify success message.
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.CanRectify">
            <summary>
            Gets a value indicating whether this check can be rectified automatically.
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.CanRectifyWithValue">
            <summary>
            Gets a value indicating whether this check can be rectified automatically if a value is provided.
            </summary>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.Rectify">
            <summary>
            Rectifies this check.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Config.AbstractConfigCheck.Rectify(System.String)">
            <summary>
            Rectifies this check with a provided value.
            </summary>
            <param name="value">Value provided</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Config.ConfigurationService.#ctor(System.String,System.String,Umbraco.Core.Services.ILocalizedTextService)">
            <param name="configFilePath">The absolute file location of the configuration file</param>
            <param name="xPath">The XPath to select the value</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Config.ConfigurationService.GetConfigurationValue">
            <summary>
            Gets a value from a given configuration file with the given XPath
            </summary>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Config.ConfigurationService.UpdateConfigFile(System.String)">
            <summary>
            Updates a value in a given configuration file with the given XPath
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Services.SmtpCheck.GetStatus">
            <summary>
            Get the status for this health check
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Services.SmtpCheck.ExecuteAction(Umbraco.Web.HealthCheck.HealthCheckAction)">
            <summary>
            Executes the action and returns it's status
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Permissions.FolderAndFilePermissionsCheck.GetStatus">
            <summary>
            Get the status for this health check
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.Checks.Permissions.FolderAndFilePermissionsCheck.ExecuteAction(Umbraco.Web.HealthCheck.HealthCheckAction)">
            <summary>
            Executes the action and returns it's status
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.HealthCheck.HealthCheckNotificationMethodAttribute">
            <summary>
            Metadata attribute for health check notification methods
            </summary>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.HealthCheckAction.#ctor">
            <summary>
            Empty ctor used for serialization
            </summary>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.HealthCheckAction.#ctor(System.String,System.Guid)">
            <summary>
            Default ctor
            </summary>
            <param name="alias"></param>
            <param name="healthCheckId"></param>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.HealthCheckAction.Alias">
            <summary>
            The alias of the action - this is used by the Health Check instance to execute the action
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.HealthCheckAction.HealthCheckId">
            <summary>
            The Id of the Health Check instance
            </summary>
            <remarks>
            This is used to find the Health Check instance to execute this action
            </remarks>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.HealthCheckAction.ActionParameters">
            <summary>
            This could be used if the status has a custom view that specifies some parameters to be sent to the server
            when an action needs to be executed
            </summary>
        </member>
        <member name="F:Umbraco.Web.HealthCheck.HealthCheckAction._name">
            <summary>
            The name of the action - this is used to name the fix button
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.HealthCheckAction.Description">
            <summary>
            The description of the action - this is used to give a description before executing the action
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.HealthCheckAction.ValueRequired">
            <summary>
            Indicates if a value is required to rectify the issue
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.HealthCheckAction.ProvidedValue">
            <summary>
            Provides a value to rectify the issue
            </summary>
        </member>
        <member name="T:Umbraco.Web.HealthCheck.HealthCheckAttribute">
            <summary>
            Metadata attribute for Health checks
            </summary>
        </member>
        <member name="T:Umbraco.Web.HealthCheck.HealthCheckController">
            <summary>
            The API controller used to display the health check info and execute any actions
            </summary>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.HealthCheckController.GetAllHealthChecks">
            <summary>
            Gets a grouped list of health checks, but doesn't actively check the status of each health check.
            </summary>
            <returns>Returns a collection of anonymous objects representing each group.</returns>
        </member>
        <member name="T:Umbraco.Web.HealthCheck.HealthCheck">
            <summary>
            Provides a base class for health checks.
            </summary>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.HealthCheck.GetStatus">
            <summary>
            Get the status for this health check
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HealthCheck.HealthCheck.ExecuteAction(Umbraco.Web.HealthCheck.HealthCheckAction)">
            <summary>
            Executes the action and returns it's status
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.HealthCheck.HealthCheckStatus">
            <summary>
            The status returned for a health check when it performs it check
            TODO: This model will be used in the WebApi result so needs attributes for JSON usage
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.HealthCheckStatus.Message">
            <summary>
            The status message
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.HealthCheckStatus.Description">
            <summary>
            The status description if one is necessary
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.HealthCheckStatus.View">
            <summary>
            This is optional but would allow a developer to specify a path to an angular HTML view
            in order to either show more advanced information and/or to provide input for the admin
            to configure how an action is executed
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.HealthCheckStatus.ResultType">
            <summary>
            The status type
            </summary>
        </member>
        <member name="P:Umbraco.Web.HealthCheck.HealthCheckStatus.Actions">
            <summary>
            The potential actions to take (in any)
            </summary>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateCoreExtensions.GetCropUrl(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Core.Models.IImageUrlGenerator)">
            <summary>
            Gets the ImageProcessor URL by the crop alias (from the "umbracoFile" property alias) on the IPublishedContent item
            </summary>
            <param name="mediaItem">
            The IPublishedContent item.
            </param>
            <param name="cropAlias">
            The crop alias e.g. thumbnail
            </param>
            <returns>
            The ImageProcessor.Web URL.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateCoreExtensions.GetCropUrl(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,Umbraco.Core.Models.IImageUrlGenerator)">
            <summary>
            Gets the ImageProcessor URL by the crop alias using the specified property containing the image cropper Json data on the IPublishedContent item.
            </summary>
            <param name="mediaItem">
            The IPublishedContent item.
            </param>
            <param name="propertyAlias">
            The property alias of the property containing the Json data e.g. umbracoFile
            </param>
            <param name="cropAlias">
            The crop alias e.g. thumbnail
            </param>
            <returns>
            The ImageProcessor.Web URL.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateCoreExtensions.GetCropUrl(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.IImageUrlGenerator,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{Umbraco.Web.Models.ImageCropMode},System.Nullable{Umbraco.Web.Models.ImageCropAnchor},System.Boolean,System.Boolean,System.Boolean,System.String,System.Nullable{Umbraco.Web.Models.ImageCropRatioMode},System.Boolean)">
            <summary>
            Gets the ImageProcessor URL from the IPublishedContent item.
            </summary>
            <param name="mediaItem">
            The IPublishedContent item.
            </param>
            <param name="width">
            The width of the output image.
            </param>
            <param name="height">
            The height of the output image.
            </param>
            <param name="propertyAlias">
            Property alias of the property containing the Json data.
            </param>
            <param name="cropAlias">
            The crop alias.
            </param>
            <param name="quality">
            Quality percentage of the output image.
            </param>
            <param name="imageCropMode">
            The image crop mode.
            </param>
            <param name="imageCropAnchor">
            The image crop anchor.
            </param>
            <param name="preferFocalPoint">
            Use focal point, to generate an output image using the focal point instead of the predefined crop
            </param>
            <param name="useCropDimensions">
            Use crop dimensions to have the output image sized according to the predefined crop sizes, this will override the width and height parameters.
            </param>
            <param name="cacheBuster">
            Add a serialized date of the last edit of the item to ensure client cache refresh when updated
            </param>
            <param name="furtherOptions">
            These are any query string parameters (formatted as query strings) that ImageProcessor supports. For example:
            <example>
            <![CDATA[
            furtherOptions: "&bgcolor=fff"
            ]]>
            </example>
            </param>
            <param name="ratioMode">
            Use a dimension as a ratio
            </param>
            <param name="upScale">
            If the image should be upscaled to requested dimensions
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateCoreExtensions.GetCropUrl(System.String,Umbraco.Core.Models.IImageUrlGenerator,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{Umbraco.Web.Models.ImageCropMode},System.Nullable{Umbraco.Web.Models.ImageCropAnchor},System.Boolean,System.Boolean,System.String,System.String,System.Nullable{Umbraco.Web.Models.ImageCropRatioMode},System.Boolean)">
            <summary>
            Gets the ImageProcessor URL from the image path.
            </summary>
            <param name="imageUrl">
            The image URL.
            </param>
            <param name="width">
            The width of the output image.
            </param>
            <param name="height">
            The height of the output image.
            </param>
            <param name="imageCropperValue">
            The Json data from the Umbraco Core Image Cropper property editor
            </param>
            <param name="cropAlias">
            The crop alias.
            </param>
            <param name="quality">
            Quality percentage of the output image.
            </param>
            <param name="imageCropMode">
            The image crop mode.
            </param>
            <param name="imageCropAnchor">
            The image crop anchor.
            </param>
            <param name="preferFocalPoint">
            Use focal point to generate an output image using the focal point instead of the predefined crop if there is one
            </param>
            <param name="useCropDimensions">
            Use crop dimensions to have the output image sized according to the predefined crop sizes, this will override the width and height parameters
            </param>
            <param name="cacheBusterValue">
            Add a serialized date of the last edit of the item to ensure client cache refresh when updated
            </param>
            <param name="furtherOptions">
            These are any query string parameters (formatted as query strings) that ImageProcessor supports. For example:
            <example>
            <![CDATA[
            furtherOptions: "&bgcolor=fff"
            ]]>
            </example>
            </param>
            <param name="ratioMode">
            Use a dimension as a ratio
            </param>
            <param name="upScale">
            If the image should be upscaled to requested dimensions
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateCoreExtensions.GetCropUrl(System.String,Umbraco.Core.Models.IImageUrlGenerator,Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{Umbraco.Web.Models.ImageCropMode},System.Nullable{Umbraco.Web.Models.ImageCropAnchor},System.Boolean,System.Boolean,System.String,System.String,System.Nullable{Umbraco.Web.Models.ImageCropRatioMode},System.Boolean,System.String)">
            <summary>
            Gets the ImageProcessor URL from the image path.
            </summary>
            <param name="imageUrl">
            The image URL.
            </param>
            <param name="imageUrlGenerator">
            The generator that will process all the options and the image URL to return a full image URLs with all processing options appended
            </param>
            <param name="cropDataSet"></param>
            <param name="width">
            The width of the output image.
            </param>
            <param name="height">
            The height of the output image.
            </param>
            <param name="cropAlias">
            The crop alias.
            </param>
            <param name="quality">
            Quality percentage of the output image.
            </param>
            <param name="imageCropMode">
            The image crop mode.
            </param>
            <param name="imageCropAnchor">
            The image crop anchor.
            </param>
            <param name="preferFocalPoint">
            Use focal point to generate an output image using the focal point instead of the predefined crop if there is one
            </param>
            <param name="useCropDimensions">
            Use crop dimensions to have the output image sized according to the predefined crop sizes, this will override the width and height parameters
            </param>
            <param name="cacheBusterValue">
            Add a serialized date of the last edit of the item to ensure client cache refresh when updated
            </param>
            <param name="furtherOptions">
            These are any query string parameters (formatted as query strings) that ImageProcessor supports. For example:
            <example>
            <![CDATA[
            furtherOptions: "&bgcolor=fff"
            ]]>
            </example>
            </param>
            <param name="ratioMode">
            Use a dimension as a ratio
            </param>
            <param name="upScale">
            If the image should be upscaled to requested dimensions
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Install.InstallSteps.ConfigureMachineKey.HasMachineKey">
            <summary>
            Don't display the view or execute if a machine key already exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.InstallSteps.ConfigureMachineKey.ExecuteAsync(System.Nullable{System.Boolean})">
            <summary>
            The step execution method
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Install.InstallSteps.StarterKitDownloadStep.View">
            <summary>
            Don't show the view if there's already packages installed
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.InstallSteps.UpgradeStep">
            <summary>
            This step is purely here to show the button to commence the upgrade
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.InstallSteps.NewInstallStep">
            <summary>
            This is the first UI step for a brand new install
            </summary>
            <remarks>
            By default this will show the user view which is the most basic information to configure a new install, but if an install get's interrupted because of an
            error, etc... and the end-user refreshes the installer then we cannot show the user screen because they've already entered that information so instead we'll
            display a simple continue installation view.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Install.InstallSteps.NewInstallStep.ViewModel">
            <summary>
            Return a custom view model for this step
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.ChangesMonitor.Suspended">
            <summary>
            Gets a disposable object representing suspended change monitoring.
            </summary>
            <remarks>
            <para>Dispose the object to re-enable change monitoring.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Install.ChangesMonitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Install.ChangesMonitor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.InstallStepCollection.GetAllSteps">
            <summary>
            Get the installer steps
            </summary>
            <returns></returns>
            <remarks>
            The step order returned here is how they will appear on the front-end if they have views assigned
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Install.InstallStepCollection.GetStepsForCurrentInstallType">
            <summary>
            Returns the steps that are used only for the current installation type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Install.InstallException">
            <summary>
            Used for steps to be able to return a JSON structure back to the UI.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="P:Umbraco.Web.Install.InstallException.View">
            <summary>
            Gets the view.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="P:Umbraco.Web.Install.InstallException.ViewModel">
            <summary>
            Gets the view model.
            </summary>
            <value>
            The view model.
            </value>
            <remarks>
            This object is not included when serializing.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Install.InstallException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Install.InstallException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.InstallException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Install.InstallException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Web.Install.InstallException.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Install.InstallException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Umbraco.Web.Install.InstallException.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Install.InstallException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="view">The view.</param>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Umbraco.Web.Install.InstallException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Install.InstallException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Web.Install.InstallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Install.InstallException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Umbraco.Web.Install.InstallException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
        </member>
        <member name="T:Umbraco.Web.Install.InstallStatusTracker">
            <summary>
            An internal in-memory status tracker for the current installation
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.Models.InstallProgressResultModel">
            <summary>
            Returned to the UI for each installation step that is completed
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallProgressResultModel.View">
            <summary>
            The UI view to show when this step executes, by default no views are shown for the completion of a step unless explicitly specified.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallProgressResultModel.ViewModel">
            <summary>
            The view model to return to the UI if this step is returning a view (optional)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.Models.InstallSetup">
            <summary>
            Model containing all the install steps for setting up the UI
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.Models.InstallSetupResult">
            <summary>
            The object returned from each installation step
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupResult.SavedStepData">
            <summary>
            Data that is persisted to the installation file which can be used from other installation steps
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupResult.View">
            <summary>
            The UI view to show when this step executes, by default no views are shown for the completion of a step unless explicitly specified.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupResult.ViewModel">
            <summary>
            The view model to return to the UI if this step is returning a view (optional)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.Models.InstallSetupStep`1">
            <summary>
            Model to give to the front-end to collect the information for each step
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupStep`1.StepType">
            <summary>
            Defines the step model type on the server side so we can bind it
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.Models.InstallSetupStep`1.ExecuteAsync(`0)">
            <summary>
            The step execution method
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.Models.InstallSetupStep`1.RequiresExecution(`0)">
            <summary>
            Determines if this step needs to execute based on the current state of the application and/or install process
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupStep.ViewModel">
            <summary>
            The view model used to render the view, by default is null but can be populated
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupStep.ServerOrder">
            <summary>
            Defines what order this step needs to execute on the server side since the
            steps might be shown out of order on the front-end
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupStep.StepType">
            <summary>
            Defines the step model type on the server side so we can bind it
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupStepAttribute.PerformsAppRestart">
            <summary>
            A flag to notify the installer that this step performs an app pool restart, this can be handy to know since if the current
            step is performing a restart, we cannot 'look ahead' to see if the next step can execute since we won't know until the app pool
            is restarted.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.UmbracoInstallArea">
            <summary>
            An area registration for back office components
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.UmbracoInstallArea.RegisterArea(System.Web.Mvc.AreaRegistrationContext)">
            <summary>
            Create the routes for the area
            </summary>
            <param name="context"></param>
            <remarks>
            By using the context to register the routes it means that the area is already applied to them all
            and that the namespaces searched for the controllers are ONLY the ones specified.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallApiController.GetSetup">
            <summary>
            Gets the install setup.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallApiController.PostPerformInstall(Umbraco.Web.Install.Models.InstallInstructions)">
            <summary>
            Installs.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallApiController.IterateSteps(Umbraco.Web.Install.Models.InstallSetupStep,System.Collections.Generic.Queue{Umbraco.Web.Install.Models.InstallTrackingItem},System.Guid,Umbraco.Web.Install.Models.InstallInstructions)">
            <summary>
            We'll peek ahead and check if it's RequiresExecution is returning true. If it
            is not, we'll dequeue that step and peek ahead again (recurse)
            </summary>
            <param name="current"></param>
            <param name="queue"></param>
            <param name="installId"></param>
            <param name="installModel"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Install.Controllers.InstallController">
            <summary>
            The MVC Installation controller
            </summary>
            <remarks>
            NOTE: All views must have their full paths as we do not have a custom view engine for the installation views!
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Install.InstallAuthorizeAttribute">
            <summary>
            Ensures authorization occurs for the installer if it has already completed.
            If install has not yet occurred then the authorization is successful
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.InstallAuthorizeAttribute.#ctor(Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.IRuntimeState)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="umbracoContextAccessor"></param>
            <param name="runtimeState"></param>
        </member>
        <member name="M:Umbraco.Web.Install.InstallAuthorizeAttribute.AuthorizeCore(System.Web.HttpContextBase)">
            <summary>
            Ensures that the user must be logged in or that the application is not configured just yet.
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.InstallAuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Override to redirect instead of throwing an exception
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Umbraco.Web.Install.FilePermissionHelper.EnsureDirectories(System.String[],System.Collections.Generic.IEnumerable{System.String}@,System.Boolean)">
            <summary>
            This will test the directories for write access
            </summary>
            <param name="dirs"></param>
            <param name="errors"></param>
            <param name="writeCausesRestart">
            If this is false, the easiest way to test for write access is to write a temp file, however some folder will cause
            an App Domain restart if a file is written to the folder, so in that case we need to use the ACL APIs which aren't as
            reliable but we cannot write a file since it will cause an app domain restart.
            </param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Install.InstallHelper.IsBrandNewInstall">
            <summary>
            Checks if this is a brand new install meaning that there is no configured version and there is no configured database connection
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.HttpInstallAuthorizeAttribute">
            <summary>
            Ensures authorization occurs for the installer if it has already completed.
            If install has not yet occurred then the authorization is successful.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.HttpInstallAuthorizeAttribute.#ctor(Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.IRuntimeState)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="umbracoContextAccessor"></param>
            <param name="runtimeState"></param>
        </member>
        <member name="T:Umbraco.Web.IUmbracoContextFactory">
            <summary>
            Creates and manages <see cref="T:Umbraco.Web.UmbracoContext"/> instances.
            </summary>
        </member>
        <member name="M:Umbraco.Web.IUmbracoContextFactory.EnsureUmbracoContext(System.Web.HttpContextBase)">
            <summary>
            Ensures that a current <see cref="T:Umbraco.Web.UmbracoContext"/> exists.
            </summary>
            <remarks>
            <para>If an <see cref="T:Umbraco.Web.UmbracoContext"/> is already registered in the
            <see cref="T:Umbraco.Web.IUmbracoContextAccessor"/>, returns a non-root reference to it.
            Otherwise, create a new instance, registers it, and return a root reference
            to it.</para>
            <para>If <paramref name="httpContext"/> is null, the factory tries to use
            <see cref="P:System.Web.HttpContext.Current"/> if it exists. Otherwise, it uses a dummy
            <see cref="T:System.Web.HttpContextBase"/>.</para>
            </remarks>
            <example>
            using (var contextReference = contextFactory.EnsureUmbracoContext())
            {
              var umbracoContext = contextReference.UmbracoContext;
              // use umbracoContext...
            }
            </example>
            <param name="httpContext">An optional http context.</param>
        </member>
        <member name="T:Umbraco.Web.Logging.WebProfiler">
            <summary>
            Implements <see cref="T:Umbraco.Core.Logging.IProfiler"/> by using the MiniProfiler framework.
            </summary>
            <remarks>
            Profiling only runs when the app is in debug mode, see WebRuntime for how this gets created
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Logging.WebProfiler.Render">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Web.Logging.WebProfiler.Step(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Web.Logging.WebProfiler.Start">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Web.Logging.WebProfiler.Stop(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Web.Logging.WebProfilerProvider">
            <summary>
            This is a custom MiniProfiler WebRequestProfilerProvider (which is generally the default) that allows
            us to profile items during app startup - before an HttpRequest is created
            </summary>
            <remarks>
            Once the boot phase is changed to BootPhase.BootRequest then the base class (default) provider will handle all
            profiling data and this sub class no longer performs any logic.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Logging.WebProfilerProvider.BootPhase">
            <summary>
            Indicates the boot phase.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Logging.WebProfilerProvider.Start(System.String,StackExchange.Profiling.Internal.MiniProfilerBaseOptions)">
            <summary>
            Starts a new MiniProfiler.
            </summary>
            <remarks>
            <para>This is called when WebProfiler calls MiniProfiler.Start() so,
            - as a result of WebRuntime starting the WebProfiler, and
            - assuming profiling is enabled, on every BeginRequest that should be profiled,
            - except for the very first one which is the boot request.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Logging.WebProfilerProvider.CurrentProfiler">
            <summary>
            Gets the current profiler.
            </summary>
            <remarks>
            If the boot phase is not Booted, then this will return the startup profiler (this), otherwise
            returns the base class
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Macros.IMacroRenderer">
            <summary>
            Renders a macro
            </summary>
        </member>
        <member name="T:Umbraco.Web.Macros.MacroTagParser">
            <summary>
            Parses the macro syntax in a string and renders out it's contents
            </summary>
        </member>
        <member name="M:Umbraco.Web.Macros.MacroTagParser.FormatRichTextPersistedDataForEditor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
             <summary>
             This formats the persisted string to something useful for the rte so that the macro renders properly since we
             persist all macro formats like {?UMBRACO_MACRO macroAlias=\"myMacro\" /}
             </summary>
             <param name="persistedContent"></param>
             <param name="htmlAttributes">The HTML attributes to be added to the div</param>
             <returns></returns>
             <remarks>
             This converts the persisted macro format to this:
            
                 {div class='umb-macro-holder'}
                     <!-- <?UMBRACO_MACRO macroAlias=\"myMacro\" /> -->
                     {ins}Macro alias: {strong}My Macro{/strong}{/ins}
                 {/div}
            
             </remarks>
        </member>
        <member name="M:Umbraco.Web.Macros.MacroTagParser.FormatRichTextContentForPersistence(System.String)">
             <summary>
             This formats the string content posted from a rich text editor that contains macro contents to be persisted.
             </summary>
             <returns></returns>
             <remarks>
            
             This is required because when editors are using the rte, the HTML that is contained in the editor might actually be displaying
             the entire macro content, when the data is submitted the editor will clear most of this data out but we'll still need to parse it properly
             and ensure the correct syntax is persisted to the db.
            
             When a macro is inserted into the rte editor, the HTML will be:
            
                 {div class='umb-macro-holder'}
                     <!-- <?UMBRACO_MACRO macroAlias=\"myMacro\" /> -->
                     This could be some macro content
                 {/div}
            
             What this method will do is remove the {div} and parse out the commented special macro syntax: {?UMBRACO_MACRO macroAlias=\"myMacro\" /}
             since this is exactly how we need to persist it to the db.
            
             </remarks>
        </member>
        <member name="M:Umbraco.Web.Macros.MacroTagParser.ParseMacros(System.String,System.Action{System.String},System.Action{System.String,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            This will accept a text block and search/parse it for macro markup.
            When either a text block or a a macro is found, it will call the callback method.
            </summary>
            <param name="text"> </param>
            <param name="textFoundCallback"></param>
            <param name="macroFoundCallback"></param>
            <returns></returns>
            <remarks>
            This method  simply parses the macro contents, it does not create a string or result,
            this is up to the developer calling this method to implement this with the callbacks.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Macros.MacroModel.Id">
            <summary>
            The Macro Id
            </summary>
        </member>
        <member name="P:Umbraco.Web.Macros.MacroModel.Name">
            <summary>
            The Macro Name
            </summary>
        </member>
        <member name="P:Umbraco.Web.Macros.MacroModel.Alias">
            <summary>
            The Macro Alias
            </summary>
        </member>
        <member name="M:Umbraco.Web.Macros.MacroRenderer.ExecuteMacroWithErrorWrapper(Umbraco.Web.Macros.MacroModel,System.String,System.String,System.Func{Umbraco.Web.Macros.MacroContent},System.Func{System.String})">
            <summary>
            Executes a macro of a given type.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Macros.MacroRenderer.ExecuteProfileMacroWithErrorWrapper(Umbraco.Web.Macros.MacroModel,System.String,System.Func{Umbraco.Web.Macros.MacroContent},System.Func{System.String})">
            <summary>
            Executes a macro of a given type.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Macros.MacroRenderer.ExecuteMacroOfType(Umbraco.Web.Macros.MacroModel,Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Executes a macro.
            </summary>
            <remarks>Returns an attempt that is successful if the macro ran successfully. If the macro failed
            to run properly, the attempt fails, though it may contain a content. But for instance that content
            should not be cached. In that case the attempt may also contain an exception.</remarks>
        </member>
        <member name="M:Umbraco.Web.Macros.MacroRenderer.ExecutePartialView(Umbraco.Web.Macros.MacroModel,Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Renders a PartialView Macro.
            </summary>
            <returns>The text output of the macro execution.</returns>
        </member>
        <member name="T:Umbraco.Web.Macros.PartialViewMacroController">
            <summary>
            Controller to render macro content for Partial View Macros
            </summary>
        </member>
        <member name="M:Umbraco.Web.Macros.PartialViewMacroController.Index">
            <summary>
            Child action to render a macro
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Macros.PartialViewMacroEngine">
            <summary>
            A macro engine using MVC Partial Views to execute.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Macros.PartialViewMacroEngine.#ctor(System.Web.HttpContextBase,Umbraco.Web.UmbracoContext)">
            <summary>
            Constructor generally used for unit testing
            </summary>
            <param name="httpContext"></param>
            <param name="umbracoContext"> </param>
        </member>
        <member name="T:Umbraco.Web.Macros.PartialViewMacroPage">
            <summary>
            The base view class that PartialViewMacro views need to inherit from
            </summary>
        </member>
        <member name="T:Umbraco.Web.Macros.PublishedContentHashtableConverter">
            <summary>
            Legacy class used by macros which converts a published content item into a hashset of values
            </summary>
        </member>
        <member name="M:Umbraco.Web.Macros.PublishedContentHashtableConverter.#ctor(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Macros.PublishedContentHashtableConverter"/> class for a published document request.
            </summary>
            <param name="frequest">The <see cref="T:Umbraco.Web.Routing.PublishedRequest"/> pointing to the document.</param>
            <remarks>
            The difference between creating the page with PublishedRequest vs an IPublishedContent item is
            that the PublishedRequest takes into account how a template is assigned during the routing process whereas
            with an IPublishedContent item, the template id is assigned purely based on the default.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Macros.PublishedContentHashtableConverter.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Initializes a new instance of the page for a published document
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Umbraco.Web.Macros.PublishedContentHashtableConverter.#ctor(Umbraco.Core.Models.IContent,Umbraco.Core.Models.PublishedContent.IVariationContextAccessor)">
            <summary>
            Initializes a new instance of the page for a content.
            </summary>
            <param name="content">The content.</param>
            <param name="variationContextAccessor"></param>
            <remarks>This is for <see cref="T:Umbraco.Web.Editors.MacroRenderingController"/> usage only.</remarks>
        </member>
        <member name="M:Umbraco.Web.Macros.PublishedContentHashtableConverter.PopulateElementData(Umbraco.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
            Puts the properties of the node into the elements table
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Umbraco.Web.Macros.PublishedContentHashtableConverter.Elements">
            <summary>
            Returns a Hashtable of data for a published content item
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.EmbedProviders.Giphy">
            <summary>
            Embed Provider for Giphy.com the popular online GIFs and animated sticker provider.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.EmbedProviders.OEmbedResponse">
            <summary>
            Wrapper class for OEmbed response
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.EmbedProviders.OEmbedResponse.GetHtml">
            <summary>
            Gets the HTML.
            </summary>
            <returns>The response HTML</returns>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.BitConverterEx">
            <summary>
            An endian-aware converter for converting between base data types
            and an array of bytes.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder">
            <summary>
            Represents the byte order.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.BitConverterEx.SystemByteOrder">
            <summary>
            Indicates the byte order in which data is stored in this platform.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.BitConverterEx.LittleEndian">
            <summary>
            Returns a bit converter that converts between little-endian and system byte-order.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.BitConverterEx.BigEndian">
            <summary>
            Returns a bit converter that converts between big-endian and system byte-order.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.BitConverterEx.SystemEndian">
            <summary>
            Returns a bit converter that does not do any byte-order conversion.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToChar(System.Byte[],System.Int64,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a Unicode character.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToUInt16(System.Byte[],System.Int64,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToUInt32(System.Byte[],System.Int64,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToUInt64(System.Byte[],System.Int64,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToInt16(System.Byte[],System.Int64,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a 16-bit signed integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToInt32(System.Byte[],System.Int64,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a 32-bit signed integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToInt64(System.Byte[],System.Int64,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a 64-bit signed integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToSingle(System.Byte[],System.Int64,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a single precision floating number.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToDouble(System.Byte[],System.Int64,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a double precision floating number.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.UInt16,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given 16-bit unsigned integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.UInt32,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given 32-bit unsigned integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.UInt64,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given 64-bit unsigned integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.Int16,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given 16-bit signed integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.Int32,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given 32-bit signed integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.Int64,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given 64-bit signed integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.Single,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given single precision floating-point number to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.Double,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given double precision floating-point number to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToChar(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToUInt16(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToUInt32(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToUInt64(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToInt16(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 16-bit signed integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToInt32(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 32-bit signed integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToInt64(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 64-bit signed integer.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToSingle(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a single precision floating number.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.ToDouble(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a double precision floating number.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.UInt16)">
            <summary>
            Converts the given 16-bit unsigned integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.UInt32)">
            <summary>
            Converts the given 32-bit unsigned integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.UInt64)">
            <summary>
            Converts the given 64-bit unsigned integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.Int16)">
            <summary>
            Converts the given 16-bit signed integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.Int32)">
            <summary>
            Converts the given 32-bit signed integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.Int64)">
            <summary>
            Converts the given 64-bit signed integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.Single)">
            <summary>
            Converts the given single precision floating-point number to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.GetBytes(System.Double)">
            <summary>
            Converts the given double precision floating-point number to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.CheckData(System.Byte[],System.Int64,System.Int64,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Reverse the array of bytes as needed.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.BitConverterEx.CheckData(System.Byte[],Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Reverse the array of bytes as needed.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifBitConverter">
            <summary>
            Converts between exif data types and array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.ToAscii(System.Byte[],System.Boolean,System.Text.Encoding)">
            <summary>
            Returns an ASCII string converted from the given byte array.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.ToAscii(System.Byte[],System.Text.Encoding)">
            <summary>
            Returns an ASCII string converted from the given byte array.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a string converted from the given byte array.
            from the numeric value of each byte.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.ToDateTime(System.Byte[],System.Boolean)">
            <summary>
            Returns a DateTime object converted from the given byte array.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.ToDateTime(System.Byte[])">
            <summary>
            Returns a DateTime object converted from the given byte array.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.ToURational(System.Byte[],Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns an unsigned rational number converted from the first
            eight bytes of the given byte array. The first four bytes are
            assumed to be the numerator and the next four bytes are the
            denominator.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.ToSRational(System.Byte[],Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns a signed rational number converted from the first
            eight bytes of the given byte array. The first four bytes are
            assumed to be the numerator and the next four bytes are the
            denominator.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.ToUShortArray(System.Byte[],System.Int32,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns an array of 16-bit unsigned integers converted from
            the given byte array.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.ToUIntArray(System.Byte[],System.Int32,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns an array of 32-bit unsigned integers converted from
            the given byte array.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.ToSIntArray(System.Byte[],System.Int32,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns an array of 32-bit signed integers converted from
            the given byte array.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.ToURationalArray(System.Byte[],System.Int32,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns an array of unsigned rational numbers converted from
            the given byte array.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.ToSRationalArray(System.Byte[],System.Int32,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns an array of signed rational numbers converted from
            the given byte array.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.GetBytes(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Converts the given ascii string to an array of bytes optionally adding a null terminator.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts the given ascii string to an array of bytes without adding a null terminator.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.GetBytes(System.DateTime,System.Boolean)">
            <summary>
            Converts the given datetime to an array of bytes with a null terminator.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.GetBytes(Umbraco.Web.Media.Exif.MathEx.UFraction32,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given unsigned rational number to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.GetBytes(Umbraco.Web.Media.Exif.MathEx.Fraction32,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given signed rational number to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.GetBytes(System.UInt16[],Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of 16-bit unsigned integers to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.GetBytes(System.UInt32[],Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of 32-bit unsigned integers to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.GetBytes(System.Int32[],Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of 32-bit signed integers to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.GetBytes(Umbraco.Web.Media.Exif.MathEx.UFraction32[],Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of unsigned rationals to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifBitConverter.GetBytes(Umbraco.Web.Media.Exif.MathEx.Fraction32[],Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of signed rationals to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExposureProgram.Creative">
            <summary>
            Biased toward depth of field.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExposureProgram.Action">
            <summary>
            Biased toward fast shutter speed.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExposureProgram.Portrait">
            <summary>
            For closeup photos with the background out of focus.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExposureProgram.Landscape">
            <summary>
            For landscape photos with the background in focus.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.LightSource.DaylightFluorescent">
            <summary>
            D 5700 – 7100K
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.LightSource.DayWhiteFluorescent">
            <summary>
            N 4600 – 5400K
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.LightSource.CoolWhiteFluorescent">
            <summary>
            W 3900 – 4500K
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.LightSource.WhiteFluorescent">
            <summary>
            WW 3200 – 3700K
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.NotValidExifFileException">
            <summary>
            The exception that is thrown when the format of the JPEG/EXIF file could not be understood.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidExifFileException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidExifFileException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidExifFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidExifFileException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidExifFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidExifFileException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidExifFileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidExifFileException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifEnumProperty`1">
            <summary>
            Represents an enumerated value.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifEncodedString">
            <summary>
            Represents an ASCII string. (EXIF Specification: UNDEFINED) Used for the UserComment field.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifDateTime">
            <summary>
            Represents an ASCII string formatted as DateTime. (EXIF Specification: ASCII) Used for the date time fields.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifVersion">
            <summary>
            Represents the exif version as a 4 byte ASCII string. (EXIF Specification: UNDEFINED)
            Used for the ExifVersion, FlashpixVersion, InteroperabilityVersion and GPSVersionID fields.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifPointSubjectArea">
            <summary>
            Represents the location and area of the subject (EXIF Specification: 2xSHORT)
            The coordinate values, width, and height are expressed in relation to the
            upper left as origin, prior to rotation processing as per the Rotation tag.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifCircularSubjectArea">
            <summary>
            Represents the location and area of the subject (EXIF Specification: 3xSHORT)
            The coordinate values, width, and height are expressed in relation to the
            upper left as origin, prior to rotation processing as per the Rotation tag.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifRectangularSubjectArea">
            <summary>
            Represents the location and area of the subject (EXIF Specification: 4xSHORT)
            The coordinate values, width, and height are expressed in relation to the
            upper left as origin, prior to rotation processing as per the Rotation tag.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.GPSLatitudeLongitude">
            <summary>
            Represents GPS latitudes and longitudes (EXIF Specification: 3xRATIONAL)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.GPSTimeStamp">
            <summary>
            Represents a GPS time stamp as UTC (EXIF Specification: 3xRATIONAL)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.WindowsByteString">
            <summary>
            Represents an ASCII string. (EXIF Specification: BYTE)
            Used by Windows XP.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifFileTypeDescriptionProvider">
            <summary>
            Provides a custom type descriptor for an ExifFile instance.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifFileTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Gets a custom type descriptor for the given type and object.
            </summary>
            <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
            <param name="instance">An instance of the type. Can be null if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor"/>.</param>
            <returns>
            An <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> that can provide metadata for the type.
            </returns>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifFileTypeDescriptor">
            <summary>
            Expands ExifProperty objects contained in an ExifFile as separate properties.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifFileTypeDescriptor.GetProperties">
            <summary>
            Returns a collection of property descriptors for the object represented by this type descriptor.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty"/>.
            </returns>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifInterOperability">
            <summary>
            Represents interoperability data for an exif tag in the platform byte order.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifInterOperability.TagID">
            <summary>
            Gets the tag ID defined in the Exif standard.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifInterOperability.TypeID">
            <summary>
            Gets the type code defined in the Exif standard.
            <list type="bullet">
            <item>1 = BYTE (byte)</item>
            <item>2 = ASCII (byte array)</item>
            <item>3 = SHORT (ushort)</item>
            <item>4 = LONG (uint)</item>
            <item>5 = RATIONAL (2 x uint: numerator, denominator)</item>
            <item>6 = BYTE (sbyte)</item>
            <item>7 = UNDEFINED (byte array)</item>
            <item>8 = SSHORT (short)</item>
            <item>9 = SLONG (int)</item>
            <item>10 = SRATIONAL (2 x int: numerator, denominator)</item>
            <item>11 = FLOAT (float)</item>
            <item>12 = DOUBLE (double)</item>
            </list>
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifInterOperability.Count">
            <summary>
            Gets the byte count or number of components.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifInterOperability.Data">
            <summary>
            Gets the field value as an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifInterOperability.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifProperty">
            <summary>
            Represents the abstract base class for an Exif property.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifProperty.Tag">
            <summary>
            Gets the Exif tag associated with this property.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifProperty.IFD">
            <summary>
            Gets the IFD section containing this property.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifProperty.Name">
            <summary>
            Gets or sets the name of this property.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifProperty.Value">
            <summary>
            Gets or sets the value of this property.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifProperty.Interoperability">
            <summary>
            Gets interoperability data for this property.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifByte">
            <summary>
            Represents an 8-bit unsigned integer. (EXIF Specification: BYTE)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifByteArray">
            <summary>
            Represents an array of 8-bit unsigned integers. (EXIF Specification: BYTE with count > 1)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifAscii">
            <summary>
            Represents an ASCII string. (EXIF Specification: ASCII)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifUShort">
            <summary>
            Represents a 16-bit unsigned integer. (EXIF Specification: SHORT)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifUShortArray">
            <summary>
            Represents an array of 16-bit unsigned integers.
            (EXIF Specification: SHORT with count > 1)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifUInt">
            <summary>
            Represents a 32-bit unsigned integer. (EXIF Specification: LONG)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifUIntArray">
            <summary>
            Represents an array of 16-bit unsigned integers.
            (EXIF Specification: LONG with count > 1)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifURational">
            <summary>
            Represents a rational number defined with a 32-bit unsigned numerator
            and denominator. (EXIF Specification: RATIONAL)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifURationalArray">
            <summary>
            Represents an array of unsigned rational numbers.
            (EXIF Specification: RATIONAL with count > 1)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifUndefined">
            <summary>
            Represents a byte array that can take any value. (EXIF Specification: UNDEFINED)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifSInt">
            <summary>
            Represents a 32-bit signed integer. (EXIF Specification: SLONG)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifSIntArray">
            <summary>
            Represents an array of 32-bit signed integers.
            (EXIF Specification: SLONG with count > 1)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifSRational">
            <summary>
            Represents a rational number defined with a 32-bit signed numerator
            and denominator. (EXIF Specification: SRATIONAL)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifSRationalArray">
            <summary>
            Represents an array of signed rational numbers.
            (EXIF Specification: SRATIONAL with count > 1)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifPropertyCollection">
            <summary>
            Represents a collection of <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> objects.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifPropertyCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifPropertyCollection.Keys">
            <summary>
            Gets a collection containing the keys in this collection.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifPropertyCollection.Values">
            <summary>
            Gets a collection containing the values in this collection.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifPropertyCollection.Item(Umbraco.Web.Media.Exif.ExifTag)">
            <summary>
            Gets or sets the <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Set(Umbraco.Web.Media.Exif.ExifTag,System.Byte)">
            <summary>
            Sets the <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Set(Umbraco.Web.Media.Exif.ExifTag,System.String)">
            <summary>
            Sets the <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Set(Umbraco.Web.Media.Exif.ExifTag,System.UInt16)">
            <summary>
            Sets the <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Set(Umbraco.Web.Media.Exif.ExifTag,System.Int32)">
            <summary>
            Sets the <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Set(Umbraco.Web.Media.Exif.ExifTag,System.UInt32)">
            <summary>
            Sets the <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Set(Umbraco.Web.Media.Exif.ExifTag,System.Single)">
            <summary>
            Sets the <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Set(Umbraco.Web.Media.Exif.ExifTag,System.Double)">
            <summary>
            Sets the <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Set(Umbraco.Web.Media.Exif.ExifTag,System.Object)">
            <summary>
            Sets the <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Set(Umbraco.Web.Media.Exif.ExifTag,System.String,System.Text.Encoding)">
            <summary>
            Sets the <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
            <param name="encoding">String encoding.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Set(Umbraco.Web.Media.Exif.ExifTag,System.DateTime)">
            <summary>
            Sets the <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Set(Umbraco.Web.Media.Exif.ExifTag,System.Single,System.Single,System.Single)">
            <summary>
            Sets the <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="d">Angular degrees (or clock hours for a timestamp).</param>
            <param name="m">Angular minutes (or clock minutes for a timestamp).</param>
            <param name="s">Angular seconds (or clock seconds for a timestamp).</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Add(Umbraco.Web.Media.Exif.ExifProperty)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">The <see cref="T:Umbraco.Web.Media.Exif.ExifProperty"/> to add to the collection.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.ContainsKey(Umbraco.Web.Media.Exif.ExifTag)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection.</param>
            <returns>
            true if the collection contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Remove(Umbraco.Web.Media.Exif.ExifTag)">
            <summary>
            Removes the element with the specified key from the collection.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.Remove(Umbraco.Web.Media.Exif.IFD)">
            <summary>
            Removes all items with the given IFD from the collection.
            </summary>
            <param name="ifd">The IFD section to remove.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.TryGetValue(Umbraco.Web.Media.Exif.ExifTag,Umbraco.Web.Media.Exif.ExifProperty@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the collection contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.System#Collections#Generic#IDictionary{Umbraco#Web#Media#Exif#ExifTag,Umbraco#Web#Media#Exif#ExifProperty}#Add(Umbraco.Web.Media.Exif.ExifTag,Umbraco.Web.Media.Exif.ExifProperty)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Umbraco#Web#Media#Exif#ExifTag,Umbraco#Web#Media#Exif#ExifProperty}}#Add(System.Collections.Generic.KeyValuePair{Umbraco.Web.Media.Exif.ExifTag,Umbraco.Web.Media.Exif.ExifProperty})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Umbraco#Web#Media#Exif#ExifTag,Umbraco#Web#Media#Exif#ExifProperty}}#CopyTo(System.Collections.Generic.KeyValuePair{Umbraco.Web.Media.Exif.ExifTag,Umbraco.Web.Media.Exif.ExifProperty}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ExifPropertyCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Umbraco#Web#Media#Exif#ExifTag,Umbraco#Web#Media#Exif#ExifProperty}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Umbraco#Web#Media#Exif#ExifTag,Umbraco#Web#Media#Exif#ExifProperty}}#Remove(System.Collections.Generic.KeyValuePair{Umbraco.Web.Media.Exif.ExifTag,Umbraco.Web.Media.Exif.ExifProperty})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Umbraco#Web#Media#Exif#ExifTag,Umbraco#Web#Media#Exif#ExifProperty}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifPropertyFactory">
            <summary>
            Creates exif properties from interoperability parameters.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifPropertyFactory.Get(System.UInt16,System.UInt16,System.UInt32,System.Byte[],Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Web.Media.Exif.IFD,System.Text.Encoding)">
            <summary>
            Creates an ExifProperty from the given interoperability parameters.
            </summary>
            <param name="tag">The tag id of the exif property.</param>
            <param name="type">The type id of the exif property.</param>
            <param name="count">Byte or component count.</param>
            <param name="value">Field data as an array of bytes.</param>
            <param name="byteOrder">Byte order of value.</param>
            <param name="ifd">IFD section containing this property.</param>
            <param name="encoding">The encoding to be used for text metadata when the source encoding is unknown.</param>
            <returns>an ExifProperty initialized from the interoperability parameters.</returns>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ExifTag">
            <summary>
            Represents the tags associated with exif fields.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExifTag.JFIFVersion">
            <summary>
            Represents the JFIF version.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExifTag.JFIFUnits">
            <summary>
            Represents units for X and Y densities.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExifTag.XDensity">
            <summary>
            Horizontal pixel density.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExifTag.YDensity">
            <summary>
            Vertical pixel density
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExifTag.JFIFXThumbnail">
            <summary>
            Thumbnail horizontal pixel count.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExifTag.JFIFYThumbnail">
            <summary>
            Thumbnail vertical pixel count.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExifTag.JFIFThumbnail">
            <summary>
            JFIF JPEG thumbnail.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExifTag.JFXXExtensionCode">
            <summary>
            Code which identifies the JFIF extension.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExifTag.JFXXXThumbnail">
            <summary>
            Thumbnail horizontal pixel count.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExifTag.JFXXYThumbnail">
            <summary>
            Thumbnail vertical pixel count.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExifTag.JFXXPalette">
            <summary>
            The 256-Color RGB palette.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ExifTag.JFXXThumbnail">
            <summary>
            JFIF thumbnail. The thumbnail will be either a JPEG,
            a 256 color palette bitmap, or a 24-bit RGB bitmap.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifTagFactory.GetExifTag(Umbraco.Web.Media.Exif.IFD,System.UInt16)">
            <summary>
            Returns the ExifTag corresponding to the given tag id.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifTagFactory.GetTagID(Umbraco.Web.Media.Exif.ExifTag)">
            <summary>
            Returns the tag id corresponding to the given ExifTag.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifTagFactory.GetTagIFD(Umbraco.Web.Media.Exif.ExifTag)">
            <summary>
            Returns the IFD section containing the given tag.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifTagFactory.GetTagName(Umbraco.Web.Media.Exif.ExifTag)">
            <summary>
            Returns the string representation for the given exif tag.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifTagFactory.GetTagName(Umbraco.Web.Media.Exif.IFD,System.UInt16)">
            <summary>
            Returns the string representation for the given tag id.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ExifTagFactory.GetTagLongName(Umbraco.Web.Media.Exif.ExifTag)">
            <summary>
            Returns the string representation for the given exif tag including
            IFD section and tag id.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.IFD">
            <summary>
            Represents the IFD section containing tags.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ImageFile">
            <summary>
            Represents the base class for image files.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ImageFile.Format">
            <summary>
            Returns the format of the <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ImageFile.Properties">
            <summary>
            Gets the collection of Exif properties contained in the <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ImageFile.Thumbnail">
            <summary>
            Gets or sets the embedded thumbnail image.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ImageFile.Item(Umbraco.Web.Media.Exif.ExifTag)">
            <summary>
            Gets or sets the Exif property with the given key.
            </summary>
            <param name="key">The Exif tag associated with the Exif property.</param>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ImageFile.Encoding">
            <summary>
            Gets the encoding used for text metadata when the source encoding is unknown.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFile.ToImage">
            <summary>
            Converts the <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> to a <see cref="T:System.Drawing.Image"/>.
            </summary>
            <returns>Returns a <see cref="T:System.Drawing.Image"/> containing image data.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFile.Save(System.String)">
            <summary>
            Saves the <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> to the specified file.
            </summary>
            <param name="filename">A string that contains the name of the file.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFile.Save(System.IO.Stream)">
            <summary>
            Saves the <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> to the specified stream.
            </summary>
            <param name="stream">A <see cref="!:Sytem.IO.Stream"/> to save image data to.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFile.FromFile(System.String)">
            <summary>
            Creates an <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> from the specified file.
            </summary>
            <param name="filename">A string that contains the name of the file.</param>
            <returns>The <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> created from the file.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFile.FromFile(System.String,System.Text.Encoding)">
            <summary>
            Creates an <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> from the specified file.
            </summary>
            <param name="filename">A string that contains the name of the file.</param>
            <param name="encoding">The encoding to be used for text metadata when the source encoding is unknown.</param>
            <returns>The <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> created from the file.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFile.FromStream(System.IO.Stream)">
            <summary>
            Creates an <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> from the specified data stream.
            </summary>
            <param name="stream">A <see cref="!:Sytem.IO.Stream"/> that contains image data.</param>
            <returns>The <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> created from the file.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFile.FromStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates an <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> from the specified data stream.
            </summary>
            <param name="stream">A <see cref="!:Sytem.IO.Stream"/> that contains image data.</param>
            <param name="encoding">The encoding to be used for text metadata when the source encoding is unknown.</param>
            <returns>The <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> created from the file.</returns>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ImageFileDirectory">
            <summary>
            Represents an image file directory.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ImageFileDirectory.Fields">
            <summary>
            The fields contained in this IFD.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ImageFileDirectory.NextIFDOffset">
            <summary>
            Offset to the next IFD.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.ImageFileDirectory.Strips">
            <summary>
            Compressed image data.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFileDirectory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.ImageFileDirectory"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFileDirectory.FromBytes(System.Byte[],System.UInt32,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns a <see cref="T:Umbraco.Web.Media.Exif.ImageFileDirectory"/> initialized from the given byte data.
            </summary>
            <param name="data">The data.</param>
            <param name="offset">The offset into <paramref name="data"/>.</param>
            <param name="byteOrder">The byte order of <paramref name="data"/>.</param>
            <returns>A <see cref="T:Umbraco.Web.Media.Exif.ImageFileDirectory"/> initialized from the given byte data.</returns>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ImageFileDirectoryEntry">
            <summary>
            Represents an entry in the image file directory.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ImageFileDirectoryEntry.Tag">
            <summary>
            The tag that identifies the field.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ImageFileDirectoryEntry.Type">
            <summary>
            Field type identifier.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ImageFileDirectoryEntry.Count">
            <summary>
            Count of Type.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ImageFileDirectoryEntry.Data">
            <summary>
            Field data.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFileDirectoryEntry.#ctor(System.UInt16,System.UInt16,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.ImageFileDirectoryEntry"/> struct.
            </summary>
            <param name="tag">The tag that identifies the field.</param>
            <param name="type">Field type identifier.</param>
            <param name="count">Count of Type.</param>
            <param name="data">Field data.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFileDirectoryEntry.FromBytes(System.Byte[],System.UInt32,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns a <see cref="T:Umbraco.Web.Media.Exif.ImageFileDirectoryEntry"/> initialized from the given byte data.
            </summary>
            <param name="data">The data.</param>
            <param name="offset">The offset into <paramref name="data"/>.</param>
            <param name="byteOrder">The byte order of <paramref name="data"/>.</param>
            <returns>A <see cref="T:Umbraco.Web.Media.Exif.ImageFileDirectoryEntry"/> initialized from the given byte data.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.ImageFileDirectoryEntry.GetBaseLength(System.UInt16)">
            <summary>
            Gets the base byte length for the given type.
            </summary>
            <param name="type">Type identifier.</param>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.ImageFileFormat">
            <summary>
            Represents the format of the <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/>.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ImageFileFormat.Unknown">
            <summary>
            The file is not recognized.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ImageFileFormat.JPEG">
            <summary>
            The file is a JPEG/Exif or JPEG/JFIF file.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ImageFileFormat.TIFF">
            <summary>
            The file is a TIFF File.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.ImageFileFormat.SVG">
            <summary>
            The file is a SVG File.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.JFIFDensityUnit">
            <summary>
            Represents the units for the X and Y densities
            for a JFIF file.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.JFIFDensityUnit.None">
            <summary>
            No units, XDensity and YDensity specify the pixel aspect ratio.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.JFIFDensityUnit.DotsPerInch">
            <summary>
            XDensity and YDensity are dots per inch.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.JFIFDensityUnit.DotsPerCm">
            <summary>
            XDensity and YDensity are dots per cm.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.JFIFExtension">
            <summary>
            Represents the JFIF extension.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.JFIFExtension.ThumbnailJPEG">
            <summary>
            Thumbnail coded using JPEG.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.JFIFExtension.ThumbnailPaletteRGB">
            <summary>
            Thumbnail stored using a 256-Color RGB palette.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.JFIFExtension.Thumbnail24BitRGB">
            <summary>
            Thumbnail stored using 3 bytes/pixel (24-bit) RGB values.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.JFIFVersion">
            <summary>
            Represents the JFIF version as a 16 bit unsigned integer. (EXIF Specification: SHORT)
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.JFIFVersion.Major">
            <summary>
            Gets the major version.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.JFIFVersion.Minor">
            <summary>
            Gets the minor version.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.JFIFThumbnailProperty">
            <summary>
            Represents a JFIF thumbnail. (EXIF Specification: BYTE)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.JFIFThumbnail">
            <summary>
            Represents a JFIF thumbnail.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.JFIFThumbnail.Palette">
            <summary>
            Gets the 256 color RGB palette.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.JFIFThumbnail.PixelData">
            <summary>
            Gets raw image data.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.JFIFThumbnail.Format">
            <summary>
            Gets the image format.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.NotValidJPEGFileException">
            <summary>
            The exception that is thrown when the format of the JPEG file could not be understood.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidJPEGFileException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidJPEGFileException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidJPEGFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidJPEGFileException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidJPEGFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidJPEGFileException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidJPEGFileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidJPEGFileException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.NotValidTIFFileException">
            <summary>
            The exception that is thrown when the format of the TIFF file could not be understood.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidTIFFileException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidTIFFileException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidTIFFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidTIFFileException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidTIFFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidTIFFileException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidTIFFileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidTIFFileException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.NotValidTIFFHeader">
            <summary>
            The exception that is thrown when the format of the TIFF header could not be understood.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidTIFFHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidTIFFHeader" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidTIFFHeader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidTIFFHeader" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidTIFFHeader.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidTIFFHeader" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.NotValidTIFFHeader.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.NotValidTIFFHeader" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.SectionExceeds64KBException">
            <summary>
            The exception that is thrown when the length of a section exceeds 64 kB.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Web.Media.Exif.SectionExceeds64KBException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.SectionExceeds64KBException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.SectionExceeds64KBException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.SectionExceeds64KBException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.SectionExceeds64KBException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.SectionExceeds64KBException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.SectionExceeds64KBException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.SectionExceeds64KBException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.JPEGFile">
            <summary>
            Represents the binary view of a JPEG compressed file.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.JPEGFile.ByteOrder">
            <summary>
            Gets or sets the byte-order of the Exif properties.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.JPEGFile.Sections">
            <summary>
            Gets or sets the sections contained in the <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.JPEGFile.TrailingData">
            <summary>
            Gets or sets non-standard trailing data following the End of Image (EOI) marker.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGFile.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="!:ExifFile"/> class.
            </summary>
            <param name="stream">A <see cref="!:Sytem.IO.Stream"/> that contains image data.</param>
            <param name="encoding">The encoding to be used for text metadata when the source encoding is unknown.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGFile.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the JPEG/Exif image to the given stream.
            </summary>
            <param name="filename">The path to the JPEG/Exif file.</param>
            <param name="preserveMakerNote">Determines whether the maker note offset of
            the original file will be preserved.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGFile.Save(System.String,System.Boolean)">
            <summary>
            Saves the JPEG/Exif image with the given filename.
            </summary>
            <param name="filename">The path to the JPEG/Exif file.</param>
            <param name="preserveMakerNote">Determines whether the maker note offset of
            the original file will be preserved.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGFile.Save(System.String)">
            <summary>
            Saves the JPEG/Exif image with the given filename.
            </summary>
            <param name="filename">The path to the JPEG/Exif file.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGFile.Save(System.IO.Stream)">
            <summary>
            Saves the JPEG/Exif image to the given stream.
            </summary>
            <param name="filename">The path to the JPEG/Exif file.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGFile.ToImage">
            <summary>
            Returns a System.Drawing.Image created with image data.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGFile.ReadJFIFAPP0">
            <summary>
            Reads the APP0 section containing JFIF metadata.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGFile.WriteJFIFApp0">
            <summary>
            Replaces the contents of the APP0 section with the JFIF properties.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGFile.ReadJFXXAPP0">
            <summary>
            Reads the APP0 section containing JFIF extension metadata.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGFile.WriteJFXXApp0">
            <summary>
            Replaces the contents of the APP0 section with the JFIF extension properties.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGFile.ReadExifAPP1">
            <summary>
            Reads the APP1 section containing Exif metadata.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGFile.WriteExifApp1(System.Boolean)">
            <summary>
            Replaces the contents of the APP1 section with the Exif properties.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.JPEGMarker">
            <summary>
            Represents a JPEG marker byte.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.JPEGSection">
            <summary>
            Represents the memory view of a JPEG section.
            A JPEG section is the data between markers of the JPEG file.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.JPEGSection.Marker">
            <summary>
            The marker byte representing the section.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.JPEGSection.Header">
            <summary>
            Section header as a byte array. This is different from the header
            definition in JPEG specification in that it does not include the
            two byte section length.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.JPEGSection.EntropyData">
            <summary>
            For the SOS and RST markers, this contains the entropy coded data.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGSection.#ctor(Umbraco.Web.Media.Exif.JPEGMarker,System.Byte[],System.Byte[])">
            <summary>
            Constructs a JPEGSection represented by the marker byte and containing
            the given data.
            </summary>
            <param name="marker">The marker byte representing the section.</param>
            <param name="data">Section data.</param>
            <param name="entropydata">Entropy coded data.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGSection.#ctor(Umbraco.Web.Media.Exif.JPEGMarker)">
            <summary>
            Constructs a JPEGSection represented by the marker byte.
            </summary>
            <param name="marker">The marker byte representing the section.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.JPEGSection.ToString">
            <summary>
            Returns a string representation of the current section.
            </summary>
            <returns>A System.String that represents the current section.</returns>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.MathEx">
            <summary>
            Contains extended Math functions.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.GCD(System.UInt32,System.UInt32)">
            <summary>
            Returns the greatest common divisor of two numbers.
            </summary>
            <param name="a">First number.</param>
            <param name="b">Second number.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.GCD(System.UInt64,System.UInt64)">
            <summary>
            Returns the greatest common divisor of two numbers.
            </summary>
            <param name="a">First number.</param>
            <param name="b">Second number.</param>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.MathEx.Fraction32">
            <summary>
            Represents a generic rational number represented by 32-bit signed numerator and denominator.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.MathEx.Fraction32.Numerator">
            <summary>
            Gets or sets the numerator.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.MathEx.Fraction32.Denominator">
            <summary>
            Gets or sets the denominator.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.MathEx.Fraction32.Error">
            <summary>
            Gets the error term.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.MathEx.Fraction32.IsNegative">
            <summary>
            Gets or sets a value determining id the fraction is a negative value.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.IsNan(Umbraco.Web.Media.Exif.MathEx.Fraction32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to a value
            that is not a number.
            </summary>
            <param name="f">A fraction.</param>
            <returns>true if f evaluates to Fraction.NaN; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.IsNegativeInfinity(Umbraco.Web.Media.Exif.MathEx.Fraction32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative
            infinity.
            </summary>
            <param name="f">A fraction.</param>
            <returns>true if f evaluates to Fraction.NegativeInfinity; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.IsPositiveInfinity(Umbraco.Web.Media.Exif.MathEx.Fraction32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive
            infinity.
            </summary>
            <param name="f">A fraction.</param>
            <returns>true if f evaluates to Fraction.PositiveInfinity; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.IsInfinity(Umbraco.Web.Media.Exif.MathEx.Fraction32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative
            or positive infinity.
            </summary>
            <param name="f">A fraction.</param>
            <returns>true if f evaluates to Fraction.NegativeInfinity or Fraction.PositiveInfinity; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.Inverse(Umbraco.Web.Media.Exif.MathEx.Fraction32)">
            <summary>
            Returns the multiplicative inverse of a given value.
            </summary>
            <param name="f">A fraction.</param>
            <returns>Multiplicative inverse of f.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.Parse(System.String)">
            <summary>
            Converts the string representation of a fraction to a fraction object.
            </summary>
            <param name="s">A string formatted as numerator/denominator</param>
            <returns>A fraction object converted from s.</returns>
            <exception cref="T:System.ArgumentNullException">s is null</exception>
            <exception cref="T:System.FormatException">s is not in the correct format</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than System.UInt32.MinValue or greater than
            System.UInt32.MaxValue.
            </exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.TryParse(System.String,Umbraco.Web.Media.Exif.MathEx.Fraction32@)">
            <summary>
            Converts the string representation of a fraction to a fraction object.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string formatted as numerator/denominator</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.Set(System.Int32,System.Int32)">
            <summary>
            Sets the value of this instance to the fraction represented
            by the given numerator and denominator.
            </summary>
            <param name="numerator">The new numerator.</param>
            <param name="denominator">The new denominator.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal value-wise.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>true if obj and this instance are the same type and represent
            the same value; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.Equals(Umbraco.Web.Media.Exif.MathEx.Fraction32)">
            <summary>
            Indicates whether this instance and a specified object are equal value-wise.
            </summary>
            <param name="obj">Another fraction object to compare to.</param>
            <returns>true if obj and this instance represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns> A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <param name="format">A numeric format string.</param>
            <param name="formatProvider">
            An System.IFormatProvider that supplies culture-specific
            formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as
            specified by format and provider.
            </returns>
            <exception cref="T:System.FormatException">
            format is invalid or not supported.
            </exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.ToString(System.String)">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>
            The string representation of the value of this instance as
            specified by format.
            </returns>
            <exception cref="T:System.FormatException">
            format is invalid or not supported.
            </exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <param name="formatProvider">
            An System.IFormatProvider that supplies culture-specific
            formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as
            specified by provider.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.ToString">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <returns>A string formatted as numerator/denominator.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of
            their relative values.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Less than zero: This instance is less than obj.
            Zero: This instance is equal to obj.
            Greater than zero: This instance is greater than obj or obj is null.
            </returns>
            <exception cref="T:System.ArgumentException">obj is not a Fraction.</exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.CompareTo(Umbraco.Web.Media.Exif.MathEx.Fraction32)">
            <summary>
            Compares this instance to a specified object and returns an indication of
            their relative values.
            </summary>
            <param name="obj">An fraction to compare with this instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Less than zero: This instance is less than obj.
            Zero: This instance is equal to obj.
            Greater than zero: This instance is greater than obj or obj is null.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.FromDouble(System.Double)">
            <summary>
            Converts the given floating-point number to its rational representation.
            </summary>
            <param name="value">The floating-point number to be converted.</param>
            <returns>The rational representation of value.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.FromString(System.String)">
            <summary>Converts the string representation of a fraction to a Fraction type.</summary>
            <param name="s">The input string formatted as numerator/denominator.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.FormatException">s is not formatted as numerator/denominator.</exception>
            <exception cref="T:System.OverflowException">
            s represents numbers less than System.Int32.MinValue or greater than
            System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.Fraction32.Reduce(System.Int32@,System.Int32@)">
            <summary>
            Reduces the given numerator and denominator by dividing with their
            greatest common divisor.
            </summary>
            <param name="numerator">numerator to be reduced.</param>
            <param name="denominator">denominator to be reduced.</param>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.MathEx.UFraction32">
            <summary>
            Represents a generic rational number represented by 32-bit unsigned numerator and denominator.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.MathEx.UFraction32.Numerator">
            <summary>
            Gets or sets the numerator.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.MathEx.UFraction32.Denominator">
            <summary>
            Gets or sets the denominator.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.MathEx.UFraction32.Error">
            <summary>
            Gets the error term.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.IsNan(Umbraco.Web.Media.Exif.MathEx.UFraction32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to a value
            that is not a number.
            </summary>
            <param name="f">A fraction.</param>
            <returns>true if f evaluates to Fraction.NaN; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.IsInfinity(Umbraco.Web.Media.Exif.MathEx.UFraction32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to infinity.
            </summary>
            <param name="f">A fraction.</param>
            <returns>true if f evaluates to Fraction.Infinity; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.Parse(System.String)">
            <summary>
            Converts the string representation of a fraction to a fraction object.
            </summary>
            <param name="s">A string formatted as numerator/denominator</param>
            <returns>A fraction object converted from s.</returns>
            <exception cref="T:System.ArgumentNullException">s is null</exception>
            <exception cref="T:System.FormatException">s is not in the correct format</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than System.UInt32.MinValue or greater than
            System.UInt32.MaxValue.
            </exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.TryParse(System.String,Umbraco.Web.Media.Exif.MathEx.UFraction32@)">
            <summary>
            Converts the string representation of a fraction to a fraction object.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string formatted as numerator/denominator</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.Set(System.UInt32,System.UInt32)">
            <summary>
            Sets the value of this instance to the fraction represented
            by the given numerator and denominator.
            </summary>
            <param name="numerator">The new numerator.</param>
            <param name="denominator">The new denominator.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.Inverse(Umbraco.Web.Media.Exif.MathEx.UFraction32)">
            <summary>
            Returns the multiplicative inverse of a given value.
            </summary>
            <param name="f">A fraction.</param>
            <returns>Multiplicative inverse of f.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal value-wise.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>true if obj and this instance are the same type and represent
            the same value; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.Equals(Umbraco.Web.Media.Exif.MathEx.UFraction32)">
            <summary>
            Indicates whether this instance and a specified object are equal value-wise.
            </summary>
            <param name="obj">Another fraction object to compare to.</param>
            <returns>true if obj and this instance represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns> A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <param name="format">A numeric format string.</param>
            <param name="formatProvider">
            An System.IFormatProvider that supplies culture-specific
            formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as
            specified by format and provider.
            </returns>
            <exception cref="T:System.FormatException">
            format is invalid or not supported.
            </exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.ToString(System.String)">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>
            The string representation of the value of this instance as
            specified by format.
            </returns>
            <exception cref="T:System.FormatException">
            format is invalid or not supported.
            </exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <param name="formatProvider">
            An System.IFormatProvider that supplies culture-specific
            formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as
            specified by provider.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.ToString">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <returns>A string formatted as numerator/denominator.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of
            their relative values.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Less than zero: This instance is less than obj.
            Zero: This instance is equal to obj.
            Greater than zero: This instance is greater than obj or obj is null.
            </returns>
            <exception cref="T:System.ArgumentException">obj is not a Fraction.</exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.CompareTo(Umbraco.Web.Media.Exif.MathEx.UFraction32)">
            <summary>
            Compares this instance to a specified object and returns an indication of
            their relative values.
            </summary>
            <param name="obj">An fraction to compare with this instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Less than zero: This instance is less than obj.
            Zero: This instance is equal to obj.
            Greater than zero: This instance is greater than obj or obj is null.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.FromDouble(System.Double)">
            <summary>
            Converts the given floating-point number to its rational representation.
            </summary>
            <param name="value">The floating-point number to be converted.</param>
            <returns>The rational representation of value.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.FromString(System.String)">
            <summary>Converts the string representation of a fraction to a Fraction type.</summary>
            <param name="s">The input string formatted as numerator/denominator.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.FormatException">s is not formatted as numerator/denominator.</exception>
            <exception cref="T:System.OverflowException">
            s represents numbers less than System.UInt32.MinValue or greater than
            System.UInt32.MaxValue.
            </exception>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.MathEx.UFraction32.Reduce(System.UInt32@,System.UInt32@)">
            <summary>
            Reduces the given numerator and denominator by dividing with their
            greatest common divisor.
            </summary>
            <param name="numerator">numerator to be reduced.</param>
            <param name="denominator">denominator to be reduced.</param>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.TIFFFile">
            <summary>
            Represents the binary view of a TIFF file.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.TIFFFile.TIFFHeader">
            <summary>
            Gets the TIFF header.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.TIFFFile.IFDs">
            <summary>
            Gets the image file directories.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.TIFFFile.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.JPEGFile"/> class from the
            specified data stream.
            </summary>
            <param name="stream">A <see cref="!:Sytem.IO.Stream"/> that contains image data.</param>
            <param name="encoding">The encoding to be used for text metadata when the source encoding is unknown.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.TIFFFile.Save(System.IO.Stream)">
            <summary>
            Saves the <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> to the given stream.
            </summary>
            <param name="stream">The data stream used to save the image.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.TIFFFile.ToImage">
            <summary>
            Converts the <see cref="T:Umbraco.Web.Media.Exif.ImageFile"/> to a <see cref="T:System.Drawing.Image"/>.
            </summary>
            <returns>Returns a <see cref="T:System.Drawing.Image"/> containing image data.</returns>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.TIFFHeader">
            <summary>
            Represents a TIFF Header.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.TIFFHeader.ByteOrder">
            <summary>
            The byte order of the image file.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.TIFFHeader.ID">
            <summary>
            TIFF ID. This value should always be 42.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.TIFFHeader.IFDOffset">
            <summary>
            The offset to the first IFD section from the
            start of the TIFF header.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Media.Exif.TIFFHeader.TIFFHeaderByteOrder">
            <summary>
            The byte order of the TIFF header itself.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.TIFFHeader.#ctor(Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder,System.Byte,System.UInt32,Umbraco.Web.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.TIFFHeader"/> struct.
            </summary>
            <param name="byteOrder">The byte order.</param>
            <param name="id">The TIFF ID. This value should always be 42.</param>
            <param name="ifdOffset">The offset to the first IFD section from the
            start of the TIFF header.</param>
            <param name="headerByteOrder">The byte order of the TIFF header itself.</param>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.TIFFHeader.FromBytes(System.Byte[],System.Int32)">
            <summary>
            Returns a <see cref="T:Umbraco.Web.Media.Exif.TIFFHeader"/> initialized from the given byte data.
            </summary>
            <param name="data">The data.</param>
            <param name="offset">The offset into <paramref name="data"/>.</param>
            <returns>A <see cref="T:Umbraco.Web.Media.Exif.TIFFHeader"/> initialized from the given byte data.</returns>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.TIFFStrip">
            <summary>
            Represents a strip of compressed image data in a TIFF file.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Media.Exif.TIFFStrip.Data">
            <summary>
            Compressed image data contained in this strip.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.TIFFStrip.#ctor(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Media.Exif.TIFFStrip"/> class.
            </summary>
            <param name="data">The byte array to copy strip from.</param>
            <param name="offset">The offset to the beginning of strip.</param>
            <param name="length">The length of strip.</param>
        </member>
        <member name="T:Umbraco.Web.Media.Exif.Utility">
            <summary>
            Contains utility functions.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.Exif.Utility.GetStreamBytes(System.IO.Stream)">
            <summary>
            Reads the entire stream and returns its contents as a byte array.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read.</param>
            <returns>Contents of the <paramref name="stream"/> as a byte array.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.ImageHelper.GetDimensions(System.IO.Stream)">
            <summary>
            Gets the dimensions of an image.
            </summary>
            <param name="stream">A stream containing the image bytes.</param>
            <returns>The dimension of the image.</returns>
            <remarks>First try with EXIF as it is faster and does not load the entire image
            in memory. Fallback to GDI which means loading the image in memory and thus
            use potentially large amounts of memory.</remarks>
        </member>
        <member name="T:Umbraco.Web.Media.UploadAutoFillProperties">
            <summary>
            Provides methods to manage auto-fill properties for upload fields.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Media.UploadAutoFillProperties.Reset(Umbraco.Core.Models.IContentBase,Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField,System.String,System.String)">
            <summary>
            Resets the auto-fill properties of a content item, for a specified auto-fill configuration.
            </summary>
            <param name="content">The content item.</param>
            <param name="autoFillConfig">The auto-fill configuration.</param>
            <param name="culture">Variation language.</param>
            <param name="segment">Variation segment.</param>
        </member>
        <member name="M:Umbraco.Web.Media.UploadAutoFillProperties.Populate(Umbraco.Core.Models.IContentBase,Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField,System.String,System.String,System.String)">
            <summary>
            Populates the auto-fill properties of a content item, for a specified auto-fill configuration.
            </summary>
            <param name="content">The content item.</param>
            <param name="autoFillConfig">The auto-fill configuration.</param>
            <param name="filepath">The filesystem path to the uploaded file.</param>
            <remarks>The <paramref name="filepath"/> parameter is the path relative to the filesystem.</remarks>
            <param name="culture">Variation language.</param>
            <param name="segment">Variation segment.</param>
        </member>
        <member name="M:Umbraco.Web.Media.UploadAutoFillProperties.Populate(Umbraco.Core.Models.IContentBase,Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField,System.String,System.IO.Stream,System.String,System.String)">
            <summary>
            Populates the auto-fill properties of a content item.
            </summary>
            <param name="content">The content item.</param>
            <param name="autoFillConfig"></param>
            <param name="filepath">The filesystem-relative filepath, or null to clear properties.</param>
            <param name="filestream">The stream containing the file data.</param>
            <param name="culture">Variation language.</param>
            <param name="segment">Variation segment.</param>
        </member>
        <member name="T:Umbraco.Web.Migrations.PostMigrations.PublishedSnapshotRebuilder">
            <summary>
            Implements <see cref="T:Umbraco.Core.Migrations.PostMigrations.IPublishedSnapshotRebuilder"/> in Umbraco.Web (rebuilding).
            </summary>
        </member>
        <member name="M:Umbraco.Web.Migrations.PostMigrations.PublishedSnapshotRebuilder.#ctor(Umbraco.Web.PublishedCache.IPublishedSnapshotService,Umbraco.Web.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Migrations.PostMigrations.PublishedSnapshotRebuilder"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Migrations.PostMigrations.PublishedSnapshotRebuilder.Rebuild">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Migrations.PostMigrations.ClearCsrfCookies">
            <summary>
            Clears Csrf tokens.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MacroDisplay">
            <summary>
            The macro display model
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.ContentEditing.MacroDisplay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Models.ContentEditing.MacroDisplay"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroDisplay.Notifications">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroDisplay.UseInEditor">
            <summary>
            Gets or sets a value indicating whether the macro can be used in a rich text editor.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroDisplay.RenderInEditor">
            <summary>
            Gets or sets a value indicating whether the macro should be rendered a rich text editor.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroDisplay.CachePeriod">
            <summary>
            Gets or sets the cache period.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroDisplay.CacheByPage">
            <summary>
            Gets or sets a value indicating whether the macro should be cached by page
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroDisplay.CacheByUser">
            <summary> 
            Gets or sets a value indicating whether the macro should be cached by user
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroDisplay.View">
            <summary>
            Gets or sets the view.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroDisplay.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MacroParameterDisplay">
            <summary>
            The macro parameter display.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroParameterDisplay.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroParameterDisplay.Label">
            <summary>
            Gets or sets the label.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroParameterDisplay.Editor">
            <summary>
            Gets or sets the editor.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroParameterDisplay.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationDisplay.ParentId">
            <summary>
            Gets or sets the Parent Id of the Relation (Source).
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationDisplay.ParentName">
            <summary>
            Gets or sets the Parent Name of the relation (Source).
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationDisplay.ChildId">
            <summary>
            Gets or sets the Child Id of the Relation (Destination).
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationDisplay.ChildName">
            <summary>
            Gets or sets the Child Name of the relation (Destination).
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationDisplay.CreateDate">
            <summary>
            Gets or sets the date when the Relation was created.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationDisplay.Comment">
            <summary>
            Gets or sets a comment for the Relation.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationTypeDisplay.IsBidirectional">
            <summary>
            Gets or sets a boolean indicating whether the RelationType is Bidirectional (true) or Parent to Child (false)
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationTypeDisplay.ParentObjectType">
            <summary>
            Gets or sets the Parents object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationTypeDisplay.ParentObjectTypeName">
            <summary>
            Gets or sets the Parent's object type name.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationTypeDisplay.ChildObjectType">
            <summary>
            Gets or sets the Child's object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationTypeDisplay.ChildObjectTypeName">
            <summary>
            Gets or sets the Child's object type name.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationTypeDisplay.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationTypeSave.IsBidirectional">
            <summary>
            Gets or sets a boolean indicating whether the RelationType is Bidirectional (true) or Parent to Child (false)
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationTypeSave.ParentObjectType">
            <summary>
            Gets or sets the parent object type ID.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.RelationTypeSave.ChildObjectType">
            <summary>
            Gets or sets the child object type ID.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.UnpublishContent">
            <summary>
            Used to unpublish content and variants
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentSavedState">
            <summary>
            The saved state of a content item
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSavedState.NotCreated">
            <summary>
            The item isn't created yet
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSavedState.Draft">
            <summary>
            The item is saved but isn't published
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSavedState.Published">
            <summary>
            The item is published and there are no pending changes
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSavedState.PublishedPendingChanges">
            <summary>
            The item is published and there are pending changes
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.IContentSave`1">
            <summary>
            An interface exposes the shared parts of content, media, members that we use during model binding in order to share logic
            </summary>
            <typeparam name="TPersisted"></typeparam>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.IContentSave`1.Action">
            <summary>
            The action to perform when saving this content item
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.IContentSave`1.PersistedContent">
            <summary>
            The real persisted content object - used during inbound model binding
            </summary>
            <remarks>
            This is not used for outgoing model information.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.AssignedContentPermissions">
            <summary>
            The permissions assigned to a content node
            </summary>
            <remarks>
            The underlying <see cref="T:Umbraco.Web.Models.ContentEditing.EntityBasic"/> data such as Name, etc... is that of the Content item
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.AssignedContentPermissions.AssignedPermissions">
            <summary>
            The assigned permissions to the content item organized by permission group name
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.AssignedUserGroupPermissions">
            <summary>
            The user group permissions assigned to a content node
            </summary>
            <remarks>
            The underlying <see cref="T:Umbraco.Web.Models.ContentEditing.EntityBasic"/> data such as Name, etc... is that of the User Group
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.AssignedUserGroupPermissions.AssignedPermissions">
            <summary>
            The assigned permissions for the user group organized by permission group name
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.AssignedUserGroupPermissions.DefaultPermissions">
            <summary>
            The default permissions for the user group organized by permission group name
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.CodeFileDisplay.VirtualPath">
            <summary>
            VirtualPath is the path to the file on disk
            /views/partials/file.cshtml
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.CodeFileDisplay.Path">
             <summary>
             Path represents the path used by the backoffice tree
             For files stored on disk, this is a URL encoded, comma separated
             path to the file, always starting with -1.
            
             -1,Partials,Parials%2FFolder,Partials%2FFolder%2FFile.cshtml
             </summary>
        </member>
        <member name="M:Umbraco.Web.Models.ContentEditing.CodeFileDisplay.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Some custom validation is required for valid file names
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentVariantSave.Culture">
            <summary>
            The culture of this variant, if this is invariant than this is null or empty
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentVariantSave.Segment">
            <summary>
            The segment of this variant, if this is invariant than this is null or empty
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentVariantSave.Save">
            <summary>
            Indicates if the variant should be updated
            </summary>
            <remarks>
            If this is false, this variant data will not be updated at all
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentVariantSave.Publish">
            <summary>
            Indicates if the variant should be published
            </summary>
            <remarks>
            This option will have no affect if <see cref="P:Umbraco.Web.Models.ContentEditing.ContentVariantSave.Save"/> is false.
            This is not used to unpublish.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentVariantSave.PropertyCollectionDto">
            <summary>
            The property DTO object is used to gather all required property data including data type information etc... for use with validation - used during inbound model binding
            </summary>
            <remarks>
            We basically use this object to hydrate all required data from the database into one object so we can validate everything we need
            instead of having to look up all the data individually.
            This is not used for outgoing model information.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentVariantDisplay">
            <summary>
            Represents the variant info for a content item
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentVariantDisplay.Tabs">
            <summary>
            Defines the tabs containing display properties
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentVariantDisplay.Umbraco#Web#Models#ContentEditing#IContentProperties{Umbraco#Web#Models#ContentEditing#ContentPropertyDisplay}#Properties">
            <summary>
            Internal property used for tests to get all properties from all tabs
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentVariantDisplay.Language">
            <summary>
            The language/culture assigned to this content variation
            </summary>
            <remarks>
            If this is null it means this content variant is an invariant culture
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentVariantDisplay.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
            <remarks>
            The notifications assigned to a variant are currently only used to show custom messages in the save/publish dialogs.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.CreatedContentTypeCollectionResult">
            <summary>
            The result of creating a content type collection in the UI
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DictionaryDisplay">
            <summary>
            The dictionary display model
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.ContentEditing.DictionaryDisplay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Models.ContentEditing.DictionaryDisplay"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryDisplay.Notifications">
            <inheritdoc />
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryDisplay.ParentId">
            <summary>
            Gets or sets the parent id.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryDisplay.Translations">
            <summary>
            Gets the translations.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DictionaryOverviewDisplay">
            <summary>
            The dictionary overview display.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.ContentEditing.DictionaryOverviewDisplay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Models.ContentEditing.DictionaryOverviewDisplay"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryOverviewDisplay.Name">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryOverviewDisplay.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryOverviewDisplay.Level">
            <summary>
            Gets or sets the level.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryOverviewDisplay.Translations">
            <summary>
            Gets or sets the translations.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DictionaryOverviewTranslationDisplay">
            <summary>
            The dictionary translation overview display.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryOverviewTranslationDisplay.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryOverviewTranslationDisplay.HasTranslation">
            <summary>
            Gets or sets a value indicating whether has translation.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DictionarySave">
            <summary>
            Dictionary Save model
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.ContentEditing.DictionarySave.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Models.ContentEditing.DictionarySave"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionarySave.NameIsDirty">
            <summary>
            Gets or sets a value indicating whether name is dirty.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionarySave.Translations">
            <summary>
            Gets the translations.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionarySave.ParentId">
            <summary>
            Gets or sets the parent id.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DictionaryTranslationDisplay">
            <inheritdoc />
            <summary>
            The dictionary translation display model
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryTranslationDisplay.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DictionaryTranslationSave">
            <summary>
            The dictionary translation save model
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryTranslationSave.IsoCode">
            <summary>
            Gets or sets the ISO code.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryTranslationSave.Translation">
            <summary>
            Gets or sets the translation.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DictionaryTranslationSave.LanguageId">
            <summary>
            Gets or sets the language id.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.EditorNavigation">
            <summary>
            A model representing the navigation ("apps") inside an editor in the back office
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.GetAvailableCompositionsFilter.FilterPropertyTypes">
            <summary>
            This is normally an empty list but if additional property type aliases are passed in, any content types that have these aliases will be filtered out.
            This is required because in the case of creating/modifying a content type because new property types being added to it are not yet persisted so cannot
            be looked up via the db, they need to be passed in.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.GetAvailableCompositionsFilter.FilterContentTypes">
            <summary>
            This is normally an empty list but if additional content type aliases are passed in, any content types containing those aliases will be filtered out
            along with any content types that have matching property types that are included in the filtered content types
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.GetAvailableCompositionsFilter.IsElement">
            <summary>
            Wether the content type is currently marked as an element type
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.NotifySetting.NotifyCode">
            <summary>
            The letter from the IAction
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.Permission.Category">
            <summary>
            We'll use this to map the categories but it wont' be returned in the json
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.Permission.PermissionCode">
            <summary>
            The letter from the IAction
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.PostedFolder">
            <summary>
            Used to create a folder with the MediaController
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.TemplateDisplay.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.TreeSearchResult">
            <summary>
            Represents a search result by entity type
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.TreeSearchResult.JsFormatterService">
            <summary>
            This is optional but if specified should be the name of an angular service to format the search result.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.TreeSearchResult.JsFormatterMethod">
            <summary>
            This is optional but if specified should be the name of a method on the jsSvc angular service to use, if not
            specified than it will expect the method to be called `format(searchResult, appAlias, treeAlias)`
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.UserDisplay">
            <summary>
            Represents a user that is being edited
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDisplay.AvailableCultures">
            <summary>
            Gets the available cultures (i.e. to populate a drop down)
            The key is the culture stored in the database, the value is the Name
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDisplay.ResetPasswordValue">
            <summary>
            If the password is reset on save, this value will be populated
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDisplay.CalculatedStartContentIds">
            <summary>
            A readonly value showing the user's current calculated start content ids
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDisplay.CalculatedStartMediaIds">
            <summary>
            A readonly value showing the user's current calculated start media ids
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserGroupBasic.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserGroupBasic.UserCount">
            <summary>
            The number of users assigned to this group
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserGroupBasic.IsSystemUserGroup">
            <summary>
            Is the user group a system group e.g. "Administrators", "Sensitive data" or "Translators"
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserGroupDisplay.DefaultPermissions">
            <summary>
            The default permissions for the user group organized by permission group name
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserGroupDisplay.AssignedPermissions">
            <summary>
            The assigned permissions for the user group organized by permission group name
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.UserGroupPermissionsSave">
            <summary>
            Used to assign user group permissions to a content node
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserGroupPermissionsSave.AssignedPermissions">
            <summary>
            A dictionary of permissions to assign, the key is the user group id
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserGroupSave.Action">
            <summary>
            The action to perform when saving this user group
            </summary>
            <remarks>
            If either of the Publish actions are specified an exception will be thrown.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserGroupSave.DefaultPermissions">
            <summary>
            The list of letters (permission codes) to assign as the default for the user group
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserGroupSave.AssignedPermissions">
            <summary>
            The assigned permissions for content
            </summary>
            <remarks>
            The key is the content id and the list is the list of letters (permission codes) to assign
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserGroupSave.PersistedUserGroup">
            <summary>
            The real persisted user group
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.UserInvite">
            <summary>
            Represents the data used to invite a user
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.UserProfile">
            <summary>
            A bare minimum structure that represents a user, usually attached to other objects
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.UserSave">
            <summary>
            Represents the data used to persist a user
            </summary>
            <remarks>
            This will be different from the model used to display a user and we don't want to "Overpost" data back to the server,
            and there will most likely be different bits of data required for updating passwords which will be different from the
            data used to display vs save
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MemberGroupDisplay.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.EntityBasic.Key">
            <summary>
            This is the unique Id stored in the database - but could also be the unique id for a custom membership provider
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.EntityBasic.Alias">
            <summary>
            This will only be populated for some entities like macros
            </summary>
            <remarks>
            It is possible to override this to specify different validation attributes if required
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.EntityBasic.Path">
            <summary>
            The path of the entity
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.EntityBasic.AdditionalData">
            <summary>
            A collection of extra data that is available for this specific entity/entity type
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentTypeCompositionDisplay.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentTypeCompositionDisplay.Errors">
             <summary>
             This is used for validation of a content item.
             </summary>
             <remarks>
             A content item can be invalid but still be saved. This occurs when there's property validation errors, we will
             still save the item but it cannot be published. So we need a way of returning validation errors as well as the
             updated model.
            
             NOTE: The ProperCase is important because when we return ModeState normally it will always be proper case.
             </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentTypeSave">
            <summary>
            Abstract model used to save content types
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.ContentEditing.ContentTypeSave.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Custom validation
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentTypeSave`1">
            <summary>
            Abstract model used to save content types
            </summary>
            <typeparam name="TPropertyType"></typeparam>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentTypeSave`1.AllowCultureVariant">
            <summary>
            A rule for defining how a content type can be varied
            </summary>
            <remarks>
            This is only supported on document types right now but in the future it could be media types too
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.ContentEditing.ContentTypeSave`1.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Custom validation
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DocumentTypeSave">
            <summary>
            Model used to save a document type
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DocumentTypeSave.AllowedTemplates">
            <summary>
            The list of allowed templates to assign (template alias)
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DocumentTypeSave.DefaultTemplate">
            <summary>
            The default template to assign (template alias)
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.ContentEditing.DocumentTypeSave.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Custom validation
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MediaTypeSave">
            <summary>
            Model used to save a media type
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MemberPropertyTypeBasic">
            <summary>
            Basic member property type
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MemberTypeSave">
            <summary>
            Model used to save a member type
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.PostedFiles">
            <summary>
            This is used for the response of PostAddFile so that we can analyze the response in a filter and remove the
            temporary files that were created.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.PropertyGroupBasic.GenericPropertiesGroupId">
            <summary>
            Gets the special generic properties tab identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PropertyGroupBasic.IsGenericProperties">
            <summary>
            Gets a value indicating whether this tab is the generic properties tab.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PropertyGroupBasic.Inherited">
            <summary>
            Gets a value indicating whether the property group is inherited through
            content types composition.
            </summary>
            <remarks>A property group can be inherited and defined on the content type
            currently being edited, at the same time. Inherited is true when there exists at least
            one property group higher in the composition, with the same alias.</remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PropertyTypeBasic.Inherited">
            <summary>
            Gets a value indicating whether the property type is inherited through
            content types composition.
            </summary>
            <remarks>Inherited is true when the property is defined by a content type
            higher in the composition, and not by the content type currently being
            edited.</remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.SimpleNotificationModel.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.SimpleNotificationModel.Message">
            <summary>
             A default message
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PropertyTypeDisplay.Locked">
            <summary>
            Gets a value indicating whether this property should be locked when editing.
            </summary>
            <remarks>This is used for built in properties like the default MemberType
            properties that should not be editable from the backoffice.</remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PropertyTypeDisplay.ContentTypeId">
            <summary>
            This is required for the UI editor to know if this particular property belongs to
            an inherited item or the current item.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PropertyTypeDisplay.ContentTypeName">
            <summary>
            This is required for the UI editor to know which content type name this property belongs
            to based on the property inheritance structure
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PropertyGroupDisplay`1.ContentTypeId">
            <summary>
            Gets the context content type.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PropertyGroupDisplay`1.ParentTabContentTypes">
            <summary>
            Gets the identifiers of the content types that define this group.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PropertyGroupDisplay`1.ParentTabContentTypeNames">
            <summary>
            Gets the name of the content types that define this group.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DataTypeBasic">
            <summary>
            The basic data type information
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeBasic.IsSystemDataType">
            <summary>
            Whether or not this is a system data type, in which case it cannot be deleted
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MemberBasic">
            <summary>
            Used for basic member information
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MemberListDisplay">
            <summary>
            A model representing a member list to be displayed in the back office
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentBaseSave`1">
            <summary>
            A model representing a content item to be saved
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentBaseSave`1.Action">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentBaseSave`1.Umbraco#Web#Models#ContentEditing#IContentSave{TPersisted}#PersistedContent">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentBaseSave`1.PropertyCollectionDto">
            <summary>
            The property DTO object is used to gather all required property data including data type information etc... for use with validation - used during inbound model binding
            </summary>
            <remarks>
            We basically use this object to hydrate all required data from the database into one object so we can validate everything we need
            instead of having to look up all the data individually.
            This is not used for outgoing model information.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MediaItemSave">
            <summary>
            A model representing a media item to be saved
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ListViewAwareContentItemDisplayBase`1">
            <summary>
            An abstract model representing a content item that can be contained in a list view
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ListViewAwareContentItemDisplayBase`1.IsChildOfListView">
            <summary>
            Property indicating if this item is part of a list view parent
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ListViewAwareContentItemDisplayBase`1.TreeNodeUrl">
            <summary>
            Property for the entity's individual tree node URL
            </summary>
            <remarks>
            This is required if the item is a child of a list view since the tree won't actually be loaded,
            so the app will need to go fetch the individual tree node in order to be able to load it's action list (menu)
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.PropertyTypeValidation">
            <summary>
            An object representing the property type validation settings
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ModelWithNotifications`1">
            <summary>
            A generic model supporting notifications, this is useful for returning any model type to include notifications from api controllers
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ModelWithNotifications`1.Value">
            <summary>
            The generic value
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ModelWithNotifications`1.Notifications">
            <summary>
            The notifications
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MoveOrCopy">
            <summary>
            A model representing a model for moving or copying
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MoveOrCopy.ParentId">
            <summary>
            The Id of the node to move or copy to
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MoveOrCopy.Id">
            <summary>
            The id of the node to move or copy
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MoveOrCopy.RelateToOriginal">
            <summary>
            Boolean indicating whether copying the object should create a relation to it's original
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MoveOrCopy.Recursive">
            <summary>
            Boolean indicating whether copying the object should be recursive
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MacroParameter">
            <summary>
            Represents a macro parameter with an editor
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroParameter.View">
            <summary>
            The editor view to render for this parameter
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroParameter.Configuration">
            <summary>
            The configuration for this parameter editor
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroParameter.Value">
            <summary>
            Since we don't post this back this isn't currently really used on the server side
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MemberDisplay">
            <summary>
            A model representing a member to be displayed in the back office
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MemberDisplay.MemberProviderFieldMapping">
            <summary>
            This is used to indicate how to map the membership provider properties to the save model, this mapping
            will change if a developer has opted to have custom member property aliases specified in their membership provider config,
            or if we are editing a member that is not an Umbraco member (custom provider)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MemberSave">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes">
            <summary>
            Represents the type's of Umbraco entities that can be resolved from the EntityController
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Domain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Language">
            <summary>
            Language
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.User">
            <summary>
            User
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Macro">
            <summary>
            Macro
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Media">
            <summary>
            Media
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.MemberType">
            <summary>
            Member Type
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Template">
            <summary>
            Template
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.MemberGroup">
            <summary>
            Member Group
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.MediaType">
            <summary>
            "Media Type
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.DocumentType">
            <summary>
            Document Type
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Stylesheet">
            <summary>
            Stylesheet
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Member">
            <summary>
            Member
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.DataType">
            <summary>
            Data Type
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.PropertyType">
            <summary>
            Property Type
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.PropertyGroup">
            <summary>
            Property Group
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.DictionaryItem">
            <summary>
            Dictionary Item
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DataTypeDisplay">
            <summary>
            Represents a data type that is being edited
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeDisplay.SelectedEditor">
            <summary>
            The alias of the property editor
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeDisplay.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DataTypeSave">
            <summary>
            Represents a datatype model for editing.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeSave.Action">
            <summary>
            Gets or sets the action to perform.
            </summary>
            <remarks>
            Some values (publish) are illegal here.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeSave.EditorAlias">
            <summary>
            Gets or sets the datatype editor.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeSave.ConfigurationFields">
            <summary>
            Gets or sets the datatype configuration fields.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeSave.PersistedDataType">
            <summary>
            Gets or sets the persisted data type.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeSave.PropertyEditor">
            <summary>
            Gets or sets the property editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DataTypeConfigurationFieldDisplay">
            <summary>
            Represents a datatype configuration field model for editing.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeConfigurationFieldDisplay.Name">
            <summary>
            The name to display for this pre-value field
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeConfigurationFieldDisplay.Description">
            <summary>
            The description to display for this pre-value field
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeConfigurationFieldDisplay.HideLabel">
            <summary>
            Specifies whether to hide the label for the pre-value
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeConfigurationFieldDisplay.View">
            <summary>
            The view to render for the field
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeConfigurationFieldDisplay.Config">
            <summary>
            This allows for custom configuration to be injected into the pre-value editor
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DataTypeConfigurationFieldSave">
            <summary>
            Represents a datatype configuration field model for editing.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeConfigurationFieldSave.Key">
            <summary>
            Gets or sets the configuration field key.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeConfigurationFieldSave.Value">
            <summary>
            Gets or sets the configuration field value.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.PropertyEditorBasic">
            <summary>
            Defines an available property editor to be able to select for a data type
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentSortOrder">
            <summary>
            A model representing a new sort order for a content/media item
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentSortOrder.ParentId">
            <summary>
            The parent Id of the nodes being sorted
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentSortOrder.IdSortOrder">
            <summary>
            An array of integer Ids representing the sort order
            </summary>
            <remarks>
            Of course all of these Ids should be at the same level in the hierarchy!!
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplayBase`1.ContentTypeName">
            <summary>
            The name of the content type
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplayBase`1.IsContainer">
            <summary>
            Indicates if the content is configured as a list view container
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplayBase`1.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplayBase`1.Errors">
             <summary>
             This is used for validation of a content item.
             </summary>
             <remarks>
             A content item can be invalid but still be saved. This occurs when there's property validation errors, we will
             still save the item but it cannot be published. So we need a way of returning validation errors as well as the
             updated model.
            
             NOTE: The ProperCase is important because when we return ModeState normally it will always be proper case.
             </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentSaveAction">
            <summary>
            The action associated with saving a content item
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.Save">
            <summary>
            Saves the content item, no publish
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.SaveNew">
            <summary>
            Creates a new content item
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.Publish">
            <summary>
            Saves and publishes the content item
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.PublishNew">
            <summary>
            Creates and publishes a new content item
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.SendPublish">
            <summary>
            Saves and sends publish notification
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.SendPublishNew">
            <summary>
            Creates and sends publish notification
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.Schedule">
            <summary>
            Saves and schedules publishing
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.ScheduleNew">
            <summary>
            Creates and schedules publishing
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.PublishWithDescendants">
            <summary>
            Saves and publishes the content item including all descendants that have a published version
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.PublishWithDescendantsNew">
            <summary>
            Creates and publishes the content item including all descendants that have a published version
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.PublishWithDescendantsForce">
            <summary>
            Saves and publishes the content item including all descendants regardless of whether they have a published version or not
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.PublishWithDescendantsForceNew">
            <summary>
            Creates and publishes the content item including all descendants regardless of whether they have a published version or not
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentTypeBasic">
            <summary>
            A basic version of a content type
            </summary>
            <remarks>
            Generally used to return the minimal amount of data about a content type
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentTypeBasic.Alias">
            <summary>
            Overridden to apply our own validation attributes since this is not always required for other classes
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentTypeBasic.IconIsClass">
            <summary>
            Returns true if the icon represents a CSS class instead of a file path
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentTypeBasic.IconFilePath">
            <summary>
            Returns the icon file path if the icon is not a class, otherwise returns an empty string
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentTypeBasic.ThumbnailIsClass">
            <summary>
            Returns true if the icon represents a CSS class instead of a file path
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentTypeBasic.ThumbnailFilePath">
            <summary>
            Returns the icon file path if the icon is not a class, otherwise returns an empty string
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.IErrorModel.Errors">
            <summary>
            This is used for validation of a content item.
            </summary>
            <remarks>
            A content item can be invalid but still be saved. This occurs when there's property validation errors, we will
            still save the item but it cannot be published. So we need a way of returning validation errors as well as the
            updated model.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.INotificationModel.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MediaItemDisplay">
            <summary>
            A model representing a media item to be displayed in the back office
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.Section">
            <summary>
            Represents a section (application) in the back office
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.Section.RoutePath">
            <summary>
            In some cases a custom route path can be specified so that when clicking on a section it goes to this
            path instead of the normal dashboard path
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.Tab`1">
            <summary>
            Represents a tab in the UI
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.Tab`1.Expanded">
            <summary>
            The expanded state of the tab
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.TabbedContentItem`1.Tabs">
            <summary>
            Defines the tabs containing display properties
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.TabbedContentItem`1.Properties">
            <summary>
            Override the properties property to ensure we don't serialize this
            and to simply return the properties based on the properties in the tabs collection
            </summary>
            <remarks>
            This property cannot be set
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.UserBasic">
            <summary>
            The user model used for paging and listing users in the UI
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserBasic.EmailHash">
            <summary>
            The MD5 lowercase hash of the email which can be used by gravatar
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserBasic.Avatars">
            <summary>
            Returns a list of different size avatars
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserBasic.UserGroups">
            <summary>
            The list of group aliases assigned to the user
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserBasic.IsCurrentUser">
            <summary>
            This is an info flag to denote if this object is the equivalent of the currently logged in user
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserBasic.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.UserDetail">
            <summary>
            Represents information for the current user
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDetail.EmailHash">
            <summary>
            The MD5 lowercase hash of the email which can be used by gravatar
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDetail.SecondsUntilTimeout">
            <summary>
            Gets/sets the number of seconds for the user's auth ticket to expire
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDetail.StartContentIds">
            <summary>
            The user's calculated start nodes based on the start nodes they have assigned directly to them and via the groups they're assigned to
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDetail.StartMediaIds">
            <summary>
            The user's calculated start nodes based on the start nodes they have assigned directly to them and via the groups they're assigned to
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDetail.Avatars">
            <summary>
            Returns a list of different size avatars
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDetail.AllowedSections">
            <summary>
            A list of sections the user is allowed to view.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.SearchResultEntity.Score">
            <summary>
            The score of the search result
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentItemBasic">
            <summary>
            A model representing a basic content item
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemBasic.Published">
            <summary>
            Boolean indicating if this item is published or not based on it's <see cref="P:Umbraco.Web.Models.ContentEditing.ContentItemBasic.State"/>
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemBasic.Edited">
            <summary>
            Determines if the content item is a draft
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemBasic.State">
            <summary>
            The saved/published state of an item
            </summary>
            <remarks>
            This is nullable since it's only relevant for content (non-content like media + members will be null)
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentItemBasic`1">
            <summary>
            A model representing a basic content item with properties
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentItemDisplay">
            <summary>
            A model representing a content item to be displayed in the back office
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.Key">
            <summary>
            This is the unique Id stored in the database - but could also be the unique id for a custom membership provider
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.Path">
            <summary>
            The path of the entity
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.Variants">
            <summary>
            A collection of content variants
            </summary>
            <remarks>
            If a content item is invariant, this collection will only contain one item, else it will contain all culture variants
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.ContentTypeName">
            <summary>
            The name of the content type
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.IsContainer">
            <summary>
            Indicates if the content is configured as a list view container
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.IsElement">
            <summary>
            Indicates if the content is configured as an element
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.IsChildOfListView">
            <summary>
            Property indicating if this item is part of a list view parent
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.TreeNodeUrl">
            <summary>
            Property for the entity's individual tree node URL
            </summary>
            <remarks>
            This is required if the item is a child of a list view since the tree won't actually be loaded,
            so the app will need to go fetch the individual tree node in order to be able to load it's action list (menu)
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.UpdateDate">
            <summary>
            This is the last updated date for the entire content object regardless of variants
            </summary>
            <remarks>
            Each variant has it's own update date assigned as well
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.AllowPreview">
            <summary>
            Determines whether previewing is allowed for this node
            </summary>
            <remarks>
            By default this is true but by using events developers can toggle this off for certain documents if there is nothing to preview
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.AllowedActions">
            <summary>
            The allowed 'actions' based on the user's permissions - Create, Update, Publish, Send to publish
            </summary>
            <remarks>
            Each char represents a button which we can then map on the front-end to the correct actions
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.PersistedContent">
            <summary>
            The real persisted content object - used during inbound model binding
            </summary>
            <remarks>
            This is not used for outgoing model information.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.ContentDto">
            <summary>
            The DTO object used to gather all required content data including data type information etc... for use with validation - used during inbound model binding
            </summary>
            <remarks>
            We basically use this object to hydrate all required data from the database into one object so we can validate everything we need
            instead of having to look up all the data individually.
            This is not used for outgoing model information.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.Errors">
             <summary>
             This is used for validation of a content item.
             </summary>
             <remarks>
             A content item can be invalid but still be saved. This occurs when there's property validation errors, we will
             still save the item but it cannot be published. So we need a way of returning validation errors as well as the
             updated model.
            
             NOTE: The ProperCase is important because when we return ModeState normally it will always be proper case.
             </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.AdditionalData">
            <summary>
            A collection of extra data that is available for this specific entity/entity type
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentPropertyCollectionDto">
            <summary>
            Used to map property values when saving content/media/members
            </summary>
            <remarks>
            This is only used during mapping operations, it is not used for angular purposes
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentItemSave">
            <summary>
            A model representing a content item to be saved
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemSave.TemplateAlias">
            <summary>
            The template alias to save
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemSave.Umbraco#Web#Models#ContentEditing#IContentSave{Umbraco#Core#Models#IContent}#PersistedContent">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentPropertyBasic">
            <summary>
            Represents a content property to be saved
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentPropertyBasic.Id">
            <summary>
            This is the PropertyData ID
            </summary>
            <remarks>
            This is not really used for anything
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentPropertyBasic.IsSensitive">
            <summary>
            Flags the property to denote that it can contain sensitive data
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentPropertyBasic.Culture">
            <summary>
            The culture of the property
            </summary>
            <remarks>
            If this is a variant property then this culture value will be the same as it's variant culture but if this
            is an invariant property then this will be a null value.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentPropertyBasic.Segment">
            <summary>
            The segment of the property
            </summary>
            <remarks>
            The segment value of a property can always be null but can only have a non-null value
            when the property can be varied by segment.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentPropertyBasic.PropertyEditor">
            <summary>
            Used internally during model mapping
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentPropertyDisplay">
            <summary>
            Represents a content property that is displayed in the UI
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentPropertyDto">
            <summary>
            Represents a content property from the database
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.NotificationStyle.Save">
            <summary>
            Save icon
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.NotificationStyle.Info">
            <summary>
            Info icon
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.NotificationStyle.Error">
            <summary>
            Error icon
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.NotificationStyle.Success">
            <summary>
            Success icon
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.NotificationStyle.Warning">
            <summary>
            Warning icon
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.MapperContextExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Umbraco.Core.Mapping.MapperContext"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.MapperContextExtensions.GetCulture(Umbraco.Core.Mapping.MapperContext)">
            <summary>
            Gets the context culture.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.MapperContextExtensions.GetSegment(Umbraco.Core.Mapping.MapperContext)">
            <summary>
            Gets the context segment.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.MapperContextExtensions.SetCulture(Umbraco.Core.Mapping.MapperContext,System.String)">
            <summary>
            Sets a context culture.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.MapperContextExtensions.SetSegment(Umbraco.Core.Mapping.MapperContext,System.String)">
            <summary>
            Sets a context segment.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.MapperContextExtensions.GetIncludedProperties(Umbraco.Core.Mapping.MapperContext)">
            <summary>
            Get included properties.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.MapperContextExtensions.SetIncludedProperties(Umbraco.Core.Mapping.MapperContext,System.String[])">
            <summary>
            Sets included properties.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentBasicSavedStateMapper`1">
            <summary>
            Returns the <see cref="!:ContentSavedState?"/> for an <see cref="T:Umbraco.Core.Models.IContent"/> item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentSavedStateMapper`1">
            <summary>
            Returns the <see cref="T:Umbraco.Web.Models.ContentEditing.ContentSavedState"/> for an <see cref="T:Umbraco.Core.Models.IContent"/> item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.DictionaryMapDefinition">
            <inheritdoc />
            <summary>
            The dictionary model mapper.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.MemberTabsAndPropertiesMapper">
            <summary>
            A custom tab/property resolver for members which will ensure that the built-in membership properties are or aren't displayed
            depending on if the member type has these properties
            </summary>
            <remarks>
            This also ensures that the IsLocked out property is readonly when the member is not locked out - this is because
            an admin cannot actually set isLockedOut = true, they can only unlock.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.MemberTabsAndPropertiesMapper.Map(Umbraco.Core.Models.IMember,Umbraco.Core.Mapping.MapperContext)">
            <inheritdoc />
            <remarks>Overridden to deal with custom member properties and permissions.</remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.MemberTabsAndPropertiesMapper.MapProperties(Umbraco.Core.Models.IContentBase,System.Collections.Generic.List{Umbraco.Core.Models.Property},Umbraco.Core.Mapping.MapperContext)">
            <summary>
            Overridden to assign the IsSensitive property values
            </summary>
            <param name="content"></param>
            <param name="properties"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.MemberTabsAndPropertiesMapper.GetLoginProperty(Umbraco.Core.Services.IMemberService,Umbraco.Core.Models.IMember,Umbraco.Core.Services.ILocalizedTextService)">
            <summary>
            Returns the login property display field
            </summary>
            <param name="memberService"></param>
            <param name="member"></param>
            <param name="display"></param>
            <param name="localizedText"></param>
            <returns></returns>
            <remarks>
            If the membership provider installed is the umbraco membership provider, then we will allow changing the username, however if
            the membership provider is a custom one, we cannot allow changing the username because MembershipProvider's do not actually natively
            allow that.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.ContentVariantMapper.GetSegments(Umbraco.Core.Models.IContent)">
            <summary>
            Returns all segments assigned to the content
            </summary>
            <param name="content"></param>
            <returns>
            Returns all segments assigned to the content including the default `null` segment.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.PropertyTypeGroupMapper`1.GetContentTypeForPropertyGroup(Umbraco.Core.Models.IContentTypeComposition,System.Int32)">
            <summary>
            Gets the content type that defines a property group, within a composition.
            </summary>
            <param name="contentType">The composition.</param>
            <param name="propertyGroupId">The identifier of the property group.</param>
            <returns>The composition content type that defines the specified property group.</returns>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.PropertyTypeGroupMapper`1.GetContentTypeForPropertyType(Umbraco.Core.Models.IContentTypeComposition,System.Int32)">
            <summary>
            Gets the content type that defines a property group, within a composition.
            </summary>
            <param name="contentType">The composition.</param>
            <param name="propertyTypeId">The identifier of the property type.</param>
            <returns>The composition content type that defines the specified property group.</returns>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.MemberMapDefinition">
            <summary>
            Declares model mappings for members.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentPropertyBasicMapper`1">
            <summary>
            Creates a base generic ContentPropertyBasic from a Property
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.ContentPropertyBasicMapper`1.Map(Umbraco.Core.Models.Property,`0,Umbraco.Core.Mapping.MapperContext)">
            <summary>
            Assigns the PropertyEditor, Id, Alias and Value to the property
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentPropertyDisplayMapper">
            <summary>
            Creates a ContentPropertyDisplay from a Property
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentPropertyDtoMapper">
            <summary>
            Creates a ContentPropertyDto from a Property
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentPropertyMapDefinition">
            <summary>
            A mapper which declares how to map content properties. These mappings are shared among media (and probably members) which is
            why they are in their own mapper
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.MediaMapDefinition">
            <summary>
            Declares model mappings for media.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentTypeMapDefinition">
            <summary>
            Defines mappings for content/media/members type mappings
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentMapDefinition">
            <summary>
            Declares how model mappings for content
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.ContentMapDefinition.DetermineIsChildOfListView(Umbraco.Core.Models.IContent,Umbraco.Core.Mapping.MapperContext)">
            <summary>
            Checks if the content item is a descendant of a list view
            </summary>
            <param name="source"></param>
            <param name="context"></param>
            <returns>
            Returns true if the content item is a descendant of a list view and where the content is
            not a current user's start node.
            </returns>
            <remarks>
            We must check if it's the current user's start node because in that case we will actually be
            rendering the tree node underneath the list view to visually show context. In this case we return
            false because the item is technically not being rendered as part of a list view but instead as a
            real tree node. If we didn't perform this check then tree syncing wouldn't work correctly.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.TabsAndPropertiesMapper.GetCustomGenericProperties(Umbraco.Core.Models.IContentBase)">
            <summary>
            Returns a collection of custom generic properties that exist on the generic properties tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.TabsAndPropertiesMapper.MapGenericProperties(Umbraco.Core.Models.IContentBase,System.Collections.Generic.List{Umbraco.Web.Models.ContentEditing.Tab{Umbraco.Web.Models.ContentEditing.ContentPropertyDisplay}},Umbraco.Core.Mapping.MapperContext)">
            <summary>
            Maps properties on to the generic properties tab
            </summary>
            <param name="content"></param>
            <param name="tabs"></param>
            <param name="context"></param>
            <remarks>
            The generic properties tab is responsible for
            setting up the properties such as Created date, updated date, template selected, etc...
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.TabsAndPropertiesMapper.MapProperties(Umbraco.Core.Models.IContentBase,System.Collections.Generic.List{Umbraco.Core.Models.Property},Umbraco.Core.Mapping.MapperContext)">
            <summary>
            Maps a list of <see cref="T:Umbraco.Core.Models.Property"/> to a list of <see cref="T:Umbraco.Web.Models.ContentEditing.ContentPropertyDisplay"/>
            </summary>
            <param name="content"></param>
            <param name="properties"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.TabsAndPropertiesMapper`1">
            <summary>
            Creates the tabs collection with properties assigned for display models
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.PublishedContent.HybridVariationContextAccessor">
            <summary>
            Implements a hybrid <see cref="T:Umbraco.Core.Models.PublishedContent.IVariationContextAccessor"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContent.HybridVariationContextAccessor.ItemKey">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContent.HybridVariationContextAccessor.VariationContext">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Web.Models.PublishedContent.HybridVariationContextAccessor.VariationContext"/> object.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.PublishedContent.HttpContextVariationContextAccessor">
            <summary>
            Implements <see cref="T:Umbraco.Core.Models.PublishedContent.IVariationContextAccessor"/> on top of <see cref="T:Umbraco.Web.IHttpContextAccessor"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContent.HttpContextVariationContextAccessor.#ctor(Umbraco.Web.IHttpContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Models.PublishedContent.HttpContextVariationContextAccessor"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContent.HttpContextVariationContextAccessor.VariationContext">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Models.PublishedContent.PublishedValueFallback">
            <summary>
            Provides a default implementation for <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedValueFallback"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContent.PublishedValueFallback.#ctor(Umbraco.Core.Services.ServiceContext,Umbraco.Core.Models.PublishedContent.IVariationContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Models.PublishedContent.PublishedValueFallback"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContent.PublishedValueFallback.TryGetValue(Umbraco.Core.Models.PublishedContent.IPublishedProperty,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContent.PublishedValueFallback.TryGetValue``1(Umbraco.Core.Models.PublishedContent.IPublishedProperty,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,``0,``0@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContent.PublishedValueFallback.TryGetValue(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContent.PublishedValueFallback.TryGetValue``1(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,``0,``0@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContent.PublishedValueFallback.TryGetValue(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,System.Object,System.Object@,Umbraco.Core.Models.PublishedContent.IPublishedProperty@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContent.PublishedValueFallback.TryGetValue``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,``0,``0@,Umbraco.Core.Models.PublishedContent.IPublishedProperty@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Models.BackOfficeTour">
            <summary>
            A model representing a tour.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.BackOfficeTourFile">
            <summary>
            A model representing the file used to load a tour.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.BackOfficeTourFile.FileName">
            <summary>
            The file name for the tour
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.BackOfficeTourFile.PluginName">
            <summary>
            The plugin folder that the tour comes from
            </summary>
            <remarks>
            If this is null it means it's a Core tour
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.BackOfficeTourStep">
            <summary>
            A model representing a step in a tour.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Verify2FACodeModel">
            <summary>
            Used for 2FA verification
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.ExportMember">
            <summary>
            Represents the export member menu item
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.TreeNode">
            <summary>
            Represents a model in the tree
            </summary>
            <remarks>
            TreeNode is sealed to prevent developers from adding additional json data to the response
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNode.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Internal constructor, to create a tree node use the CreateTreeNode methods of the TreeApiController.
            </summary>
            <param name="nodeId"></param>
            <param name="parentId">The parent id for the current node</param>
            <param name="getChildNodesUrl"></param>
            <param name="menuUrl"></param>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.HasChildren">
            <summary>
            A flag to set whether or not this node has children
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.NodeType">
            <summary>
            The tree nodetype which refers to the type of node rendered in the tree
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.RoutePath">
            <summary>
            Optional: The Route path for the editor for this node
            </summary>
            <remarks>
            If this is not set, then the route path will be automatically determined by: {section}/edit/{id}
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.ChildNodesUrl">
            <summary>
            The JSON URL to load the nodes children
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.MenuUrl">
            <summary>
            The JSON URL to load the menu from
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.IconIsClass">
            <summary>
            Returns true if the icon represents a CSS class instead of a file path
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.IconFilePath">
            <summary>
            Returns the icon file path if the icon is not a class, otherwise returns an empty string
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.CssClasses">
            <summary>
            A list of additional/custom css classes to assign to the node
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.CreateChildEntity">
            <summary>
            Represents the refresh node menu item
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.MenuItemList">
            <summary>
            A custom menu list
            </summary>
            <remarks>
            NOTE: We need a sub collection to the MenuItemCollection object due to how json serialization works.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItemList.Add(Umbraco.Web.Actions.IAction,System.String)">
            <summary>
            Adds a menu item based on a <see cref="T:Umbraco.Web.Actions.IAction"/>
            </summary>
            <param name="action"></param>
            <param name="name">The text to display for the menu item, will default to the IAction alias if not specified</param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItemList.Add``1(System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a menu item with a dictionary which is merged to the AdditionalData bag
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hasSeparator"></param>
            <param name="name">The text to display for the menu item, will default to the IAction alias if not specified</param>
            <param name="opensDialog">Whether or not this action opens a dialog</param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItemList.Add``1(Umbraco.Core.Services.ILocalizedTextService,System.Boolean,System.Boolean)">
            <summary>
            Adds a menu item with a dictionary which is merged to the AdditionalData bag
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hasSeparator"></param>
            <param name="textService">The <see cref="T:Umbraco.Core.Services.ILocalizedTextService"/> used to localize the action name based on it's alias</param>
            <param name="opensDialog">Whether or not this action opens a dialog</param>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.ActionMenuItem">
            <inheritdoc />
             <summary>
             A menu item that represents some JS that needs to execute when the menu item is clicked.
             </summary>
             <remarks>
             These types of menu items are rare but they do exist. Things like refresh node simply execute
             JS and don't launch a dialog.
             Each action menu item describes what angular service that it's method exists in and what the method name is.
             An action menu item must describe the angular service name for which it's method exists. It may also define what the
             method name is that will be called in this service but if one is not specified then we will assume the method name is the
             same as the Type name of the current action menu class.
             </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.ActionMenuItem.AngularServiceName">
            <summary>
            The angular service name containing the <see cref="P:Umbraco.Web.Models.Trees.ActionMenuItem.AngularServiceMethodName"/>
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.ActionMenuItem.AngularServiceMethodName">
            <summary>
            The angular service method name to call for this menu item
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.MenuItem">
            <summary>
            A context menu item
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.#ctor(Umbraco.Web.Actions.IAction,System.String)">
            <summary>
            Create a menu item based on an <see cref="T:Umbraco.Web.Actions.IAction"/> definition
            </summary>
            <param name="action"></param>
            <param name="name"></param>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.MenuItem.AdditionalData">
            <summary>
            A dictionary to support any additional meta data that should be rendered for the node which is
            useful for custom action commands such as 'create', 'copy', etc...
            </summary>
            <remarks>
            We will also use the meta data collection for dealing with legacy menu items (i.e. for loading custom URLs or
            executing custom JS).
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.MenuItem.SeparatorBefore">
            <summary>
            Ensures a menu separator will exist before this menu item
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.MenuItem.OpensDialog">
            <summary>
            Used in the UI to inform the user that the menu item will open a dialog/confirmation
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.Trees.MenuItem.DialogTitleKey">
            <summary>
            Used as a key for the AdditionalData to specify a specific dialog title instead of the menu title
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.Trees.MenuItem.ActionUrlKey">
            <summary>
            Used to specify the URL that the dialog will launch to in an iframe
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.Trees.MenuItem.ActionViewKey">
            <summary>
            Used to specify the angular view that the dialog will launch
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.Trees.MenuItem.JsActionKey">
            <summary>
            Used to specify the js method to execute for the menu item
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.Trees.MenuItem.ActionRouteKey">
            <summary>
            Used to specify an angular route to go to for the menu item
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.NavigateToRoute(System.String)">
            <summary>
            Sets the menu item to navigate to the specified angular route path
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.ExecuteJsMethod(System.String)">
            <summary>
            Adds the required meta data to the menu item so that angular knows to attempt to call the Js method.
            </summary>
            <param name="jsToExecute"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.LaunchDialogView(System.String,System.String)">
            <summary>
            Sets the menu item to display a dialog based on an angular view path
            </summary>
            <param name="view"></param>
            <param name="dialogTitle"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.LaunchDialogUrl(System.String,System.String)">
            <summary>
            Sets the menu item to display a dialog based on a URL path in an iframe
            </summary>
            <param name="url"></param>
            <param name="dialogTitle"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.SetDialogTitle(System.String)">
            <summary>
            Puts a dialog title into the meta data to be displayed on the dialog of the menu item (if there is one)
            instead of the menu name
            </summary>
            <param name="dialogTitle"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.SetActionView(System.String)">
            <summary>
            Configures the menu item to launch a specific view
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.SetActionUrl(System.String,Umbraco.Web.Trees.ActionUrlMethod)">
            <summary>
            Configures the menu item to launch a URL with the specified action (dialog or new window)
            </summary>
            <param name="url"></param>
            <param name="method"></param>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.MenuItemCollection">
            <summary>
            A menu item collection for a given tree node
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.MenuItemCollection.DefaultMenuAlias">
            <summary>
            Sets the default menu item alias to be shown when the menu is launched - this is optional and if not set then the menu will just be shown normally.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.MenuItemCollection.Items">
            <summary>
            The list of menu items
            </summary>
            <remarks>
            We require this so the json serialization works correctly
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.RefreshNode">
            <inheritdoc />
            <summary>
            Represents the refresh node menu item
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.TreeRootNode">
            <summary>
            A tree node that represents various types of root nodes
            </summary>
            <remarks>
            <para>
            A <see cref="T:Umbraco.Web.Models.Trees.TreeRootNode"/> represents:
            * The root node for a section containing a single tree
            * The root node for a section containing multiple sub-trees
            * The root node for a section containing groups of multiple sub-trees
            * The group node in a section containing groups of multiple sub-trees
            </para>
            <para>
            This is required to return the tree data for a given section. Some sections may only contain one tree which means it's section
            root should also display a menu, whereas other sections have multiple trees and the section root shouldn't display a menu.
            </para>
            <para>
            The root node also contains an explicit collection of children.
            </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeRootNode.CreateGroupNode(Umbraco.Web.Models.Trees.TreeNodeCollection,System.String)">
            <summary>
            Creates a group node for grouped multiple trees
            </summary>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeRootNode.CreateGroupedMultiTreeRoot(Umbraco.Web.Models.Trees.TreeNodeCollection)">
            <summary>
            Creates a section root node for grouped multiple trees
            </summary>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeRootNode.CreateMultiTreeRoot(Umbraco.Web.Models.Trees.TreeNodeCollection)">
            <summary>
            Creates a section root node for non-grouped multiple trees
            </summary>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeRootNode.CreateSingleTreeRoot(System.String,System.String,System.String,System.String,Umbraco.Web.Models.Trees.TreeNodeCollection,System.Boolean)">
            <summary>
            Creates a section root node for a section with a single tree
            </summary>
            <param name="nodeId"></param>
            <param name="getChildNodesUrl"></param>
            <param name="menuUrl"></param>
            <param name="title"></param>
            <param name="children"></param>
            <param name="isSingleNodeTree"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeRootNode.#ctor(System.String,System.String,System.String)">
            <summary>
            Private constructor
            </summary>
            <param name="nodeId"></param>
            <param name="getChildNodesUrl"></param>
            <param name="menuUrl"></param>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeRootNode.IsContainer">
            <summary>
            Will be true if this is a multi-tree section root node (i.e. contains other trees)
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeRootNode.IsGroup">
            <summary>
            True if this is a group root node
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeRootNode.ContainsGroups">
            <summary>
            True if this root node contains group root nodes
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeRootNode.Children">
            <summary>
            The node's children collection
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeRootNode.ContainsTrees">
            <summary>
            Returns true if there are any children
            </summary>
            <remarks>
            This is used in the UI to configure a full screen section/app
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNodeExtensions.AssignLegacyJsCallback(Umbraco.Web.Models.Trees.TreeNode,System.String)">
            <summary>
            Legacy tree node's assign a JS method callback for when an item is clicked, this method facilitates that.
            </summary>
            <param name="treeNode"></param>
            <param name="jsCallback"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNodeExtensions.SetContainerStyle(Umbraco.Web.Models.Trees.TreeNode)">
            <summary>
            Sets the node style to show that it is a container type
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNodeExtensions.SetProtectedStyle(Umbraco.Web.Models.Trees.TreeNode)">
            <summary>
            Sets the node style to show that it is currently protected publicly
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNodeExtensions.SetLockedStyle(Umbraco.Web.Models.Trees.TreeNode)">
            <summary>
            Sets the node style to show that it is currently locked / non-deletable
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNodeExtensions.SetHasPendingVersionStyle(Umbraco.Web.Models.Trees.TreeNode)">
            <summary>
            Sets the node style to show that it is has unpublished versions (but is currently published)
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNodeExtensions.SetNotPublishedStyle(Umbraco.Web.Models.Trees.TreeNode)">
            <summary>
            Sets the node style to show that it is not published
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="T:Umbraco.Web.Models.UserTourStatus">
            <summary>
            A model representing the tours a user has taken/completed
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.UserTourStatus.Alias">
            <summary>
            The tour alias
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.UserTourStatus.Completed">
            <summary>
            If the tour is completed
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.UserTourStatus.Disabled">
            <summary>
            If the tour is disabled
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.LocalPackageInstallModel">
            <summary>
            A model that represents uploading a local package
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LocalPackageInstallModel.IsCompatible">
            <summary>
            A flag to determine if this package is compatible to be installed
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LocalPackageInstallModel.UmbracoVersion">
            <summary>
            The minimum umbraco version that this package is pinned to
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LocalPackageInstallModel.OriginalVersion">
            <summary>
            If this is not null then it means the package is being from this version
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LocalPackageInstallModel.ConflictingTemplateAliases">
            <summary>
            Key value of name + alias
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LocalPackageInstallModel.ConflictingStyleSheetNames">
            <summary>
            Key value of name + alias
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LocalPackageInstallModel.ConflictingMacroAliases">
            <summary>
            Key value of name + alias
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.PackageInstallResult">
            <summary>
            Model that is returned when a package is totally finished installing
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.PackageInstallModel.IsRestarting">
            <summary>
            During installation this can be used to track any pending AppDomain restarts
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ImageCropMode.Crop">
            <summary>
            Resizes the image to the given dimensions. If the set dimensions do not match the aspect ratio of the original image then the output is cropped to match the new aspect ratio.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ImageCropMode.Max">
            <summary>
            Resizes the image to the given dimensions. If the set dimensions do not match the aspect ratio of the original image then the output is resized to the maximum possible value in each direction while maintaining the original aspect ratio.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ImageCropMode.Stretch">
            <summary>
            Resizes the image to the given dimensions. If the set dimensions do not match the aspect ratio of the original image then the output is stretched to match the new aspect ratio.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ImageCropMode.Pad">
            <summary>
            Passing a single dimension will automatically preserve the aspect ratio of the original image. If the requested aspect ratio is different then the image will be padded to fit.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ImageCropMode.BoxPad">
            <summary>
            When upscaling an image the image pixels themselves are not resized, rather the image is padded to fit the given dimensions.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ImageCropMode.Min">
            <summary>
            Resizes the image until the shortest side reaches the set given dimension. This will maintain the aspect ratio of the original image. Upscaling is disabled in this mode and the original image will be returned if attempted.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.PartialViewMacroModelExtensions">
            <summary>
            Extension methods for the PartialViewMacroModel object
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.PartialViewMacroModelExtensions.GetParameterValue``1(Umbraco.Web.Models.PartialViewMacroModel,System.String,``0)">
            <summary>
            Attempt to get a Macro parameter from a PartialViewMacroModel and return a default value otherwise
            </summary>
            <param name="partialViewMacroModel"></param>
            <param name="parameterAlias"></param>
            <param name="defaultValue"></param>
            <returns>Parameter value if available, the default value that was passed otherwise.</returns>
        </member>
        <member name="M:Umbraco.Web.Models.PartialViewMacroModelExtensions.GetParameterValue``1(Umbraco.Web.Models.PartialViewMacroModel,System.String)">
            <summary>
            Attempt to get a Macro parameter from a PartialViewMacroModel
            </summary>
            <param name="partialViewMacroModel"></param>
            <param name="parameterAlias"></param>
            <returns>Parameter value if available, the default value for the type otherwise.</returns>
        </member>
        <member name="T:Umbraco.Web.Models.PostRedirectModel">
            <summary>
            A base model containing a value to indicate to Umbraco where to redirect to after Posting if
            a developer doesn't want the controller to redirect to the current Umbraco page - which is the default.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.PostRedirectModel.RedirectUrl">
            <summary>
            The path to redirect to when update is successful, if not specified then the user will be
            redirected to the current Umbraco page
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.ContentModel`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Models.ContentModel`1"/> class with a content.
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:Umbraco.Web.Models.ContentModel`1.Content">
            <summary>
            Gets the content.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ChangingPasswordModel">
            <summary>
            A model representing the data required to set a member/user password depending on the provider installed.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ChangingPasswordModel.NewPassword">
            <summary>
            The password value
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ChangingPasswordModel.OldPassword">
            <summary>
            The old password - used to change a password when: EnablePasswordRetrieval = false
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ChangingPasswordModel.Reset">
            <summary>
            Set to true if the password is to be reset
            </summary>
            <remarks>
            <para>
            This operator is different between using ASP.NET Identity APIs and Membership APIs.
            </para>
            <para>
            When using Membership APIs, this is only valid when: EnablePasswordReset = true and it will reset the password to something auto generated.
            </para>
            <para>
            When using ASP.NET Identity APIs this needs to be set if an administrator user that has access to the Users section is changing another users
            password. This flag is required to indicate that the oldPassword value is not required and that we are in fact performing a password reset and
            then a password change if the executing user has access to do so.
            </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ChangingPasswordModel.Answer">
            <summary>
            The password answer - required for reset when: RequiresQuestionAndAnswer = true
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ChangingPasswordModel.GeneratedPassword">
            <summary>
            This is filled in on the server side if the password has been reset/generated
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ChangingPasswordModel.Id">
            <summary>
            The id of the user - required to allow changing password without the entire UserSave model
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.PasswordChangedModel">
            <summary>
            A model representing an attempt at changing a password
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.PasswordChangedModel.ChangeError">
            <summary>
            The error affiliated with the failing password changes, null if changing was successful
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.PasswordChangedModel.ResetPassword">
            <summary>
            If the password was reset, this is the value it has been changed to
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ProfileModel">
            <summary>
            A readonly member profile model
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ProfileModel.Name">
            <summary>
            The member's real name
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ProfileModel.MemberTypeAlias">
            <summary>
            The member's member type alias
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ProfileModel.MemberProperties">
            <summary>
            The list of member properties
            </summary>
            <remarks>
            Adding items to this list on the front-end will not add properties to the member in the database.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ProfileModel.ProfileModelBinder">
            <summary>
            A custom model binder for MVC because the default ctor performs a lookup!
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.LoginStatusModel">
            <summary>
            The model representing the status of a logged in member.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.LoginStatusModel.CreateModel">
            <summary>
            Creates a new empty LoginStatusModel.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Models.LoginStatusModel.Name">
            <summary>
            The name of the member
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LoginStatusModel.Username">
            <summary>
            The username of the member
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LoginStatusModel.Email">
            <summary>
            The email of the member
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LoginStatusModel.IsLoggedIn">
            <summary>
            True, if the member is currently logged in
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.UmbracoProperty">
            <summary>
            A simple representation of an Umbraco property
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.RegisterModel.CreateModel">
            <summary>
            Creates a new empty RegisterModel.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.MemberProperties">
            <summary>
            Returns the member properties
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.MemberTypeAlias">
            <summary>
            The member type alias to use to register the member
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.Name">
            <summary>
            The members real name
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.Password">
            <summary>
            The members password
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.Username">
            <summary>
            The username of the model, if UsernameIsEmail is true then this is ignored.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.UsernameIsEmail">
            <summary>
            Flag to determine if the username should be the email address, if true then the Username property is ignored
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.LoginOnSuccess">
            <summary>
            Specifies if the member should be logged in if they are successfully created
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.CreatePersistentLoginCookie">
            <summary>
            Default is true to create a persistent cookie if LoginOnSuccess is true
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.RegisterModel.RegisterModelBinder">
            <summary>
            A custom model binder for MVC because the default ctor performs a lookup!
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.PartialViewMacroModel">
            <summary>
            The model used when rendering Partial View Macros
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.PublishedContentBase">
            <summary>
            Provide an abstract base class for <c>IPublishedContent</c> implementations.
            </summary>
            <remarks>This base class does which (a) consistently resolves and caches the URL, (b) provides an implementation
            for this[alias], and (c) provides basic content set management.</remarks>
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Id">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.UrlSegment">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Level">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Path">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.TemplateId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.CreatorId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.CreatorName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.CreateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.WriterId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.WriterName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.UpdateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Url">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Cultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.ItemType">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContentBase.IsDraft(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContentBase.IsPublished(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Parent">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Children">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.ChildrenForAllCultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Properties">
            <inheritdoc cref="P:Umbraco.Core.Models.PublishedContent.IPublishedElement.Properties"/>
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContentBase.GetProperty(System.String)">
            <inheritdoc cref="M:Umbraco.Core.Models.PublishedContent.IPublishedElement.GetProperty(System.String)"/>
        </member>
        <member name="T:Umbraco.Web.Models.ContentModel">
            <summary>
            Represents the model for the current Umbraco view.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.ContentModel.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Models.ContentModel"/> class with a content.
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:Umbraco.Web.Models.ContentModel.Content">
            <summary>
            Gets the content.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.HttpUmbracoFormRouteStringException">
            <summary>
            Exception that occurs when an Umbraco form route string is invalid
            </summary>
            <seealso cref="T:System.Web.HttpException" />
        </member>
        <member name="M:Umbraco.Web.Mvc.HttpUmbracoFormRouteStringException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Mvc.HttpUmbracoFormRouteStringException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.HttpUmbracoFormRouteStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Mvc.HttpUmbracoFormRouteStringException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that holds the contextual information about the source or destination.</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.HttpUmbracoFormRouteStringException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Mvc.HttpUmbracoFormRouteStringException" /> class.
            </summary>
            <param name="message">The error message displayed to the client when the exception is thrown.</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.HttpUmbracoFormRouteStringException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Mvc.HttpUmbracoFormRouteStringException" /> class.
            </summary>
            <param name="message">The error message displayed to the client when the exception is thrown.</param>
            <param name="innerException">The <see cref="P:System.Exception.InnerException" />, if any, that threw the current exception.</param>
        </member>
        <member name="T:Umbraco.Web.Mvc.ModelBindingExceptionFilter">
            <summary>
                An exception filter checking if we get a <see cref="T:Umbraco.Web.Mvc.ModelBindingException" /> or <see cref="T:System.InvalidCastException" /> with the same model.
                In which case it returns a redirect to the same page after 1 sec if not in debug mode.
            </summary>
            <remarks>
            This is only enabled when running PureLive
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.ModelBindingExceptionFilter.IsMessageAboutTheSameModelType(System.String)">
             <summary>
                 Returns true if the message is about two models with the same name.
             </summary>
             <remarks>
                 Message could be something like:
             <para>
                 InvalidCastException:
                 [A]Umbraco.Web.PublishedModels.Home cannot be cast to [B]Umbraco.Web.PublishedModels.Home. Type A originates from 'App_Web_all.generated.cs.8f9494c4.rtdigm_z, Version=0.0.0.3, Culture=neutral, PublicKeyToken=null' in the context 'Default' at location 'C:\Users\User\AppData\Local\Temp\Temporary ASP.NET Files\root\c5c63f4d\c168d9d4\App_Web_all.generated.cs.8f9494c4.rtdigm_z.dll'. Type B originates from 'App_Web_all.generated.cs.8f9494c4.rbyqlplu, Version=0.0.0.5, Culture=neutral, PublicKeyToken=null' in the context 'Default' at location 'C:\Users\User\AppData\Local\Temp\Temporary ASP.NET Files\root\c5c63f4d\c168d9d4\App_Web_all.generated.cs.8f9494c4.rbyqlplu.dll'.
            </para>
             <para>
                 ModelBindingException:
                 Cannot bind source content type Umbraco.Web.PublishedModels.Home to model type Umbraco.Web.PublishedModels.Home. Both view and content models are PureLive, with different versions. The application is in an unstable state and is going to be restarted. The application is restarting now.
             </para>
             </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.StatusCodeResultAttribute">
            <summary>
            Forces the response to have a specific http status code
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.ValidateUmbracoFormRouteStringAttribute">
            <summary>
            Attribute used to check that the request contains a valid Umbraco form request string.
            </summary>
            <seealso cref="T:System.Web.Mvc.FilterAttribute" />
            <seealso cref="T:System.Web.Mvc.IAuthorizationFilter" />
            <remarks>
            Applying this attribute/filter to a <see cref="T:Umbraco.Web.Mvc.SurfaceController"/> or SurfaceController Action will ensure that the Action can only be executed
            when it is routed to from within Umbraco, typically when rendering a form with BegingUmbracoForm. It will mean that the natural MVC route for this Action
            will fail with a <see cref="T:Umbraco.Web.Mvc.HttpUmbracoFormRouteStringException"/>.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.ValidateUmbracoFormRouteStringAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Called when authorization is required.
            </summary>
            <param name="filterContext">The filter context.</param>
            <exception cref="T:System.ArgumentNullException">filterContext</exception>
            <exception cref="T:Umbraco.Web.Mvc.HttpUmbracoFormRouteStringException">The required request field \"ufprt\" is not present.
            or
            The Umbraco form request route string could not be decrypted.
            or
            The provided Umbraco form request route string was meant for a different controller and action.</exception>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerContextExtensions.GetUmbracoContext(System.Web.Mvc.ControllerContext)">
            <summary>
            Gets the Umbraco context from a controller context hierarchy, if any, else the 'current' Umbraco context.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <returns>The Umbraco context.</returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerContextExtensions.GetDataTokenInViewContextHierarchy(System.Web.Mvc.ControllerContext,System.String)">
            <summary>
            Recursively gets a data token from a controller context hierarchy.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="dataTokenName">The name of the data token.</param>
            <returns>The data token, or null.</returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.DisableBrowserCacheAttribute">
            <summary>
            Ensures that the request is not cached by the browser
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.EnsurePartialViewMacroViewContextFilterAttribute">
            <summary>
            This is a special filter which is required for the RTE to be able to render Partial View Macros that
            contain forms when the RTE value is resolved outside of an MVC view being rendered
            </summary>
            <remarks>
            The entire way that we support partial view macros that contain forms isn't really great, these forms
            need to be executed as ChildActions so that the ModelState,ViewData,TempData get merged into that action
            so the form can show errors, viewdata, etc...
            Under normal circumstances, macros will be rendered after a ViewContext is created but in some cases
            developers will resolve the RTE value in the controller, in this case the Form won't be rendered correctly
            with merged ModelState from the controller because the special DataToken hasn't been set yet (which is
            normally done in the UmbracoViewPageOfModel when a real ViewContext is available.
            So we need to detect if the currently rendering controller is IRenderController and if so we'll ensure that
            this DataToken exists before the action executes in case the developer resolves an RTE value that contains
            a partial view macro form.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.EnsurePartialViewMacroViewContextFilterAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Ensures the custom ViewContext datatoken is set before the RenderController action is invoked,
            this ensures that any calls to GetPropertyValue with regards to RTE or Grid editors can still
            render any PartialViewMacro with a form and maintain ModelState
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.EnsurePartialViewMacroViewContextFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            Ensures that the custom ViewContext datatoken is set after the RenderController action is invoked,
            this ensures that any custom ModelState that may have been added in the RenderController itself is
            passed onwards in case it is required when rendering a PartialViewMacro with a form
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="T:Umbraco.Web.Mvc.IRenderController">
            <summary>
            A marker interface to designate that a controller will be used for Umbraco front-end requests and/or route hijacking
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.ModelBindingException">
            <summary>
            The exception that is thrown when an error occurs while binding a source to a model.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Web.Mvc.ModelBindingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Mvc.ModelBindingException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.ModelBindingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Mvc.ModelBindingException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.ModelBindingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Mvc.ModelBindingException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.ModelBindingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Mvc.ModelBindingException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Umbraco.Web.Mvc.RenderIndexActionSelectorAttribute">
            <summary>
            A custom ActionMethodSelector which will ensure that the RenderMvcController.Index(ContentModel model) action will be executed
            if the
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderIndexActionSelectorAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
            <summary>
            Determines whether the action method selection is valid for the specified controller context.
            </summary>
            <returns>
            true if the action method selection is valid for the specified controller context; otherwise, false.
            </returns>
            <param name="controllerContext">The controller context.</param><param name="methodInfo">Information about the action method.</param>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoRequireHttpsAttribute">
            <summary>
            If Umbraco.Core.UseHttps property in web.config is set to true, this filter will redirect any http access to https.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoRequireHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)">
            <summary>
            If Umbraco.Core.UseHttps is true and we have a non-HTTPS request, handle redirect.
            </summary>
            <param name="filterContext">Filter context</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoRequireHttpsAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Check to see if HTTPS is currently being used if Umbraco.Core.UseHttps is true.
            </summary>
            <param name="filterContext">Filter context</param>
        </member>
        <member name="T:Umbraco.Web.Mvc.ValidateMvcAngularAntiForgeryTokenAttribute">
             <summary>
             A filter to check for the csrf token based on Angular's standard approach
             </summary>
             <remarks>
             Code derived from http://ericpanorel.net/2013/07/28/spa-authentication-and-csrf-mvc4-antiforgery-implementation/
            
             If the authentication type is cookie based, then this filter will execute, otherwise it will be disabled
             </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.AdminTokenAuthorizeAttribute">
            <summary>
            Used for authorizing scheduled tasks
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.AdminTokenAuthorizeAttribute.#ctor(Umbraco.Core.Services.IUserService,Umbraco.Core.IRuntimeState)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="userService"></param>
            <param name="runtimeState"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.AdminTokenAuthorizeAttribute.GetAuthHeaderTokenVal(Umbraco.Core.Services.IUserService)">
            <summary>
            Used to return the full value that needs to go in the Authorization header
            </summary>
            <param name="userService"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.AdminTokenAuthorizeAttribute.AuthorizeCore(System.Web.HttpContextBase)">
            <summary>
            Ensures that the user must be in the Administrator or the Install role
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.RedirectToUmbracoUrlResult">
            <summary>
            Redirects to the current URL rendering an Umbraco page including it's query strings
            </summary>
            <remarks>
            This is useful if you need to redirect
            to the current page but the current page is actually a rewritten URL normally done with something like
            Server.Transfer. It is also handy if you want to persist the query strings.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoUrlResult.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.JsonNetResult">
            <summary>
            Custom json result using newtonsoft json.net
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.MinifyJavaScriptResultAttribute">
            <summary>
            Minifies the result for the JavaScriptResult
            </summary>
            <remarks>
            Only minifies in release mode
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.MinifyJavaScriptResultAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            Minify the result if in release mode
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute">
             <summary>
             Used for custom routed pages that are being integrated with the Umbraco data but are not
             part of the umbraco request pipeline. This allows umbraco macros to be able to execute in this scenario.
             </summary>
             <remarks>
             This is inspired from this discussion:
             https://our.umbraco.com/forum/developers/extending-umbraco/41367-Umbraco-6-MVC-Custom-MVC-Route?p=3
            
             which is based on custom routing found here:
             http://shazwazza.com/post/Custom-MVC-routing-in-Umbraco
             </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.#ctor(Umbraco.Web.IUmbracoContextAccessor,System.Int32)">
            <summary>
            Constructor - can be used for testing
            </summary>
            <param name="umbracoContextAccessor"></param>
            <param name="contentId"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.#ctor(System.Int32)">
            <summary>
            A constructor used to set an explicit content Id to the PublishedRequest that will be created
            </summary>
            <param name="contentId"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.#ctor(System.String)">
            <summary>
            A constructor used to set the data token key name that contains a reference to a PublishedContent instance
            </summary>
            <param name="dataTokenName"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.#ctor(Umbraco.Web.IUmbracoContextAccessor,System.String)">
            <summary>
            Constructor - can be used for testing
            </summary>
            <param name="umbracoContextAccessor"></param>
            <param name="dataTokenName"></param>
        </member>
        <member name="P:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.UmbracoContext">
            <summary>
            Exposes the UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.Umbraco">
            <summary>
            Exposes an UmbracoHelper
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.ConfigurePublishedContentRequest(Umbraco.Web.Routing.PublishedRequest,System.Web.Mvc.ActionExecutedContext)">
            <summary>
            This assigns the published content to the request, developers can override this to specify
            any other custom attributes required.
            </summary>
            <param name="request"></param>
            <param name="filterContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoVirtualNodeRouteHandler.GetUmbracoContext(System.Web.Routing.RequestContext)">
            <summary>
            Returns the UmbracoContext for this route handler
            </summary>
            <remarks>
            By default this uses the UmbracoContext singleton, this could be overridden to check for null in the case
            that this handler is used for a request where an UmbracoContext is not created by default see http://issues.umbraco.org/issue/U4-9384
            <example>
            <![CDATA[
            protected override UmbracoContext GetUmbracoContext(RequestContext requestContext)
            {
               var ctx = base.GetUmbracoContext(requestContext);
               //check if context is null, we know it will be null if we are dealing with a request that
               //has an extension and by default no Umb ctx is created for the request
               if (ctx == null) {
                   // TODO: Here you can EnsureContext , please note that the requestContext is passed in
                   //therefore your should refrain from using other singletons like HttpContext.Current since
                   //you will already have a reference to it. Also if you need an ApplicationContext you should
                   //pass this in via a ctor instead of using the ApplicationContext.Current singleton.
               }
               return ctx;
            }
            ]]>
            </example>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.MergeParentContextViewDataAttribute">
             <summary>
             This attribute can be used for when child actions execute and will automatically merge in the viewdata from the parent context to the
             child action result.
             </summary>
             <remarks>
             This will retain any custom viewdata put into the child viewdata if the same key persists in the parent context's view data. You can always still
             access the parent's view data normally.
             This just simplifies working with ChildActions and view data.
            
             NOTE: This does not mean that the parent context's view data will be merged before the action executes, if you need access to the parent context's view
             data during controller execution you can access it normally.
            
             NOTE: This recursively merges in all ParentActionViewContext ancestry in case there's child actions inside of child actions.
             </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.MergeParentContextViewDataAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            Merge in the parent context's view data if this is a child action when the result is being executed
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.MergeParentContextViewDataAttribute.MergeCurrentParent(System.Web.Mvc.ControllerBase,System.Web.Mvc.ViewContext)">
            <summary>
            Recursively merges in each parent view context into the target
            </summary>
            <param name="target"></param>
            <param name="currentParent"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.ViewDataDictionaryExtensions.MergeViewDataFrom(System.Web.Mvc.ViewDataDictionary,System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Merges the source view data into the destination view data
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.AreaRegistrationExtensions.RouteControllerPlugin(System.Web.Mvc.AreaRegistration,Umbraco.Core.Configuration.IGlobalSettings,System.String,System.Type,System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates a custom individual route for the specified controller plugin. Individual routes
            are required by controller plugins to map to a unique URL based on ID.
            </summary>
            <param name="globalSettings"></param>
            <param name="controllerName"></param>
            <param name="controllerType"></param>
            <param name="routes">An existing route collection</param>
            <param name="controllerSuffixName">
            The suffix name that the controller name must end in before the "Controller" string for example:
            ContentTreeController has a controllerSuffixName of "Tree", this is used for route constraints.
            </param>
            <param name="defaultAction"></param>
            <param name="defaultId"></param>
            <param name="area"></param>
            <param name="umbracoTokenValue">The DataToken value to set for the 'umbraco' key, this defaults to 'backoffice' </param>
            <param name="routeTokens">By default this value is just {action}/{id} but can be modified for things like web api routes</param>
            <param name="isMvc">Default is true for MVC, otherwise false for WebAPI</param>
            <param name="areaPathPrefix">
            If specified will add this string to the path between the umbraco path and the area path name, for example:
                /umbraco/CUSTOMPATHPREFIX/areaname
            if not specified, will just route like:
                /umbraco/areaname
            </param>
            <remarks>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.QueryStringFilterAttribute">
             <summary>
             Allows an Action to execute with an arbitrary number of QueryStrings
             </summary>
             <remarks>
             Just like you can POST an arbitrary number of parameters to an Action, you can't GET an arbitrary number
             but this will allow you to do it
            
             http://stackoverflow.com/questions/488061/passing-multiple-parameters-to-controller-in-asp-net-mvc-also-generating-on-the
             </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.QueryStringFilterAttribute.ToFormCollection(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts a dictionary to a FormCollection
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.MemberAuthorizeAttribute">
            <summary>
            Attribute for attributing controller actions to restrict them
            to just authenticated members, and optionally of a particular type and/or group
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.MemberAuthorizeAttribute.AllowType">
            <summary>
            Comma delimited list of allowed member types
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.MemberAuthorizeAttribute.AllowGroup">
            <summary>
            Comma delimited list of allowed member groups
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.MemberAuthorizeAttribute.AllowMembers">
            <summary>
            Comma delimited list of allowed members
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.MemberAuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Override method to throw exception instead of returning a 401 result
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.BackOfficeArea">
            <summary>
            An area registration for back office components
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.BackOfficeArea.RegisterArea(System.Web.Mvc.AreaRegistrationContext)">
            <summary>
            Create the routes for the area
            </summary>
            <param name="context"></param>
            <remarks>
            By using the context to register the routes it means that the area is already applied to them all
            and that the namespaces searched for the controllers are ONLY the ones specified.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerFactoryExtensions.GetControllerTypeInternal(System.Web.Mvc.IControllerFactory,System.Web.Routing.RequestContext,System.String)">
            <summary>
            Gets a controller type by the name
            </summary>
            <param name="factory"></param>
            <param name="requestContext"></param>
            <param name="controllerName"></param>
            <returns></returns>
            <remarks>
            This is related to issue: http://issues.umbraco.org/issue/U4-1726. We already have a method called GetControllerTypeInternal on our MasterControllerFactory,
            however, we cannot always guarantee that the usage of this will be a MasterControllerFactory like during unit tests. So we needed to create
            this extension method to do the checks instead.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.IRenderMvcController">
            <summary>
            The interface that must be implemented for a controller to be designated to execute for route hijacking
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.IRenderMvcController.Index(Umbraco.Web.Models.ContentModel)">
            <summary>
            The default action to render the front-end view
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.SurfaceRouteHandler">
            <summary>
            Assigned to all SurfaceController's so that it returns our custom SurfaceMvcHandler to use for rendering
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoAuthorizeAttribute">
            <summary>
            Ensures authorization is successful for a back office user.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoAuthorizeAttribute.#ctor(Umbraco.Web.UmbracoContext,Umbraco.Core.IRuntimeState)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="umbracoContext"></param>
            <param name="runtimeState"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoAuthorizeAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoAuthorizeAttribute.#ctor(System.String)">
            <summary>
            Constructor specifying to redirect to the specified location if not authorized
            </summary>
            <param name="redirectUrl"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoAuthorizeAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor specifying to redirect to the umbraco login page if not authorized
            </summary>
            <param name="redirectToUmbracoLogin"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoAuthorizeAttribute.AuthorizeCore(System.Web.HttpContextBase)">
            <summary>
            Ensures that the user must be in the Administrator or the Install role
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoAuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Override to ensure no redirect occurs
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.NotChildAction">
            <summary>
            Used to ensure that actions with duplicate names that are not child actions don't get executed when
            we are Posting and not redirecting.
            </summary>
            <remarks>
            See issue: http://issues.umbraco.org/issue/U4-1819
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoAuthorizedController">
            <summary>
            Provides a base class for authorized Umbraco controllers.
            </summary>
            <remarks>
            This controller essentially just uses a global UmbracoAuthorizeAttribute, inheritors that require more granular control over the
            authorization of each method can use this attribute instead of inheriting from this controller.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoController">
            <summary>
            Provides a base class for Umbraco controllers.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.GlobalSettings">
            <summary>
            Gets or sets the Umbraco context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.UmbracoContext">
            <summary>
            Gets the Umbraco context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.UmbracoContextAccessor">
            <summary>
            Gets or sets the Umbraco context accessor.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.Services">
            <summary>
            Gets or sets the services context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.AppCaches">
            <summary>
            Gets or sets the application cache.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.ProfilingLogger">
            <summary>
            Gets or sets the profiling logger.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.Members">
            <summary>
            Gets the membership helper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.Umbraco">
            <summary>
            Gets the Umbraco helper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.Security">
            <summary>
            Gets the web security helper.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoControllerFactory">
            <summary>
            Abstract filtered controller factory used for all Umbraco controller factory implementations
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Creates the specified controller by using the specified request context.
            </summary>
            <returns>
            The controller.
            </returns>
            <param name="requestContext">The request context.</param><param name="controllerName">The name of the controller.</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Gets the controller's session behavior.
            </summary>
            <returns>
            The controller's session behavior.
            </returns>
            <param name="requestContext">The request context.</param><param name="controllerName">The name of the controller whose session behavior you want to get.</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoControllerFactory.ReleaseController(System.Web.Mvc.IController)">
            <summary>
            Releases the specified controller.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoControllerFactory.OverridenDefaultControllerFactory">
            <summary>
            By default, <see cref="T:System.Web.Mvc.DefaultControllerFactory"/> only exposes <see cref="M:System.Web.Mvc.IControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)"/> which throws an exception
            if the controller is not found. Since we want to try creating a controller, and then fall back to <see cref="T:Umbraco.Web.Mvc.RenderMvcController"/> if one isn't found,
            this nested class changes the visibility of <see cref="T:System.Web.Mvc.DefaultControllerFactory"/>'s internal methods in order to not have to rely on a try-catch.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoMvcHandler">
             <summary>
             MVC handler to facilitate the TemplateRenderer. This handler can execute an MVC request and return it as a string.
            
             Original:
            
             This handler also used to intercept creation of controllers and store it for later use.
             This was needed for the 'return CurrentUmbracoPage()' surface controller functionality
             because it needs to send data back to the page controller.
            
             The creation of this controller has been moved to the UmbracoPageResult class which will create a controller when needed.
             </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoMvcHandler.ExecuteUmbracoRequest">
            <summary>
            This is used internally purely to render an Umbraco MVC template to string and shouldn't be used for anything else.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoViewPage`1">
            <summary>
            Represents the properties and methods that are needed in order to render an Umbraco view.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoViewPage`1.Services">
            <summary>
            Gets or sets the database context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoViewPage`1.AppCaches">
            <summary>
            Gets or sets the application cache.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoViewPage`1.UmbracoContext">
            <summary>
            Gets the Umbraco context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoViewPage`1.PublishedRequest">
            <summary>
            Gets the public content request.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoViewPage`1.Umbraco">
            <summary>
            Gets the Umbraco helper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoViewPage`1.Members">
            <summary>
            Gets the membership helper.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoViewPage`1.InitializePage">
            <summary>
            Ensure that the current view context is added to the route data tokens so we can extract it if we like
            </summary>
            <remarks>
            Currently this is required by mvc macro engines
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoViewPage`1.WriteLiteral(System.Object)">
            <summary>
            This will detect the end /body tag and insert the preview badge if in preview mode
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.MergeModelStateToChildActionAttribute">
            <summary>
            When a ChildAction is executing and we want the ModelState from the Parent context to be merged in
            to help with validation, this filter can be used.
            </summary>
            <remarks>
            By default, this filter will only merge when an Http POST is detected but this can be modified in the ctor
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.PluginController">
            <summary>
            Provides a base class for plugin controllers.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.UmbracoContext">
            <summary>
            Gets the Umbraco context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.UmbracoContextAccessor">
            <summary>
            Gets the database context accessor.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.DatabaseFactory">
            <summary>
            Gets the database context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.Services">
            <summary>
            Gets or sets the services context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.AppCaches">
            <summary>
            Gets or sets the application cache.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.ProfilingLogger">
            <summary>
            Gets or sets the profiling logger.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.Members">
            <summary>
            Gets the membership helper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.Umbraco">
            <summary>
            Gets the Umbraco helper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.Metadata">
            <summary>
            Gets metadata for this instance.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginController.GetMetadata(System.Type)">
            <summary>
            Gets metadata for a controller type.
            </summary>
            <param name="controllerType">The controller type.</param>
            <returns>Metadata for the controller type.</returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.PluginViewEngine">
            <summary>
            A view engine to look into the App_Plugins folder for views for packaged controllers
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginViewEngine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginViewEngine.EnsureFolderAndWebConfig(System.Web.Mvc.ViewEngineResult)">
            <summary>
            Ensures that the correct web.config for razor exists in the /Views folder.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.PostedDataProxyInfo">
            <summary>
            Represents the data required to proxy a request to a surface controller for posted data
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.RedirectToUmbracoPageResult">
            <summary>
            Redirects to an Umbraco page by Id or Entity
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Int32)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="pageId"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="pageId"></param>
            <param name="queryStringValues"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="pageId"></param>
            <param name="queryString"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Guid)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Guid,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="key"></param>
            <param name="queryStringValues"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="key"></param>
            <param name="queryString"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="publishedContent"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="publishedContent"></param>
            <param name="queryStringValues"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="queryString"></param>
            <param name="queryStringValues"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Int32,Umbraco.Web.IUmbracoContextAccessor)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="pageId"></param>
            <param name="umbracoContextAccessor"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection,Umbraco.Web.IUmbracoContextAccessor)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="pageId"></param>
            <param name="queryStringValues"></param>
            <param name="umbracoContextAccessor"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Int32,System.String,Umbraco.Web.IUmbracoContextAccessor)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="pageId"></param>
            <param name="queryString"></param>
            <param name="umbracoContextAccessor"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Guid,Umbraco.Web.IUmbracoContextAccessor)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="key"></param>
            <param name="umbracoContextAccessor"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Guid,System.Collections.Specialized.NameValueCollection,Umbraco.Web.IUmbracoContextAccessor)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="key"></param>
            <param name="queryStringValues"></param>
            <param name="umbracoContextAccessor"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Guid,System.String,Umbraco.Web.IUmbracoContextAccessor)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="key"></param>
            <param name="queryString"></param>
            <param name="umbracoContextAccessor"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Web.IUmbracoContextAccessor)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="publishedContent"></param>
            <param name="umbracoContextAccessor"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Collections.Specialized.NameValueCollection,Umbraco.Web.IUmbracoContextAccessor)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="publishedContent"></param>
            <param name="queryStringValues"></param>
            <param name="umbracoContextAccessor"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Web.IUmbracoContextAccessor)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="publishedContent"></param>
            <param name="queryString"></param>
            <param name="umbracoContextAccessor"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.Strings.WebConfigTemplate">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            
            &lt;configuration&gt;
                &lt;configSections&gt;
                    &lt;sectionGroup name=&quot;system.web.webPages.razor&quot; type=&quot;System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;&gt;
                        &lt;section name=&quot;host&quot; type=&quot;System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot; requirePermission=&quot;false&quot; /&gt;
                        &lt; [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.SurfaceController">
            <summary>
            Provides a base class for front-end add-in controllers.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(System.Int32)">
            <summary>
            Redirects to the Umbraco page with the given id
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(System.Int32,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects to the Umbraco page with the given id and passes provided querystring
            </summary>
            <param name="pageId"></param>
            <param name="queryStringValues"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(System.Int32,System.String)">
            <summary>
            Redirects to the Umbraco page with the given id and passes provided querystring
            </summary>
            <param name="pageId"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(System.Guid)">
            <summary>
            Redirects to the Umbraco page with the given id
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(System.Guid,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects to the Umbraco page with the given id and passes provided querystring
            </summary>
            <param name="pageId"></param>
            <param name="queryStringValues"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(System.Guid,System.String)">
            <summary>
            Redirects to the Umbraco page with the given id and passes provided querystring
            </summary>
            <param name="pageId"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Redirects to the Umbraco page with the given id
            </summary>
            <param name="publishedContent"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects to the Umbraco page with the given id and passes provided querystring
            </summary>
            <param name="publishedContent"></param>
            <param name="queryStringValues"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Redirects to the Umbraco page with the given id and passes provided querystring
            </summary>
            <param name="publishedContent"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToCurrentUmbracoPage">
            <summary>
            Redirects to the currently rendered Umbraco page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToCurrentUmbracoPage(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects to the currently rendered Umbraco page and passes provided querystring
            </summary>
            <param name="queryStringValues"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToCurrentUmbracoPage(System.String)">
            <summary>
            Redirects to the currently rendered Umbraco page and passes provided querystring
            </summary>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToCurrentUmbracoUrl">
            <summary>
            Redirects to the currently rendered Umbraco URL
            </summary>
            <returns></returns>
            <remarks>
            this is useful if you need to redirect
            to the current page but the current page is actually a rewritten URL normally done with something like
            Server.Transfer.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.CurrentUmbracoPage">
            <summary>
            Returns the currently rendered Umbraco page
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Mvc.SurfaceController.CurrentPage">
            <summary>
            Gets the current page.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.TryGetRouteDefinitionFromAncestorViewContexts">
            <summary>
            we need to recursively find the route definition based on the parent view context
            </summary>
            <returns></returns>
            <remarks>
            We may have Child Actions within Child actions so we need to recursively look this up.
            see: http://issues.umbraco.org/issue/U4-1844
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.PluginControllerArea">
            <summary>
            A custom area for controllers that are plugins
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginControllerArea.#ctor(Umbraco.Core.Configuration.IGlobalSettings,System.Collections.Generic.IEnumerable{Umbraco.Web.Mvc.PluginControllerMetadata})">
            <summary>
            The constructor accepts all types of plugin controllers and will verify that ALL of them have the same areaName assigned to them
            based on their PluginControllerAttribute. If they are not the same an exception will be thrown.
            </summary>
            <param name="globalSettings"></param>
            <param name="pluginControllers"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginControllerArea.MapRouteSurfaceControllers(System.Web.Routing.RouteCollection,System.Collections.Generic.IEnumerable{Umbraco.Web.Mvc.PluginControllerMetadata})">
             <summary>
             Registers all surface controller routes
             </summary>
            <param name="routes"></param>
             <param name="surfaceControllers"></param>
             <remarks>
             The routes will be:
            
             /Umbraco/[AreaName]/[ControllerName]/[Action]/[Id]
             </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginControllerArea.MapRouteApiControllers(System.Web.Routing.RouteCollection,System.Collections.Generic.IEnumerable{Umbraco.Web.Mvc.PluginControllerMetadata})">
            <summary>
            Registers all api controller routes
            </summary>
            <param name="routes"></param>
            <param name="apiControllers"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.PluginControllerAttribute">
            <summary>
            Indicates that a controller is a plugin tree controller and should be routed to its own area.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginControllerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Mvc.PluginControllerAttribute"/> class.
            </summary>
            <param name="areaName"></param>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginControllerAttribute.AreaName">
            <summary>
            Gets the name of the area.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.PluginControllerMetadata">
            <summary>
            Represents some metadata about the controller
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginControllerMetadata.IsBackOffice">
            <summary>
            This is determined by another attribute [IsBackOffice] which slightly modifies the route path
            allowing us to determine if it is indeed a back office request or not
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoPageResult">
            <summary>
            Used by posted forms to proxy the result to the page in which the current URL matches on
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.ExecuteControllerAction(System.Web.Mvc.ControllerContext,System.Web.Mvc.IController)">
            <summary>
            Executes the controller action
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.ResetRouteData(System.Web.Routing.RouteData)">
            <summary>
            Since we could be returning the current page from a surface controller posted values in which the routing values are changed, we
            need to revert these values back to nothing in order for the normal page to render again.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.ValidateRouteData(System.Web.Routing.RouteData)">
            <summary>
            Validate that the current page execution is not being handled by the normal umbraco routing system
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.CopyControllerData(System.Web.Mvc.ControllerContext,System.Web.Mvc.ControllerBase)">
            <summary>
            Ensure ModelState, ViewData and TempData is copied across
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.CreateController(System.Web.Mvc.ControllerContext,System.Web.Mvc.IControllerFactory,Umbraco.Web.Mvc.RouteDefinition)">
            <summary>
            Creates a controller using the controller factory
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.CleanupController(System.Web.Mvc.IController,System.Web.Mvc.IControllerFactory)">
            <summary>
            Cleans up the controller by releasing it using the controller factory, and by disposing it.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.ViewContextExtensions.CopyWithModel(System.Web.Mvc.ViewContext,System.Object)">
            <summary>
            Creates a new ViewContext from an existing one but specifies a new Model for the ViewData
            </summary>
            <param name="vc"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ViewDataContainerExtensions.FilterContainer(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Creates a new IViewDataContainer but with a filtered ModelState
            </summary>
            <param name="container"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ViewDataContainerExtensions.CopyWithModel(System.Web.Mvc.IViewDataContainer,System.Object)">
            <summary>
            Returns a new IViewContainer based on the current one but supplies a different model to the ViewData
            </summary>
            <param name="container"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.Constants">
            <summary>
            constants
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.IFilteredControllerFactory.CanHandle(System.Web.Routing.RequestContext)">
            <summary>
            Determines whether this instance can handle the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if this instance can handle the specified request; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.MasterControllerFactory">
            <summary>
            A controller factory which uses an internal list of <see cref="T:Umbraco.Web.Mvc.IFilteredControllerFactory"/> in order to invoke
            different controller factories dependent upon their implementation of <see cref="M:Umbraco.Web.Mvc.IFilteredControllerFactory.CanHandle(System.Web.Routing.RequestContext)"/> for the current
            request. Allows circumvention of MVC3's singly registered IControllerFactory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.MasterControllerFactory.#ctor(System.Func{Umbraco.Web.Mvc.FilteredControllerFactoryCollection})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Mvc.MasterControllerFactory"/> with a factories accessor.
            </summary>
            <param name="factoriesAccessor">The factories accessor.</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.MasterControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
             <summary>
             Creates the specified controller by using the specified request context.
             </summary>
             <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
             <param name="controllerName">The name of the controller.</param>
             <returns>The controller.</returns>
             <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext"/> parameter is null.</exception>
            
             <exception cref="T:System.ArgumentException">The <paramref name="controllerName"/> parameter is null or empty.</exception>
             <remarks></remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.MasterControllerFactory.GetControllerTypeInternal(System.Web.Routing.RequestContext,System.String)">
             <summary>
             Retrieves the controller type for the specified name and request context.
             </summary>
            
             <returns>
             The controller type.
             </returns>
             <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
             <param name="controllerName">The name of the controller.</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.MasterControllerFactory.ReleaseController(System.Web.Mvc.IController)">
            <summary>
            Releases the specified controller.
            </summary>
            <param name="icontroller">The controller to release.</param>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.RenderActionInvoker">
            <summary>
            Ensures that if an action for the Template name is not explicitly defined by a user, that the 'Index' action will execute
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderActionInvoker.FindAction(System.Web.Mvc.ControllerContext,System.Web.Mvc.ControllerDescriptor,System.String)">
            <summary>
            Ensures that if an action for the Template name is not explicitly defined by a user, that the 'Index' action will execute
            </summary>
            <param name="controllerContext"></param>
            <param name="controllerDescriptor"></param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.RenderControllerFactory">
            <summary>
            A controller factory for the render pipeline of Umbraco. This controller factory tries to create a controller with the supplied
            name, and falls back to UmbracoController if none was found.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderControllerFactory.CanHandle(System.Web.Routing.RequestContext)">
            <summary>
            Determines whether this instance can handle the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if this instance can handle the specified request; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Creates the controller
            </summary>
            <param name="requestContext"></param>
            <param name="controllerName"></param>
            <returns></returns>
            <remarks>
            We always set the correct ActionInvoker on our custom created controller, this is very important for route hijacking!
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.ContentModelBinder">
            <summary>
            Maps view models, supporting mapping to and from any IPublishedContent or IContentModel.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.ContentModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            Binds the model to a value by using the specified controller context and binding context.
            </summary>
            <returns>
            The bound value.
            </returns>
            <param name="controllerContext">The controller context.</param><param name="bindingContext">The binding context.</param>
        </member>
        <member name="T:Umbraco.Web.Mvc.ContentModelBinder.ModelBindingArgs">
            <summary>
            Contains event data for the <see cref="E:Umbraco.Web.Mvc.ContentModelBinder.ModelBindingException"/> event.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.ContentModelBinder.ModelBindingArgs.#ctor(System.Type,System.Type,System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Mvc.ContentModelBinder.ModelBindingArgs"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.ContentModelBinder.ModelBindingArgs.SourceType">
            <summary>
            Gets the type of the source object.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.ContentModelBinder.ModelBindingArgs.ModelType">
            <summary>
            Gets the type of the view model.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.ContentModelBinder.ModelBindingArgs.Message">
            <summary>
            Gets the message string builder.
            </summary>
            <remarks>Handlers of the event can append text to the message.</remarks>
        </member>
        <member name="P:Umbraco.Web.Mvc.ContentModelBinder.ModelBindingArgs.Restart">
            <summary>
            Gets or sets a value indicating whether the application should restart.
            </summary>
        </member>
        <member name="E:Umbraco.Web.Mvc.ContentModelBinder.ModelBindingException">
            <summary>
            Occurs on model binding exceptions.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.RenderMvcController">
            <summary>
            Represents the default front-end rendering controller.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.RenderMvcController.UmbracoContext">
            <summary>
            Gets the Umbraco context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.RenderMvcController.CurrentPage">
            <summary>
            Gets the current content item.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.RenderMvcController.PublishedRequest">
            <summary>
            Gets the current published content request.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderMvcController.EnsurePhsyicalViewExists(System.String)">
            <summary>
            Ensures that a physical view file exists on disk.
            </summary>
            <param name="template">The view name.</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderMvcController.CurrentTemplate``1(``0)">
            <summary>
            Gets an action result based on the template name found in the route values and a model.
            </summary>
            <typeparam name="T">The type of the model.</typeparam>
            <param name="model">The model.</param>
            <returns>The action result.</returns>
            <remarks>If the template found in the route values doesn't physically exist, then an empty ContentResult will be returned.</remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderMvcController.Index(Umbraco.Web.Models.ContentModel)">
            <summary>
            The default action to render the front-end view.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Assigns the correct controller based on the Umbraco request and returns a standard MvcHandler to process the response,
            this also stores the render model into the data tokens for the current RouteData.
            </summary>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.SetupRouteDataForRequest(Umbraco.Web.Models.ContentModel,System.Web.Routing.RequestContext,Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Ensures that all of the correct DataTokens are added to the route values which are all required for rendering front-end umbraco views
            </summary>
            <param name="contentModel"></param>
            <param name="requestContext"></param>
            <param name="frequest"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.GetFormInfo(System.Web.Routing.RequestContext)">
            <summary>
            Checks the request and query strings to see if it matches the definition of having a Surface controller
            posted/get value, if so, then we return a PostedDataProxyInfo object with the correct information.
            </summary>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.HandlePostedValues(System.Web.Routing.RequestContext,Umbraco.Web.Mvc.PostedDataProxyInfo)">
            <summary>
            Handles a posted form to an Umbraco URL and ensures the correct controller is routed to and that
            the right DataTokens are set.
            </summary>
            <param name="requestContext"></param>
            <param name="postedInfo"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.GetUmbracoRouteDefinition(System.Web.Routing.RequestContext,Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Returns a RouteDefinition object based on the current content request
            </summary>
            <param name="requestContext"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.GetHandlerForRoute(System.Web.Routing.RequestContext,Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            this will determine the controller and set the values in the route data
            </summary>
            <param name="requestContext"></param>
            <param name="request"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.RenderViewEngine">
            <summary>
            A view engine to look into the template location specified in the config for the front-end/Rendering part of the cms,
            this includes paths to render partial macros and media item templates.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderViewEngine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderViewEngine.EnsureFoldersAndFiles">
            <summary>
            Ensures that the correct web.config for razor exists in the /Views folder, the partials folder exist and the ViewStartPage exists.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderViewEngine.ShouldFindView(System.Web.Mvc.ControllerContext,System.Boolean)">
            <summary>
            Determines if the view should be found, this is used for view lookup performance and also to ensure
            less overlap with other user's view engines. This will return true if the Umbraco back office is rendering
            and its a partial view or if the umbraco front-end is rendering but nothing else.
            </summary>
            <param name="controllerContext"></param>
            <param name="isPartial"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.RouteDefinition">
            <summary>
            Represents the data required to route to a specific controller/action during an Umbraco request
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.RouteDefinition.ControllerType">
            <summary>
            The Controller type found for routing to
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.RouteDefinition.PublishedRequest">
            <summary>
            Everything related to the current content request including the requested content
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.RouteDefinition.HasHijackedRoute">
            <summary>
            Gets/sets whether the current request has a hijacked route/user controller routed for it
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RouteValueDictionaryExtensions.ToFormCollection(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Converts a route value dictionary to a form collection
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.RouteValueDictionaryExtensions.GetRequiredObject(System.Web.Routing.RouteValueDictionary,System.String)">
            <summary>
            Returns the value of a mandatory item in the route items
            </summary>
            <param name="items"></param>
            <param name="key"> </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.GetControllerName(System.Type)">
            <summary>
            Return the controller name from the controller type
            </summary>
            <param name="controllerType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.GetControllerName(System.Web.Mvc.IController)">
            <summary>
            Return the controller name from the controller instance
            </summary>
            <param name="controllerInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.GetControllerName``1">
            <summary>
            Return the controller name from the controller type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.CreateEmptyViewContext(System.Web.Mvc.ControllerBase)">
            <summary>
            This is generally used for proxying to a ChildAction which requires a ViewContext to be setup
            but since the View isn't actually rendered the IView object is null, however the rest of the
            properties are filled in.
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.RenderViewResultAsString(System.Web.Mvc.ControllerBase,System.Web.Mvc.ViewResultBase)">
            <summary>
            Returns the string output from a ViewResultBase object
            </summary>
            <param name="controller"></param>
            <param name="viewResult"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.RenderViewToString(System.Web.Mvc.ControllerBase,System.String,System.Object,System.Boolean)">
            <summary>
            Renders the partial view to string.
            </summary>
            <param name="controller">The controller context.</param>
            <param name="viewName">Name of the view.</param>
            <param name="model">The model.</param>
            <param name="isPartial">true if it is a Partial view, otherwise false for a normal view </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.RenderViewToString(System.Web.Routing.RequestContext,System.Web.Mvc.ViewDataDictionary,System.Web.Mvc.TempDataDictionary,System.String,System.Object,System.Boolean)">
            <summary>
            Renders the partial view to string.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="viewData"></param>
            <param name="tempData"></param>
            <param name="viewName">Name of the view.</param>
            <param name="model">The model.</param>
            <param name="isPartial">true if it is a Partial view, otherwise false for a normal view </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.EnsureViewObjectDataOnResult(System.Web.Mvc.ControllerBase,System.Web.Mvc.ViewResultBase)">
            <summary>
            Normally in MVC the way that the View object gets assigned to the result is to Execute the ViewResult, this however
            will write to the Response output stream which isn't what we want. Instead, this method will use the same logic inside
            of MVC to assign the View object to the result but without executing it.
            This is only relevant for view results of PartialViewResult or ViewResult.
            </summary>
            <param name="result"></param>
            <param name="controller"></param>
        </member>
        <member name="T:Umbraco.Web.Profiling.WebProfilingController">
            <summary>
            The API controller used to display the state of the web profiler
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.BlockEditorPropertyEditor">
            <summary>
            Abstract class for block editor based editors
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.BlockEditorPropertyEditor.BlockEditorPropertyValueEditor.ToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Services.IDataTypeService,System.String,System.String)">
            <summary>
            Ensure that sub-editor values are translated through their ToEditor methods
            </summary>
            <param name="property"></param>
            <param name="dataTypeService"></param>
            <param name="culture"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.BlockEditorPropertyEditor.BlockEditorPropertyValueEditor.FromEditor(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            Ensure that sub-editor values are translated through their FromEditor methods
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.BlockEditorPropertyEditor.MinMaxValidator">
            <summary>
            Validates the min/max of the block editor
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.BlockEditorPropertyEditor.BlockEditorValues">
            <summary>
            Used to deserialize json values and clean up any values based on the existence of element types and layout structure
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.BlockListConfiguration">
            <summary>
            The configuration object for the Block List editor
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.BlockListPropertyEditor">
            <summary>
            Represents a block list property editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ComplexEditorValidator">
            <summary>
            Used to validate complex editors that contain nested editors
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ComplexEditorValidator.Validate(System.Object,System.String,System.Object)">
            <summary>
            Return a single <see cref="T:Umbraco.Web.PropertyEditors.Validation.ComplexEditorValidationResult"/> for all sub nested validation results in the complex editor
            </summary>
            <param name="value"></param>
            <param name="valueType"></param>
            <param name="dataTypeConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ComplexEditorValidator.GetNestedValidationResults(System.Collections.Generic.IEnumerable{Umbraco.Web.PropertyEditors.ComplexEditorValidator.ElementTypeValidationModel})">
            <summary>
            Return a nested validation result per row (Element Type)
            </summary>
            <param name="rawValue"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ParameterEditors.MultipleMediaPickerParameterEditor">
            <summary>
            Represents a multiple media picker macro parameter editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ParameterEditors.MultipleMediaPickerParameterEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.ParameterEditors.MultipleMediaPickerParameterEditor"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ParameterEditors.MultipleContentPickerParameterEditor">
            <summary>
            Represents a parameter editor of some sort.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ParameterEditors.MultipleContentPickerParameterEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.ParameterEditors.MultipleContentPickerParameterEditor"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ParameterEditors.ContentTypeParameterEditor">
            <summary>
            Represents a content type parameter editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ParameterEditors.ContentTypeParameterEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.ParameterEditors.ContentTypeParameterEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RichTextEditorPastedImages.FindAndPersistPastedTempImages(System.String,System.Guid,System.Int32,Umbraco.Core.Models.IImageUrlGenerator)">
            <summary>
            Used by the RTE (and grid RTE) for drag/drop/persisting images
            </summary>
            <param name="html"></param>
            <param name="mediaParentFolder"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.Validation.ComplexEditorElementTypeValidationResult">
            <summary>
            A collection of <see cref="T:Umbraco.Web.PropertyEditors.Validation.ComplexEditorPropertyTypeValidationResult"/> for an element type within complex editor represented by an Element Type
            </summary>
            <remarks>
            For a more indepth explanation of how server side validation works with the angular app, see this GitHub PR: 
            https://github.com/umbraco/Umbraco-CMS/pull/8339
            </remarks>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.Validation.ComplexEditorElementTypeValidationResult.ElementTypeAlias">
            <summary>
            The element type alias of the validation result
            </summary>
            <remarks>
            This is useful for debugging purposes but it's not actively used in the angular app
            </remarks>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.Validation.ComplexEditorElementTypeValidationResult.BlockId">
            <summary>
            The Block ID of the validation result
            </summary>
            <remarks>
            This is the GUID id of the content item based on the element type
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.Validation.ComplexEditorPropertyTypeValidationResult">
            <summary>
            A collection of <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> for a property type within a complex editor represented by an Element Type
            </summary>
            <remarks>
            For a more indepth explanation of how server side validation works with the angular app, see this GitHub PR: 
            https://github.com/umbraco/Umbraco-CMS/pull/8339
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.Validation.ComplexEditorValidationResult">
             <summary>
             A collection of <see cref="T:Umbraco.Web.PropertyEditors.Validation.ComplexEditorElementTypeValidationResult"/> for a complex editor represented by an Element Type
             </summary>
             <remarks>
             For example, each <see cref="T:Umbraco.Web.PropertyEditors.Validation.ComplexEditorValidationResult"/> represents validation results for a row in Nested Content.
            
             For a more indepth explanation of how server side validation works with the angular app, see this GitHub PR: 
             https://github.com/umbraco/Umbraco-CMS/pull/8339
             </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.Validation.ContentPropertyValidationResult">
             <summary>
             Custom <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> for content properties
             </summary>
             <remarks>
             This clones the original result and then ensures the nested result if it's the correct type.
            
             For a more indepth explanation of how server side validation works with the angular app, see this GitHub PR: 
             https://github.com/umbraco/Umbraco-CMS/pull/8339
             </remarks>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.Validation.ContentPropertyValidationResult.ComplexEditorResults">
            <summary>
            Nested validation results for the content property
            </summary>
            <remarks>
            There can be nested results for complex editors that contain other editors
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.Validation.ContentPropertyValidationResult.ToString">
            <summary>
            Return the <see cref="P:System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage"/> if <see cref="P:Umbraco.Web.PropertyEditors.Validation.ContentPropertyValidationResult.ComplexEditorResults"/> is null, else the serialized
            complex validation results
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.Validation.ValidationResultConverter">
             <summary>
             Custom json converter for <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> and <see cref="T:Umbraco.Web.PropertyEditors.Validation.ContentPropertyValidationResult"/>
             </summary>
             <remarks>
             This converter is specifically used to convert validation results for content in order to be able to have nested
             validation results for complex editors.
            
             For a more indepth explanation of how server side validation works with the angular app, see this GitHub PR: 
             https://github.com/umbraco/Umbraco-CMS/pull/8339
             </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.Validation.ValidationResultConverter.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="culture">The culture of the containing property which will be transfered to all child model state</param>
            <param name="segment">The segment of the containing property which will be transfered to all child model state</param>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ValueConverters.BlockEditorConverter">
            <summary>
            Converts json block objects into <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedElement"/>
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.IsConverter(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.GetPropertyValueType(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.GetPropertyCacheLevel(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.ConvertSourceToIntermediate(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.ConvertIntermediateToObject(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentManyValueConverter">
            <inheritdoc />
            <summary>
            Provides an implementation for <see cref="T:Umbraco.Core.PropertyEditors.IPropertyValueConverter" /> for nested content.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentManyValueConverter.#ctor(Umbraco.Web.PublishedCache.IPublishedSnapshotAccessor,Umbraco.Core.Models.PublishedContent.IPublishedModelFactory,Umbraco.Core.Logging.IProfilingLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentManyValueConverter"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentManyValueConverter.IsConverter(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentManyValueConverter.GetPropertyValueType(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentManyValueConverter.GetPropertyCacheLevel(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentManyValueConverter.ConvertSourceToIntermediate(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentManyValueConverter.ConvertIntermediateToObject(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentSingleValueConverter">
            <inheritdoc />
            <summary>
            Provides an implementation for <see cref="T:Umbraco.Core.PropertyEditors.IPropertyValueConverter" /> for nested content.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentSingleValueConverter.#ctor(Umbraco.Web.PublishedCache.IPublishedSnapshotAccessor,Umbraco.Core.Models.PublishedContent.IPublishedModelFactory,Umbraco.Core.Logging.IProfilingLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentSingleValueConverter"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentSingleValueConverter.IsConverter(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentSingleValueConverter.GetPropertyValueType(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentSingleValueConverter.GetPropertyCacheLevel(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentSingleValueConverter.ConvertSourceToIntermediate(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.NestedContentSingleValueConverter.ConvertIntermediateToObject(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ValueConverters.MediaPickerValueConverter">
            <summary>
            The media picker property value converter.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ValueConverters.MultiNodeTreePickerValueConverter">
            <summary>
            The multi node tree picker property editor value converter.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueConverters.MultiNodeTreePickerValueConverter.GetPublishedContent``1(``0,Umbraco.Core.Models.UmbracoObjectTypes@,Umbraco.Core.Models.UmbracoObjectTypes,System.Func{``0,Umbraco.Core.Models.PublishedContent.IPublishedContent})">
            <summary>
            Attempt to get an IPublishedContent instance based on ID and content type
            </summary>
            <param name="nodeId">The content node ID</param>
            <param name="actualType">The type of content being requested</param>
            <param name="expectedType">The type of content expected/supported by <paramref name="contentFetcher"/></param>
            <param name="contentFetcher">A function to fetch content of type <paramref name="expectedType"/></param>
            <returns>The requested content, or null if either it does not exist or <paramref name="actualType"/> does not match <paramref name="expectedType"/></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ValueConverters.RteMacroRenderingValueConverter">
            <summary>
            A value converter for TinyMCE that will ensure any macro content is rendered properly even when
            used dynamically.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.GridPropertyIndexValueFactory">
            <summary>
            Parses the grid value into indexable values
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ContentPickerPropertyEditor">
            <summary>
            Content property editor that stores UDI
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DateValueEditor">
            <summary>
            CUstom value editor so we can serialize with the correct date format (excluding time)
            and includes the date validator
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DecimalConfigurationEditor">
            <summary>
            A custom pre-value editor class to deal with the legacy way that the pre-value data is stored.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.EmailAddressConfigurationEditor">
            <summary>
            Represents the configuration editor for the email address value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.EmailAddressConfiguration">
            <summary>
            Represents the configuration for the email address value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.GridConfiguration">
            <summary>
            Represents the configuration for the grid value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.GridConfigurationEditor">
            <summary>
            Represents the configuration editor for the grid value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ImageCropperConfigurationEditor">
            <summary>
            Represents the configuration editor for the image cropper value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperConfigurationEditor.ToValueEditor(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.IntegerConfigurationEditor">
            <summary>
            A custom pre-value editor class to deal with the legacy way that the pre-value data is stored.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ListViewConfiguration">
            <summary>
            Represents the configuration for the listview value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ListViewConfigurationEditor">
            <summary>
            Represents the configuration editor for the listview value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MarkdownConfiguration">
            <summary>
            Represents the configuration for the markdown value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MarkdownConfigurationEditor">
            <summary>
            Represents the configuration editorfor the markdown value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MediaPickerPropertyEditor">
            <summary>
            Represents a media picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MediaPickerPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.MediaPickerPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MediaPickerPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MediaPickerConfiguration">
            <summary>
            Represents the configuration for the media picker value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MediaPickerConfigurationEditor">
            <summary>
            Represents the configuration editor for the media picker value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MediaPickerConfigurationEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.MediaPickerConfigurationEditor"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MultiNodePickerConfiguration">
            <summary>
            Represents the configuration for the multinode picker value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MultiNodePickerConfigurationEditor">
            <summary>
            Represents the configuration for the multinode picker value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultiNodePickerConfigurationEditor.ToConfigurationEditor(Umbraco.Web.PropertyEditors.MultiNodePickerConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultiNodePickerConfigurationEditor.ToValueEditor(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MultiNodePickerConfigurationTreeSource">
            <summary>
            Represents the 'startNode' value for the <see cref="T:Umbraco.Web.PropertyEditors.MultiNodePickerConfiguration"/>
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MultipleTextStringConfiguration">
            <summary>
            Represents the configuration for a multiple textstring value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MultipleTextStringConfigurationEditor">
            <summary>
            Represents the configuration editor for a multiple textstring value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleTextStringConfigurationEditor.FromConfigurationEditor(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Web.PropertyEditors.MultipleTextStringConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleTextStringConfigurationEditor.ToConfigurationEditor(Umbraco.Web.PropertyEditors.MultipleTextStringConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.NestedContentConfiguration">
            <summary>
            Represents the configuration for the nested content value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.NestedContentConfigurationEditor">
            <summary>
            Represents the configuration editor for the nested content value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.NestedContentPropertyEditor">
            <summary>
            Represents a nested content property editor.
            </summary>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.NestedContentPropertyEditor.NestedContentPropertyValueEditor.Configuration">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.NestedContentPropertyEditor.NestedContentPropertyValueEditor.ToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Services.IDataTypeService,System.String,System.String)">
            <summary>
            Ensure that sub-editor values are translated through their ToEditor methods
            </summary>
            <param name="property"></param>
            <param name="dataTypeService"></param>
            <param name="culture"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.NestedContentPropertyEditor.NestedContentPropertyValueEditor.FromEditor(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            Ensure that sub-editor values are translated through their FromEditor methods
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.NestedContentPropertyEditor.NestedContentValidator">
            <summary>
            Validator for nested content to ensure that all nesting of editors is validated
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.NestedContentPropertyEditor.NestedContentValues">
            <summary>
            Used to deserialize the nested content serialized value
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.NestedContentPropertyEditor.NestedContentValues.GetPropertyValues(System.Object)">
            <summary>
            Deserialize the raw json property value
            </summary>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.NestedContentPropertyEditor.NestedContentValues.NestedContentPropertyValue">
            <summary>
            Used during deserialization to populate the property value/property type of a nested content row property
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.NestedContentPropertyEditor.NestedContentValues.NestedContentRowValue">
            <summary>
            Used to deserialize a nested content row
            </summary>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.NestedContentPropertyEditor.NestedContentValues.NestedContentRowValue.RawPropertyValues">
            <summary>
            The remaining properties will be serialized to a dictionary
            </summary>
            <remarks>
            The JsonExtensionDataAttribute is used to put the non-typed properties into a bucket
            http://www.newtonsoft.com/json/help/html/DeserializeExtensionData.htm
            NestedContent serializes to string, int, whatever eg
              "stringValue":"Some String","numericValue":125,"otherNumeric":null
            </remarks>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.NestedContentPropertyEditor.NestedContentValues.NestedContentRowValue.PropertyValues">
            <summary>
            Used during deserialization to convert the raw property data into data with a property type context
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.RichTextConfiguration">
            <summary>
            Represents the configuration for the rich text value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.SliderConfigurationEditor">
            <summary>
            Represents the configuration editor for the slider value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TagConfigurationEditor">
            <summary>
            Represents the configuration editor for the tag value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TextAreaConfiguration">
            <summary>
            Represents the configuration for the textarea value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TextAreaConfigurationEditor">
            <summary>
            Represents the configuration editor for the textarea value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TextboxConfiguration">
            <summary>
            Represents the configuration for the textbox value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TextboxConfigurationEditor">
            <summary>
            Represents the configuration editor for the textbox value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TextOnlyValueEditor">
            <summary>
            Custom value editor which ensures that the value stored is just plain text and that
            no magic json formatting occurs when translating it to and from the database values
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TextOnlyValueEditor.ToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Services.IDataTypeService,System.String,System.String)">
            <summary>
            A method used to format the database value to a value that can be used by the editor
            </summary>
            <param name="property"></param>
            <param name="dataTypeService"></param>
            <param name="culture"></param>
            <param name="segment"></param>
            <returns></returns>
            <remarks>
            The object returned will always be a string and if the database type is not a valid string type an exception is thrown
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TrueFalseConfiguration">
            <summary>
            Represents the configuration for the boolean value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TrueFalseConfigurationEditor">
            <summary>
            Represents the configuration editor for the boolean value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ValueListUniqueValueValidator">
            <summary>
            Represents a validator which ensures that all values in the list are unique.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DateTimeConfigurationEditor">
            <summary>
            Represents the configuration editor for the datetime value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DecimalPropertyEditor">
            <summary>
            Represents a decimal property and parameter editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.DecimalPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.DecimalPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.DecimalPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.DecimalPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.GridPropertyEditor">
            <summary>
            Represents a grid property and parameter editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.GridPropertyEditor.CreateValueEditor">
            <summary>
            Overridden to ensure that the value is validated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.GridPropertyEditor.GridPropertyValueEditor.FromEditor(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            Format the data for persistence
            This to ensure if a RTE is used in a Grid cell/control that we parse it for tmp stored images
            to persist to the media library when we go to persist this to the DB
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.GridPropertyEditor.GridPropertyValueEditor.ToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Services.IDataTypeService,System.String,System.String)">
            <summary>
            Ensures that the rich text editor values are processed within the grid
            </summary>
            <param name="property"></param>
            <param name="dataTypeService"></param>
            <param name="culture"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.GridPropertyEditor.GridPropertyValueEditor.GetReferences(System.Object)">
            <summary>
            Resolve references from <see cref="T:Umbraco.Core.PropertyEditors.IDataValueEditor"/> values
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TagsDataController">
            <summary>
            A controller used for type-ahead values for tags
            </summary>
            <remarks>
            DO NOT inherit from UmbracoAuthorizedJsonController since we don't want to use the angularized
            json formatter as it causes problems.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TagsDataController.GetTags(System.String,System.String,System.String)">
            <summary>
            Returns all tags matching tagGroup, culture and an optional query
            </summary>
            <param name="tagGroup"></param>
            <param name="culture"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.EmailAddressPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            The constructor will setup the property editor based on the attribute if one is found
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor">
            <summary>
            Represents an image cropper property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.IO.IMediaFileSystem,Umbraco.Core.Configuration.UmbracoSettings.IContentSection,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.CreateValueEditor">
            <summary>
            Creates the corresponding property value editor.
            </summary>
            <returns>The corresponding property value editor.</returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.CreateConfigurationEditor">
            <summary>
            Creates the corresponding preValue editor.
            </summary>
            <returns>The corresponding preValue editor.</returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.IsCropperField(Umbraco.Core.Models.Property)">
            <summary>
            Gets a value indicating whether a property is an image cropper field.
            </summary>
            <param name="property">The property.</param>
            <returns>A value indicating whether a property is an image cropper field, and (optionally) has a non-empty value.</returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.GetJObject(System.String,System.Boolean)">
            <summary>
            Parses the property value into a json object.
            </summary>
            <param name="value">The property value.</param>
            <param name="writeLog">A value indicating whether to log the error.</param>
            <returns>The json object corresponding to the property value.</returns>
            <remarks>In case of an error, optionally logs the error and returns null.</remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.ServiceDeleted(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ContentBase})">
            <summary>
            Ensures any files associated are removed
            </summary>
            <param name="deletedEntities"></param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.GetFilePathsFromPropertyValues(Umbraco.Core.Models.Property)">
            <summary>
            Look through all property values stored against the property and resolve any file paths stored
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.GetFileSrcFromPropertyValue(System.Object,Newtonsoft.Json.Linq.JObject@,System.Boolean)">
            <summary>
            Returns the "src" property from the json structure if the value is formatted correctly
            </summary>
            <param name="propVal"></param>
            <param name="deserializedValue">The deserialized <see cref="T:Newtonsoft.Json.Linq.JObject"/> value</param>
            <param name="relative">Should the path returned be the application relative path</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.ContentServiceCopied(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.CopyEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            After a content has been copied, also copy uploaded files.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.MediaServiceCreated(Umbraco.Core.Services.IMediaService,Umbraco.Core.Events.NewEventArgs{Umbraco.Core.Models.IMedia})">
            <summary>
            After a media has been created, auto-fill the properties.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.MediaServiceSaving(Umbraco.Core.Services.IMediaService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.IMedia})">
            <summary>
            After a media has been saved, auto-fill the properties.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.ContentServiceSaving(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            After a content item has been saved, auto-fill the properties.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.AutoFillProperties(Umbraco.Core.Models.IContentBase)">
            <summary>
            Auto-fill properties (or clear).
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ImageCropperPropertyValueEditor">
            <summary>
            The value editor for the image cropper property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyValueEditor.ToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Services.IDataTypeService,System.String,System.String)">
            <summary>
            This is called to merge in the prevalue crops with the value that is saved - similar to the property value converter for the front-end
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyValueEditor.FromEditor(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            Converts the value received from the editor into the value can be stored in the database.
            </summary>
            <param name="editorValue">The value received from the editor.</param>
            <param name="currentValue">The current value of the property</param>
            <returns>The converted value.</returns>
            <remarks>
            <para>The <paramref name="currentValue"/> is used to re-use the folder, if possible.</para>
            <para>editorValue.Value is used to figure out editorFile and, if it has been cleared, remove the old file - but
            it is editorValue.AdditionalData["files"] that is used to determine the actual file that has been uploaded.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ListViewPropertyEditor">
            <summary>
            Represents a list-view editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ListViewPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.ListViewPropertyEditor"/> class.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ListViewPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MarkdownPropertyEditor">
            <summary>
            Represents a markdown editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MarkdownPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.MarkdownPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MarkdownPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.PropertyEditorAssetAttribute">
            <summary>
            Indicates that the property editor requires this asset be loaded when the back office is loaded
            </summary>
            <remarks>
            This wraps a CDF asset
            </remarks>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.PropertyEditorAssetAttribute.DependencyFile">
            <summary>
            Returns a CDF file reference
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.RteEmbedController">
            <summary>
            A controller used for the embed dialog
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.CheckBoxListPropertyEditor">
            <summary>
            A property editor to allow multiple checkbox selection of pre-defined items.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.CheckBoxListPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Services.ILocalizedTextService)">
            <summary>
            The constructor will setup the property editor based on the attribute if one is found
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.CheckBoxListPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.CheckBoxListPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ColorPickerPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DateTimePropertyEditor">
            <summary>
            Represents a date and time property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.DateTimePropertyEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.DateTimePropertyEditor"/> class.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.DateTimePropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.DateTimePropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DateTimeValidator">
            <summary>
            Used to validate if the value is a valid date/time
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.IntegerPropertyEditor">
            <summary>
            Represents an integer property and parameter editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.IntegerPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.IntegerPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor">
            <summary>
            Represents a multiple text string property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor">
            <summary>
            Custom value editor so we can format the value for the editor and the database
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor.FromEditor(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            The value passed in from the editor will be an array of simple objects so we'll need to parse them to get the string
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
            <remarks>
            We will also check the pre-values here, if there are more items than what is allowed we'll just trim the end
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor.ToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Services.IDataTypeService,System.String,System.String)">
            <summary>
            We are actually passing back an array of simple objects instead of an array of strings because in angular a primitive (string) value
            cannot have 2 way binding, so to get around that each item in the array needs to be an object with a string.
            </summary>
            <param name="property"></param>
            <param name="dataTypeService"></param>
            <param name="culture"></param>
            <param name="segment"></param>
            <returns></returns>
            <remarks>
            The legacy property editor saved this data as new line delimited! strange but we have to maintain that.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor.FormatValidator">
            <summary>
            A custom FormatValidator is used as for multiple text strings, each string should individually be checked
            against the configured regular expression, rather than the JSON representing all the strings as a whole.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MultipleValueEditor">
            <summary>
            A value editor to handle posted json array data and to return array data for the multiple selected csv items
            </summary>
            <remarks>
            This is re-used by editors such as the multiple drop down list or check box list
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleValueEditor.ToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Services.IDataTypeService,System.String,System.String)">
            <summary>
            Override so that we can return an array to the editor for multi-select values
            </summary>
            <param name="property"></param>
            <param name="dataTypeService"></param>
            <param name="culture"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleValueEditor.FromEditor(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            When multiple values are selected a json array will be posted back so we need to format for storage in
            the database which is a comma separated string value
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.RadioButtonsPropertyEditor">
            <summary>
            A property editor to allow the individual selection of pre-defined items.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RadioButtonsPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Services.ILocalizedTextService)">
            <summary>
            The constructor will setup the property editor based on the attribute if one is found
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RadioButtonsPropertyEditor.CreateConfigurationEditor">
            <summary>
            Return a custom pre-value editor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.RichTextPreValueController">
            <summary>
            ApiController to provide RTE configuration with available plugins and commands from the RTE config
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.RichTextConfigurationEditor">
            <summary>
            Represents the configuration editor for the rich text value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.SliderPropertyEditor">
            <summary>
            Represents a slider editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.SliderPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.SliderPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.SliderPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TagsPropertyEditor">
            <summary>
            Represents a tags property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.FromEditor(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.RequiredValidator">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.RequiredJsonValueValidator">
            <summary>
            Custom validator to validate a required value against an empty json value.
            </summary>
            <remarks>
            <para>This validator is required because the default RequiredValidator uses ValueType to
            determine whether a property value is JSON, and for tags the ValueType is string although
            the underlying data is JSON. Yes, this makes little sense.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.RequiredJsonValueValidator.ValidateRequired(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ValueListConfigurationEditor">
            <summary>
            Pre-value editor used to create a list of items
            </summary>
            <remarks>
            This pre-value editor is shared with editors like drop down, checkbox list, etc....
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueListConfigurationEditor.ToConfigurationEditor(Umbraco.Core.PropertyEditors.ValueListConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueListConfigurationEditor.FromConfigurationEditor(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.PropertyEditors.ValueListConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.CreateValueEditor">
            <summary>
            Creates the corresponding property value editor.
            </summary>
            <returns>The corresponding property value editor.</returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.IsUploadField(Umbraco.Core.Models.Property)">
            <summary>
            Gets a value indicating whether a property is an upload field.
            </summary>
            <param name="property">The property.</param>
            <returns>A value indicating whether a property is an upload field, and (optionally) has a non-empty value.</returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.ServiceDeleted(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ContentBase})">
            <summary>
            Ensures any files associated are removed
            </summary>
            <param name="deletedEntities"></param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.GetFilePathsFromPropertyValues(Umbraco.Core.Models.Property)">
            <summary>
            Look through all property values stored against the property and resolve any file paths stored
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.ContentServiceCopied(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.CopyEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            After a content has been copied, also copy uploaded files.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.MediaServiceCreated(Umbraco.Core.Services.IMediaService,Umbraco.Core.Events.NewEventArgs{Umbraco.Core.Models.IMedia})">
            <summary>
            After a media has been created, auto-fill the properties.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.MediaServiceSaving(Umbraco.Core.Services.IMediaService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.IMedia})">
            <summary>
            After a media has been saved, auto-fill the properties.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.ContentServiceSaving(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            After a content item has been saved, auto-fill the properties.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.AutoFillProperties(Umbraco.Core.Models.IContentBase)">
            <summary>
            Auto-fill properties (or clear).
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.FileUploadPropertyValueEditor">
            <summary>
            The value editor for the file upload property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyValueEditor.FromEditor(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            Converts the value received from the editor into the value can be stored in the database.
            </summary>
            <param name="editorValue">The value received from the editor.</param>
            <param name="currentValue">The current value of the property</param>
            <returns>The converted value.</returns>
            <remarks>
            <para>The <paramref name="currentValue"/> is used to re-use the folder, if possible.</para>
            <para>The <paramref name="editorValue"/> is value passed in from the editor. We normally don't care what
            the editorValue.Value is set to because we are more interested in the files collection associated with it,
            however we do care about the value if we are clearing files. By default the editorValue.Value will just
            be set to the name of the file - but again, we just ignore this and deal with the file collection in
            editorValue.AdditionalData.ContainsKey("files")</para>
            <para>We only process ONE file. We understand that the current value may contain more than one file,
            and that more than one file may be uploaded, so we take care of them all, but we only store ONE file.
            Other places (FileUploadPropertyEditor...) do NOT deal with multiple files, and our logic for reusing
            folders would NOT work, etc.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.RichTextPropertyEditor">
            <summary>
            Represents a rich text property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Web.IUmbracoContextAccessor,Umbraco.Web.Templates.HtmlImageSourceParser,Umbraco.Web.Templates.HtmlLocalLinkParser,Umbraco.Web.PropertyEditors.RichTextEditorPastedImages)">
            <summary>
            The constructor will setup the property editor based on the attribute if one is found
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Web.IUmbracoContextAccessor,Umbraco.Web.Templates.HtmlImageSourceParser,Umbraco.Web.Templates.HtmlLocalLinkParser,Umbraco.Web.PropertyEditors.RichTextEditorPastedImages,Umbraco.Core.Models.IImageUrlGenerator)">
            <summary>
            The constructor will setup the property editor based on the attribute if one is found
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.CreateValueEditor">
            <summary>
            Create a custom value editor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor">
            <summary>
            A custom value editor to ensure that macro syntax is parsed when being persisted and formatted correctly for display in the editor
            </summary>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor.Configuration">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor.ToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Services.IDataTypeService,System.String,System.String)">
            <summary>
            Format the data for the editor
            </summary>
            <param name="property"></param>
            <param name="dataTypeService"></param>
            <param name="culture"></param>
            <param name="segment"></param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor.FromEditor(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            Format the data for persistence
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor.GetReferences(System.Object)">
            <summary>
            Resolve references from <see cref="T:Umbraco.Core.PropertyEditors.IDataValueEditor"/> values
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TextAreaPropertyEditor">
            <summary>
            Represents a textarea property and parameter editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TextAreaPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.TextAreaPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TextAreaPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TextAreaPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TextboxPropertyEditor">
            <summary>
            Represents a textbox property and parameter editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TextboxPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.TextboxPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TextboxPropertyEditor.CreateValueEditor">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TextboxPropertyEditor.CreateConfigurationEditor">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TrueFalsePropertyEditor">
            <summary>
            Represents a checkbox property and parameter editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TrueFalsePropertyEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PropertyEditors.TrueFalsePropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TrueFalsePropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PublishedCache.NuCache.PublishedSnapshotServiceOptions">
            <summary>
            Options class for configuring the <see cref="T:Umbraco.Web.PublishedCache.IPublishedSnapshotService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedSnapshotServiceOptions.IgnoreLocalDb">
            <summary>
            If true this disables the persisted local cache files for content and media
            </summary>
            <remarks>
            By default this is false which means umbraco will use locally persisted cache files for reading in all published content and media on application startup.
            The reason for this is to improve startup times because the alternative to populating the published content and media on application startup is to read
            these values from the database. In scenarios where sites are relatively small (below a few thousand nodes) reading the content/media from the database to populate
            the in memory cache isn't that slow and is only marginally slower than reading from the locally persisted cache files.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.NuCache.Snap.LinkedNode`1">
            <summary>
            Used to represent an item in a linked list
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.NuCache.DataSource.ContentNestedData">
            <summary>
            The content item 1:M data that is serialized to JSON
            </summary>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.NuCache.DataSource.CultureVariation">
            <summary>
            Represents the culture variation information on a content item
            </summary>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.NuCache.DataSource.IDataSource">
            <summary>
            Defines a data source for NuCache.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.DataSource.IDataSource.GetAllContentSources(Umbraco.Core.Scoping.IScope)">
            <summary>
            Returns all content ordered by level + sortOrder
            </summary>
            <param name="scope"></param>
            <returns></returns>
            <remarks>
            MUST be ordered by level + parentId + sortOrder!
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.DataSource.IDataSource.GetBranchContentSources(Umbraco.Core.Scoping.IScope,System.Int32)">
            <summary>
            Returns branch for content ordered by level + sortOrder
            </summary>
            <param name="scope"></param>
            <returns></returns>
            <remarks>
            MUST be ordered by level + parentId + sortOrder!
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.DataSource.IDataSource.GetTypeContentSources(Umbraco.Core.Scoping.IScope,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns content by Ids ordered by level + sortOrder
            </summary>
            <param name="scope"></param>
            <returns></returns>
            <remarks>
            MUST be ordered by level + parentId + sortOrder!
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.DataSource.IDataSource.GetAllMediaSources(Umbraco.Core.Scoping.IScope)">
            <summary>
            Returns all media ordered by level + sortOrder
            </summary>
            <param name="scope"></param>
            <returns></returns>
            <remarks>
            MUST be ordered by level + parentId + sortOrder!
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.DataSource.IDataSource.GetBranchMediaSources(Umbraco.Core.Scoping.IScope,System.Int32)">
            <summary>
            Returns branch for media ordered by level + sortOrder
            </summary>
            <param name="scope"></param>
            <returns></returns>
            <remarks>
            MUST be ordered by level + parentId + sortOrder!
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.DataSource.IDataSource.GetTypeMediaSources(Umbraco.Core.Scoping.IScope,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns media by Ids ordered by level + sortOrder
            </summary>
            <param name="scope"></param>
            <returns></returns>
            <remarks>
            MUST be ordered by level + parentId + sortOrder!
            </remarks>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.DataSource.ContentData.CultureInfos">
            <summary>
            The collection of language Id to name for the content item
            </summary>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.NuCache.ContentStore">
            <summary>
            Stores content in memory and persists it back to disk
            </summary>
            <remarks>
            <para>
            Methods in this class suffixed with the term "Locked" means that those methods can only be called within a WriteLock. A WriteLock
            is acquired by the GetScopedWriteLock method. Locks are not allowed to be recursive.
            </para>
            <para>
            This class's logic is based on the <see cref="T:Umbraco.Web.PublishedCache.NuCache.SnapDictionary`2"/> class but has been slightly modified to suit these purposes.
            </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.NewContentTypesLocked(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.IPublishedContentType})">
            <summary>
            Sets data for new content types
            </summary>
            <param name="types"></param>
            <remarks>
            This methods MUST be called from within a write lock, normally wrapped within GetScopedWriteLock
            otherwise an exception will occur.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is not called within a write lock
            </exception>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.UpdateContentTypesLocked(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.IPublishedContentType})">
            <summary>
            Sets data for updated content types
            </summary>
            <param name="types"></param>
            <remarks>
            This methods MUST be called from within a write lock, normally wrapped within GetScopedWriteLock
            otherwise an exception will occur.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is not called within a write lock
            </exception>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.SetAllContentTypesLocked(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.IPublishedContentType})">
            <summary>
            Updates/sets data for all content types
            </summary>
            <param name="types"></param>
            <remarks>
            This methods MUST be called from within a write lock, normally wrapped within GetScopedWriteLock
            otherwise an exception will occur.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is not called within a write lock
            </exception>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.UpdateContentTypesLocked(System.Collections.Generic.IReadOnlyCollection{System.Int32},System.Collections.Generic.IReadOnlyCollection{Umbraco.Core.Models.PublishedContent.IPublishedContentType},System.Collections.Generic.IReadOnlyCollection{Umbraco.Web.PublishedCache.NuCache.ContentNodeKit})">
            <summary>
            Updates/sets/removes data for content types
            </summary>
            <param name="removedIds"></param>
            <param name="refreshedTypes"></param>
            <param name="kits"></param>
            <remarks>
            This methods MUST be called from within a write lock, normally wrapped within GetScopedWriteLock
            otherwise an exception will occur.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is not called within a write lock
            </exception>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.UpdateDataTypesLocked(System.Collections.Generic.IEnumerable{System.Int32},System.Func{System.Int32,Umbraco.Core.Models.PublishedContent.IPublishedContentType})">
            <summary>
            Updates data types
            </summary>
            <param name="dataTypeIds"></param>
            <param name="getContentType"></param>
            <remarks>
            This methods MUST be called from within a write lock, normally wrapped within GetScopedWriteLock
            otherwise an exception will occur.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is not called within a write lock
            </exception>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.BuildKit(Umbraco.Web.PublishedCache.NuCache.ContentNodeKit,Umbraco.Web.PublishedCache.NuCache.Snap.LinkedNode{Umbraco.Web.PublishedCache.NuCache.ContentNode}@)">
            <summary>
            Validate the <see cref="T:Umbraco.Web.PublishedCache.NuCache.ContentNodeKit"/> and try to create a parent <see cref="T:Umbraco.Web.PublishedCache.NuCache.Snap.LinkedNode`1"/>
            </summary>
            <param name="kit"></param>
            <param name="parent"></param>
            <returns>
            Returns false if the parent was not found or if the kit validation failed
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.GetHead``2(System.Collections.Concurrent.ConcurrentDictionary{``0,Umbraco.Web.PublishedCache.NuCache.Snap.LinkedNode{``1}},``0)">
            <summary>
            Get the most recent version of the LinkedNode stored in the dictionary for the supplied key
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.SetLocked(Umbraco.Web.PublishedCache.NuCache.ContentNodeKit)">
            <summary>
            Sets the data for a <see cref="T:Umbraco.Web.PublishedCache.NuCache.ContentNodeKit"/>
            </summary>
            <param name="kit"></param>
            <returns></returns>
            <remarks>
            This methods MUST be called from within a write lock, normally wrapped within GetScopedWriteLock
            otherwise an exception will occur.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is not called within a write lock
            </exception>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.SetAllFastSortedLocked(System.Collections.Generic.IEnumerable{Umbraco.Web.PublishedCache.NuCache.ContentNodeKit},System.Boolean)">
            <summary>
            Builds all kits on startup using a fast forward only cursor
            </summary>
            <param name="kits">
            All kits sorted by Level + Parent Id + Sort order
            </param>
            <param name="fromDb">True if the data is coming from the database (not the local cache db)</param>
            <returns></returns>
            <remarks>
            <para>
            This requires that the collection is sorted by Level + ParentId + Sort Order. 
            This should be used only on a site startup as the first generations.
            This CANNOT be used after startup since it bypasses all checks for Generations.
            </para>
            <para>
            This methods MUST be called from within a write lock, normally wrapped within GetScopedWriteLock
            otherwise an exception will occur.
            </para>        
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is not called within a write lock
            </exception>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.SetAllLocked(System.Collections.Generic.IEnumerable{Umbraco.Web.PublishedCache.NuCache.ContentNodeKit})">
            <summary>
            Set all data for a collection of <see cref="T:Umbraco.Web.PublishedCache.NuCache.ContentNodeKit"/>
            </summary>
            <param name="kits"></param>
            <returns></returns>
            <remarks>
            This methods MUST be called from within a write lock, normally wrapped within GetScopedWriteLock
            otherwise an exception will occur.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is not called within a write lock
            </exception>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.SetBranchLocked(System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Web.PublishedCache.NuCache.ContentNodeKit})">
            <summary>
            Sets data for a branch of <see cref="T:Umbraco.Web.PublishedCache.NuCache.ContentNodeKit"/>
            </summary>
            <param name="rootContentId"></param>
            <param name="kits"></param>
            <returns></returns>
            <remarks>
            <para>
            IMPORTANT kits must be sorted out by LEVEL and by SORT ORDER
            </para>
            <para>
            This methods MUST be called from within a write lock, normally wrapped within GetScopedWriteLock
            otherwise an exception will occur.
            </para>        
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is not called within a write lock
            </exception>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.ClearLocked(System.Int32)">
            <summary>
            Clears data for a given node id
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            This methods MUST be called from within a write lock, normally wrapped within GetScopedWriteLock
            otherwise an exception will occur.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is not called within a write lock
            </exception>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.GetRequiredLinkedNode(System.Int32,System.String,System.Nullable{System.Int64})">
            <summary>
            Gets the link node and if it doesn't exist throw a <see cref="T:Umbraco.Core.Exceptions.PanicException"/>
            </summary>
            <param name="id"></param>
            <param name="description"></param>
            <param name="gen">the generation requested, null for the latest stored</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.GetParentLink(Umbraco.Web.PublishedCache.NuCache.ContentNode,System.Nullable{System.Int64})">
            <summary>
            Gets the parent link node, may be null or root if ParentContentId is less than 0
            </summary>
            <param name="gen">the generation requested, null for the latest stored</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.GetRequiredParentLink(Umbraco.Web.PublishedCache.NuCache.ContentNode,System.Nullable{System.Int64})">
            <summary>
            Gets the linked parent node and if it doesn't exist throw a <see cref="T:Umbraco.Core.Exceptions.PanicException"/>
            </summary>
            <param name="content"></param>
            <param name="gen">the generation requested, null for the latest stored</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.GetLinkedNodeGen``1(Umbraco.Web.PublishedCache.NuCache.Snap.LinkedNode{``0},System.Nullable{System.Int64})">
            <summary>
            Iterates over the LinkedNode's generations to find the correct one
            </summary>
            <param name="link"></param>
            <param name="gen">The generation requested, use null to avoid the lookup</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.RemoveTreeNodeLocked(Umbraco.Web.PublishedCache.NuCache.ContentNode)">
            <summary>
            This removes this current node from the tree hiearchy by removing it from it's parent's linked list
            </summary>
            <param name="content"></param>
            <remarks>
            This is called within a lock which means a new Gen is being created therefore this will not modify any existing content in a Gen.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.AddTreeNodeLocked(Umbraco.Web.PublishedCache.NuCache.ContentNode,Umbraco.Web.PublishedCache.NuCache.Snap.LinkedNode{Umbraco.Web.PublishedCache.NuCache.ContentNode})">
            <summary>
            Adds a node to the tree structure.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.ContentStore.TestHelper.GetValues(System.Int32)">
            <summary>
            Return a list of Gen/ContentNode values
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.NuCache.DomainCache">
            <summary>
            Implements <see cref="T:Umbraco.Web.PublishedCache.IDomainCache"/> for NuCache.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.DomainCache.#ctor(Umbraco.Web.PublishedCache.NuCache.SnapDictionary{System.Int32,Umbraco.Web.Routing.Domain}.Snapshot,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PublishedCache.NuCache.DomainCache"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.DomainCache.GetAll(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.DomainCache.GetAssigned(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.DomainCache.HasAssigned(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.DomainCache.DefaultCulture">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.PublishedSnapshotService.MainDomRegister">
            <summary>
            Install phase of <see cref="T:Umbraco.Core.IMainDom"/>
            </summary>
            <remarks>
            This is inside of a lock in MainDom so this is guaranteed to run if MainDom was acquired and guaranteed
            to not run if MainDom wasn't acquired.
            If MainDom was not acquired, then _localContentDb and _localMediaDb will remain null which means this appdomain
            will load in published content via the DB and in that case this appdomain will probably not exist long enough to
            serve more than a page of content.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.PublishedSnapshotService.MainDomRelease">
            <summary>
            Release phase of MainDom
            </summary>
            <remarks>
            This will execute on a threadpool thread
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.PublishedSnapshotService.LoadCachesOnStartup">
            <summary>
            Populates the stores
            </summary>
            <remarks>This is called inside of a lock for _storesLock</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.PublishedSnapshotService.Notify(Umbraco.Web.Cache.MediaCacheRefresher.JsonPayload[],System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.PublishedSnapshotService.Notify(Umbraco.Web.Cache.ContentTypeCacheRefresher.JsonPayload[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.PublishedSnapshotService.OnLanguageSaved(Umbraco.Core.Services.ILocalizationService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.ILanguage})">
            <summary>
            If a <see cref="T:Umbraco.Core.Models.ILanguage"/> is ever saved with a different culture, we need to rebuild all of the content nucache table
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.ContentType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.Id">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.Level">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.Path">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.TemplateId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.CreatorId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.CreatorName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.CreateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.WriterId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.WriterName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.UpdateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.Cultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.ItemType">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.PublishedContent.IsDraft(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.PublishedContent.IsPublished(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.Parent">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.ChildrenForAllCultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.PublishedCache.NuCache.PublishedContent.Properties">
            <inheritdoc cref="P:Umbraco.Core.Models.PublishedContent.IPublishedElement.Properties"/>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.NuCache.PublishedContent.GetProperty(System.String)">
            <inheritdoc cref="M:Umbraco.Core.Models.PublishedContent.IPublishedElement.GetProperty(System.String)"/>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.IPublishedSnapshot">
            <summary>
            Specifies a published snapshot.
            </summary>
            <remarks>A published snapshot is a point-in-time capture of the current state of
            everything that is "published".</remarks>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.IPublishedSnapshot.Content">
            <summary>
            Gets the <see cref="T:Umbraco.Web.PublishedCache.IPublishedContentCache"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.IPublishedSnapshot.Media">
            <summary>
            Gets the <see cref="T:Umbraco.Web.PublishedCache.IPublishedMediaCache"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.IPublishedSnapshot.Members">
            <summary>
            Gets the <see cref="T:Umbraco.Web.PublishedCache.IPublishedMemberCache"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.IPublishedSnapshot.Domains">
            <summary>
            Gets the <see cref="T:Umbraco.Web.PublishedCache.IDomainCache"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.IPublishedSnapshot.SnapshotCache">
            <summary>
            Gets the snapshot-level cache.
            </summary>
            <remarks>
            <para>The snapshot-level cache belongs to this snapshot only.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.IPublishedSnapshot.ElementsCache">
            <summary>
            Gets the elements-level cache.
            </summary>
            <remarks>
            <para>The elements-level cache is shared by all snapshots relying on the same elements,
            ie all snapshots built on top of unchanging content / media / etc.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedSnapshot.ForcedPreview(System.Boolean,System.Action{System.Boolean})">
            <summary>
            Forces the preview mode.
            </summary>
            <param name="preview">The forced preview mode.</param>
            <param name="callback">A callback to execute when reverting to previous preview.</param>
            <remarks>
            <para>Forcing to false means no preview. Forcing to true means 'full' preview if the snapshot is not already previewing;
            otherwise the snapshot keeps previewing according to whatever settings it is using already.</para>
            <para>Stops forcing preview when disposed.</para></remarks>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.IDefaultCultureAccessor">
            <summary>
            Gives access to the default culture.
            </summary>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.IDefaultCultureAccessor.DefaultCulture">
            <summary>
            Gets the system default culture.
            </summary>
            <remarks>
            <para>Implementations must NOT return a null value. Return an empty string for the invariant culture.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IDomainCache.GetAll(System.Boolean)">
            <summary>
            Gets all <see cref="T:Umbraco.Web.Routing.Domain"/> in the current domain cache, including any domains that may be referenced by documents that are no longer published.
            </summary>
            <param name="includeWildcards"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IDomainCache.GetAssigned(System.Int32,System.Boolean)">
            <summary>
            Gets all assigned <see cref="T:Umbraco.Web.Routing.Domain"/> for specified document, even if it is not published.
            </summary>
            <param name="documentId">The document identifier.</param>
            <param name="includeWildcards">A value indicating whether to consider wildcard domains.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IDomainCache.HasAssigned(System.Int32,System.Boolean)">
            <summary>
            Determines whether a document has domains.
            </summary>
            <param name="documentId">The document identifier.</param>
            <param name="includeWildcards">A value indicating whether to consider wildcard domains.</param>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.IDomainCache.DefaultCulture">
            <summary>
            Gets the system default culture.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.IPublishedSnapshotAccessor">
            <summary>
            Provides access to the "current" <see cref="T:Umbraco.Web.PublishedCache.IPublishedSnapshot"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.IPublishedSnapshotService">
            <summary>
            Creates and manages <see cref="T:Umbraco.Web.PublishedCache.IPublishedSnapshot"/> instances.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedSnapshotService.CreatePublishedSnapshot(System.String)">
            <summary>
            Creates a published snapshot.
            </summary>
            <param name="previewToken">A preview token, or <c>null</c> if not previewing.</param>
            <returns>A published snapshot.</returns>
            <remarks>If <paramref name="previewToken"/> is null, the snapshot is not previewing, else it
            is previewing, and what is or is not visible in preview depends on the content of the token,
            which is not specified and depends on the actual published snapshot service implementation.</remarks>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.IPublishedSnapshotService.PublishedSnapshotAccessor">
            <summary>
            Gets the published snapshot accessor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedSnapshotService.EnsureEnvironment(System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Ensures that the published snapshot has the proper environment to run.
            </summary>
            <param name="errors">The errors, if any.</param>
            <returns>A value indicating whether the published snapshot has the proper environment to run.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedSnapshotService.Rebuild">
            <summary>
            Rebuilds internal caches (but does not reload).
            </summary>
            <remarks>
            <para>Forces the snapshot service to rebuild its internal caches. For instance, some caches
            may rely on a database table to store pre-serialized version of documents.</para>
            <para>This does *not* reload the caches. Caches need to be reloaded, for instance via
            <see cref="T:Umbraco.Web.Cache.DistributedCache" /> RefreshAllPublishedSnapshot method.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedSnapshotService.EnterPreview(Umbraco.Core.Models.Membership.IUser,System.Int32)">
            <summary>
            Enters preview for specified user and content.
            </summary>
            <param name="user">The user.</param>
            <param name="contentId">The content identifier.</param>
            <returns>A preview token.</returns>
            <remarks>
            <para>Tells the caches that they should prepare any data that they would be keeping
            in order to provide preview to a give user. In the Xml cache this means creating the Xml
            file, though other caches may do things differently.</para>
            <para>Does not handle the preview token storage (cookie, etc) that must be handled separately.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedSnapshotService.RefreshPreview(System.String,System.Int32)">
            <summary>
            Refreshes preview for a specified content.
            </summary>
            <param name="previewToken">The preview token.</param>
            <param name="contentId">The content identifier.</param>
            <remarks>Tells the caches that they should update any data that they would be keeping
            in order to provide preview to a given user. In the Xml cache this means updating the Xml
            file, though other caches may do things differently.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedSnapshotService.ExitPreview(System.String)">
            <summary>
            Exits preview for a specified preview token.
            </summary>
            <param name="previewToken">The preview token.</param>
            <remarks>
            <para>Tells the caches that they can dispose of any data that they would be keeping
            in order to provide preview to a given user. In the Xml cache this means deleting the Xml file,
            though other caches may do things differently.</para>
            <para>Does not handle the preview token storage (cookie, etc) that must be handled separately.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedSnapshotService.Notify(Umbraco.Web.Cache.ContentCacheRefresher.JsonPayload[],System.Boolean@,System.Boolean@)">
            <summary>
            Notifies of content cache refresher changes.
            </summary>
            <param name="payloads">The changes.</param>
            <param name="draftChanged">A value indicating whether draft contents have been changed in the cache.</param>
            <param name="publishedChanged">A value indicating whether published contents have been changed in the cache.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedSnapshotService.Notify(Umbraco.Web.Cache.MediaCacheRefresher.JsonPayload[],System.Boolean@)">
            <summary>
            Notifies of media cache refresher changes.
            </summary>
            <param name="payloads">The changes.</param>
            <param name="anythingChanged">A value indicating whether medias have been changed in the cache.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedSnapshotService.Notify(Umbraco.Web.Cache.ContentTypeCacheRefresher.JsonPayload[])">
            <summary>
            Notifies of content type refresher changes.
            </summary>
            <param name="payloads">The changes.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedSnapshotService.Notify(Umbraco.Web.Cache.DataTypeCacheRefresher.JsonPayload[])">
            <summary>
            Notifies of data type refresher changes.
            </summary>
            <param name="payloads">The changes.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedSnapshotService.Notify(Umbraco.Web.Cache.DomainCacheRefresher.JsonPayload[])">
            <summary>
            Notifies of domain refresher changes.
            </summary>
            <param name="payloads">The changes.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedMemberCache.GetContentType(System.Int32)">
            <summary>
            Gets a content type identified by its unique identifier.
            </summary>
            <param name="id">The content type unique identifier.</param>
            <returns>The content type, or null.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedMemberCache.GetContentType(System.String)">
            <summary>
            Gets a content type identified by its alias.
            </summary>
            <param name="alias">The content type alias.</param>
            <returns>The content type, or null.</returns>
            <remarks>The alias is case-insensitive.</remarks>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.PublishedContentTypeCache">
            <summary>
            Represents a content type cache.
            </summary>
            <remarks>This cache is not snapshotted, so it refreshes any time things change.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.PublishedContentTypeCache.ClearAll">
            <summary>
            Clears all cached content types.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.PublishedContentTypeCache.ClearContentType(System.Int32)">
            <summary>
            Clears a cached content type.
            </summary>
            <param name="id">An identifier.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.PublishedContentTypeCache.ClearDataType(System.Int32)">
            <summary>
            Clears all cached content types referencing a data type.
            </summary>
            <param name="id">A data type identifier.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.PublishedContentTypeCache.Get(Umbraco.Core.Models.PublishedContent.PublishedItemType,System.Guid)">
            <summary>
            Gets a published content type.
            </summary>
            <param name="itemType">An item type.</param>
            <param name="key">An key.</param>
            <returns>The published content type corresponding to the item key.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.PublishedContentTypeCache.Get(Umbraco.Core.Models.PublishedContent.PublishedItemType,System.String)">
            <summary>
            Gets a published content type.
            </summary>
            <param name="itemType">An item type.</param>
            <param name="alias">An alias.</param>
            <returns>The published content type corresponding to the item type and alias.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.PublishedContentTypeCache.Get(Umbraco.Core.Models.PublishedContent.PublishedItemType,System.Int32)">
            <summary>
            Gets a published content type.
            </summary>
            <param name="itemType">An item type.</param>
            <param name="id">An identifier.</param>
            <returns>The published content type corresponding to the item type and identifier.</returns>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.DefaultCultureAccessor">
            <summary>
            Provides the default implementation of <see cref="T:Umbraco.Web.PublishedCache.IDefaultCultureAccessor"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.DefaultCultureAccessor.#ctor(Umbraco.Core.Services.ILocalizationService,Umbraco.Core.IRuntimeState)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PublishedCache.DefaultCultureAccessor"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.DefaultCultureAccessor.DefaultCulture">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PublishedCache.PublishedMember">
            <summary>
            Exposes a member object as IPublishedContent
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache2.GetContentType(System.Guid)">
            <summary>
            Gets a content type identified by its alias.
            </summary>
            <param name="key">The content type key.</param>
            <returns>The content type, or null.</returns>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.IPublishedCache">
            <summary>
            Provides access to cached contents.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetById(System.Boolean,System.Int32)">
            <summary>
            Gets a content identified by its unique identifier.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>The value of <paramref name="preview"/> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetById(System.Boolean,System.Guid)">
            <summary>
            Gets a content identified by its unique identifier.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>The value of <paramref name="preview"/> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetById(System.Boolean,Umbraco.Core.Udi)">
            <summary>
            Gets a content identified by its Udi identifier.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content Udi identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>The value of <paramref name="preview"/> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetById(System.Int32)">
            <summary>
            Gets a content identified by its unique identifier.
            </summary>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetById(System.Guid)">
            <summary>
            Gets a content identified by its unique identifier.
            </summary>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetById(Umbraco.Core.Udi)">
            <summary>
            Gets a content identified by its unique identifier.
            </summary>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.HasById(System.Boolean,System.Int32)">
            <summary>
            Gets a value indicating whether the cache contains a specified content.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content unique identifier.</param>
            <returns>A value indicating whether to the cache contains the specified content.</returns>
            <remarks>The value of <paramref name="preview"/> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.HasById(System.Int32)">
            <summary>
            Gets a value indicating whether the cache contains a specified content.
            </summary>
            <param name="contentId">The content unique identifier.</param>
            <returns>A value indicating whether to the cache contains the specified content.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetAtRoot(System.Boolean,System.String)">
            <summary>
            Gets contents at root.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="culture">A culture.</param>
            <returns>The contents.</returns>
            <remarks>The value of <paramref name="preview"/> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetAtRoot(System.String)">
            <summary>
            Gets contents at root.
            </summary>
            <param name="culture">A culture.</param>
            <returns>The contents.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetSingleByXPath(System.Boolean,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a content resulting from an XPath query.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The content, or null.</returns>
            <remarks>The value of <paramref name="preview"/> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetSingleByXPath(System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a content resulting from an XPath query.
            </summary>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetSingleByXPath(System.Boolean,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a content resulting from an XPath query.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The content, or null.</returns>
            <remarks>The value of <paramref name="preview"/> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetSingleByXPath(System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a content resulting from an XPath query.
            </summary>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetByXPath(System.Boolean,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets contents resulting from an XPath query.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The contents.</returns>
            <remarks>The value of <paramref name="preview"/> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetByXPath(System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets contents resulting from an XPath query.
            </summary>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The contents.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetByXPath(System.Boolean,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets contents resulting from an XPath query.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The contents.</returns>
            <remarks>The value of <paramref name="preview"/> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetByXPath(System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets contents resulting from an XPath query.
            </summary>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The contents.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.CreateNavigator(System.Boolean)">
            <summary>
            Creates an XPath navigator that can be used to navigate contents.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>The XPath navigator.</returns>
            <remarks>
            <para>The value of <paramref name="preview"/> overrides the context.</para>
            <para>The navigator is already a safe clone (no need to clone it again).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.CreateNodeNavigator(System.Int32,System.Boolean)">
            <summary>
            Creates an XPath navigator that can be used to navigate one node.
            </summary>
            <param name="id">The node identifier.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>The XPath navigator, or null.</returns>
            <remarks>
            <para>The value of <paramref name="preview"/> overrides the context.</para>
            <para>The navigator is already a safe clone (no need to clone it again).</para>
            <para>Navigates over the node - and only the node, ie no children. Exists only for backward
            compatibility + transition reasons, we should obsolete that one as soon as possible.</para>
            <para>If the node does not exist, returns null.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.HasContent(System.Boolean)">
            <summary>
            Gets a value indicating whether the cache contains published content.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>A value indicating whether the cache contains published content.</returns>
            <remarks>The value of <paramref name="preview"/> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.HasContent">
            <summary>
            Gets a value indicating whether the cache contains published content.
            </summary>
            <returns>A value indicating whether the cache contains published content.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetContentType(System.Int32)">
            <summary>
            Gets a content type identified by its unique identifier.
            </summary>
            <param name="id">The content type unique identifier.</param>
            <returns>The content type, or null.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetContentType(System.String)">
            <summary>
            Gets a content type identified by its alias.
            </summary>
            <param name="alias">The content type alias.</param>
            <returns>The content type, or null.</returns>
            <remarks>The alias is case-insensitive.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetByContentType(Umbraco.Core.Models.PublishedContent.IPublishedContentType)">
            <summary>
            Gets contents of a given content type.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>The contents.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedContentCache.GetByRoute(System.Boolean,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Gets content identified by a route.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="route">The route</param>
            <param name="hideTopLevelNode">A value forcing the HideTopLevelNode setting.</param>
            <returns>The content, or null.</returns>
            <remarks>
            <para>A valid route is either a simple path eg <c>/foo/bar/nil</c> or a root node id and a path, eg <c>123/foo/bar/nil</c>.</para>
            <para>If <param name="hideTopLevelNode" /> is <c>null</c> then the settings value is used.</para>
            <para>The value of <paramref name="preview"/> overrides defaults.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedContentCache.GetByRoute(System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Gets content identified by a route.
            </summary>
            <param name="route">The route</param>
            <param name="hideTopLevelNode">A value forcing the HideTopLevelNode setting.</param>
            <returns>The content, or null.</returns>
            <remarks>
            <para>A valid route is either a simple path eg <c>/foo/bar/nil</c> or a root node id and a path, eg <c>123/foo/bar/nil</c>.</para>
            <para>If <param name="hideTopLevelNode" /> is <c>null</c> then the settings value is used.</para>
            <para>Considers published or unpublished content depending on defaults.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedContentCache.GetRouteById(System.Boolean,System.Int32,System.String)">
            <summary>
            Gets the route for a content identified by its unique identifier.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content unique identifier.</param>
            <returns>The route.</returns>
            <remarks>The value of <paramref name="preview"/> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedContentCache.GetRouteById(System.Int32,System.String)">
            <summary>
            Gets the route for a content identified by its unique identifier.
            </summary>
            <param name="contentId">The content unique identifier.</param>
            <returns>The route.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="T:Umbraco.Web.RoutableDocumentFilter">
            <summary>
            Utility class used to check if the current request is for a front-end request
            </summary>
            <remarks>
            There are various checks to determine if this is a front-end request such as checking if the request is part of any reserved paths or existing MVC routes.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.RoutableDocumentFilter.IsDocumentRequest(System.Web.HttpContextBase,System.Uri)">
            <summary>
            Checks if the request is a document request (i.e. one that the module should handle)
            </summary>
            <param name="httpContext"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.RoutableDocumentFilter.IsReservedPathOrUrl(System.String)">
            <summary>
            Determines whether the specified URL is reserved or is inside a reserved path.
            </summary>
            <param name="url">The URL to check.</param>
            <returns>
                <c>true</c> if the specified URL is reserved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.RoutableDocumentFilter.IsReservedPathOrUrl(System.String,System.Web.HttpContextBase,System.Web.Routing.RouteCollection)">
            <summary>
            Determines whether the current request is reserved based on the route table and
            whether the specified URL is reserved or is inside a reserved path.
            </summary>
            <param name="url"></param>
            <param name="httpContext"></param>
            <param name="routes">The route collection to lookup the request in</param>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Web.RoutableDocumentFilter.ReservedPaths">
            <summary>
            This is used internally to track any registered callback paths for Identity providers. If the request path matches
            any of the registered paths, then the module will let the request keep executing
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.DefaultMediaUrlProvider">
            <summary>
            Default media URL provider.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.DefaultMediaUrlProvider.GetMediaUrl(Umbraco.Web.UmbracoContext,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Routing.IMediaUrlProvider">
            <summary>
            Provides media URL.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.IMediaUrlProvider.GetMediaUrl(Umbraco.Web.UmbracoContext,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
            Gets the URL of a media item.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="content">The published content.</param>
            <param name="propertyAlias">The property alias to resolve the URL from.</param>
            <param name="mode">The URL mode.</param>
            <param name="culture">The variation language.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The URL for the media.</returns>
            <remarks>
            <para>The URL is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
            <para>If the media is multi-lingual, gets the URL for the specified culture or,
            when no culture is specified, the current culture.</para>
            <para>The URL provider can ignore the mode and always return an absolute URL,
            e.g. a cdn URL provider will most likely always return an absolute URL.</para>
            <para>If the provider is unable to provide a URL, it returns <c>null</c>.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.IPublishedRouter">
            <summary>
            Routes requests.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.IPublishedRouter.CreateRequest(Umbraco.Web.UmbracoContext,System.Uri)">
            <summary>
            Creates a published request.
            </summary>
            <param name="umbracoContext">The current Umbraco context.</param>
            <param name="uri">The (optional) request Uri.</param>
            <returns>A published request.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.IPublishedRouter.PrepareRequest(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Prepares a request for rendering.
            </summary>
            <param name="request">The request.</param>
            <returns>A value indicating whether the request was successfully prepared and can be rendered.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.IPublishedRouter.TryRouteRequest(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Tries to route a request.
            </summary>
            <param name="request">The request.</param>
            <returns>A value indicating whether the request can be routed to a document.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.IPublishedRouter.GetTemplate(System.String)">
            <summary>
            Gets a template.
            </summary>
            <param name="alias">The template alias</param>
            <returns>The template.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.IPublishedRouter.UpdateRequestToNotFound(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Updates the request to "not found".
            </summary>
            <param name="request">The request.</param>
            <remarks>
            <para>This method is invoked when the pipeline decides it cannot render
            the request, for whatever reason, and wants to force it to be re-routed
            and rendered as if no document were found (404).</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.RedirectTrackingComposer">
            <summary>
            Implements an Application Event Handler for managing redirect URLs tracking.
            </summary>
            <remarks>
            <para>when content is renamed or moved, we want to create a permanent 301 redirect from it's old URL</para>
            <para>not managing domains because we don't know how to do it - changing domains => must create a higher level strategy using rewriting rules probably</para>
            <para>recycle bin = moving to and from does nothing: to = the node is gone, where would we redirect? from = same</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByUrl">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that handles page nice URLs.
            </summary>
            <remarks>
            <para>Handles <c>/foo/bar</c> where <c>/foo/bar</c> is the nice URL of a document.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByUrl.TryFindContent(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByUrl.FindContent(Umbraco.Web.Routing.PublishedRequest,System.String)">
            <summary>
            Tries to find an Umbraco document for a <c>PublishedRequest</c> and a route.
            </summary>
            <param name="docreq">The document request.</param>
            <param name="route">The route.</param>
            <returns>The document node, or null.</returns>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByUrlAndTemplate">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that handles page nice URLs and a template.
            </summary>
            <remarks>
            <para>This finder allows for an odd routing pattern similar to altTemplate, probably only use case is if there is an alternative mime type template and it should be routable by something like "/hello/world/json" where the JSON template is to be used for the "world" page</para>
            <para>Handles <c>/foo/bar/template</c> where <c>/foo/bar</c> is the nice URL of a document, and <c>template</c> a template alias.</para>
            <para>If successful, then the template of the document request is also assigned.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByUrlAndTemplate.TryFindContent(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
            <remarks>If successful, also assigns the template.</remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.Domain">
            <summary>
            Represents a published snapshot domain.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.Domain.#ctor(System.Int32,System.String,System.Int32,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.Domain"/> class.
            </summary>
            <param name="id">The unique identifier of the domain.</param>
            <param name="name">The name of the domain.</param>
            <param name="contentId">The identifier of the content which supports the domain.</param>
            <param name="culture">The culture of the domain.</param>
            <param name="isWildcard">A value indicating whether the domain is a wildcard domain.</param>
        </member>
        <member name="M:Umbraco.Web.Routing.Domain.#ctor(Umbraco.Web.Routing.Domain)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.Domain"/> class.
            </summary>
            <param name="domain">An origin domain.</param>
        </member>
        <member name="P:Umbraco.Web.Routing.Domain.Id">
            <summary>
            Gets the unique identifier of the domain.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.Domain.Name">
            <summary>
            Gets the name of the domain.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.Domain.ContentId">
            <summary>
            Gets the identifier of the content which supports the domain.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.Domain.Culture">
            <summary>
            Gets the culture of the domain.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.Domain.IsWildcard">
            <summary>
            Gets a value indicating whether the domain is a wildcard domain.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.IContentLastChanceFinder">
            <summary>
            Provides a method to try to find and assign an Umbraco document to a <c>PublishedRequest</c>
            when everything else has failed.
            </summary>
            <remarks>Identical to <see cref="T:Umbraco.Web.Routing.IContentFinder"/> but required in order to differentiate them in ioc.</remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.UrlInfo">
            <summary>
            Represents infos for a URL.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlInfo.Url(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Umbraco.Web.Routing.UrlInfo"/> instance representing a true URL.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlInfo.Message(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Umbraco.Web.Routing.UrlInfo"/> instance representing a message.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlInfo.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.UrlInfo"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.UrlInfo.Culture">
            <summary>
            Gets the culture.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.UrlInfo.IsUrl">
            <summary>
            Gets a value indicating whether the URL is a true URL.
            </summary>
            <remarks>Otherwise, it is a message.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.UrlInfo.Text">
            <summary>
            Gets the text, which is either the URL, or a message.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlInfo.Equals(Umbraco.Web.Routing.UrlInfo)">
            <summary>
            Checks equality 
            </summary>
            <param name="other"></param>
            <returns></returns>
            <remarks>
            Compare both culture and Text as invariant strings since URLs are not case sensitive, nor are culture names within Umbraco
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.NotFoundHandlerHelper">
            <summary>
            Used to determine the node to display when content is not found based on the configured error404 elements in umbracoSettings.config
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.NotFoundHandlerHelper.GetCurrentNotFoundPageId(Umbraco.Core.Configuration.UmbracoSettings.IContentErrorPage[],System.String,Umbraco.Core.Services.IEntityService,Umbraco.Web.IPublishedContentQuery,Umbraco.Core.Services.IDomainService)">
            <summary>
            Returns the Umbraco page id to use as the Not Found page based on the configured 404 pages and the current request
            </summary>
            <param name="error404Collection"></param>
            <param name="requestServerName">
            The server name attached to the request, normally would be the source of HttpContext.Current.Request.ServerVariables["SERVER_NAME"]
            </param>
            <param name="entityService"></param>
            <param name="publishedContentQuery"></param>
            <param name="domainService"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Routing.NotFoundHandlerHelper.GetContentIdFromErrorPageConfig(Umbraco.Core.Configuration.UmbracoSettings.IContentErrorPage,Umbraco.Core.Services.IEntityService,Umbraco.Web.IPublishedContentQuery)">
            <summary>
            Returns the content id based on the configured IContentErrorPage section
            </summary>
            <param name="errorPage"></param>
            <param name="entityService"></param>
            <param name="publishedContentQuery"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Routing.RedirectTrackingComponent">
            Implements an Application Event Handler for managing redirect URLs tracking.
            <para>when content is renamed or moved, we want to create a permanent 301 redirect from it's old URL</para>
            <para>
                not managing domains because we don't know how to do it - changing domains => must create a higher level
                strategy using rewriting rules probably
            </para>
            <para>recycle bin = moving to and from does nothing: to = the node is gone, where would we redirect? from = same</para>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByRedirectUrl">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that handles page URL rewrites
            that are stored when moving, saving, or deleting a node.
            </summary>
            <remarks>
            <para>Assigns a permanent redirect notification to the request.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByRedirectUrl.TryFindContent(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
            <remarks>Optionally, can also assign the template or anything else on the document request, although that is not required.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProviderExtensions.GetContentUrls(Umbraco.Core.Models.IContent,Umbraco.Web.Routing.IPublishedRouter,Umbraco.Web.UmbracoContext,Umbraco.Core.Services.ILocalizationService,Umbraco.Core.Services.ILocalizedTextService,Umbraco.Core.Services.IContentService,Umbraco.Core.Logging.ILogger)">
            <summary>
            Gets the URLs of the content item.
            </summary>
            <remarks>
            <para>Use when displaying URLs. If errors occur when generating the URLs, they will show in the list.</para>
            <para>Contains all the URLs that we can figure out (based upon domains, etc).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProviderExtensions.GetContentUrlsByCulture(Umbraco.Core.Models.IContent,System.Collections.Generic.IEnumerable{System.String},Umbraco.Web.Routing.IPublishedRouter,Umbraco.Web.UmbracoContext,Umbraco.Core.Services.IContentService,Umbraco.Core.Services.ILocalizedTextService,Umbraco.Core.Logging.ILogger)">
            <summary>
            Tries to return a <see cref="T:Umbraco.Web.Routing.UrlInfo"/> for each culture for the content while detecting collisions/errors
            </summary>
            <param name="content"></param>
            <param name="cultures"></param>
            <param name="publishedRouter"></param>
            <param name="umbracoContext"></param>
            <param name="contentService"></param>
            <param name="textService"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Routing.AliasUrlProvider">
            <summary>
            Provides URLs using the <c>umbracoUrlAlias</c> property.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.AliasUrlProvider.GetUrl(Umbraco.Web.UmbracoContext,Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Routing.AliasUrlProvider.GetOtherUrls(Umbraco.Web.UmbracoContext,System.Int32,System.Uri)">
            <summary>
            Gets the other URLs of a published content.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The other URLs for the published content.</returns>
            <remarks>
            <para>Other URLs are those that <c>GetUrl</c> would not return in the current context, but would be valid
            URLs for the node in other contexts (different domain for current request, umbracoUrlAlias...).</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByConfigured404">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that runs the legacy 404 logic.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByConfigured404.TryFindContent(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByPageIdQuery">
            <summary>
            This looks up a document by checking for the umbPageId of a request/query string
            </summary>
            <remarks>
            This is used by library.RenderTemplate and also some of the macro rendering functionality like in
            macroResultWrapper.aspx
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.ISiteDomainHelper">
            <summary>
            Provides utilities to handle site domains.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.ISiteDomainHelper.MapDomain(System.Collections.Generic.IReadOnlyCollection{Umbraco.Web.Routing.DomainAndUri},System.Uri,System.String,System.String)">
            <summary>
            Filters a list of <c>DomainAndUri</c> to pick one that best matches the current request.
            </summary>
            <param name="domainAndUris">The list of <c>DomainAndUri</c> to filter.</param>
            <param name="current">The Uri of the current request.</param>
            <param name="culture">A culture.</param>
            <param name="defaultCulture">The default culture.</param>
            <returns>The selected <c>DomainAndUri</c>.</returns>
            <remarks>
            <para>If the filter is invoked then <paramref name="domainAndUris"/> is _not_ empty and
            <paramref name="current"/> is _not_ null, and <paramref name="current"/> could not be
            matched with anything in <paramref name="domainAndUris"/>.</para>
            <para>The <paramref name="culture"/> may be null, but when non-null, it can be used
            to help pick the best matches.</para>
            <para>The filter _must_ return something else an exception will be thrown.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ISiteDomainHelper.MapDomains(System.Collections.Generic.IReadOnlyCollection{Umbraco.Web.Routing.DomainAndUri},System.Uri,System.Boolean,System.String,System.String)">
            <summary>
            Filters a list of <c>DomainAndUri</c> to pick those that best matches the current request.
            </summary>
            <param name="domainAndUris">The list of <c>DomainAndUri</c> to filter.</param>
            <param name="current">The Uri of the current request.</param>
            <param name="excludeDefault">A value indicating whether to exclude the current/default domain.</param>
            <param name="culture">A culture.</param>
            <param name="defaultCulture">The default culture.</param>
            <returns>The selected <c>DomainAndUri</c> items.</returns>
            <remarks>
            <para>The filter must return something, even empty, else an exception will be thrown.</para>
            <para>The <paramref name="culture"/> may be null, but when non-null, it can be used
            to help pick the best matches.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.RoutableAttemptEventArgs">
            <summary>
            Event args containing information about why the request was not routable, or if it is routable
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.DefaultUrlProvider">
            <summary>
            Provides urls.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.DefaultUrlProvider.GetUrl(Umbraco.Web.UmbracoContext,Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Routing.DefaultUrlProvider.GetOtherUrls(Umbraco.Web.UmbracoContext,System.Int32,System.Uri)">
            <summary>
            Gets the other URLs of a published content.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The other URLs for the published content.</returns>
            <remarks>
            <para>Other URLs are those that <c>GetUrl</c> would not return in the current context, but would be valid
            URLs for the node in other contexts (different domain for current request, umbracoUrlAlias...).</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.DomainAndUri">
            <summary>
            Represents a published snapshot domain with its normalized uri.
            </summary>
            <remarks>
            <para>In Umbraco it is valid to create domains with name such as <c>example.com</c>, <c>https://www.example.com</c>, <c>example.com/foo/</c>.</para>
            <para>The normalized uri of a domain begins with a scheme and ends with no slash, eg <c>http://example.com/</c>, <c>https://www.example.com/</c>, <c>http://example.com/foo/</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainAndUri.#ctor(Umbraco.Web.Routing.Domain,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.DomainAndUri"/> class.
            </summary>
            <param name="domain">The original domain.</param>
            <param name="currentUri">The context current Uri.</param>
        </member>
        <member name="P:Umbraco.Web.Routing.DomainAndUri.Uri">
            <summary>
            Gets the normalized uri of the domain, within the current context.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.IUrlProvider">
            <summary>
            Provides URLs.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.IUrlProvider.GetUrl(Umbraco.Web.UmbracoContext,Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
            Gets the URL of a published content.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="content">The published content.</param>
            <param name="mode">The URL mode.</param>
            <param name="culture">A culture.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The URL for the published content.</returns>
            <remarks>
            <para>The URL is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
            <para>If the published content is multi-lingual, gets the URL for the specified culture or,
            when no culture is specified, the current culture.</para>
            <para>If the provider is unable to provide a URL, it should return <c>null</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.IUrlProvider.GetOtherUrls(Umbraco.Web.UmbracoContext,System.Int32,System.Uri)">
            <summary>
            Gets the other URLs of a published content.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The other URLs for the published content.</returns>
            <remarks>
            <para>Other URLs are those that <c>GetUrl</c> would not return in the current context, but would be valid
            URLs for the node in other contexts (different domain for current request, umbracoUrlAlias...).</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.SiteDomainHelper">
            <summary>
            Provides utilities to handle site domains.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.SiteDomainHelper.ConfigWriteLock">
            <summary>
            Returns a disposable object that represents safe write access to config.
            </summary>
            <remarks>Should be used in a <c>using(SiteDomainHelper.ConfigWriteLock) { ... }</c>  mode.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.SiteDomainHelper.ConfigReadLock">
            <summary>
            Returns a disposable object that represents safe read access to config.
            </summary>
            <remarks>Should be used in a <c>using(SiteDomainHelper.ConfigWriteLock) { ... }</c>  mode.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.Clear">
            <summary>
            Clears the entire configuration.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.AddSite(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a site.
            </summary>
            <param name="key">A key uniquely identifying the site.</param>
            <param name="domains">The site domains.</param>
            <remarks>At the moment there is no public way to remove a site. Clear and reconfigure.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.AddSite(System.String,System.String[])">
            <summary>
            Adds a site.
            </summary>
            <param name="key">A key uniquely identifying the site.</param>
            <param name="domains">The site domains.</param>
            <remarks>At the moment there is no public way to remove a site. Clear and reconfigure.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.RemoveSite(System.String)">
            <summary>
            Removes a site.
            </summary>
            <param name="key">A key uniquely identifying the site.</param>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.BindSites(System.String[])">
            <summary>
            Binds some sites.
            </summary>
            <param name="keys">The keys uniquely identifying the sites to bind.</param>
            <remarks>
            <para>At the moment there is no public way to unbind sites. Clear and reconfigure.</para>
            <para>If site1 is bound to site2 and site2 is bound to site3 then site1 is bound to site3.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.MapDomain(System.Collections.Generic.IReadOnlyCollection{Umbraco.Web.Routing.DomainAndUri},System.Uri,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.MapDomains(System.Collections.Generic.IReadOnlyCollection{Umbraco.Web.Routing.DomainAndUri},System.Uri,System.Boolean,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Routing.EnsureRoutableOutcome">
            <summary>
            Represents the outcome of trying to route an incoming request.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Routing.EnsureRoutableOutcome.IsRoutable">
            <summary>
            Request routes to a document.
            </summary>
            <remarks>
            <para>Umbraco was ready and configured, and has content.</para>
            <para>The request looks like it can be a route to a document. This does not
            mean that there *is* a matching document, ie the request might end up returning
            404.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Web.Routing.EnsureRoutableOutcome.NotDocumentRequest">
            <summary>
            Request does not route to a document.
            </summary>
            <remarks>
            <para>Umbraco was ready and configured, and has content.</para>
            <para>The request does not look like it can be a route to a document. Can be
            anything else eg back-office, surface controller...</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Web.Routing.EnsureRoutableOutcome.NotReady">
            <summary>
            Umbraco was not ready.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Routing.EnsureRoutableOutcome.NoContent">
            <summary>
            There was no content at all.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.PublishedRouter">
            <summary>
            Provides the default <see cref="T:Umbraco.Web.Routing.IPublishedRouter"/> implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.#ctor(Umbraco.Core.Configuration.UmbracoSettings.IWebRoutingSection,Umbraco.Web.Routing.ContentFinderCollection,Umbraco.Web.Routing.IContentLastChanceFinder,Umbraco.Core.Models.PublishedContent.IVariationContextAccessor,Umbraco.Core.Services.ServiceContext,Umbraco.Core.Logging.IProfilingLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.PublishedRouter"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.CreateRequest(Umbraco.Web.UmbracoContext,System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.TryRouteRequest(Umbraco.Web.Routing.PublishedRequest)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.PrepareRequest(Umbraco.Web.Routing.PublishedRequest)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.ConfigureRequest(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Called by PrepareRequest once everything has been discovered, resolved and assigned to the PCR. This method
            finalizes the PCR with the values assigned.
            </summary>
            <returns>
            Returns false if the request was not successfully configured
            </returns>
            <remarks>
            This method logic has been put into it's own method in case developers have created a custom PCR or are assigning their own values
            but need to finalize it themselves.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.UpdateRequestToNotFound(Umbraco.Web.Routing.PublishedRequest)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.FindDomain(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Finds the site root (if any) matching the http request, and updates the PublishedRequest accordingly.
            </summary>
            <returns>A value indicating whether a domain was found.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.HandleWildcardDomains(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Looks for wildcard domains in the path and updates <c>Culture</c> accordingly.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.GetTemplate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.FindPublishedContentAndTemplate(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Finds the Umbraco document (if any) matching the request, and updates the PublishedRequest accordingly.
            </summary>
            <returns>A value indicating whether a document and template were found.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.FindPublishedContent(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Tries to find the document matching the request, by running the IPublishedContentFinder instances.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no finder collection.</exception>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.HandlePublishedContent(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Handles the published content (if any).
            </summary>
            <remarks>
            Handles "not found", internal redirects, access validation...
            things that must be handled in one place because they can create loops
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.FollowInternalRedirects(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Follows internal redirections through the <c>umbracoInternalRedirectId</c> document property.
            </summary>
            <returns>A value indicating whether redirection took place and led to a new published document.</returns>
            <remarks>
            <para>Redirecting to a different site root and/or culture will not pick the new site root nor the new culture.</para>
            <para>As per legacy, if the redirect does not work, we just ignore it.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.EnsurePublishedContentAccess(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Ensures that access to current node is permitted.
            </summary>
            <remarks>Redirecting to a different site root and/or culture will not pick the new site root nor the new culture.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.FindTemplate(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Finds a template for the current node, if any.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRouter.FollowExternalRedirect(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Follows external redirection through <c>umbracoRedirect</c> document property.
            </summary>
            <remarks>As per legacy, if the redirect does not work, we just ignore it.</remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.UrlProvider">
            <summary>
            Provides URLs.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.#ctor(Umbraco.Web.UmbracoContext,Umbraco.Core.Configuration.UmbracoSettings.IWebRoutingSection,System.Collections.Generic.IEnumerable{Umbraco.Web.Routing.IUrlProvider},System.Collections.Generic.IEnumerable{Umbraco.Web.Routing.IMediaUrlProvider},Umbraco.Core.Models.PublishedContent.IVariationContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.UrlProvider"/> class with an Umbraco context and a list of URL providers.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="routingSettings">Routing settings.</param>
            <param name="urlProviders">The list of URL providers.</param>
            <param name="mediaUrlProviders">The list of media URL providers.</param>
            <param name="variationContextAccessor">The current variation accessor.</param>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.#ctor(Umbraco.Web.UmbracoContext,System.Collections.Generic.IEnumerable{Umbraco.Web.Routing.IUrlProvider},System.Collections.Generic.IEnumerable{Umbraco.Web.Routing.IMediaUrlProvider},Umbraco.Core.Models.PublishedContent.IVariationContextAccessor,Umbraco.Core.Models.PublishedContent.UrlMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.UrlProvider"/> class with an Umbraco context and a list of URL providers.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="urlProviders">The list of URL providers.</param>
            <param name="mediaUrlProviders">The list of media URL providers</param>
            <param name="variationContextAccessor">The current variation accessor.</param>
            <param name="mode">An optional provider mode.</param>
        </member>
        <member name="P:Umbraco.Web.Routing.UrlProvider.Mode">
            <summary>
            Gets or sets the provider URL mode.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetUrl(System.Guid,Umbraco.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
            Gets the URL of a published content.
            </summary>
            <param name="id">The published content identifier.</param>
            <param name="mode">The URL mode.</param>
            <param name="culture">A culture.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The URL for the published content.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetUrl(System.Int32,Umbraco.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
            Gets the URL of a published content.
            </summary>
            <param name="id">The published content identifier.</param>
            <param name="mode">The URL mode.</param>
            <param name="culture">A culture.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The URL for the published content.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetUrl(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
            Gets the URL of a published content.
            </summary>
            <param name="content">The published content.</param>
            <param name="mode">The URL mode.</param>
            <param name="culture">A culture.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The URL for the published content.</returns>
            <remarks>
            <para>The URL is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
            <para>If the published content is multi-lingual, gets the URL for the specified culture or,
            when no culture is specified, the current culture.</para>
            <para>If the provider is unable to provide a URL, it returns "#".</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetOtherUrls(System.Int32)">
            <summary>
            Gets the other URLs of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <returns>The other URLs for the published content.</returns>
            <remarks>
            <para>Other URLs are those that <c>GetUrl</c> would not return in the current context, but would be valid
            URLs for the node in other contexts (different domain for current request, umbracoUrlAlias...).</para>
            <para>The results depend on the current URL.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetOtherUrls(System.Int32,System.Uri)">
            <summary>
            Gets the other URLs of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The other URLs for the published content.</returns>
            <remarks>
            <para>Other URLs are those that <c>GetUrl</c> would not return in the current context, but would be valid
            URLs for the node in other contexts (different domain for current request, umbracoUrlAlias...).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetMediaUrl(System.Guid,Umbraco.Core.Models.PublishedContent.UrlMode,System.String,System.String,System.Uri)">
            <summary>
            Gets the URL of a media item.
            </summary>
            <param name="id"></param>
            <param name="mode"></param>
            <param name="culture"></param>
            <param name="propertyAlias"></param>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetMediaUrl(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.UrlMode,System.String,System.String,System.Uri)">
            <summary>
            Gets the URL of a media item.
            </summary>
            <param name="content">The published content.</param>
            <param name="propertyAlias">The property alias to resolve the URL from.</param>
            <param name="mode">The URL mode.</param>
            <param name="culture">The variation language.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The URL for the media.</returns>
            <remarks>
            <para>The URL is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
            <para>If the media is multi-lingual, gets the URL for the specified culture or,
            when no culture is specified, the current culture.</para>
            <para>If the provider is unable to provide a URL, it returns <see cref="F:System.String.Empty"/>.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.PublishedContentNotFoundHandler">
            <summary>
            Gets executed when no document can be found in Umbraco
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.UmbracoRequestEventArgs">
            <summary>
            Event args used for event launched during a request (like in the UmbracoModule)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByUrlAlias">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that handles page aliases.
            </summary>
            <remarks>
            <para>Handles <c>/just/about/anything</c> where <c>/just/about/anything</c> is contained in the <c>umbracoUrlAlias</c> property of a document.</para>
            <para>The alias is the full path to the document. There can be more than one alias, separated by commas.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByUrlAlias.TryFindContent(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByIdPath">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that handles page identifiers.
            </summary>
            <remarks>
            <para>Handles <c>/1234</c> where <c>1234</c> is the identified of a document.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByIdPath.TryFindContent(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="T:Umbraco.Web.Routing.DomainUtilities">
            <summary>
            Provides utilities to handle domains.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainUtilities.GetCultureFromDomains(System.Int32,System.String,System.Uri,Umbraco.Web.UmbracoContext,Umbraco.Web.Routing.ISiteDomainHelper)">
            <summary>
            Gets the culture assigned to a document by domains, in the context of a current Uri.
            </summary>
            <param name="contentId">The document identifier.</param>
            <param name="contentPath">The document path.</param>
            <param name="current">An optional current Uri.</param>
            <param name="umbracoContext">An Umbraco context.</param>
            <param name="siteDomainHelper">The site domain helper.</param>
            <returns>The culture assigned to the document by domains.</returns>
            <remarks>
            <para>In 1:1 multilingual setup, a document contains several cultures (there is not
            one document per culture), and domains, withing the context of a current Uri, assign
            a culture to that document.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainUtilities.DomainForNode(Umbraco.Web.PublishedCache.IDomainCache,Umbraco.Web.Routing.ISiteDomainHelper,System.Int32,System.Uri,System.String)">
            <summary>
            Finds the domain for the specified node, if any, that best matches a specified uri.
            </summary>
            <param name="domainCache">A domain cache.</param>
            <param name="siteDomainHelper">The site domain helper.</param>
            <param name="nodeId">The node identifier.</param>
            <param name="current">The uri, or null.</param>
            <param name="culture">The culture, or null.</param>
            <returns>The domain and its uri, if any, that best matches the specified uri and culture, else null.</returns>
            <remarks>
            <para>If at least a domain is set on the node then the method returns the domain that
            best matches the specified uri and culture, else it returns null.</para>
            <para>If culture is null, uses the default culture for the installation instead. Otherwise,
            will try with the specified culture, else return null.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainUtilities.DomainsForNode(Umbraco.Web.PublishedCache.IDomainCache,Umbraco.Web.Routing.ISiteDomainHelper,System.Int32,System.Uri,System.Boolean)">
            <summary>
            Find the domains for the specified node, if any, that match a specified uri.
            </summary>
            <param name="domainCache">A domain cache.</param>
            <param name="siteDomainHelper">The site domain helper.</param>
            <param name="nodeId">The node identifier.</param>
            <param name="current">The uri, or null.</param>
            <param name="excludeDefault">A value indicating whether to exclude the current/default domain. True by default.</param>
            <returns>The domains and their uris, that match the specified uri, else null.</returns>
            <remarks>If at least a domain is set on the node then the method returns the domains that
            best match the specified uri, else it returns null.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainUtilities.SelectDomain(System.Collections.Generic.IEnumerable{Umbraco.Web.Routing.Domain},System.Uri,System.String,System.String,System.Func{System.Collections.Generic.IReadOnlyCollection{Umbraco.Web.Routing.DomainAndUri},System.Uri,System.String,System.String,Umbraco.Web.Routing.DomainAndUri})">
            <summary>
            Selects the domain that best matches a specified uri and cultures, from a set of domains.
            </summary>
            <param name="domains">The group of domains.</param>
            <param name="uri">An optional uri.</param>
            <param name="culture">An optional culture.</param>
            <param name="defaultCulture">An optional default culture.</param>
            <param name="filter">An optional function to filter the list of domains, if more than one applies.</param>
            <returns>The domain and its normalized uri, that best matches the specified uri and cultures.</returns>
            <remarks>
            TODO: must document and explain this all
            <para>If <paramref name="uri"/> is null, pick the first domain that matches <paramref name="culture"/>,
            else the first that matches <paramref name="defaultCulture"/>, else the first one (ordered by id), else null.</para>
            <para>If <paramref name="uri"/> is not null, look for domains that would be a base uri of the current uri,</para>
            <para>If more than one domain matches, then the <paramref name="filter"/> function is used to pick
            the right one, unless it is <c>null</c>, in which case the method returns <c>null</c>.</para>
            <para>The filter, if any, will be called only with a non-empty argument, and _must_ return something.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainUtilities.SelectDomains(System.Collections.Generic.IEnumerable{Umbraco.Web.Routing.Domain},System.Uri)">
            <summary>
            Selects the domains that match a specified uri, from a set of domains.
            </summary>
            <param name="domains">The domains.</param>
            <param name="uri">The uri, or null.</param>
            <returns>The domains and their normalized uris, that match the specified uri.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainUtilities.ParseUriFromDomainName(System.String,System.Uri)">
            <summary>
            Parses a domain name into a URI.
            </summary>
            <param name="domainName">The domain name to parse</param>
            <param name="currentUri">The currently requested URI. If the domain name is relative, the authority of URI will be used.</param>
            <returns>The domain name as a URI</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainUtilities.ExistsDomainInPath(System.Collections.Generic.IEnumerable{Umbraco.Web.Routing.Domain},System.String,System.Nullable{System.Int32})">
            <summary>
            Gets a value indicating whether there is another domain defined down in the path to a node under the current domain's root node.
            </summary>
            <param name="domains">The domains.</param>
            <param name="path">The path to a node under the current domain's root node eg '-1,1234,5678'.</param>
            <param name="rootNodeId">The current domain root node identifier, or null.</param>
            <returns>A value indicating if there is another domain defined down in the path.</returns>
            <remarks>Looks _under_ rootNodeId but not _at_ rootNodeId.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainUtilities.FindDomainInPath(System.Collections.Generic.IEnumerable{Umbraco.Web.Routing.Domain},System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the deepest non-wildcard Domain, if any, from a group of Domains, in a node path.
            </summary>
            <param name="domains">The domains.</param>
            <param name="path">The node path eg '-1,1234,5678'.</param>
            <param name="rootNodeId">The current domain root node identifier, or null.</param>
            <returns>The deepest non-wildcard Domain in the path, or null.</returns>
            <remarks>Looks _under_ rootNodeId but not _at_ rootNodeId.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainUtilities.FindWildcardDomainInPath(System.Collections.Generic.IEnumerable{Umbraco.Web.Routing.Domain},System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the deepest wildcard Domain, if any, from a group of Domains, in a node path.
            </summary>
            <param name="domains">The domains.</param>
            <param name="path">The node path eg '-1,1234,5678'.</param>
            <param name="rootNodeId">The current domain root node identifier, or null.</param>
            <returns>The deepest wildcard Domain in the path, or null.</returns>
            <remarks>Looks _under_ rootNodeId but not _at_ rootNodeId.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainUtilities.PathRelativeToDomain(System.Uri,System.String)">
            <summary>
            Returns the part of a path relative to the uri of a domain.
            </summary>
            <param name="domainUri">The normalized uri of the domain.</param>
            <param name="path">The full path of the uri.</param>
            <returns>The path part relative to the uri of the domain.</returns>
            <remarks>Eg the relative part of <c>/foo/bar/nil</c> to domain <c>example.com/foo</c> is <c>/bar/nil</c>.</remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.PublishedRequest">
            <summary>
            Represents a request for one specified Umbraco IPublishedContent to be rendered
            by one specified template, using one specified Culture and RenderingEngine.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.#ctor(Umbraco.Web.Routing.IPublishedRouter,Umbraco.Web.UmbracoContext,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.PublishedRequest"/> class.
            </summary>
            <param name="publishedRouter">The published router.</param>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="uri">The request <c>Uri</c>.</param>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.UmbracoContext">
            <summary>
            Gets the UmbracoContext.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.Uri">
            <summary>
            Gets or sets the cleaned up Uri used for routing.
            </summary>
            <remarks>The cleaned up Uri has no virtual directory, no trailing slash, no .aspx extension, etc.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.Prepare">
            <summary>
            Prepares the request.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.IgnorePublishedContentCollisions">
            <summary>
            Gets or sets a value indicating whether the Umbraco Backoffice should ignore a collision for this request.
            </summary>
        </member>
        <member name="E:Umbraco.Web.Routing.PublishedRequest.Preparing">
            <summary>
            Triggers before the published content request is prepared.
            </summary>
            <remarks>When the event triggers, no preparation has been done. It is still possible to
            modify the request's Uri property, for example to restore its original, public-facing value
            that might have been modified by an in-between equipment such as a load-balancer.</remarks>
        </member>
        <member name="E:Umbraco.Web.Routing.PublishedRequest.Prepared">
            <summary>
            Triggers once the published content request has been prepared, but before it is processed.
            </summary>
            <remarks>When the event triggers, preparation is done ie domain, culture, document, template,
            rendering engine, etc. have been setup. It is then possible to change anything, before
            the request is actually processed and rendered by Umbraco.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.OnPreparing">
            <summary>
            Triggers the Preparing event.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.OnPrepared">
            <summary>
            Triggers the Prepared event.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.PublishedContent">
            <summary>
            Gets or sets the requested content.
            </summary>
            <remarks>Setting the requested content clears <c>Template</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.SetInternalRedirectPublishedContent(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Sets the requested content, following an internal redirect.
            </summary>
            <param name="content">The requested content.</param>
            <remarks>Depending on <c>UmbracoSettings.InternalRedirectPreservesTemplate</c>, will
            preserve or reset the template, if any.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.InitialPublishedContent">
            <summary>
            Gets the initial requested content.
            </summary>
            <remarks>The initial requested content is the content that was found by the finders,
            before anything such as 404, redirect... took place.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.IsInitialPublishedContent">
            <summary>
            Gets value indicating whether the current published content is the initial one.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.SetIsInitialPublishedContent">
            <summary>
            Indicates that the current PublishedContent is the initial one.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.IsInternalRedirectPublishedContent">
            <summary>
            Gets or sets a value indicating whether the current published content has been obtained
            from the initial published content following internal redirections exclusively.
            </summary>
            <remarks>Used by PublishedContentRequestEngine.FindTemplate() to figure out whether to
            apply the internal redirect or not, when content is not the initial content.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.HasPublishedContent">
            <summary>
            Gets a value indicating whether the content request has a content.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.TemplateModel">
            <summary>
            Gets or sets the template model to use to display the requested content.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.TemplateAlias">
            <summary>
            Gets the alias of the template to use to display the requested content.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.TrySetTemplate(System.String)">
            <summary>
            Tries to set the template to use to display the requested content.
            </summary>
            <param name="alias">The alias of the template.</param>
            <returns>A value indicating whether a valid template with the specified alias was found.</returns>
            <remarks>
            <para>Successfully setting the template does refresh <c>RenderingEngine</c>.</para>
            <para>If setting the template fails, then the previous template (if any) remains in place.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.SetTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Sets the template to use to display the requested content.
            </summary>
            <param name="template">The template.</param>
            <remarks>Setting the template does refresh <c>RenderingEngine</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.ResetTemplate">
            <summary>
            Resets the template.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.HasTemplate">
            <summary>
            Gets a value indicating whether the content request has a template.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.Domain">
            <summary>
            Gets or sets the content request's domain.
            </summary>
            <remarks>Is a DomainAndUri object ie a standard Domain plus the fully qualified uri. For example,
            the <c>Domain</c> may contain "example.com" whereas the <c>Uri</c> will be fully qualified eg "http://example.com/".</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.HasDomain">
            <summary>
            Gets a value indicating whether the content request has a domain.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.Culture">
            <summary>
            Gets or sets the content request's culture.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.Is404">
            <summary>
            Gets or sets a value indicating whether the requested content could not be found.
            </summary>
            <remarks>This is set in the <c>PublishedContentRequestBuilder</c> and can also be used in
            custom content finders or <c>Prepared</c> event handlers, where we want to allow developers
            to indicate a request is 404 but not to cancel it.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.IsRedirect">
            <summary>
            Gets a value indicating whether the content request triggers a redirect (permanent or not).
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.IsRedirectPermanent">
            <summary>
            Gets or sets a value indicating whether the redirect is permanent.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.RedirectUrl">
            <summary>
            Gets or sets the URL to redirect to, when the content request triggers a redirect.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.SetRedirect(System.String)">
            <summary>
            Indicates that the content request should trigger a redirect (302).
            </summary>
            <param name="url">The URL to redirect to.</param>
            <remarks>Does not actually perform a redirect, only registers that the response should
            redirect. Redirect will or will not take place in due time.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.SetRedirectPermanent(System.String)">
            <summary>
            Indicates that the content request should trigger a permanent redirect (301).
            </summary>
            <param name="url">The URL to redirect to.</param>
            <remarks>Does not actually perform a redirect, only registers that the response should
            redirect. Redirect will or will not take place in due time.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.SetRedirect(System.String,System.Int32)">
            <summary>
            Indicates that the content request should trigger a redirect, with a specified status code.
            </summary>
            <param name="url">The URL to redirect to.</param>
            <param name="status">The status code (300-308).</param>
            <remarks>Does not actually perform a redirect, only registers that the response should
            redirect. Redirect will or will not take place in due time.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.ResponseStatusCode">
            <summary>
            Gets or sets the content request http response status code.
            </summary>
            <remarks>Does not actually set the http response status code, only registers that the response
            should use the specified code. The code will or will not be used, in due time.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.ResponseStatusDescription">
            <summary>
            Gets or sets the content request http response status description.
            </summary>
            <remarks>Does not actually set the http response status description, only registers that the response
            should use the specified description. The description will or will not be used, in due time.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedRequest.SetResponseStatus(System.Int32,System.String)">
            <summary>
            Sets the http response status code, along with an optional associated description.
            </summary>
            <param name="code">The http status code.</param>
            <param name="description">The description.</param>
            <remarks>Does not actually set the http response status code and description, only registers that
            the response should use the specified code and description. The code and description will or will
            not be used, in due time.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.Cacheability">
            <summary>
            Gets or sets the <c>System.Web.HttpCacheability</c>
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.CacheExtensions">
            <summary>
            Gets or sets a list of Extensions to append to the Response.Cache object.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedRequest.Headers">
            <summary>
            Gets or sets a dictionary of Headers to append to the Response object.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.IContentFinder">
            <summary>
            Provides a method to try to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.IContentFinder.TryFindContent(Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="request">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
            <remarks>Optionally, can also assign the template or anything else on the document request, although that is not required.</remarks>
        </member>
        <member name="T:Umbraco.Web.Scheduling.SimpleTask">
            <summary>
            A simple task that executes a delegate synchronously
            </summary>
        </member>
        <member name="T:Umbraco.Web.Scheduling.TempFileCleanup">
            <summary>
            Used to cleanup temporary file locations
            </summary>
        </member>
        <member name="T:Umbraco.Web.Scheduling.SchedulerComposer">
            <summary>
            Used to do the scheduling for tasks, publishing, etc...
            </summary>
            <remarks>
            All tasks are run in a background task runner which is web aware and will wind down
            the task correctly instead of killing it completely when the app domain shuts down.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.LatchedBackgroundTaskBase.Run">
            <summary>
            Implements IBackgroundTask.Run().
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.LatchedBackgroundTaskBase.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Implements IBackgroundTask.RunAsync().
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.LatchedBackgroundTaskBase.IsAsync">
            <summary>
            Indicates whether the background task can run asynchronously.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Scheduling.ThreadingTaskImmutable">
            <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task"/> within an object that gives access to its GetAwaiter method and Status
            property while ensuring that it cannot be modified in any way.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.ThreadingTaskImmutable.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.ThreadingTaskImmutable"/> class with a Task.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Umbraco.Web.Scheduling.ThreadingTaskImmutable.GetAwaiter">
            <summary>
            Gets an awaiter used to await the task.
            </summary>
            <returns>An awaiter instance.</returns>
        </member>
        <member name="P:Umbraco.Web.Scheduling.ThreadingTaskImmutable.Status">
            <summary>
            Gets the TaskStatus of the task.
            </summary>
            <returns>The current TaskStatus of the task.</returns>
        </member>
        <member name="T:Umbraco.Web.Scheduling.BackgroundTaskRunner">
            <summary>
            Manages a queue of tasks and runs them in the background.
            </summary>
            <remarks>This class exists for logging purposes - the one you want to use is BackgroundTaskRunner{T}.</remarks>
        </member>
        <member name="T:Umbraco.Web.Scheduling.BackgroundTaskRunner.MainDomHook">
            <summary>
            Represents a MainDom hook.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner.MainDomHook.#ctor(Umbraco.Core.IMainDom,System.Action,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunner.MainDomHook"/> class.
            </summary>
            <param name="mainDom">The <see cref="T:Umbraco.Core.IMainDom"/> object.</param>
            <param name="install">A method to execute when hooking into the main domain.</param>
            <param name="release">A method to execute when the main domain releases.</param>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner.MainDomHook.MainDom">
            <summary>
            Gets the <see cref="T:Umbraco.Core.IMainDom"/> object.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner.MainDomHook.Install">
            <summary>
            Gets the method to execute when hooking into the main domain.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner.MainDomHook.Release">
            <summary>
            Gets the method to execute when the main domain releases.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Scheduling.BackgroundTaskRunner`1">
            <summary>
            Manages a queue of tasks of type <typeparamref name="T"/> and runs them in the background.
            </summary>
            <typeparam name="T">The type of the managed tasks.</typeparam>
            <remarks>The task runner is web-aware and will ensure that it shuts down correctly when the AppDomain
            shuts down (ie is unloaded).</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Web.Scheduling.BackgroundTaskRunner.MainDomHook)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunner`1"/> class.
            </summary>
            <param name="logger">A logger.</param>
            <param name="hook">An optional main domain hook.</param>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.#ctor(System.String,Umbraco.Core.Logging.ILogger,Umbraco.Web.Scheduling.BackgroundTaskRunner.MainDomHook)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunner`1"/> class.
            </summary>
            <param name="name">The name of the runner.</param>
            <param name="logger">A logger.</param>
            <param name="hook">An optional main domain hook.</param>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.#ctor(Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions,Umbraco.Core.Logging.ILogger,Umbraco.Web.Scheduling.BackgroundTaskRunner.MainDomHook)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunner`1"/> class with a set of options.
            </summary>
            <param name="options">The set of options.</param>
            <param name="logger">A logger.</param>
            <param name="hook">An optional main domain hook.</param>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.#ctor(System.String,Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions,Umbraco.Core.Logging.ILogger,Umbraco.Web.Scheduling.BackgroundTaskRunner.MainDomHook)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunner`1"/> class with a set of options.
            </summary>
            <param name="name">The name of the runner.</param>
            <param name="options">The set of options.</param>
            <param name="logger">A logger.</param>
            <param name="hook">An optional main domain hook.</param>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.TaskCount">
            <summary>
            Gets the number of tasks in the queue.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.IsRunning">
            <summary>
            Gets a value indicating whether a threading task is currently running.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.IsCompleted">
            <summary>
            Gets a value indicating whether the runner has completed and cannot accept tasks anymore.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.CurrentThreadingTask">
            <summary>
            Gets the running threading task as an immutable awaitable.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no running task.</exception>
            <remarks>
            <para>Unless the AutoStart option is true, there will be no current threading task until
            a background task is added to the queue, and there will be no current threading task
            when the queue is empty. In which case this method returns null.</para>
            <para>The returned value can be awaited and that is all (eg no continuation).</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.StoppedAwaitable">
            <summary>
            Gets an awaitable used to await the runner running operation.
            </summary>
            <returns>An awaitable instance.</returns>
            <remarks>Used to wait until the runner is no longer running (IsRunning == false),
            though the runner could be started again afterwards by adding tasks to it. If
            the runner is not running, returns a completed awaitable.</remarks>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.TerminatedAwaitable">
            <summary>
            Gets an awaitable object that can be used to await for the runner to terminate.
            </summary>
            <returns>An awaitable object.</returns>
            <remarks>
            <para>Used to wait until the runner has terminated.</para>
            <para>
            The only time the runner will be terminated is by the Hosting Environment when the application is being shutdown. 
            </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.Add(`0)">
            <summary>
            Adds a task to the queue.
            </summary>
            <param name="task">The task to add.</param>
            <exception cref="T:System.InvalidOperationException">The task runner has completed.</exception>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.TryAdd(`0)">
            <summary>
            Tries to add a task to the queue.
            </summary>
            <param name="task">The task to add.</param>
            <returns>true if the task could be added to the queue; otherwise false.</returns>
            <remarks>Returns false if the runner is completed.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.CancelCurrentBackgroundTask">
            <summary>
            Cancels to current task, if any.
            </summary>
            <remarks>Has no effect if the task runs synchronously, or does not want to cancel.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.StartUp">
            <summary>
            Starts the tasks runner, if not already running.
            </summary>
            <remarks>Is invoked each time a task is added, to ensure it is going to be processed.</remarks>
            <exception cref="T:System.InvalidOperationException">The task runner has completed.</exception>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.StartUpLocked">
            <summary>
            Starts the tasks runner, if not already running.
            </summary>
            <remarks>Must be invoked within lock(_locker) and with _isCompleted being false.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.Shutdown(System.Boolean,System.Boolean)">
            <summary>
            Shuts the tasks runner down.
            </summary>
            <param name="force">True for force the runner to stop.</param>
            <param name="wait">True to wait until the runner has stopped.</param>
            <remarks>If <paramref name="force"/> is false, no more tasks can be queued but all queued tasks
            will run. If it is true, then only the current one (if any) will end and no other task will run.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.StopInternal(System.Boolean)">
            <summary>
            Used by IRegisteredObject.Stop and shutdown on threadpool threads to not block shutdown times.
            </summary>
            <param name="immediate"></param>
            <returns>
            An awaitable Task that is used to handle the shutdown.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.Stop(System.Boolean)">
            <summary>
            Requests a registered object to un-register.
            </summary>
            <param name="immediate">true to indicate the registered object should un-register from the hosting
            environment before returning; otherwise, false.</param>
            <remarks>
            <para>"When the application manager needs to stop a registered object, it will call the Stop method."</para>
            <para>The application manager will call the Stop method to ask a registered object to un-register. During
            processing of the Stop method, the registered object must call the HostingEnvironment.UnregisterObject method.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.StopInitial">
            <summary>
            Called when immediate == false for IRegisteredObject.Stop(bool immediate)
            </summary>
            <remarks>
            Called on a threadpool thread
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.StopImmediate">
            <summary>
            Called when immediate == true for IRegisteredObject.Stop(bool immediate)
            </summary>
            <remarks>
            Called on a threadpool thread
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions">
            <summary>
            Provides options to the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunner`1"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions.LongRunning">
            <summary>
            Gets or sets a value indicating whether the running task should be a long-running,
            coarse grained operation.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions.KeepAlive">
            <summary>
            Gets or sets a value indicating whether the running task should block and wait
            on the queue, or end, when the queue is empty.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions.AutoStart">
            <summary>
            Gets or sets a value indicating whether the running task should start immediately
            or only once a task has been added to the queue.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions.PreserveRunningTask">
            <summary>
            Gets or sets a value indicating whether the running task should be preserved
            once completed, or reset to null. For unit tests.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions.Hosted">
            <summary>
            Gets or sets a value indicating whether the runner should register with (and be
            stopped by) the hosting. Otherwise, something else should take care of stopping
            the runner. True by default.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Scheduling.IBackgroundTaskRunner`1">
            <summary>
            Defines a service managing a queue of tasks of type <typeparamref name="T"/> and running them in the background.
            </summary>
            <typeparam name="T">The type of the managed tasks.</typeparam>
            <remarks>The interface is not complete and exists only to have the contravariance on T.</remarks>
        </member>
        <member name="T:Umbraco.Web.Scheduling.ILatchedBackgroundTask">
            <summary>
            Represents a latched background task.
            </summary>
            <remarks>Latched background tasks can suspend their execution until
            a condition is met. However if the tasks runner has to terminate,
            latched background tasks can be executed immediately, depending on
            the value returned by RunsOnShutdown.</remarks>
        </member>
        <member name="P:Umbraco.Web.Scheduling.ILatchedBackgroundTask.Latch">
            <summary>
            Gets a task on latch.
            </summary>
            <exception cref="T:System.InvalidOperationException">The task is not latched.</exception>
        </member>
        <member name="P:Umbraco.Web.Scheduling.ILatchedBackgroundTask.IsLatched">
            <summary>
            Gets a value indicating whether the task is latched.
            </summary>
            <remarks>Should return false as soon as the condition is met.</remarks>
        </member>
        <member name="P:Umbraco.Web.Scheduling.ILatchedBackgroundTask.RunsOnShutdown">
            <summary>
             Gets a value indicating whether the task can be executed immediately if the task runner has to terminate.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Scheduling.RecurringTaskBase">
            <summary>
            Provides a base class for recurring background tasks.
            </summary>
            <remarks>Implement by overriding PerformRun or PerformRunAsync and then IsAsync accordingly,
            depending on whether the task is implemented as a sync or async method. Run nor RunAsync are
            sealed here as overriding them would break recurrence. And then optionally override
            RunsOnShutdown, in order to indicate whether the latched task should run immediately on
            shutdown, or just be abandoned (default).</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase.#ctor(Umbraco.Web.Scheduling.IBackgroundTaskRunner{Umbraco.Web.Scheduling.RecurringTaskBase},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.RecurringTaskBase"/> class.
            </summary>
            <param name="runner">The task runner.</param>
            <param name="delayMilliseconds">The delay.</param>
            <param name="periodMilliseconds">The period.</param>
            <remarks>The task will repeat itself periodically. Use this constructor to create a new task.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase.Run">
            <summary>
            Implements IBackgroundTask.Run().
            </summary>
            <remarks>Classes inheriting from <c>RecurringTaskBase</c> must implement <c>PerformRun</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Implements IBackgroundTask.RunAsync().
            </summary>
            <remarks>Classes inheriting from <c>RecurringTaskBase</c> must implement <c>PerformRun</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase.PerformRun">
            <summary>
            Runs the background task.
            </summary>
            <returns>A value indicating whether to repeat the task.</returns>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase.PerformRunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs the task asynchronously.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> instance representing the execution of the background task,
            and returning a value indicating whether to repeat the task.</returns>
        </member>
        <member name="T:Umbraco.Web.Scheduling.IBackgroundTask">
            <summary>
            Represents a background task.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.IBackgroundTask.Run">
            <summary>
            Runs the background task.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.IBackgroundTask.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs the task asynchronously.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance representing the execution of the background task.</returns>
            <exception cref="T:System.NotImplementedException">The background task cannot run asynchronously.</exception>
        </member>
        <member name="P:Umbraco.Web.Scheduling.IBackgroundTask.IsAsync">
            <summary>
            Indicates whether the background task can run asynchronously.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Scheduling.TaskEventArgs`1">
            <summary>
            Provides arguments for task runner events.
            </summary>
            <typeparam name="T">The type of the task.</typeparam>
        </member>
        <member name="M:Umbraco.Web.Scheduling.TaskEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.TaskEventArgs`1"/> class with a task.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Umbraco.Web.Scheduling.TaskEventArgs`1.#ctor(`0,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.TaskEventArgs`1"/> class with a task and an exception.
            </summary>
            <param name="task">The task.</param>
            <param name="exception">An exception.</param>
        </member>
        <member name="P:Umbraco.Web.Scheduling.TaskEventArgs`1.Task">
            <summary>
            Gets or sets the task.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.TaskEventArgs`1.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.BackgroundIndexRebuilder">
            <summary>
            Utility to rebuild all indexes on a background thread
            </summary>
        </member>
        <member name="M:Umbraco.Web.Search.BackgroundIndexRebuilder.RebuildIndexes(System.Boolean,System.Int32)">
            <summary>
            Called to rebuild empty indexes on startup
            </summary>
            <param name="indexRebuilder"></param>
            <param name="logger"></param>
            <param name="onlyEmptyIndexes"></param>
            <param name="waitMilliseconds"></param>
        </member>
        <member name="T:Umbraco.Web.Search.BackgroundIndexRebuilder.RebuildOnStartupTask">
            <summary>
            Background task used to rebuild empty indexes on startup
            </summary>
        </member>
        <member name="M:Umbraco.Web.Search.BackgroundIndexRebuilder.RebuildOnStartupTask.RebuildIndexes">
            <summary>
            Used to rebuild indexes on startup or cold boot
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.ExamineFinalComponent">
            <summary>
            Executes after all other examine components have executed
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.ExamineUserComponent">
            <summary>
            An abstract class for custom index authors to inherit from
            </summary>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineUserComponent.Initialize">
            <summary>
            Initialize the component, eagerly exits if ExamineComponent.ExamineEnabled == false
            </summary>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineUserComponent.InitializeComponent">
            <summary>
            Abstract method which executes to initialize this component if ExamineComponent.ExamineEnabled == true
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.IUmbracoTreeSearcherFields">
            <summary>
            Used to propagate hardcoded internal Field lists
            </summary>
        </member>
        <member name="M:Umbraco.Web.Search.IUmbracoTreeSearcherFields.GetBackOfficeFields">
            <summary>
            Propagate list of searchable fields for all node types
            </summary>
        </member>
        <member name="M:Umbraco.Web.Search.IUmbracoTreeSearcherFields.GetBackOfficeMembersFields">
            <summary>
            Propagate list of searchable fields for Members
            </summary>
        </member>
        <member name="M:Umbraco.Web.Search.IUmbracoTreeSearcherFields.GetBackOfficeMediaFields">
            <summary>
            Propagate list of searchable fields for Media
            </summary>
        </member>
        <member name="M:Umbraco.Web.Search.IUmbracoTreeSearcherFields.GetBackOfficeDocumentFields">
            <summary>
            Propagate list of searchable fields for Documents
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.ExamineComposer">
            <summary>
            Configures and installs Examine.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.GenericIndexDiagnostics">
            <summary>
            Used to return diagnostic data for any index
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.IUmbracoIndexesCreator">
            <inheritdoc />
            <summary>
            Used to create the Umbraco indexes
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.UmbracoIndexesCreator">
            <summary>
            Creates the indexes used by Umbraco
            </summary>
        </member>
        <member name="M:Umbraco.Web.Search.UmbracoIndexesCreator.Create">
            <summary>
            Creates the Umbraco indexes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Search.UmbracoIndexesCreator.GetMemberValueSetValidator">
            <summary>
            Returns the <see cref="T:Examine.IValueSetValidator"/> for the member indexer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Search.SearchableTreeAttribute.#ctor(System.String)">
            <summary>
            This constructor will assume that the method name equals `format(searchResult, appAlias, treeAlias)`.
            </summary>
            <param name="serviceName">Name of the service.</param>
        </member>
        <member name="M:Umbraco.Web.Search.SearchableTreeAttribute.#ctor(System.String,System.String)">
            <summary>
            This constructor defines both the Angular service and method name to use.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Umbraco.Web.Search.SearchableTreeAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            This constructor defines both the Angular service and method name to use and explicitly defines a sort order for the results
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="methodName">Name of the method.</param>
            <param name="sortOrder">The sort order.</param>
            <exception cref="T:System.ArgumentNullException">serviceName
            or
            methodName</exception>
            <exception cref="T:System.ArgumentException">Value can't be empty or consist only of white-space characters. - serviceName</exception>
        </member>
        <member name="T:Umbraco.Web.Search.UmbracoTreeSearcher">
            <summary>
            Used for internal Umbraco implementations of <see cref="T:Umbraco.Web.Trees.ISearchableTree"/>
            </summary>
        </member>
        <member name="M:Umbraco.Web.Search.UmbracoTreeSearcher.ExamineSearch(System.String,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes,System.Int32,System.Int64,System.Int64@,System.String,System.Boolean)">
            <summary>
            Searches Examine for results based on the entity type
            </summary>
            <param name="query"></param>
            <param name="entityType"></param>
            <param name="totalFound"></param>
            <param name="searchFrom">
            A starting point for the search, generally a node id, but for members this is a member type alias
            </param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="ignoreUserStartNodes">If set to true, user and group start node permissions will be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Search.UmbracoTreeSearcher.EntitySearch(Umbraco.Core.Models.UmbracoObjectTypes,System.String,System.Int32,System.Int64,System.Int64@,System.String)">
            <summary>
            Searches with the <see cref="T:Umbraco.Core.Services.IEntityService"/> for results based on the entity type
            </summary>
            <param name="objectType"></param>
            <param name="query"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalFound"></param>
            <param name="searchFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Search.UmbracoTreeSearcher.MemberFromSearchResults(System.Collections.Generic.IEnumerable{Examine.ISearchResult})">
            <summary>
            Returns a collection of entities for media based on search results
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Search.UmbracoTreeSearcher.MediaFromSearchResults(System.Collections.Generic.IEnumerable{Examine.ISearchResult})">
            <summary>
            Returns a collection of entities for media based on search results
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Search.UmbracoTreeSearcher.ContentFromSearchResults(System.Collections.Generic.IEnumerable{Examine.ISearchResult},System.String)">
            <summary>
            Returns a collection of entities for content based on search results
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineComponent.ContentCacheRefresherUpdated(Umbraco.Web.Cache.ContentCacheRefresher,Umbraco.Core.Cache.CacheRefresherEventArgs)">
            <summary>
            Updates indexes based on content changes
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineComponent.ContentTypeCacheRefresherUpdated(Umbraco.Web.Cache.ContentTypeCacheRefresher,Umbraco.Core.Cache.CacheRefresherEventArgs)">
            <summary>
            Updates indexes based on content type changes
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineComponent.DeleteIndexForEntity(System.Int32,System.Boolean)">
            <summary>
            Remove items from an index
            </summary>
            <param name="entityId"></param>
            <param name="keepIfUnpublished">
            If true, indicates that we will only delete this item from indexes that don't support unpublished content.
            If false it will delete this from all indexes regardless.
            </param>
        </member>
        <member name="T:Umbraco.Web.Search.ExamineComponent.DeferedAction">
            <summary>
            An action that will execute at the end of the Scope being completed
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.ExamineComponent.DeferedReIndexForContent">
            <summary>
            Re-indexes an <see cref="T:Umbraco.Core.Models.IContent"/> item on a background thread
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.ExamineComponent.DeferedReIndexForMedia">
            <summary>
            Re-indexes an <see cref="T:Umbraco.Core.Models.IMedia"/> item on a background thread
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.ExamineComponent.DeferedReIndexForMember">
            <summary>
            Re-indexes an <see cref="T:Umbraco.Core.Models.IMember"/> item on a background thread
            </summary>
        </member>
        <member name="T:Umbraco.Web.Security.BackOfficeExternalLoginProviderErrorMiddlware">
            <summary>
            Used to handle errors registered by external login providers
            </summary>
            <remarks>
            When an external login provider registers an error with <see cref="M:Umbraco.Web.OwinExtensions.SetExternalLoginProviderErrors(Microsoft.Owin.IOwinContext,Umbraco.Web.Security.BackOfficeExternalLoginProviderErrors)"/> during the OAuth process,
            this middleware will detect that, store the errors into cookie data and redirect to the back office login so we can read the errors back out.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Security.BackOfficeExternalLoginProviderOptions">
            <summary>
            Options used to configure back office external login providers
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.BackOfficeExternalLoginProviderOptions.OnChallenge">
            <summary>
            When specified this will be called to retrieve the <see cref="T:Microsoft.Owin.Security.AuthenticationProperties"/> used during the authentication Challenge response.
            </summary>
            <remarks>
            This will generally not be needed since OpenIdConnect.RedirectToIdentityProvider options should be used instead
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Security.BackOfficeExternalLoginProviderOptions.AutoLinkOptions">
            <summary>
            Options used to control how users can be auto-linked/created/updated based on the external login provider
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.BackOfficeExternalLoginProviderOptions.DenyLocalLogin">
            <summary>
            When set to true will disable all local user login functionality
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.BackOfficeExternalLoginProviderOptions.AutoRedirectLoginToExternalProvider">
            <summary>
            When specified this will automatically redirect to the OAuth login provider instead of prompting the user to click on the OAuth button first.
            </summary>
            <remarks>
            This is generally used in conjunction with <see cref="P:Umbraco.Web.Security.BackOfficeExternalLoginProviderOptions.DenyLocalLogin"/>. If more than one OAuth provider specifies this, the last registered
            provider's redirect settings will win.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Security.BackOfficeExternalLoginProviderOptions.CustomBackOfficeView">
            <summary>
            A virtual path to a custom angular view that is used to replace the entire UI that renders the external login button that the user interacts with
            </summary>
            <remarks>
            If this view is specified it is 100% up to the user to render the html responsible for rendering the link/un-link buttons along with showing any errors
            that occur. This overrides what Umbraco normally does by default.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Security.SignOutAuditEventArgs">
            <summary>
            Event args used when signing out
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.SignOutAuditEventArgs.SignOutRedirectUrl">
            <summary>
            Allows event handlers to set a GET absolute URL to be redirected to after successful logout out of the back office. This
            can be used for external login providers.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.UserInviteEventArgs.InvitedUser">
            <summary>
            The model used to invite the user
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.UserInviteEventArgs.InviteHandled">
            <summary>
            If event handler sets this to true it indicates that Umbraco will no try to send the invite itself
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.UserInviteEventArgs.User">
            <summary>
            The local user that has been created that is pending the invite
            </summary>        
        </member>
        <member name="P:Umbraco.Web.Security.UserInviteEventArgs.ShowUserResult">
            <summary>
            if set to true will show the edit user button in the UI, else it will not be shown
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeClaimsIdentityFactory`1.CreateAsync(Microsoft.AspNet.Identity.UserManager{`0,System.Int32},`0,System.String)">
            <summary>
            Create a ClaimsIdentity from a user
            </summary>
            <param name="manager"/><param name="user"/><param name="authenticationType"/>
            <returns/>
        </member>
        <member name="T:Umbraco.Web.Security.BackOfficeUserManagerMarker`2">
            <summary>
            This class is only here due to the fact that IOwinContext Get / Set only work in generics, if they worked
            with regular 'object' then we wouldn't have to use this work around but because of that we have to use this
            class to resolve the 'real' type of the registered user manager
            </summary>
            <typeparam name="TManager"></typeparam>
            <typeparam name="TUser"></typeparam>
        </member>
        <member name="T:Umbraco.Web.Security.BackOfficeUserPasswordCheckerResult">
            <summary>
            The result returned from the IBackOfficeUserPasswordChecker
            </summary>
        </member>
        <member name="T:Umbraco.Web.Security.IBackOfficeUserManagerMarker">
            <summary>
            This interface is only here due to the fact that IOwinContext Get / Set only work in generics, if they worked
            with regular 'object' then we wouldn't have to use this work around but because of that we have to use this
            class to resolve the 'real' type of the registered user manager
            </summary>
        </member>
        <member name="T:Umbraco.Web.Security.IBackOfficeUserPasswordChecker">
            <summary>
            Used by the BackOfficeUserManager to check the username/password which allows for developers to more easily
            set the logic for this procedure.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.IBackOfficeUserPasswordChecker.CheckPasswordAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Checks a password for a user
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
            <remarks>
            This will allow a developer to auto-link a local account which is required if the user queried doesn't exist locally.
            The user parameter will always contain the username, if the user doesn't exist locally, the other properties will not be filled in.
            A developer can then create a local account by filling in the properties and using UserManager.CreateAsync
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Security.IdentityAuditEventArgs">
            <summary>
            This class is used by events raised from the BackofficeUserManager
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.IdentityAuditEventArgs.Action">
            <summary>
            The action that got triggered from the audit event
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.IdentityAuditEventArgs.DateTimeUtc">
            <summary>
            Current date/time in UTC format
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.IdentityAuditEventArgs.IpAddress">
            <summary>
            The source IP address of the user performing the action
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.IdentityAuditEventArgs.AffectedUser">
            <summary>
            The user affected by the event raised
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.IdentityAuditEventArgs.PerformingUser">
            <summary>
            If a user is performing an action on a different user, then this will be set. Otherwise it will be -1
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.IdentityAuditEventArgs.Comment">
            <summary>
            An optional comment about the action being logged
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.IdentityAuditEventArgs.Username">
            <summary>
            This property is always empty except in the LoginFailed event for an unknown user trying to login
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.IdentityAuditEventArgs.#ctor(Umbraco.Web.Security.AuditEvent,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="action"></param>
            <param name="ipAddress"></param>
            <param name="comment"></param>
            <param name="performingUser"></param>
            <param name="affectedUser"></param>
        </member>
        <member name="M:Umbraco.Web.Security.IdentityAuditEventArgs.#ctor(Umbraco.Web.Security.AuditEvent,System.String,System.String,System.String)">
            <summary>
            Creates an instance without a performing or affected user (the id will be set to -1)
            </summary>
            <param name="action"></param>
            <param name="ipAddress"></param>
            <param name="username"></param>
            <param name="comment"></param>
        </member>
        <member name="M:Umbraco.Web.Security.IdentityAuditEventArgs.GetCurrentRequestBackofficeUserId">
            <summary>
            Returns the current logged in backoffice user's Id logging if there is one
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeCookieAuthenticationProvider.ValidateIdentity(Microsoft.Owin.Security.Cookies.CookieValidateIdentityContext)">
            <summary>
            Ensures that the culture is set correctly for the current back office user and that the user's session token is valid
            </summary>
            <param name="context"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeCookieAuthenticationProvider.EnsureValidSessionId(Microsoft.Owin.Security.Cookies.CookieValidateIdentityContext)">
            <summary>
            Ensures that the user has a valid session id
            </summary>
            <remarks>
            So that we are not overloading the database this throttles it's check to every minute
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeSignInManager.PasswordSignInAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sign in the user in using the user name and password
            </summary>
            <param name="userName"/><param name="password"/><param name="isPersistent"/><param name="shouldLockout"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeSignInManager.PasswordSignInAsyncImpl(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Borrowed from Microsoft's underlying sign in manager which is not flexible enough to tell it to use a different cookie type
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="isPersistent"></param>
            <param name="shouldLockout"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeSignInManager.SignInOrTwoFactor(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.Boolean)">
            <summary>
            Borrowed from Microsoft's underlying sign in manager which is not flexible enough to tell it to use a different cookie type
            </summary>
            <param name="user"></param>
            <param name="isPersistent"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeSignInManager.SignInAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.Boolean,System.Boolean)">
            <summary>
            Creates a user identity and then signs the identity using the AuthenticationManager
            </summary>
            <param name="user"></param>
            <param name="isPersistent"></param>
            <param name="rememberBrowser"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeSignInManager.GetVerifiedUserIdAsync">
            <summary>
            Get the user id that has been verified already or int.MinValue if the user has not been verified yet
            </summary>
            <returns></returns>
            <remarks>
            Replaces the underlying call which is not flexible and doesn't support a custom cookie
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeSignInManager.GetVerifiedUserNameAsync">
            <summary>
            Get the username that has been verified already or null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeSignInManager.TwoFactorSignInAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Two factor verification step
            </summary>
            <param name="provider"></param>
            <param name="code"></param>
            <param name="isPersistent"></param>
            <param name="rememberBrowser"></param>
            <returns></returns>
            <remarks>
            This is implemented because we cannot override GetVerifiedUserIdAsync and instead we have to shadow it
            so due to this and because we are using an INT as the TKey and not an object, it can never be null. Adding to that
            the default(int) value returned by the base class is always a valid user (i.e. the admin) so we just have to duplicate
            all of this code to check for int.MinValue
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeSignInManager.SendTwoFactorCodeAsync(System.String)">
            <summary>Send a two factor code to a user</summary>
            <param name="provider"></param>
            <returns></returns>
            <remarks>
            This is implemented because we cannot override GetVerifiedUserIdAsync and instead we have to shadow it
            so due to this and because we are using an INT as the TKey and not an object, it can never be null. Adding to that
            the default(int) value returned by the base class is always a valid user (i.e. the admin) so we just have to duplicate
            all of this code to check for int.MinVale instead.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Security.BackOfficeUserManager">
            <summary>
            Default back office user manager
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager.Create(Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Umbraco.Web.Security.BackOfficeUserManager},Umbraco.Core.Services.IUserService,Umbraco.Core.Services.IMemberTypeService,Umbraco.Core.Services.IEntityService,Umbraco.Core.Services.IExternalLoginService,Umbraco.Core.Security.MembershipProviderBase,Umbraco.Core.Mapping.UmbracoMapper,Umbraco.Core.Configuration.UmbracoSettings.IContentSection,Umbraco.Core.Configuration.IGlobalSettings)">
            <summary>
            Creates a BackOfficeUserManager instance with all default options and the default BackOfficeUserManager
            </summary>
            <param name="options"></param>
            <param name="userService"></param>
            <param name="memberTypeService"></param>
            <param name="entityService"></param>
            <param name="externalLoginService"></param>
            <param name="membershipProvider"></param>
            <param name="contentSectionConfig"></param>
            <param name="globalSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager.Create(Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Umbraco.Web.Security.BackOfficeUserManager},Umbraco.Core.Security.BackOfficeUserStore,Umbraco.Core.Security.MembershipProviderBase,Umbraco.Core.Configuration.UmbracoSettings.IContentSection)">
            <summary>
            Creates a BackOfficeUserManager instance with all default options and a custom BackOfficeUserManager instance
            </summary>
            <param name="options"></param>
            <param name="customUserStore"></param>
            <param name="membershipProvider"></param>
            <param name="contentSectionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager.InitUserManager(Umbraco.Web.Security.BackOfficeUserManager,Umbraco.Core.Security.MembershipProviderBase,Umbraco.Core.Configuration.UmbracoSettings.IContentSection,Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Umbraco.Web.Security.BackOfficeUserManager})">
            <summary>
            Initializes the user manager with the correct options
            </summary>
            <param name="manager"></param>
            <param name="membershipProvider"></param>
            <param name="contentSectionConfig"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Security.BackOfficeUserManager`1">
            <summary>
            Generic Back office user manager
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.BackOfficeUserManager`1.SupportsUserTwoFactor">
            <summary>
            Developers will need to override this to support custom 2 factor auth
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.InitUserManager(Umbraco.Web.Security.BackOfficeUserManager{`0},Umbraco.Core.Security.MembershipProviderBase,Microsoft.Owin.Security.DataProtection.IDataProtectionProvider,Umbraco.Core.Configuration.UmbracoSettings.IContentSection)">
            <summary>
            Initializes the user manager with the correct options
            </summary>
            <param name="manager"></param>
            <param name="membershipProvider">
            The <see cref="T:Umbraco.Core.Security.MembershipProviderBase"/> for the users called UsersMembershipProvider
            </param>
            <param name="dataProtectionProvider"></param>
            <param name="contentSectionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.ValidateSessionIdAsync(System.Int32,System.String)">
            <summary>
            Used to validate a user's session
            </summary>
            <param name="userId"></param>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.GetDefaultPasswordHasher(Umbraco.Core.Security.MembershipProviderBase)">
            <summary>
            This will determine which password hasher to use based on what is defined in config
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Security.BackOfficeUserManager`1.BackOfficeUserPasswordChecker">
            <summary>
            Gets/sets the default back office user password checker
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.GeneratePassword">
            <summary>
            Helper method to generate a password for a user based on the current password validator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.IsLockedOutAsync(System.Int32)">
            <summary>
            Override to check the user approval value as well as the user lock out date, by default this only checks the user's locked out date
            </summary>
            <param name="userId"></param>
            <returns></returns>
            <remarks>
            In the ASP.NET Identity world, there is only one value for being locked out, in Umbraco we have 2 so when checking this for Umbraco we need to check both values
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.CheckPasswordAsync(`0,System.String)">
             <summary>
             Logic used to validate a username and password
             </summary>
             <param name="user"></param>
             <param name="password"></param>
             <returns></returns>
             <remarks>
             By default this uses the standard ASP.Net Identity approach which is:
             * Get password store
             * Call VerifyPasswordAsync with the password store + user + password
             * Uses the PasswordHasher.VerifyHashedPassword to compare the stored password
            
             In some cases people want simple custom control over the username/password check, for simplicity
             sake, developers would like the users to simply validate against an LDAP directory but the user
             data remains stored inside of Umbraco.
             See: http://issues.umbraco.org/issue/U4-7032 for the use cases.
            
             We've allowed this check to be overridden with a simple callback so that developers don't actually
             have to implement/override this class.
             </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.ChangePasswordWithResetAsync(System.Int32,System.String,System.String)">
            <summary>
            This is a special method that will reset the password but will raise the Password Changed event instead of the reset event
            </summary>
            <param name="userId"></param>
            <param name="token"></param>
            <param name="newPassword"></param>
            <returns></returns>
            <remarks>
            We use this because in the back office the only way an admin can change another user's password without first knowing their password
            is to generate a token and reset it, however, when we do this we want to track a password change, not a password reset
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.VerifyPasswordAsync(Microsoft.AspNet.Identity.IUserPasswordStore{`0,System.Int32},`0,System.String)">
            <summary>
            Override to determine how to hash the password
            </summary>
            <param name="store"></param>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.UpdatePassword(Microsoft.AspNet.Identity.IUserPasswordStore{`0,System.Int32},`0,System.String)">
            <summary>
            Override to determine how to hash the password
            </summary>
            <param name="passwordStore"></param>
            <param name="user"></param>
            <param name="newPassword"></param>
            <returns></returns>
            <remarks>
            This method is called anytime the password needs to be hashed for storage (i.e. including when reset password is used)
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.UpdateSecurityStampInternal(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            This is copied from the underlying .NET base class since they decided to not expose it
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.GetSecurityStore">
            <summary>
            This is copied from the underlying .NET base class since they decided to not expose it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.NewSecurityStamp">
            <summary>
            This is copied from the underlying .NET base class since they decided to not expose it
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Web.Security.BackOfficeUserManager`1.AccessFailedAsync(System.Int32)" -->
        <member name="E:Umbraco.Web.Security.BackOfficeUserManager`1.SendingUserInvite">
            <summary>
            Raised when a user is invited
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeUserManager`1.GetCurrentRequestIpAddress">
            <summary>
            Returns the current request IP address for logging if there is one
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Security.SessionIdValidator">
            <summary>
            Static helper class used to configure a CookieAuthenticationProvider to validate a cookie against a user's session id
            </summary>
            <remarks>
            This uses another cookie to track the last checked time which is done for a few reasons:    
            * We can't use the user's auth ticket to do this because we'd be re-issuing the auth ticket all of the time and it would never expire
                plus the auth ticket size is much larger than this small value
            * This will execute quite often (every minute per user) and in some cases there might be several requests that end up re-issuing the cookie so the cookie value should be small
            * We want to avoid the user lookup if it's not required so that will only happen when the time diff is great enough in the cookie
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.UmbracoAntiForgeryAdditionalDataProvider.#ctor(System.Web.Helpers.IAntiForgeryAdditionalDataProvider)">
            <summary>
            Constructor, allows wrapping a default provider
            </summary>
            <param name="defaultProvider"></param>
        </member>
        <member name="T:Umbraco.Web.Security.AuthenticationExtensions">
            <summary>
            Extensions to create and renew and remove authentication tickets for the Umbraco back office
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationExtensions.AuthenticateCurrentRequest(System.Web.HttpContextBase,Microsoft.Owin.Security.AuthenticationTicket,System.Boolean)">
            <summary>
            This will check the ticket to see if it is valid, if it is it will set the current thread's user and culture
            </summary>
            <param name="http"></param>
            <param name="ticket"></param>
            <param name="renewTicket">If true will attempt to renew the ticket</param>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationExtensions.GetCurrentIdentity(System.Web.HttpContextBase,System.Boolean)">
            <summary>
            This will return the current back office identity.
            </summary>
            <param name="http"></param>
            <param name="authenticateRequestIfNotFound">
            If set to true and a back office identity is not found and not authenticated, this will attempt to authenticate the
            request just as is done in the Umbraco module and then set the current identity if it is valid.
            Just like in the UmbracoModule, if this is true then the user's culture will be assigned to the request.
            </param>
            <returns>
            Returns the current back office identity if an admin is authenticated otherwise null
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationExtensions.GetCurrentIdentity(System.Web.HttpContext,System.Boolean)">
            <summary>
            This will return the current back office identity.
            </summary>
            <param name="http"></param>
            <param name="authenticateRequestIfNotFound">
            If set to true and a back office identity is not found and not authenticated, this will attempt to authenticate the
            request just as is done in the Umbraco module and then set the current identity if it is valid
            </param>
            <returns>
            Returns the current back office identity if an admin is authenticated otherwise null
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationExtensions.UmbracoLogout(System.Web.HttpContext)">
            <summary>
            This clears the forms authentication cookie
            </summary>
            <param name="http"></param>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationExtensions.RenewUmbracoAuthTicket(System.Web.HttpContextBase)">
            <summary>
            This will force ticket renewal in the OWIN pipeline
            </summary>
            <param name="http"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationExtensions.RenewUmbracoAuthTicket(System.Web.HttpContext)">
            <summary>
            This will force ticket renewal in the OWIN pipeline
            </summary>
            <param name="http"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationExtensions.GetRemainingAuthSeconds(System.Web.HttpContextBase)">
            <summary>
            returns the number of seconds the user has until their auth session times out
            </summary>
            <param name="http"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationExtensions.GetRemainingAuthSeconds(Microsoft.Owin.Security.AuthenticationTicket)">
            <summary>
            returns the number of seconds the user has until their auth session times out
            </summary>
            <param name="ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationExtensions.GetUmbracoAuthTicket(System.Web.HttpContextBase)">
            <summary>
            Gets the umbraco auth ticket
            </summary>
            <param name="http"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationExtensions.Logout(System.Web.HttpContextBase,System.String)">
            <summary>
            This clears the forms authentication cookie
            </summary>
            <param name="http"></param>
            <param name="cookieName"></param>
        </member>
        <member name="T:Umbraco.Web.Security.UmbracoSecureDataFormat">
            <summary>
            Custom secure format that ensures the Identity in the ticket is <see cref="T:Umbraco.Core.Security.UmbracoBackOfficeIdentity"/> and not just a ClaimsIdentity
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.UmbracoSecureDataFormat.Unprotect(System.String)">
            <summary>
            Un-protects the cookie
            </summary>
            <param name="protectedText"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Security.UmbracoAuthTicketDataProtector">
            <summary>
            This is used so that we can retrieve the auth ticket protector from an IOwinContext
            </summary>
        </member>
        <member name="T:Umbraco.Web.Security.ExternalSignInAutoLinkOptions">
            <summary>
            Options used to configure auto-linking external OAuth providers
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.ExternalSignInAutoLinkOptions.#ctor(System.Boolean,System.String[],System.String)">
            <summary>
            Creates a new <see cref="T:Umbraco.Web.Security.ExternalSignInAutoLinkOptions"/> instance
            </summary>
            <param name="autoLinkExternalAccount"></param>
            <param name="defaultUserGroups">If null, the default will be the 'editor' group</param>
            <param name="defaultCulture"></param>
        </member>
        <member name="P:Umbraco.Web.Security.ExternalSignInAutoLinkOptions.AllowManualLinking">
            <summary>
            By default this is true which allows the user to manually link and unlink the external provider, if set to false the back office user
            will not see and cannot perform manual linking or unlinking of the external provider.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.ExternalSignInAutoLinkOptions.OnAutoLinking">
            <summary>
            A callback executed during account auto-linking and before the user is persisted
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.ExternalSignInAutoLinkOptions.OnExternalLogin">
            <summary>
            A callback executed during every time a user authenticates using an external login.
            returns a boolean indicating if sign in should continue or not.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.ExternalSignInAutoLinkOptions.GetDefaultUserGroups(Umbraco.Web.UmbracoContext,Microsoft.AspNet.Identity.Owin.ExternalLoginInfo)">
            <summary>
            The default User group aliases to use for auto-linking users
            </summary>
            <param name="umbracoContext"></param>
            <param name="loginInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.ExternalSignInAutoLinkOptions.ShouldAutoLinkExternalAccount(Umbraco.Web.UmbracoContext,Microsoft.AspNet.Identity.Owin.ExternalLoginInfo)">
             <summary>
             For private external auth providers such as Active Directory, which when set to true will automatically
             create a local user if the external provider login was successful.
            
             For public auth providers this should always be false!!!
             </summary>
        </member>
        <member name="M:Umbraco.Web.Security.ExternalSignInAutoLinkOptions.GetDefaultCulture(Umbraco.Web.UmbracoContext,Microsoft.AspNet.Identity.Owin.ExternalLoginInfo)">
            <summary>
            The default Culture to use for auto-linking users
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Web.Security.FixWindowsAuthMiddlware" -->
        <member name="T:Umbraco.Web.Security.ForceRenewalCookieAuthenticationHandler">
            <summary>
            If a flag is set on the context to force renew the ticket, this will do it
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.ForceRenewalCookieAuthenticationHandler.AuthenticateCoreAsync">
            <summary>
            This handler doesn't actually do any auth so we return null;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.ForceRenewalCookieAuthenticationHandler.GetTicket">
            <summary>
            Gets the ticket from the request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.ForceRenewalCookieAuthenticationHandler.ApplyResponseGrantAsync">
            <summary>
            This will check if the token exists in the request to force renewal
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Security.ForceRenewalCookieAuthenticationMiddleware">
            <summary>
            This middleware is used simply to force renew the auth ticket if a flag to do so is found in the request
            </summary>
        </member>
        <member name="T:Umbraco.Web.Security.GetUserSecondsMiddleWare">
            <summary>
            Custom middleware to return the remaining seconds the user has before they are logged out
            </summary>
            <remarks>
            This is quite a custom request because in most situations we just want to return the seconds and don't want
            to renew the auth ticket, however if KeepUserLoggedIn is true, then we do want to renew the auth ticket for
            this request!
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Security.IUmbracoBackOfficeTwoFactorOptions">
            <summary>
            Used to display a custom view in the back office if developers choose to implement their own custom 2 factor authentication
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.PreviewAuthenticationMiddleware.#ctor(Microsoft.Owin.OwinMiddleware,Umbraco.Web.Security.UmbracoBackOfficeCookieAuthOptions,Umbraco.Core.Configuration.IGlobalSettings)">
            <summary>
            Instantiates the middleware with an optional pointer to the next component.
            </summary>
            <param name="next"/>
            <param name="cookieOptions"></param>
            <param name="globalSettings"></param>
        </member>
        <member name="M:Umbraco.Web.Security.PreviewAuthenticationMiddleware.Invoke(Microsoft.Owin.IOwinContext)">
            <summary>
            Process an individual request.
            </summary>
            <param name="context"/>
            <returns/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Web.Security.WebAuthExtensions.SetPrincipalForRequest(System.Net.Http.HttpRequestMessage,System.Security.Principal.IPrincipal)" -->
        <member name="M:Umbraco.Web.Security.WebAuthExtensions.SetPrincipalForRequest(System.Web.HttpContextBase,System.Security.Principal.IPrincipal)">
            <summary>
            This will set a an authenticated IPrincipal to the current request given the IUser object
            </summary>
            <param name="httpContext"></param>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Security.AppBuilderExtensions">
            <summary>
            Provides security/identity extension methods to IAppBuilder.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.ConfigureUserManagerForUmbracoBackOffice(Owin.IAppBuilder,Umbraco.Core.Services.ServiceContext,Umbraco.Core.Mapping.UmbracoMapper,Umbraco.Core.Configuration.UmbracoSettings.IContentSection,Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Core.Security.MembershipProviderBase)">
            <summary>
            Configure Default Identity User Manager for Umbraco
            </summary>
            <param name="app"></param>
            <param name="services"></param>
            <param name="contentSettings"></param>
            <param name="globalSettings"></param>
            <param name="userMembershipProvider"></param>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.ConfigureUserManagerForUmbracoBackOffice(Owin.IAppBuilder,Umbraco.Core.IRuntimeState,Umbraco.Core.Configuration.UmbracoSettings.IContentSection,Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Core.Security.MembershipProviderBase,Umbraco.Core.Security.BackOfficeUserStore)">
            <summary>
            Configure a custom UserStore with the Identity User Manager for Umbraco
            </summary>
            <param name="app"></param>
            <param name="runtimeState"></param>
            <param name="globalSettings"></param>
            <param name="userMembershipProvider"></param>
            <param name="customUserStore"></param>
            <param name="contentSettings"></param>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.ConfigureUserManagerForUmbracoBackOffice``2(Owin.IAppBuilder,Umbraco.Core.IRuntimeState,Umbraco.Core.Configuration.IGlobalSettings,System.Func{Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{``0},Microsoft.Owin.IOwinContext,``0})">
            <summary>
            Configure a custom BackOfficeUserManager for Umbraco
            </summary>
            <param name="app"></param>
            <param name="runtimeState"></param>
            <param name="globalSettings"></param>
            <param name="userManager"></param>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.UseUmbracoBackOfficeCookieAuthentication(Owin.IAppBuilder,Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.IRuntimeState,Umbraco.Core.Services.IUserService,Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection)">
            <summary>
            Ensures that the UmbracoBackOfficeAuthenticationMiddleware is assigned to the pipeline
            </summary>
            <param name="app"></param>
            <param name="umbracoContextAccessor"></param>
            <param name="runtimeState"></param>
            <param name="userService"></param>
            <param name="globalSettings"></param>
            <param name="securitySection"></param>
            <returns></returns>
            <remarks>
            By default this will be configured to execute on PipelineStage.Authenticate
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.UseUmbracoBackOfficeCookieAuthentication(Owin.IAppBuilder,Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.IRuntimeState,Umbraco.Core.Services.IUserService,Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection,Owin.PipelineStage)">
            <summary>
            Ensures that the UmbracoBackOfficeAuthenticationMiddleware is assigned to the pipeline
            </summary>
            <param name="app"></param>
            <param name="umbracoContextAccessor"></param>
            <param name="runtimeState"></param>
            <param name="userService"></param>
            <param name="globalSettings"></param>
            <param name="securitySection"></param>
            <param name="stage">
            Configurable pipeline stage
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.UseUmbracoBackOfficeCookieAuthentication(Owin.IAppBuilder,Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.IRuntimeState,Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection,Microsoft.Owin.Security.Cookies.CookieAuthenticationOptions,Owin.PipelineStage)">
            <summary>
            Ensures that the UmbracoBackOfficeAuthenticationMiddleware is assigned to the pipeline
            </summary>
            <param name="app"></param>
            <param name="umbracoContextAccessor"></param>
            <param name="runtimeState"></param>
            <param name="globalSettings"></param>
            <param name="securitySection"></param>
            <param name="cookieOptions">Custom auth cookie options can be specified to have more control over the cookie authentication logic</param>
            <param name="stage">
            Configurable pipeline stage
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.SetBackOfficeUserManagerType``2(Owin.IAppBuilder)">
            <summary>
            This registers the exact type of the user manager in owin so we can extract it
            when required in order to extract the user manager instance
            </summary>
            <typeparam name="TManager"></typeparam>
            <typeparam name="TUser"></typeparam>
            <param name="app"></param>
            <remarks>
            This is required because a developer can specify a custom user manager and due to generic types the key name will registered
            differently in the owin context
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.UseUmbracoBackOfficeExternalCookieAuthentication(Owin.IAppBuilder,Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.IRuntimeState,Umbraco.Core.Configuration.IGlobalSettings)">
            <summary>
            Ensures that the cookie middleware for validating external logins is assigned to the pipeline with the correct
            Umbraco back office configuration
            </summary>
            <param name="app"></param>
            <param name="umbracoContextAccessor"></param>
            <param name="runtimeState"></param>
            <param name="globalSettings"></param>
            <returns></returns>
            <remarks>
            By default this will be configured to execute on PipelineStage.Authenticate
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.UseUmbracoBackOfficeExternalCookieAuthentication(Owin.IAppBuilder,Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.IRuntimeState,Umbraco.Core.Configuration.IGlobalSettings,Owin.PipelineStage)">
            <summary>
            Ensures that the cookie middleware for validating external logins is assigned to the pipeline with the correct
            Umbraco back office configuration
            </summary>
            <param name="app"></param>
            <param name="umbracoContextAccessor"></param>
            <param name="runtimeState"></param>
            <param name="globalSettings"></param>
            <param name="stage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.UseUmbracoPreviewAuthentication(Owin.IAppBuilder,Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.IRuntimeState,Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection)">
            <summary>
            In order for preview to work this needs to be called
            </summary>
            <param name="app"></param>
            <param name="umbracoContextAccessor"></param>
            <param name="runtimeState"></param>
            <param name="globalSettings"></param>
            <param name="securitySettings"></param>
            <returns></returns>
            <remarks>
            This ensures that during a preview request that the back office use is also Authenticated and that the back office Identity
            is added as a secondary identity to the current IPrincipal so it can be used to Authorize the previewed document.
            </remarks>
            <remarks>
            By default this will be configured to execute on PipelineStage.PostAuthenticate
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.UseUmbracoPreviewAuthentication(Owin.IAppBuilder,Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.IRuntimeState,Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection,Owin.PipelineStage)">
            <summary>
            In order for preview to work this needs to be called
            </summary>
            <param name="app"></param>
            <param name="umbracoContextAccessor"></param>
            <param name="runtimeState"></param>
            <param name="globalSettings"></param>
            <param name="securitySettings"></param>
            <param name="stage"></param>
            <returns></returns>
            <remarks>
            This ensures that during a preview request that the back office use is also Authenticated and that the back office Identity
            is added as a secondary identity to the current IPrincipal so it can be used to Authorize the previewed document.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.UseUmbracoBackOfficeExternalLoginErrors(Owin.IAppBuilder,Owin.PipelineStage)">
            <summary>
            Enable the back office to detect and handle errors registered with external login providers
            </summary>
            <param name="app"></param>
            <param name="stage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.AppBuilderExtensions.CreateUmbracoCookieAuthOptions(Owin.IAppBuilder,Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Core.IRuntimeState,Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection,System.String[])">
            <summary>
            Create the default umb cookie auth options
            </summary>
            <param name="app"></param>
            <param name="umbracoContextAccessor"></param>
            <param name="globalSettings"></param>
            <param name="runtimeState"></param>
            <param name="securitySettings"></param>
            <param name="explicitPaths"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationOptionsExtensions.SetBackOfficeExternalLoginProviderOptions(Microsoft.Owin.Security.AuthenticationOptions,Umbraco.Web.Security.BackOfficeExternalLoginProviderOptions)">
            <summary>
            Used to specify all back office external login options
            </summary>
            <param name="authOptions"></param>
            <param name="externalLoginProviderOptions"></param>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationOptionsExtensions.ForUmbracoBackOffice(Microsoft.Owin.Security.AuthenticationOptions,System.String,System.String,System.String)">
             <summary>
             Configures the properties of the authentication description instance for use with Umbraco back office
             </summary>
             <param name="options"></param>
             <param name="style"></param>
             <param name="icon"></param>
             <param name="callbackPath">
             This is important if the identity provider is to be able to authenticate when upgrading Umbraco. We will try to extract this from
             any options passed in via reflection since none of the default OWIN providers inherit from a base class but so far all of them have a consistent
             name for the 'CallbackPath' property which is of type PathString. So we'll try to extract it if it's not found or supplied.
            
             If a value is extracted or supplied, this will be added to an internal list which the UmbracoModule will use to allow the request to pass
             through without redirecting to the installer.
             </param>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationManagerExtensions.GetAutoLoginProvider(Microsoft.Owin.Security.IAuthenticationManager)">
            <summary>
            Returns the authentication type for the last registered external login (oauth) provider that specifies an auto-login redirect option
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationManagerExtensions.GetExternalLoginInfoAsync(Microsoft.Owin.Security.IAuthenticationManager,System.String,System.String,System.String)">
            <summary>
                Extracts login info out of an external identity
            </summary>
            <param name="manager"></param>
            <param name="authenticationType"></param>
            <param name="xsrfKey">key that will be used to find the userId to verify</param>
            <param name="expectedValue">
                the value expected to be found using the xsrfKey in the AuthenticationResult.Properties
                dictionary
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.AuthenticationManagerExtensions.GetExternalLoginInfoAsync(Microsoft.Owin.Security.IAuthenticationManager,System.String)">
            <summary>
                Extracts login info out of an external identity
            </summary>
            <param name="manager"></param>
            <param name="authenticationType"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Security.BackOfficeCookieManager">
            <summary>
            A custom cookie manager that is used to read the cookie from the request.
            </summary>
            <remarks>
            Umbraco's back office cookie needs to be read on two paths: /umbraco and /install and /base therefore we cannot just set the cookie path to be /umbraco,
            instead we'll specify our own cookie manager and return null if the request isn't for an acceptable path.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeCookieManager.Microsoft#Owin#Infrastructure#ICookieManager#GetRequestCookie(Microsoft.Owin.IOwinContext,System.String)">
            <summary>
            Explicitly implement this so that we filter the request
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.BackOfficeCookieManager.ShouldAuthenticateRequest(Microsoft.Owin.IOwinContext,System.Uri,System.Boolean)">
            <summary>
            Determines if we should authenticate the request
            </summary>
            <param name="owinContext"></param>
            <param name="originalRequestUrl"></param>
            <param name="checkForceAuthTokens"></param>
            <returns></returns>
            <remarks>
            We auth the request when:
            * it is a back office request
            * it is an installer request
            * it is a /base request
            * it is a preview request
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Security.UmbracoBackOfficeCookieAuthOptions">
            <summary>
            Umbraco auth cookie options
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.UmbracoBackOfficeCookieAuthOptions.CreateRequestCookieOptions(Microsoft.Owin.IOwinContext,Microsoft.Owin.Security.AuthenticationTicket)">
            <summary>
            Creates the cookie options for saving the auth cookie
            </summary>
            <param name="ctx"></param>
            <param name="ticket"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Security.MembershipHelper">
            <summary>
            A helper class for handling Members
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.IsProtected(System.String)">
            <summary>
            Check if a document object is protected by the "Protect Pages" functionality in umbraco
            </summary>
            <param name="path">The full path of the document object to check</param>
            <returns>True if the document object is protected</returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.MemberHasAccess(System.String)">
            <summary>
            Check if the current user has access to a document
            </summary>
            <param name="path">The full path of the document object to check</param>
            <returns>True if the current user has access or if the current document isn't protected</returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.MemberHasAccess(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks if the current user has access to the paths
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.HasAccess(System.String,System.Web.Security.RoleProvider)">
            <summary>
            This will check if the member has access to this path
            </summary>
            <param name="path"></param>
            <param name="roleProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.IsUmbracoMembershipProviderActive">
            <summary>
            Returns true if the current membership provider is the Umbraco built-in one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.UpdateMemberProfile(Umbraco.Web.Models.ProfileModel)">
            <summary>
            Updates the currently logged in members profile
            </summary>
            <param name="model"></param>
            <returns>
            The updated MembershipUser object
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.RegisterMember(Umbraco.Web.Models.RegisterModel,System.Web.Security.MembershipCreateStatus@,System.Boolean)">
            <summary>
            Registers a new member
            </summary>
            <param name="model"></param>
            <param name="status"></param>
            <param name="logMemberIn">
            true to log the member in upon successful registration
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.Login(System.String,System.String)">
            <summary>
            A helper method to perform the validation and logging in of a member - this is simply wrapping standard membership provider and asp.net forms auth logic.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.Logout">
            <summary>
            Logs out the current member
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.GetCurrentMember">
            <summary>
            Returns the currently logged in member as IPublishedContent
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.GetCurrentMemberId">
            <summary>
            Returns the currently logged in member id, -1 if they are not logged in
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.GetCurrentMemberProfileModel">
            <summary>
            Creates a new profile model filled in with the current members details if they are logged in which allows for editing
            profile properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.CreateRegistrationModel(System.String)">
            <summary>
            Creates a model to use for registering new members with custom member properties
            </summary>
            <param name="memberTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.GetCurrentUserRoles">
            <summary>
            Gets the current user's roles.
            </summary>
            <remarks>Roles are cached per user name, at request level.</remarks>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.GetUserRoles(System.String)">
            <summary>
            Gets a user's roles.
            </summary>
            <remarks>Roles are cached per user name, at request level.</remarks>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.GetCurrentLoginStatus">
            <summary>
            Returns the login status model of the currently logged in member.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.IsLoggedIn">
            <summary>
            Check if a member is logged in
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Security.MembershipHelper.CurrentUserName">
            <summary>
            Returns the currently logged in username
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.IsMemberAuthorized(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns true or false if the currently logged in member is authorized based on the parameters provided
            </summary>
            <param name="allowTypes"></param>
            <param name="allowGroups"></param>
            <param name="allowMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.ChangePassword(System.String,Umbraco.Web.Models.ChangingPasswordModel,System.String)">
            <summary>
            Changes password for a member/user given the membership provider name and the password change model
            </summary>
            <param name="username"></param>
            <param name="passwordModel"></param>
            <param name="membershipProviderName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.ChangePassword(System.String,Umbraco.Web.Models.ChangingPasswordModel,System.Web.Security.MembershipProvider)">
            <summary>
            Changes password for a member/user given the membership provider and the password change model
            </summary>
            <param name="username"></param>
            <param name="passwordModel"></param>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.UpdateMember(System.Web.Security.MembershipUser,System.Web.Security.MembershipProvider,System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Updates a membership user with all of it's writable properties
            </summary>
            <param name="member"></param>
            <param name="provider"></param>
            <param name="email"></param>
            <param name="isApproved"></param>
            <param name="lastLoginDate"></param>
            <param name="lastActivityDate"></param>
            <param name="comment"></param>
            <returns>
            Returns successful if the membership user required updating, otherwise returns failed if it didn't require updating.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.GetCurrentPersistedMember">
            <summary>
            Returns the currently logged in IMember object - this should never be exposed to the front-end since it's returning a business logic entity!
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Security.Providers.MembersMembershipProvider">
            <summary>
            Custom Membership Provider for Umbraco Members (User authentication for Frontend applications NOT umbraco CMS)
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.Providers.MembersRoleProvider.ApplicationName">
            <summary>
            The name of the application using the custom role provider.
            </summary>
            <value></value>
            <returns>The name of the application using the custom membership provider.</returns>
        </member>
        <member name="T:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2">
            <summary>
            Abstract Membership Provider that users any implementation of IMembershipMemberService{TEntity} service
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.AllowManuallyChangingPassword">
            <summary>
            For backwards compatibility, this provider supports this option by default it is false
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call
            <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider
            has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.PerformChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">This property is ignore for this provider</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.PerformChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.PerformCreateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source with the specified member type
            </summary>
            <param name="memberTypeAlias">A specific member type to create the member for</param>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.DeleteUser(System.String,System.Boolean)">
            <summary>
            Removes a user from the membership data source.
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="deleteAllRelatedData">
            TODO: This setting currently has no effect
            </param>
            <returns>
            true if the user was successfully deleted; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of all the users in the data source in pages of data.
            </summary>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.GetNumberOfUsersOnline">
            <summary>
            Gets the number of users currently accessing the application.
            </summary>
            <returns>
            The number of users currently accessing the application.
            </returns>
            <remarks>
            The way this is done is the same way that it is done in the MS SqlMembershipProvider - We query for any members
            that have their last active date within the Membership.UserIsOnlineTimeWindow (which is in minutes). It isn't exact science
            but that is how MS have made theirs so we'll follow that principal.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.PerformGetPassword(System.String,System.String)">
            <summary>
            Gets the password for the specified user name from the data source.
            </summary>
            <param name="username">The user to retrieve the password for.</param>
            <param name="answer">The password answer for the user.</param>
            <returns>
            The password for the specified user name.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.GetUser(System.String,System.Boolean)">
            <summary>
            Gets information from the data source for a user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="username">The name of the user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.GetUser(System.Object,System.Boolean)">
            <summary>
            Gets information from the data source for a user based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.GetUserNameByEmail(System.String)">
            <summary>
            Gets the user name associated with the specified e-mail address.
            </summary>
            <param name="email">The e-mail address to search for.</param>
            <returns>
            The user name associated with the specified e-mail address. If no match is found, return null.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.PerformResetPassword(System.String,System.String,System.String)">
            <summary>
            Resets a user's password to a new, automatically generated password.
            </summary>
            <param name="username">The user to reset the password for.</param>
            <param name="answer">The password answer for the specified user (not used with Umbraco).</param>
            <param name="generatedPassword"></param>
            <returns>The new password for the specified user.</returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.UnlockUser(System.String)">
            <summary>
            Clears a lock so that the membership user can be validated.
            </summary>
            <param name="username">The membership user to clear the lock status for.</param>
            <returns>
            true if the membership user was successfully unlocked; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Updates e-mail  approved status, lock status and comment on a user.
            </summary>
            <param name="user">A <see cref="T:System.Web.Security.MembershipUser"></see> object that represents the user to update and the updated information for the user.</param>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the specified user name and password exist in the data source.
            </summary>
            <param name="username">The name of the user to validate.</param>
            <param name="password">The password for the specified user.</param>
            <returns>
            true if the specified username and password are valid; otherwise, false.
            </returns>
        </member>
        <member name="T:Umbraco.Web.Security.Providers.UsersMembershipProvider">
            <summary>
            Custom Membership Provider for Umbraco Users (User authentication for Umbraco Backend CMS)
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.Providers.UsersMembershipProvider.EnablePasswordReset">
            <summary>
            Indicates whether the membership provider is configured to allow users to reset their passwords.
            </summary>
            <value></value>
            <returns>true if the membership provider supports password reset; otherwise, false. The default is FALSE for users.</returns>
        </member>
        <member name="P:Umbraco.Web.Security.Providers.UsersMembershipProvider.AllowManuallyChangingPassword">
            <summary>
            For backwards compatibility, this provider supports this option by default it is FALSE for users
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UsersMembershipProvider.PerformUnlockUser(System.String,Umbraco.Core.Models.Membership.IUser@)">
            <summary>
            Overridden in order to call the BackOfficeUserManager.UnlockUser method in order to raise the user audit events
            </summary>
            <param name="username"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UsersMembershipProvider.PerformValidateUser(System.String,System.String)">
            <summary>
            Override in order to raise appropriate events via the <see cref="T:Umbraco.Web.Security.BackOfficeUserManager"/>
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Security.WebSecurity">
            <summary>
            A utility class used for dealing with USER security in Umbraco
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.WebSecurity.CurrentUser">
            <summary>
            Gets the current user.
            </summary>
            <value>The current user.</value>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.PerformLogin(System.Int32)">
            <summary>
            Logs a user in.
            </summary>
            <param name="userId">The user Id</param>
            <returns>returns the number of seconds until their session times out</returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.ClearCurrentLogin">
            <summary>
            Clears the current login for the currently logged in user
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.RenewLoginTimeout">
            <summary>
            Renews the user's login ticket
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.ValidateBackOfficeCredentials(System.String,System.String)">
            <summary>
            Validates credentials for a back office user
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
            <remarks>
            This uses ASP.NET Identity to perform the validation
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.ValidateUserApp(System.String)">
            <summary>
            Validates the current user to see if they have access to the specified app
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.GetUserId">
            <summary>
            Gets the current user's id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.GetSessionId">
            <summary>
            Returns the current user's unique session id - used to mitigate csrf attacks or any other reason to validate a request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.ValidateCurrentUser">
            <summary>
            Validates the currently logged in user and ensures they are not timed out
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.ValidateCurrentUser(System.Boolean,System.Boolean)">
            <summary>
            Validates the current user assigned to the request and ensures the stored user data is valid
            </summary>
            <param name="throwExceptions">set to true if you want exceptions to be thrown if failed</param>
            <param name="requiresApproval">If true requires that the user is approved to be validated</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.AuthorizeRequest(System.Boolean)">
            <summary>
            Authorizes the full request, checks for SSL and validates the current user
            </summary>
            <param name="throwExceptions">set to true if you want exceptions to be thrown if failed</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.UserHasSectionAccess(System.String,Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Checks if the specified user as access to the app
            </summary>
            <param name="section"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.UserHasSectionAccess(System.String,System.String)">
            <summary>
            Checks if the specified user by username as access to the app
            </summary>
            <param name="section"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.IsAuthenticated">
            <summary>
            Ensures that a back office user is logged in
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Services.DashboardService">
            <summary>
            A utility class for determine dashboard security
            </summary>
        </member>
        <member name="M:Umbraco.Web.Services.DashboardService.GetDashboards(System.String,Umbraco.Core.Models.Membership.IUser)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Services.DashboardService.GetDashboards(Umbraco.Core.Models.Membership.IUser)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Services.IconService.GetAllIcons">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Services.IconService.GetIcon(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Services.IconService.GetIcon(System.IO.FileInfo)">
            <summary>
            Gets an IconModel using values from a FileInfo model
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Services.IconService.CreateIconModel(System.String,System.String)">
            <summary>
            Gets an IconModel containing the icon name and SvgString
            </summary>
            <param name="iconName"></param>
            <param name="iconPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Services.IDashboardService.GetDashboards(System.String,Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Gets dashboard for a specific section/application
            For a specific backoffice user
            </summary>
            <param name="section"></param>
            <param name="currentUser"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Services.IDashboardService.GetDashboards(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Gets all dashboards, organized by section, for a user.
            </summary>
            <param name="currentUser"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Services.ITreeService">
            <summary>
            Represents a service which manages section trees.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Services.ITreeService.GetByAlias(System.String)">
            <summary>
            Gets a tree.
            </summary>
            <param name="treeAlias">The tree alias.</param>
        </member>
        <member name="M:Umbraco.Web.Services.ITreeService.GetAll(Umbraco.Web.Trees.TreeUse)">
            <summary>
            Gets all trees.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Services.ITreeService.GetBySection(System.String,Umbraco.Web.Trees.TreeUse)">
            <summary>
            Gets all trees for a section.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Services.ITreeService.GetBySectionGrouped(System.String,Umbraco.Web.Trees.TreeUse)">
            <summary>
            Gets all trees for a section, grouped.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Services.ISectionService.GetSections">
            <summary>
            The cache storage for all applications
            </summary>
        </member>
        <member name="M:Umbraco.Web.Services.ISectionService.GetAllowedSections(System.Int32)">
            <summary>
            Get the user group's allowed sections
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Services.ISectionService.GetByAlias(System.String)">
            <summary>
            Gets the application by its alias.
            </summary>
            <param name="appAlias">The application alias.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Services.SectionService.GetSections">
            <summary>
            The cache storage for all applications
            </summary>
        </member>
        <member name="M:Umbraco.Web.Services.SectionService.GetAllowedSections(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Services.SectionService.GetByAlias(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Services.TreeService">
            <summary>
            Implements <see cref="T:Umbraco.Web.Services.ITreeService"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Services.TreeService.#ctor(Umbraco.Web.Trees.TreeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Services.TreeService"/> class.
            </summary>
            <param name="treeCollection"></param>
        </member>
        <member name="M:Umbraco.Web.Services.TreeService.GetByAlias(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Services.TreeService.GetAll(Umbraco.Web.Trees.TreeUse)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Services.TreeService.GetBySection(System.String,Umbraco.Web.Trees.TreeUse)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Services.TreeService.GetBySectionGrouped(System.String,Umbraco.Web.Trees.TreeUse)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Telemetry.ReportSiteTask.PerformRunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs the background task to send the anonymous ID
            to telemetry service
            </summary>
            <returns>A value indicating whether to repeat the task.</returns>
        </member>
        <member name="T:Umbraco.Web.Templates.HtmlLocalLinkParser">
            <summary>
            Utility class used to parse internal links
            </summary>
        </member>
        <member name="M:Umbraco.Web.Templates.HtmlLocalLinkParser.EnsureInternalLinks(System.String,System.Boolean)">
            <summary>
            Parses the string looking for the {localLink} syntax and updates them to their correct links.
            </summary>
            <param name="text"></param>
            <param name="preview"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Templates.HtmlLocalLinkParser.EnsureInternalLinks(System.String)">
            <summary>
            Parses the string looking for the {localLink} syntax and updates them to their correct links.
            </summary>
            <param name="text"></param>
            <param name="urlProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Templates.HtmlImageSourceParser.FindUdisFromDataAttributes(System.String)">
            <summary>
            Parses out media UDIs from an html string based on 'data-udi' html attributes
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Templates.HtmlImageSourceParser.EnsureImageSources(System.String)">
            <summary>
            Parses the string looking for Umbraco image tags and updates them to their up-to-date image sources.
            </summary>
            <param name="text"></param>
            <returns></returns>
            <remarks>Umbraco image tags are identified by their data-udi attributes</remarks>
        </member>
        <member name="M:Umbraco.Web.Templates.HtmlImageSourceParser.RemoveImageSources(System.String)">
            <summary>
            Removes media URLs from &lt;img&gt; tags where a data-udi attribute is present
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Templates.HtmlUrlParser.EnsureUrls(System.String)">
            <summary>
            The RegEx matches any HTML attribute values that start with a tilde (~), those that match are passed to ResolveUrl to replace the tilde with the application path.
            </summary>
            <param name="text"></param>
            <returns></returns>
            <remarks>
            When used with a Virtual-Directory set-up, this would resolve all URLs correctly.
            The recommendation is that the "ResolveUrlsFromTextString" option (in umbracoSettings.config) is set to false for non-Virtual-Directory installs.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Templates.ITemplateRenderer">
            <summary>
            This is used purely for the RenderTemplate functionality in Umbraco
            </summary>
        </member>
        <member name="T:Umbraco.Web.Templates.TemplateRenderer">
            <summary>
            This is used purely for the RenderTemplate functionality in Umbraco
            </summary>
            <remarks>
            This allows you to render an MVC template based purely off of a node id and an optional alttemplate id as string output.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Templates.TemplateRenderer.RenderUmbracoRequestToString(System.Web.Routing.RequestContext)">
            <summary>
            This will execute the UmbracoMvcHandler for the request specified and get the string output.
            </summary>
            <param name="requestContext">
            Assumes the RequestContext is setup specifically to render an Umbraco view.
            </param>
            <returns></returns>
            <remarks>
            To achieve this we temporarily change the output text writer of the current HttpResponse, then
              execute the controller via the handler which inevitably writes the result to the text writer
              that has been assigned to the response. Then we change the response textwriter back to the original
              before continuing .
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Templates.TemplateRenderer.SaveExistingItems(Umbraco.Web.Routing.PublishedRequest@,System.Object@)">
            <summary>
            Save all items that we know are used for rendering execution to variables so we can restore after rendering
            </summary>
        </member>
        <member name="M:Umbraco.Web.Templates.TemplateRenderer.RestoreItems(Umbraco.Web.Routing.PublishedRequest,System.Object)">
            <summary>
            Restores all items back to their context's to continue normal page rendering execution
            </summary>
        </member>
        <member name="T:Umbraco.Web.UmbracoContextFactory">
            <summary>
            Creates and manages <see cref="T:Umbraco.Web.UmbracoContext"/> instances.
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoContextFactory.#ctor(Umbraco.Web.IUmbracoContextAccessor,Umbraco.Web.PublishedCache.IPublishedSnapshotService,Umbraco.Core.Models.PublishedContent.IVariationContextAccessor,Umbraco.Web.PublishedCache.IDefaultCultureAccessor,Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection,Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Web.Routing.UrlProviderCollection,Umbraco.Web.Routing.MediaUrlProviderCollection,Umbraco.Core.Services.IUserService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.UmbracoContextFactory"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoContextFactory.EnsureUmbracoContext(System.Web.HttpContextBase)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.UmbracoContextReference">
            <summary>
            Represents a reference to an <see cref="P:Umbraco.Web.UmbracoContextReference.UmbracoContext"/> instance.
            </summary>
            <remarks>
            <para>A reference points to an <see cref="P:Umbraco.Web.UmbracoContextReference.UmbracoContext"/> and it may own it (when it
            is a root reference) or just reference it. A reference must be disposed after it has
            been used. Disposing does nothing if the reference is not a root reference. Otherwise,
            it disposes the <see cref="P:Umbraco.Web.UmbracoContextReference.UmbracoContext"/> and clears the
            <see cref="T:Umbraco.Web.IUmbracoContextAccessor"/>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoContextReference.#ctor(Umbraco.Web.UmbracoContext,System.Boolean,Umbraco.Web.IUmbracoContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.UmbracoContextReference"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContextReference.UmbracoContext">
            <summary>
            Gets the <see cref="P:Umbraco.Web.UmbracoContextReference.UmbracoContext"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContextReference.IsRoot">
            <summary>
            Gets a value indicating whether the reference is a root reference.
            </summary>
            <remarks>
            <para></para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoContextReference.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.ViewDataExtensions.FromBase64CookieData``1(System.Web.Mvc.ViewDataDictionary,System.Web.HttpContextBase,System.String)">
            <summary>
            Copies data from a request cookie to view data and then clears the cookie in the response
            </summary>
            <param name="viewData"></param>
            <param name="httpContext"></param>
            <param name="cookieName"></param>
            <returns></returns>
            <remarks>
            <para>
            This is similar to TempData but in some cases we cannot use TempData which relies on the temp data provider and session.
            The cookie value can either be a simple string value
            </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.ViewDataExtensions.GetExternalSignInProviderErrors(System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Used by the back office login screen to get any registered external login provider errors
            </summary>
            <param name="viewData"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.ViewDataExtensions.SetExternalSignInProviderErrors(System.Web.Mvc.ViewDataDictionary,Umbraco.Web.Security.BackOfficeExternalLoginProviderErrors)">
            <summary>
            Used by the back office controller to register any external login provider errors
            </summary>
            <param name="viewData"></param>
            <param name="errors"></param>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.AdminUsersAuthorizeAttribute">
            <summary>
            if the users being edited is an admin then we must ensure that the current user is also an admin
            </summary>
            <remarks>
            This will authorize against one or multiple ids
            </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.HttpQueryStringModelBinder">
            <summary>
            Allows an Action to execute with an arbitrary number of QueryStrings
            </summary>
            <remarks>
            Just like you can POST an arbitrary number of parameters to an Action, you can't GET an arbitrary number
            but this will allow you to do it
            </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.AppendUserModifiedHeaderAttribute">
            <summary>
            Appends a custom response header to notify the UI that the current user data has been modified
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.AppendUserModifiedHeaderAttribute.#ctor">
            <summary>
            An empty constructor which will always set the header
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.AppendUserModifiedHeaderAttribute.#ctor(System.String)">
            <summary>
            A constructor specifying the action parameter name containing the user id to match against the current user and if they match the header will be appended
            </summary>
            <param name="userIdParameter"></param>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.CheckIfUserTicketDataIsStaleAttribute">
            <summary>
            This filter will check if the current Principal/Identity assigned to the request has stale data in it compared
            to what is persisted for the current user and will update the current auth ticket with the correct data if required and output
            a custom response header for the UI to be notified of it.
            </summary>
            <remarks>
            This could/should be created as a filter on the BackOfficeCookieAuthenticationProvider just like the SecurityStampValidator does
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.CheckIfUserTicketDataIsStaleAttribute.ReSync(Umbraco.Core.Models.Membership.IUser,System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            This will update the current request IPrincipal to be correct and re-create the auth ticket
            </summary>
            <param name="user"></param>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.FeatureAuthorizeAttribute">
            <summary>
            Ensures that the controller is an authorized feature.
            </summary>
            <remarks>Else returns unauthorized.</remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.FeatureAuthorizeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.WebApi.Filters.FeatureAuthorizeAttribute"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper">
            <summary>
            A helper class to deal with csrf prevention with angularjs and webapi
            </summary>
        </member>
        <member name="F:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper.CsrfValidationCookieName">
            <summary>
            The cookie name that is used to store the validation value
            </summary>
        </member>
        <member name="F:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper.AngularCookieName">
            <summary>
            The cookie name that is set for angular to use to pass in to the header value for "X-UMB-XSRF-TOKEN"
            </summary>
        </member>
        <member name="F:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper.AngularHeadername">
            <summary>
            The header name that angular uses to pass in the token to validate the cookie
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper.GetTokens(System.String@,System.String@)">
            <summary>
            Returns 2 tokens - one for the cookie value and one that angular should set as the header value
            </summary>
            <param name="cookieToken"></param>
            <param name="headerToken"></param>
            <remarks>
            .Net provides us a way to validate one token with another for added security. With the way angular works, this
            means that we need to set 2 cookies since angular uses one cookie value to create the header value, then we want to validate
            this header value against our original cookie value.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper.ValidateTokens(System.String,System.String)">
            <summary>
            Validates the header token against the validation cookie value
            </summary>
            <param name="cookieToken"></param>
            <param name="headerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper.ValidateHeaders(System.Net.Http.Headers.HttpRequestHeaders,System.String@)">
            <summary>
            Validates the headers/cookies passed in for the request
            </summary>
            <param name="requestHeaders"></param>
            <param name="failedReason"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.AppendCurrentEventMessagesAttribute">
            <summary>
            Automatically checks if any request is a non-GET and if the
            resulting message is INotificationModel in which case it will append any Event Messages
            currently in the request.
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.ClearAngularAntiForgeryTokenAttribute">
            <summary>
            Clears the angular csrf cookie if the request was successful
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.DisableBrowserCacheAttribute">
            <summary>
            Ensures that the request is not cached by the browser
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.EnableOverrideAuthorizationAttribute">
            <summary>
            This allows for Action based auth attributes to override Class based auth attributes if they are specified
            </summary>
            <remarks>
            This attribute can be applied at the class level and will indicate to any class level auth attribute that inherits from OverridableAuthorizationAttribute
            </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.FilterGrouping">
            <summary>
            Quickly split filters into different types
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.OutgoingEditorModelEventAttribute">
            <summary>
            Used to emit outgoing editor model events
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.OverridableAuthorizationAttribute">
            <summary>
            Abstract auth filter class that can be used to enable overriding class auth filters at the action level
            </summary>
            <remarks>
            To enable a class auth filter to be overridden by an action auth filter the EnableOverrideAuthorizationAttribute can be applied
            to the class.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.OverridableAuthorizationAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            If the controller has an EnabledOverrideAuthorizationAttribute attribute specified and the action has any AuthorizeAttribute
            specified then use the action's auth attribute instead of this one
            </summary>
            <param name="actionContext">The context.</param>
            <exception cref="T:System.ArgumentNullException">The context parameter is null.</exception>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.SetAngularAntiForgeryTokensAttribute">
            <summary>
            A filter to set the csrf cookie token based on angular conventions
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.UmbracoWebApiRequireHttpsAttribute">
             <summary>
             If Umbraco.Core.UseHttps property in web.config is set to true, this filter will redirect any http access to https.
             </summary>
             <remarks>
             This will only redirect Head/Get requests, otherwise will respond with text
            
             References:
             http://issues.umbraco.org/issue/U4-8542
             https://blogs.msdn.microsoft.com/carlosfigueira/2012/03/09/implementing-requirehttps-with-asp-net-web-api/
             </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.UmbracoTreeAuthorizeAttribute">
            <summary>
            Ensures that the current user has access to the application for which the specified tree(s) belongs
            </summary>
            <remarks>
            This would allow a tree to be moved between sections
            </remarks>
        </member>
        <member name="F:Umbraco.Web.WebApi.Filters.UmbracoTreeAuthorizeAttribute.Enable">
            <summary>
            Can be used by unit tests to enable/disable this filter
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.UmbracoTreeAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            Constructor to set authorization to be based on a tree alias for which application security will be applied
            </summary>
            <param name="treeAliases">
            If the user has access to the application that the treeAlias is specified in, they will be authorized.
            Multiple trees may be specified.
            </param>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.ValidateAngularAntiForgeryTokenAttribute">
             <summary>
             A filter to check for the csrf token based on Angular's standard approach
             </summary>
             <remarks>
             Code derived from http://ericpanorel.net/2013/07/28/spa-authentication-and-csrf-mvc4-antiforgery-implementation/
            
             If the authentication type is cookie based, then this filter will execute, otherwise it will be disabled
             </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.EnsureUserPermissionForContentAttribute">
             <summary>
             Auth filter to check if the current user has access to the content item (by id).
             </summary>
             <remarks>
            
             This first checks if the user can access this based on their start node, and then checks node permissions
            
             By default the permission that is checked is browse but this can be specified in the ctor.
             NOTE: This cannot be an auth filter because that happens too soon and we don't have access to the action params.
             </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.EnsureUserPermissionForContentAttribute.#ctor(System.Int32)">
            <summary>
            This constructor will only be able to test the start node access
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.EnsureUserPermissionForMediaAttribute">
            <summary>
            Auth filter to check if the current user has access to the content item
            </summary>
            <remarks>
            Since media doesn't have permissions, this simply checks start node access
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.EnsureUserPermissionForMediaAttribute.#ctor(System.Int32)">
            <summary>
            This constructor will only be able to test the start node access
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.FileUploadCleanupFilterAttribute">
            <summary>
            Checks if the parameter is IHaveUploadedFiles and then deletes any temporary saved files from file uploads associated with the request
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.FileUploadCleanupFilterAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor specifies if the filter should analyze the incoming or outgoing model
            </summary>
            <param name="incomingModel"></param>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.FilterAllowedOutgoingContentAttribute">
            <summary>
            This inspects the result of the action that returns a collection of content and removes
            any item that the current user doesn't have access to
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.FilterAllowedOutgoingMediaAttribute">
            <summary>
            This inspects the result of the action that returns a collection of content and removes
            any item that the current user doesn't have access to
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.Filters.FilterAllowedOutgoingMediaAttribute.AllowMultiple">
            <summary>
            Returns true so that other filters can execute along with this one
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.JsonDateTimeFormatAttributeAttribute">
            <summary>
            Sets the json outgoing/serialized datetime format
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.JsonDateTimeFormatAttributeAttribute.#ctor(System.String)">
            <summary>
            Specify a custom format
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.JsonDateTimeFormatAttributeAttribute.#ctor">
            <summary>
            Will use the standard ISO format
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.UmbracoApplicationAuthorizeAttribute">
            <summary>
            Ensures that the current user has access to the specified application
            </summary>
        </member>
        <member name="F:Umbraco.Web.WebApi.Filters.UmbracoApplicationAuthorizeAttribute.Enable">
            <summary>
            Can be used by unit tests to enable/disable this filter
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.UmbracoApplicationAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            Constructor to set any number of applications that the user needs access to be authorized
            </summary>
            <param name="appName">
            If the user has access to any of the specified apps, they will be authorized.
            </param>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.ValidationFilterAttribute">
            <summary>
            An action filter used to do basic validation against the model and return a result
            straight away if it fails.
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.UmbracoUserTimeoutFilterAttribute">
            <summary>
            This will check if the request is authenticated and if there's an auth ticket present we will
            add a custom header to the response indicating how many seconds are remaining for the current
            user's session. This allows us to keep track of a user's session effectively in the back office.
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpActionContextExtensions.GetModelFromMultipartRequest``1(System.Web.Http.Controllers.HttpActionContext,System.Net.Http.MultipartFormDataStreamProvider,System.String,System.String)">
            <summary>
            Helper method to get a model from a multipart request and ensure that the model is validated
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actionContext"></param>
            <param name="result"></param>
            <param name="requestKey"></param>
            <param name="validationKeyPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpActionContextExtensions.ReadAsMultipart(System.Web.Http.Controllers.HttpActionContext,System.String)">
            <summary>
            Helper method to get the <see cref="T:System.Net.Http.MultipartFormDataStreamProvider"/> from the request in a non-async manner
            </summary>
            <param name="actionContext"></param>
            <param name="rootVirtualPath"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebApi.TrimModelBinder">
            <summary>
            A model binder to trim the string
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.ParameterSwapControllerActionSelector">
             <summary>
             This is used to auto-select specific actions on controllers that would otherwise be ambiguous based on a single parameter type
             </summary>
             <remarks>
             As an example, lets say we have 2 methods: GetChildren(int id) and GetChildren(Guid id), by default Web Api won't allow this since
             it won't know what to select, but if this Tuple is passed in new Tuple{string, string}("GetChildren", "id")
            
             This supports POST values too however only for JSON values
             </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.ParameterSwapControllerActionSelector.#ctor(Umbraco.Web.WebApi.ParameterSwapControllerActionSelector.ParameterSwapInfo[])">
            <summary>
            Constructor accepting a list of action name + parameter name
            </summary>
            <param name="actions"></param>
        </member>
        <member name="T:Umbraco.Web.WebApi.EnableDetailedErrorsAttribute">
            <summary>
            Ensures controllers have detailed error messages even when debug mode is off
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.SessionHttpControllerRouteHandler">
            <summary>
            A custom WebApi route handler that enables session on the HttpContext - use with caution!
            </summary>
            <remarks>
            WebApi controllers (and REST in general) shouldn't have session state enabled since it's stateless,
            enabling session state puts additional locks on requests so only use this when absolutely needed
            </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.SessionHttpControllerRouteHandler.SessionHttpControllerHandler">
            <summary>
            A custom WebApi handler that enables session on the HttpContext
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.UnhandedExceptionLoggerConfigurationAttribute">
            <summary>
            Adds our unhandled exception logger to the controller's services
            </summary>
            <remarks>
            Important to note that the <see cref="T:Umbraco.Web.WebApi.UnhandledExceptionLogger"/> will only be called if the controller has an ExceptionFilter applied
            to it, so to kill two birds with one stone, this class inherits from ExceptionFilterAttribute purely to force webapi to use the
            IExceptionLogger (strange)
            </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.UnhandledExceptionLogger">
            <summary>
            Used to log unhandled exceptions in webapi controllers
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.AngularJsonMediaTypeFormatter">
            <summary>
            This will format the JSON output for use with AngularJs's approach to JSON Vulnerability attacks
            </summary>
            <remarks>
            See: http://docs.angularjs.org/api/ng.$http (Security considerations)
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.AngularJsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
            <summary>
            This will prepend the special chars to the stream output that angular will strip
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="writeStream"></param>
            <param name="content"></param>
            <param name="transportContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebApi.AngularJsonOnlyConfigurationAttribute">
            <summary>
            Applying this attribute to any webapi controller will ensure that it only contains one json formatter compatible with the angular json vulnerability prevention.
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpControllerContextExtensions.InvokeAuthorizationFiltersForRequest(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>
            Invokes the authorization filters for the controller action.
            </summary>
            <returns>The response of the first filter returning a result, if any, otherwise null (authorized).</returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpControllerContextExtensions.ExecuteAuthorizationFiltersAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Collections.Generic.IList{System.Web.Http.Filters.IAuthorizationFilter},System.Int32)">
            <summary>
            Executes a chain of filters.
            </summary>
            <remarks>
            Recursively calls in to itself as its continuation for the next filter in the chain.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.IsBackOfficeAttribute">
            <summary>
            When applied to an api controller it will be routed to the /Umbraco/BackOffice prefix route so we can determine if it
            is a back office route or not.
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.GuidNoHyphenConverter">
            <summary>
            A custom converter for GUID's to format without hyphens
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.TryGetOwinContext(System.Net.Http.HttpRequestMessage)">
            <summary>
            Borrowed from the latest Microsoft.AspNet.WebApi.Owin package which we cannot use because of a later webapi dependency
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.TryGetHttpContext(System.Net.Http.HttpRequestMessage)">
            <summary>
            Tries to retrieve the current HttpContext if one exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.CreateUserNoAccessResponse(System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a 403 (Forbidden) response indicating that the current user doesn't have access to the resource
            requested or the action it needs to take.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <remarks>
            This is different from a 401 which indicates that the user is not logged in.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.CreateValidationErrorResponse``1(System.Net.Http.HttpRequestMessage,``0)">
            <summary>
            Create a 400 response message indicating that a validation error occurred
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.CreateValidationErrorResponse(System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a 400 response message indicating that a validation error occurred
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.CreateValidationErrorResponse(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Create a 400 response message indicating that a validation error occurred
            </summary>
            <param name="request"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.CreateNotificationValidationErrorResponse(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Creates an error response with notifications in the result to be displayed in the UI
            </summary>
            <param name="request"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.CreateNotificationSuccessResponse(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Creates a successful response with notifications in the result to be displayed in the UI
            </summary>
            <param name="request"></param>
            <param name="successMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.CreateValidationErrorResponse(System.Net.Http.HttpRequestMessage,System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Create a 400 response message indicating that a validation error occurred
            </summary>
            <param name="request"></param>
            <param name="modelState"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebApi.JsonCamelCaseFormatter">
            <summary>
            Applying this attribute to any webapi controller will ensure that it only contains one json formatter with a camelCase formatter
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.MemberAuthorizeAttribute">
            <summary>
            Attribute for attributing controller actions to restrict them
            to just authenticated members, and optionally of a particular type and/or group
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.MemberAuthorizeAttribute.AllowType">
            <summary>
            Comma delimited list of allowed member types
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.MemberAuthorizeAttribute.AllowGroup">
            <summary>
            Comma delimited list of allowed member groups
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.MemberAuthorizeAttribute.AllowMembers">
            <summary>
            Comma delimited list of allowed members
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.PrefixlessBodyModelValidator">
            <summary>
            By default WebApi always appends a prefix to any ModelState error but we don't want this,
            so this is a custom validator that ensures there is no prefix set.
            </summary>
            <remarks>
            We were already doing this with the content/media/members validation since we had to manually validate because we
            were posting multi-part values. We were always passing in an empty prefix so it worked. However for other editors we
            are validating with normal data annotations (for the most part) and we don't want the prefix there either.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.PrefixlessBodyModelValidatorAttribute">
            <summary>
            Applying this attribute to any webapi controller will ensure that the <see cref="T:System.Web.Http.Validation.IBodyModelValidator"/> is of type <see cref="T:Umbraco.Web.WebApi.PrefixlessBodyModelValidator"/>
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.UmbracoApiController">
            <summary>
            Provides a base class for auto-routed Umbraco API controllers.
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.UmbracoApiControllerBase">
            <summary>
            Provides a base class for Umbraco API controllers.
            </summary>
            <remarks>These controllers are NOT auto-routed.</remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.UmbracoApiControllerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.WebApi.UmbracoApiControllerBase"/> class with auto dependencies.
            </summary>
            <remarks>Dependencies are obtained from the <see cref="T:Umbraco.Core.Composing.Current"/> service locator.</remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.UmbracoApiControllerBase.#ctor(Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Web.IUmbracoContextAccessor,Umbraco.Core.Persistence.ISqlContext,Umbraco.Core.Services.ServiceContext,Umbraco.Core.Cache.AppCaches,Umbraco.Core.Logging.IProfilingLogger,Umbraco.Core.IRuntimeState,Umbraco.Web.UmbracoHelper,Umbraco.Core.Mapping.UmbracoMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.WebApi.UmbracoApiControllerBase"/> class with all its dependencies.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.InstanceId">
            <summary>
            Gets a unique instance identifier.
            </summary>
            <remarks>For debugging purposes.</remarks>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.GlobalSettings">
            <summary>
            Gets the Umbraco context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.UmbracoContext">
            <summary>
            Gets the Umbraco context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.UmbracoContextAccessor">
            <summary>
            Gets the Umbraco context accessor.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.SqlContext">
            <summary>
            Gets the sql context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.Services">
            <summary>
            Gets the services context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.AppCaches">
            <summary>
            Gets the application cache.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.RuntimeState">
            <summary>
            Gets the runtime state.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.ApplicationUrl">
            <summary>
            Gets the application URL.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.Members">
            <summary>
            Gets the membership helper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.Umbraco">
            <summary>
            Gets the Umbraco helper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.Mapper">
            <summary>
            Gets the mapper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerBase.Security">
            <summary>
            Gets the web security helper.
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.UmbracoApiControllerBase.TryGetHttpContext">
            <summary>
            Tries to get the current HttpContext.
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.UmbracoApiControllerBase.TryGetOwinContext">
            <summary>
            Tries to get the current OWIN context.
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.UmbracoAuthorizeAttribute">
            <summary>
            Ensures authorization is successful for a back office user.
            </summary>
        </member>
        <member name="F:Umbraco.Web.WebApi.UmbracoAuthorizeAttribute.Enable">
            <summary>
            Can be used by unit tests to enable/disable this filter
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.UmbracoAuthorizeAttribute.#ctor(Umbraco.Web.UmbracoContext,Umbraco.Core.IRuntimeState)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="umbracoContext"></param>
            <param name="runtimeState"></param>
        </member>
        <member name="T:Umbraco.Web.WebApi.UmbracoAuthorizedApiController">
            <summary>
            Provides a base class for authorized auto-routed Umbraco API controllers.
            </summary>
            <remarks>
            This controller will also append a custom header to the response if the user
            is logged in using forms authentication which indicates the seconds remaining
            before their timeout expires.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoAuthorizedApiController.UserManager">
            <summary>
            Gets the user manager.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Sections.FormsSection">
            <summary>
            Defines the back office media section
            </summary>
        </member>
        <member name="T:Umbraco.Web.Sections.MediaSection">
            <summary>
            Defines the back office media section
            </summary>
        </member>
        <member name="T:Umbraco.Web.Sections.MembersSection">
            <summary>
            Defines the back office members section
            </summary>
        </member>
        <member name="P:Umbraco.Web.Sections.MembersSection.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Sections.MembersSection.Name">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Sections.PackagesSection">
            <summary>
            Defines the back office packages section
            </summary>
        </member>
        <member name="P:Umbraco.Web.Sections.PackagesSection.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Sections.PackagesSection.Name">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Sections.SettingsSection">
            <summary>
            Defines the back office settings section
            </summary>
        </member>
        <member name="P:Umbraco.Web.Sections.SettingsSection.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Sections.SettingsSection.Name">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Sections.TranslationSection">
            <summary>
            Defines the back office translation section
            </summary>
        </member>
        <member name="P:Umbraco.Web.Sections.TranslationSection.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Sections.TranslationSection.Name">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Sections.UsersSection">
            <summary>
            Defines the back office users section
            </summary>
        </member>
        <member name="P:Umbraco.Web.Sections.UsersSection.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Sections.UsersSection.Name">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Sections.ContentSection">
            <summary>
            Defines the back office content section
            </summary>
        </member>
        <member name="P:Umbraco.Web.Sections.ContentSection.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Sections.ContentSection.Name">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Trees.TreeCollectionBuilder">
            <summary>
            Builds a <see cref="T:Umbraco.Web.Trees.TreeCollection"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeCollectionBuilder.AddTree(Umbraco.Web.Trees.Tree)">
            <summary>
            Registers a custom tree definition
            </summary>
            <param name="treeDefinition"></param>
            <remarks>
            This is useful if a developer wishes to have a single tree controller for different tree aliases. In this case the tree controller
            cannot be decorated with the TreeAttribute (since then it will be auto-registered).
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Trees.TreeUse">
            <summary>
            Defines tree uses.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Trees.TreeUse.None">
            <summary>
            The tree is not used.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Trees.TreeUse.Main">
            <summary>
            The tree is used as a main (section) tree.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Trees.TreeUse.Dialog">
            <summary>
            The tree is used as a dialog.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.Tree.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.Tree.SectionAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.Tree.TreeGroup">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.Tree.TreeAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.Tree.TreeTitle">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.Tree.TreeUse">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.Tree.IsSingleNodeTree">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.Tree.TreeControllerType">
            <summary>
            Gets the tree controller type.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.ITree.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:Umbraco.Web.Trees.ITree.SectionAlias">
            <summary>
            Gets the section alias.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.ITree.TreeGroup">
            <summary>
            Gets the tree group.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.ITree.TreeAlias">
            <summary>
            Gets the tree alias.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.ITree.TreeTitle">
            <summary>
            Gets or sets the tree title (fallback if the tree alias isn't localized)
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.ITree.TreeUse">
            <summary>
            Gets the tree use.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.ITree.IsSingleNodeTree">
            <summary>
            Flag to define if this tree is a single node tree (will never contain child nodes, full screen app)
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.LogViewerTreeController.CreateRootNode(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Helper method to create a root model for a tree
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Trees.TreeCollection">
            <summary>
            Represents the collection of section trees.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Trees.ContentBlueprintTreeController">
            <summary>
            The content blueprint tree controller
            </summary>
            <remarks>
            This authorizes based on access to the content section even though it exists in the settings
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.DictionaryTreeController.GetTreeNodes(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            The method called to render the contents of the tree structure
            </summary>
            <param name="id">The id of the tree item</param>
            <param name="queryStrings">
            All of the query string parameters passed from jsTree
            </param>
            <remarks>
            We are allowing an arbitrary number of query strings to be passed in so that developers are able to persist custom data from the front-end
            to the back end to be used in the query for model data.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.DictionaryTreeController.GetMenuForNode(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns the menu structure for the node
            </summary>
            <param name="id">The id of the tree item</param>
            <param name="queryStrings">
            All of the query string parameters passed from jsTree
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.UserTreeController.CreateRootNode(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Helper method to create a root model for a tree
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Trees.TreeAttribute">
            <summary>
            Identifies a section tree.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Trees.TreeAttribute"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeAttribute.SectionAlias">
            <summary>
            Gets the section alias.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeAttribute.TreeAlias">
            <summary>
            Gets the tree alias.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeAttribute.TreeTitle">
            <summary>
            Gets or sets the tree title.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeAttribute.TreeGroup">
            <summary>
            Gets or sets the group of the tree.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeAttribute.TreeUse">
            <summary>
            Gets the usage of the tree.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeAttribute.SortOrder">
            <summary>
            Gets or sets the tree sort order.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeAttribute.IsSingleNodeTree">
            <summary>
            Gets or sets a value indicating whether the tree is a single-node tree (no child nodes, full screen app).
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.PackagesTreeController.CreateRootNode(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Helper method to create a root model for a tree
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Trees.CoreTreeAttribute">
            <summary>
            Indicates that a tree is a core tree and should not be treated as a plugin tree.
            </summary>
            <remarks>
            This ensures that umbraco will look in the umbraco folders for views for this tree.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.DataTypeTreeController.GetNonDeletableSystemDataTypeIds">
            <summary>
            Get all integer identifiers for the non-deletable system datatypes.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.DataTypeTreeController.GetNonDeletableSystemListViewDataTypeIds">
            <summary>
            Get all integer identifiers for the non-deletable system listviews.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.FileSystemTreeController.OnRenderFileNode(Umbraco.Web.Models.Trees.TreeNode@)">
            <summary>
            Inheritors can override this method to modify the file node that is created.
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:Umbraco.Web.Trees.FileSystemTreeController.OnRenderFolderNode(Umbraco.Web.Models.Trees.TreeNode@)">
            <summary>
            Inheritors can override this method to modify the folder node that is created.
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:Umbraco.Web.Trees.LanguageTreeController.CreateRootNode(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Helper method to create a root model for a tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.MemberTreeController.GetTreeNode(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Gets an individual tree node
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Trees.MenuRenderingEventArgs.NodeId">
            <summary>
            The tree node id that the menu is rendering for
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.MenuRenderingEventArgs.Menu">
            <summary>
            The menu being rendered
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.TemplatesTreeController.GetTreeNodes(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            The method called to render the contents of the tree structure
            </summary>
            <param name="id"></param>
            <param name="queryStrings">
            All of the query string parameters passed from jsTree
            </param>
            <remarks>
            We are allowing an arbitrary number of query strings to be pased in so that developers are able to persist custom data from the front-end
            to the back end to be used in the query for model data.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.TemplatesTreeController.GetMenuForNode(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns the menu structure for the node
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Trees.TreeControllerBase">
            <summary>
            A base controller reference for non-attributed trees (un-registered).
            </summary>
            <remarks>
            Developers should generally inherit from TreeController.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.GetTreeNodes(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            The method called to render the contents of the tree structure
            </summary>
            <param name="id"></param>
            <param name="queryStrings">
            All of the query string parameters passed from jsTree
            </param>
            <remarks>
            We are allowing an arbitrary number of query strings to be passed in so that developers are able to persist custom data from the front-end
            to the back end to be used in the query for model data.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.GetMenuForNode(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns the menu structure for the node
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeControllerBase.RootNodeDisplayName">
            <summary>
            The name to display on the root node
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeControllerBase.TreeGroup">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeControllerBase.TreeAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeControllerBase.TreeTitle">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeControllerBase.TreeUse">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeControllerBase.SectionAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeControllerBase.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeControllerBase.IsSingleNodeTree">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.GetRootNode(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns the root node for the tree
            </summary>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.GetNodes(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            The action called to render the contents of the tree structure
            </summary>
            <param name="id"></param>
            <param name="queryStrings">
            All of the query string parameters passed from jsTree
            </param>
            <returns>JSON markup for jsTree</returns>
            <remarks>
            We are allowing an arbitrary number of query strings to be passed in so that developers are able to persist custom data from the front-end
            to the back end to be used in the query for model data.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.GetMenu(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            The action called to render the menu for a tree node
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateRootNode(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Helper method to create a root model for a tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(System.String,System.String,System.Net.Http.Formatting.FormDataCollection,System.String)">
            <summary>
            Helper method to create tree nodes
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(System.String,System.String,System.Net.Http.Formatting.FormDataCollection,System.String,System.String)">
            <summary>
            Helper method to create tree nodes
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(System.String,System.String,System.Net.Http.Formatting.FormDataCollection,System.String,System.String,System.String)">
            <summary>
            Helper method to create tree nodes
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="routePath"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(Umbraco.Core.Models.Entities.IEntitySlim,System.Guid,System.String,System.Net.Http.Formatting.FormDataCollection,System.Boolean)">
            <summary>
            Helper method to create tree nodes and automatically generate the json URL + UDI
            </summary>
            <param name="entity"></param>
            <param name="entityObjectType"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="hasChildren"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(Umbraco.Core.Models.Entities.IUmbracoEntity,System.Guid,System.String,System.Net.Http.Formatting.FormDataCollection,System.String,System.Boolean)">
            <summary>
            Helper method to create tree nodes and automatically generate the json URL + UDI
            </summary>
            <param name="entity"></param>
            <param name="entityObjectType"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="icon"></param>
            <param name="hasChildren"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(System.String,System.String,System.Net.Http.Formatting.FormDataCollection,System.String,System.String,System.Boolean)">
            <summary>
            Helper method to create tree nodes and automatically generate the json URL
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="icon"></param>
            <param name="hasChildren"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(System.String,System.String,System.Net.Http.Formatting.FormDataCollection,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Helper method to create tree nodes and automatically generate the json URL
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="routePath"></param>
            <param name="hasChildren"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(System.String,System.String,System.Net.Http.Formatting.FormDataCollection,System.String,System.String,System.Boolean,System.String,Umbraco.Core.Udi)">
            <summary>
            Helper method to create tree nodes and automatically generate the json URL + UDI
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="routePath"></param>
            <param name="hasChildren"></param>
            <param name="icon"></param>
            <param name="udi"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.AddQueryStringsToAdditionalData(Umbraco.Web.Models.Trees.TreeNode,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            The AdditionalData of a node is always populated with the query string data, this method performs this
            operation and ensures that special values are not inserted or that duplicate keys are not added.
            </summary>
            <param name="node"></param>
            <param name="queryStrings"></param>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.IsDialog(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            If the request is for a dialog mode tree
            </summary>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="E:Umbraco.Web.Trees.TreeControllerBase.TreeNodesRendering">
            <summary>
            An event that allows developers to modify the tree node collection that is being rendered
            </summary>
            <remarks>
            Developers can add/remove/replace/insert/update/etc... any of the tree items in the collection.
            </remarks>
        </member>
        <member name="E:Umbraco.Web.Trees.TreeControllerBase.RootNodeRendering">
            <summary>
            An event that allows developer to modify the root tree node that is being rendered
            </summary>
        </member>
        <member name="E:Umbraco.Web.Trees.TreeControllerBase.MenuRendering">
            <summary>
            An event that allows developers to modify the menu that is being rendered
            </summary>
            <remarks>
            Developers can add/remove/replace/insert/update/etc... any of the tree items in the collection.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.MediaTreeController.GetSingleTreeNode(Umbraco.Core.Models.Entities.IEntitySlim,System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Creates a tree node for a content item based on an UmbracoEntity
            </summary>
            <param name="e"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.MediaTreeController.HasPathAccess(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns true or false if the current user has access to the node based on the user's allowed start node (path) access
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Trees.ActionUrlMethod">
            <summary>
            Specifies the action to take for a menu item when a URL is specified
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.GetTreeNode(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Gets an individual tree node
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.CreateRootNode(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Ensure the noAccess metadata is applied for the root node if in dialog mode and the user doesn't have path access to it
            </summary>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.GetSingleTreeNodeWithAccessCheck(Umbraco.Core.Models.Entities.IEntitySlim,System.String,System.Net.Http.Formatting.FormDataCollection,System.Int32[],System.String[])">
            <summary>
            Returns a <see cref="T:Umbraco.Web.Models.Trees.TreeNode"/> for the <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/> and
            attaches some meta data to the node if the user doesn't have start node access to it when in dialog mode
            </summary>
            <param name="e"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Trees.ContentTreeControllerBase.RecycleBinId">
            <summary>
            Returns the
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.ContentTreeControllerBase.RecycleBinSmells">
            <summary>
            Returns true if the recycle bin has items in it
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.ContentTreeControllerBase.UserStartNodes">
            <summary>
            Returns the user's start node for this tree
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.HasPathAccess(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns true or false if the current user has access to the node based on the user's allowed start node (path) access
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.HasPathAccess(Umbraco.Core.Models.Entities.IUmbracoEntity,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns true or false if the current user has access to the node based on the user's allowed start node (path) access
            </summary>
            <param name="entity"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.GetTreeNodes(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Ensures the recycle bin is appended when required (i.e. user has access to the root and it's not in dialog mode)
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
            <remarks>
            This method is overwritten strictly to render the recycle bin, it should serve no other purpose
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.ShouldRenderChildrenOfContainer(Umbraco.Core.Models.Entities.IEntitySlim)">
            <summary>
            Check to see if we should return children of a container node
            </summary>
            <param name="e"></param>
            <returns></returns>
            <remarks>
            This is required in case a user has custom start nodes that are children of a list view since in that case we'll need to render the tree node. In normal cases we don't render
            children of a list view.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.GetTreeNodesInternal(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Before we make a call to get the tree nodes we have to check if they can actually be rendered
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
            <remarks>
            Currently this just checks if it is a container type, if it is we cannot render children. In the future this might check for other things.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.GetMenuForNode(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Checks if the menu requested is for the recycle bin and renders that, otherwise renders the result of PerformGetMenuForNode
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.FilterUserAllowedMenuItems(Umbraco.Web.Models.Trees.MenuItemCollection,System.Collections.Generic.IEnumerable{Umbraco.Web.Models.Trees.MenuItem})">
            <summary>
            Based on the allowed actions, this will filter the ones that the current user is allowed
            </summary>
            <param name="menuWithAllItems"></param>
            <param name="userAllowedMenuItems"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.CanUserAccessNode(Umbraco.Core.Models.Entities.IUmbracoEntity,System.Collections.Generic.IEnumerable{Umbraco.Web.Models.Trees.MenuItem},System.String)">
            <summary>
            Determines if the user has access to view the node/document
            </summary>
            <param name="doc">The Document to check permissions against</param>
            <param name="allowedUserOptions">A list of MenuItems that the user has permissions to execute on the current document</param>
            <remarks>By default the user must have Browse permissions to see the node in the Content tree</remarks>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.GetIdentifierFromString(System.String)">
            <summary>
            this will parse the string into either a GUID or INT
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.GetEntityFromId(System.String)">
            <summary>
            Get an entity via an id that can be either an integer, Guid or UDI
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            This object has it's own contextual cache for these lookups
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.IgnoreUserStartNodes(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            If the request should allows a user to choose nodes that they normally don't have access to
            </summary>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Trees.ISearchableTree.TreeAlias">
            <summary>
            The alias of the tree that the <see cref="T:Umbraco.Web.Trees.ISearchableTree"/> belongs to
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.ISearchableTree.Search(System.String,System.Int32,System.Int64,System.Int64@,System.String)">
            <summary>
            Searches for results based on the entity type
            </summary>
            <param name="query"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalFound"></param>
            <param name="searchFrom">
                A starting point for the search, generally a node id, but for members this is a member type alias
            </param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Trees.TreeController">
            <summary>
            The base controller for all tree requests
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeController.RootNodeDisplayName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeController.TreeGroup">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeController.TreeAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeController.TreeTitle">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeController.TreeUse">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeController.SectionAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeController.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.Trees.TreeController.IsSingleNodeTree">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.Trees.TreeQueryStringParameters">
            <summary>
            Common query string parameters used for tree query strings
            </summary>
        </member>
        <member name="T:Umbraco.Web.Trees.ApplicationTreeController">
            <summary>
            Used to return tree root nodes
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.ApplicationTreeController.GetApplicationTrees(System.String,System.String,System.Net.Http.Formatting.FormDataCollection,Umbraco.Web.Trees.TreeUse)">
            <summary>
            Returns the tree nodes for an application
            </summary>
            <param name="application">The application to load tree for</param>
            <param name="tree">An optional single tree alias, if specified will only load the single tree for the request app</param>
            <param name="queryStrings"></param>
            <param name="use">Tree use.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ApplicationTreeController.TryGetRootNode(Umbraco.Web.Trees.Tree,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Tries to get the root node of a tree.
            </summary>
            <remarks>
            <para>Returns null if the root node could not be obtained due to an HttpResponseException,
            which probably indicates that the user isn't authorized to view that tree.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.ApplicationTreeController.GetTreeRootNode(Umbraco.Web.Trees.Tree,System.Int32,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Get the tree root node of a tree.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.ApplicationTreeController.GetRootNode(Umbraco.Web.Trees.Tree,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Gets the root node of a tree.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.ApplicationTreeController.GetChildren(Umbraco.Web.Trees.Tree,System.Int32,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Get the child nodes of a tree node.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.ApplicationTreeController.GetApiControllerProxy(System.Type,System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Gets a proxy to a controller for a specified action.
            </summary>
            <param name="controllerType">The type of the controller.</param>
            <param name="action">The action.</param>
            <param name="querystring">The querystring.</param>
            <returns>An instance of the controller.</returns>
            <remarks>
            <para>Creates an instance of the <paramref name="controllerType"/> and initializes it with a route
            and context etc. so it can execute the specified <paramref name="action"/>. Runs the authorization
            filters for that action, to ensure that the user has permission to execute it.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeController.GetSingleTreeNode(Umbraco.Core.Models.Entities.IEntitySlim,System.String,System.Net.Http.Formatting.FormDataCollection)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeController.HasPathAccess(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns true or false if the current user has access to the node based on the user's allowed start node (path) access
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeController.GetAllNodeMenuItems(Umbraco.Core.Models.Entities.IUmbracoEntity)">
            <summary>
            Returns a collection of all menu items that can be on a content node
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeController.GetNodeMenuItemsForDeletedContent(Umbraco.Core.Models.Entities.IUmbracoEntity)">
            <summary>
            Returns a collection of all menu items that can be on a deleted (in recycle bin) content node
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeController.EnsureName(Umbraco.Core.Models.Entities.IEntitySlim,System.String)">
            <summary>
            set name according to variations
            </summary>
            <param name="entity"></param>
            <param name="culture"></param>
        </member>
        <member name="T:Umbraco.Web.Trees.PartialViewMacrosTreeController">
            <summary>
            Tree for displaying partial view macros in the developer app
            </summary>
        </member>
        <member name="T:Umbraco.Web.Trees.PartialViewsTreeController">
            <summary>
            Tree for displaying partial views in the settings app
            </summary>
        </member>
        <member name="T:Umbraco.Web.Runtime.WebRuntime">
            <summary>
            Represents the Web Umbraco runtime.
            </summary>
            <remarks>On top of CoreRuntime, handles all of the web-related runtime aspects of Umbraco.</remarks>
        </member>
        <member name="M:Umbraco.Web.Runtime.WebRuntime.#ctor(Umbraco.Web.UmbracoApplicationBase,Umbraco.Core.Logging.ILogger,Umbraco.Core.IMainDom)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Runtime.WebRuntime"/> class.
            </summary>
            <param name="umbracoApplication"></param>
        </member>
        <member name="M:Umbraco.Web.Runtime.WebRuntime.Boot(Umbraco.Core.Composing.IRegister)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Web.WebCompositionExtensions">
            <summary>
            Provides extension methods to the <see cref="T:Umbraco.Core.Composing.Composition"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.Actions(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the actions collection builder.
            </summary>
            <param name="composition">The composition.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.ContentApps(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the content apps collection builder.
            </summary>
            <param name="composition">The composition.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.ContentFinders(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the content finders collection builder.
            </summary>
            <param name="composition">The composition.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.EditorValidators(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the editor validators collection builder.
            </summary>
            <param name="composition">The composition.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.FilteredControllerFactory(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the filtered controller factories collection builder.
            </summary>
            <param name="composition">The composition.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.HealthChecks(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the health checks collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.TourFilters(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the TourFilters collection builder.
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.UrlProviders(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the URL providers collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.MediaUrlProviders(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the media URL providers collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.Sections(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the backoffice sections/applications collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.Dashboards(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the backoffice dashboards collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.OEmbedProviders(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the backoffice OEmbed Providers collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.Trees(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the back office tree collection builder
            </summary>
            <param name="composition"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.SearchableTrees(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the back office searchable tree collection builder
            </summary>
            <param name="composition"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.SetContentLastChanceFinder``1(Umbraco.Core.Composing.Composition)">
            <summary>
            Sets the content last chance finder.
            </summary>
            <typeparam name="T">The type of the content last chance finder.</typeparam>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.SetContentLastChanceFinder(Umbraco.Core.Composing.Composition,System.Func{Umbraco.Core.Composing.IFactory,Umbraco.Web.Routing.IContentLastChanceFinder})">
            <summary>
            Sets the content last chance finder.
            </summary>
            <param name="composition">The composition.</param>
            <param name="factory">A function creating a last chance finder.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.SetContentLastChanceFinder(Umbraco.Core.Composing.Composition,Umbraco.Web.Routing.IContentLastChanceFinder)">
            <summary>
            Sets the content last chance finder.
            </summary>
            <param name="composition">The composition.</param>
            <param name="finder">A last chance finder.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.SetPublishedSnapshotService``1(Umbraco.Core.Composing.Composition)">
            <summary>
            Sets the published snapshot service.
            </summary>
            <typeparam name="T">The type of the published snapshot service.</typeparam>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.SetPublishedSnapshotService(Umbraco.Core.Composing.Composition,System.Func{Umbraco.Core.Composing.IFactory,Umbraco.Web.PublishedCache.IPublishedSnapshotService})">
            <summary>
            Sets the published snapshot service.
            </summary>
            <param name="composition">The composition.</param>
            <param name="factory">A function creating a published snapshot service.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.SetPublishedSnapshotService(Umbraco.Core.Composing.Composition,Umbraco.Web.PublishedCache.IPublishedSnapshotService)">
            <summary>
            Sets the published snapshot service.
            </summary>
            <param name="composition">The composition.</param>
            <param name="service">A published snapshot service.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.SetSiteDomainHelper``1(Umbraco.Core.Composing.Composition)">
            <summary>
            Sets the site domain helper.
            </summary>
            <typeparam name="T">The type of the site domain helper.</typeparam>
            <param name="composition"></param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.SetSiteDomainHelper(Umbraco.Core.Composing.Composition,System.Func{Umbraco.Core.Composing.IFactory,Umbraco.Web.Routing.ISiteDomainHelper})">
            <summary>
            Sets the site domain helper.
            </summary>
            <param name="composition">The composition.</param>
            <param name="factory">A function creating a helper.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.SetSiteDomainHelper(Umbraco.Core.Composing.Composition,Umbraco.Web.Routing.ISiteDomainHelper)">
            <summary>
            Sets the site domain helper.
            </summary>
            <param name="composition">The composition.</param>
            <param name="helper">A helper.</param>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.SetDefaultRenderMvcController``1(Umbraco.Core.Composing.Composition)">
            <summary>
            Sets the default controller for rendering template views.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="composition">The composition.</param>
            <remarks>The controller type is registered to the container by the composition.</remarks>
        </member>
        <member name="M:Umbraco.Web.WebCompositionExtensions.SetDefaultRenderMvcController(Umbraco.Core.Composing.Composition,System.Type)">
            <summary>
            Sets the default controller for rendering template views.
            </summary>
            <param name="composition">The composition.</param>
            <param name="controllerType">The type of the controller.</param>
            <remarks>The controller type is registered to the container by the composition.</remarks>
        </member>
        <member name="T:Umbraco.Web.ImageProcessorLogger">
            <summary>
            A logger for explicitly logging ImageProcessor exceptions.
            <remarks>
            Creating this logger is enough for ImageProcessor to find and replace its in-built debug logger
            without any additional configuration required. This class currently has to be public in order
            to do so.
            </remarks>
            </summary>
        </member>
        <member name="M:Umbraco.Web.ImageProcessorLogger.Log``1(System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message as an error.
            </summary>
            <typeparam name="T">The type calling the logger.</typeparam>
            <param name="text">The message to log.</param>
            <param name="callerName">The property or method name calling the log.</param>
            <param name="lineNumber">The line number where the method is called.</param>
        </member>
        <member name="M:Umbraco.Web.ImageProcessorLogger.Log(System.Type,System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message as an error.
            </summary>
            <param name="type">The type calling the logger.</param>
            <param name="text">The message to log.</param>
            <param name="callerName">The property or method name calling the log.</param>
            <param name="lineNumber">The line number where the method is called.</param>
        </member>
        <member name="M:Umbraco.Web.OwinExtensions.SetExternalLoginProviderErrors(Microsoft.Owin.IOwinContext,Umbraco.Web.Security.BackOfficeExternalLoginProviderErrors)">
            <summary>
            Used by external login providers to set any errors that occur during the OAuth negotiation
            </summary>
            <param name="owinContext"></param>
            <param name="errors"></param>
        </member>
        <member name="M:Umbraco.Web.OwinExtensions.GetExternalLoginProviderErrors(Microsoft.Owin.IOwinContext)">
            <summary>
            Retrieve any errors set by external login providers during OAuth negotiation
            </summary>
            <param name="owinContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.OwinExtensions.GetUmbracoAuthTicketDataProtector(Microsoft.Owin.IOwinContext)">
            <summary>
            Gets the <see cref="T:Microsoft.Owin.Security.ISecureDataFormat`1"/> for the Umbraco back office cookie
            </summary>
            <param name="owinContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.OwinExtensions.TryGetHttpContext(Microsoft.Owin.IOwinContext)">
            <summary>
            Nasty little hack to get HttpContextBase from an owin context
            </summary>
            <param name="owinContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.OwinExtensions.GetBackOfficeSignInManager(Microsoft.Owin.IOwinContext)">
            <summary>
            Gets the back office sign in manager out of OWIN
            </summary>
            <param name="owinContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.OwinExtensions.GetBackOfficeUserManager(Microsoft.Owin.IOwinContext)">
            <summary>
            Gets the back office user manager out of OWIN
            </summary>
            <param name="owinContext"></param>
            <returns></returns>
            <remarks>
            This is required because to extract the user manager we need to user a custom service since owin only deals in generics and
            developers could register their own user manager types
            </remarks>
        </member>
        <member name="T:Umbraco.Web.JavaScript.ClientDependencyConfiguration">
            <summary>
            A utility class for working with CDF config and cache files - use sparingly!
            </summary>
        </member>
        <member name="M:Umbraco.Web.JavaScript.ClientDependencyConfiguration.UpdateVersionNumber(Semver.SemVersion,System.DateTime,System.String)">
            <summary>
            Changes the version number in ClientDependency.config to a hashed value for the version and the DateTime.Day
            </summary>
            <param name="version">The <see cref="T:Semver.SemVersion">version</see> of Umbraco we're upgrading to</param>
            <param name="date">A <see cref="T:System.DateTime">date</see> value to use in the hash to prevent this method from updating the version on each startup</param>
            <param name="dateFormat">Allows the developer to specify the <see cref="T:System.String">date precision</see> for the hash (i.e. "yyyyMMdd" would be a precision for the day)</param>
            <returns>Boolean to indicate successful update of the ClientDependency.config file</returns>
        </member>
        <member name="M:Umbraco.Web.JavaScript.ClientDependencyConfiguration.ClearTempFiles(System.Web.HttpContextBase)">
            <summary>
            Clears the temporary files stored for the ClientDependency folder
            </summary>
            <param name="currentHttpContext"></param>
        </member>
        <member name="T:Umbraco.Web.JavaScript.UmbracoClientDependencyLoader">
            <summary>
            Used to load in all client dependencies for Umbraco.
            Ensures that both UmbracoClient and UmbracoRoot paths are added to the loader.
            </summary>
        </member>
        <member name="M:Umbraco.Web.JavaScript.UmbracoClientDependencyLoader.#ctor">
            <summary>
            Set the defaults
            </summary>
        </member>
        <member name="M:Umbraco.Web.JavaScript.CssInitialization.GetStylesheetInitialization(System.Web.HttpContextBase)">
            <summary>
            Processes all found manifest files, and outputs css inject calls for all css files found in all manifests.
            </summary>
        </member>
        <member name="T:Umbraco.Web.JavaScript.DependencyPathRenderer">
            <summary>
            A custom renderer that only outputs a dependency path instead of script tags - for use with the js loader with yepnope
            </summary>
        </member>
        <member name="F:Umbraco.Web.JavaScript.DependencyPathRenderer.Delimiter">
            <summary>
            Used to delimit each dependency so we can split later
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Web.JavaScript.DependencyPathRenderer.RegisterDependencies(System.Collections.Generic.List{ClientDependency.Core.IClientDependencyFile},System.Collections.Generic.HashSet{ClientDependency.Core.IClientDependencyPath},System.String@,System.String@,System.Web.HttpContextBase)" -->
        <member name="T:Umbraco.Web.JavaScript.JsInitialization">
            <summary>
            Reads from all defined manifests and ensures that any of their initialization is output with the
            main Umbraco initialization output.
            </summary>
        </member>
        <member name="M:Umbraco.Web.JavaScript.JsInitialization.GetJavascriptInitialization(System.Web.HttpContextBase,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Gets the JS initialization script to boot the back office application
            </summary>
            <param name="httpContext"></param>
            <param name="scripts"></param>
            <param name="angularModule">
            The angular module name to boot
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.JavaScript.JsInitialization.OptimizeBackOfficeScriptFiles(System.Web.HttpContextBase,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a list of optimized script paths for the back office
            </summary>
            <param name="httpContext"></param>
            <param name="umbracoInit"></param>
            <param name="additionalJsFiles"></param>
            <returns>
            Cache busted/optimized script paths for the back office including manifest and property editor scripts
            </returns>
            <remarks>
            Used to cache bust and optimize script paths for the back office
            </remarks>
        </member>
        <member name="M:Umbraco.Web.JavaScript.JsInitialization.OptimizeScriptFiles(System.Web.HttpContextBase,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a list of optimized script paths
            </summary>
            <param name="httpContext"></param>
            <param name="scriptFiles"></param>
            <returns></returns>
            <remarks>
            Used to cache bust and optimize script paths
            </remarks>
        </member>
        <member name="M:Umbraco.Web.JavaScript.JsInitialization.GetDefaultInitialization">
            <summary>
            Returns the default config as a JArray
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.JavaScript.JsInitialization.GetPreviewInitialization">
            <summary>
            Returns the default config as a JArray
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.JavaScript.JsInitialization.WriteScript(System.String,System.String,System.String)">
            <summary>
            Parses the JsResources.Main and replaces the replacement tokens accordingly.
            </summary>
            <param name="replacements"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.JavaScript.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Umbraco.Web.JavaScript.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.JavaScript.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.JavaScript.Resources.JsInitialize">
             <summary>
               Looks up a localized string similar to [
                &apos;lib/jquery/jquery.min.js&apos;,
                &apos;lib/jquery-ui/jquery-ui.min.js&apos;,
                &apos;lib/jquery-ui-touch-punch/jquery.ui.touch-punch.min.js&apos;,
            
                &apos;lib/angular/angular.js&apos;,
                &apos;lib/underscore/underscore-min.js&apos;,
            
                &apos;lib/moment/moment.min.js&apos;,
                &apos;lib/flatpickr/flatpickr.js&apos;,
            
                &apos;lib/animejs/anime.min.js&apos;,
            
                &apos;lib/angular-route/angular-route.js&apos;,
                &apos;lib/angular-cookies/angular-cookies.js&apos;,
                &apos;lib/angular-touch/angular-touch.js&apos;,
                &apos;lib/angular-sanitize/angular-sanitize.js&apos;,
                &apos;lib/an [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Umbraco.Web.JavaScript.Resources.Main">
             <summary>
               Looks up a localized string similar to LazyLoad.js(&quot;##JsInitialize##&quot;, function () {
                //we need to set the legacy UmbClientMgr path
                if ((typeof UmbClientMgr) !== &quot;undefined&quot;) {
                    UmbClientMgr.setUmbracoPath(&apos;&quot;##UmbracoPath##&quot;&apos;);
                }
            
                jQuery(document).ready(function () {
            
                    angular.bootstrap(document, [&apos;&quot;##AngularModule##&quot;&apos;]);
            
                });
            });
            .
             </summary>
        </member>
        <member name="P:Umbraco.Web.JavaScript.Resources.PreviewInitialize">
             <summary>
               Looks up a localized string similar to [
                &apos;../lib/jquery/jquery.min.js&apos;,
                &apos;../lib/angular/angular.js&apos;,
                &apos;../lib/underscore/underscore-min.js&apos;,
                &apos;../lib/umbraco/Extensions.js&apos;,
                &apos;../js/app.js&apos;,
                &apos;../js/umbraco.resources.js&apos;,
                &apos;../js/umbraco.services.js&apos;,
                &apos;../js/umbraco.interceptors.js&apos;,
                &apos;../ServerVariables&apos;,
                &apos;../lib/signalr/jquery.signalR.js&apos;,
                &apos;../BackOffice/signalr/hubs&apos;,
                &apos;../js/umbraco.preview.js&apos;
            ]
            .
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Umbraco.Web.JavaScript.Resources.ServerVariables" -->
        <member name="P:Umbraco.Web.JavaScript.Resources.TinyMceInitialize">
             <summary>
               Looks up a localized string similar to [
                &apos;../lib/tinymce/tinymce.min.js&apos;,
            ]
            .
             </summary>
        </member>
        <member name="E:Umbraco.Web.JavaScript.ServerVariablesParser.Parsing">
            <summary>
            Allows developers to add custom variables on parsing
            </summary>
        </member>
        <member name="T:Umbraco.Web.UmbracoApplicationBase">
            <summary>
            Provides an abstract base class for the Umbraco HttpApplication.
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoApplicationBase.GetRuntime">
            <summary>
            Gets a runtime.
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoApplicationBase.GetRegister">
            <summary>
            Gets the application register.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Features.DisabledFeatures">
            <summary>
            Represents disabled features.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Features.DisabledFeatures.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Features.DisabledFeatures"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Features.DisabledFeatures.Controllers">
            <summary>
            Gets the disabled controllers.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Features.DisabledFeatures.DisableDevicePreview">
            <summary>
            Disables the device preview feature of previewing.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Features.DisabledFeatures.DisableTemplates">
            <summary>
            If true, all references to templates will be removed in the back office and routing
            </summary>
        </member>
        <member name="T:Umbraco.Web.Features.EnabledFeatures">
            <summary>
            Represents enabled features.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Features.EnabledFeatures.PreviewExtendedView">
            <summary>
            This allows us to inject a razor view into the Umbraco preview view to extend it
            </summary>
            <remarks>
            This is set to a virtual path of a razor view file
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Features.UmbracoFeatures">
            <summary>
            Represents the Umbraco features.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Features.UmbracoFeatures.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Umbraco.Web.Features.UmbracoFeatures"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Features.UmbracoFeatures.Disabled">
            <summary>
            Gets the disabled features.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Features.UmbracoFeatures.Enabled">
            <summary>
            Gets the enabled features.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Features.UmbracoFeatures.IsControllerEnabled(System.Type)">
            <summary>
            Determines whether a controller is enabled.
            </summary>
        </member>
        <member name="T:Umbraco.Web.HybridAccessorBase`1">
            <summary>
            Provides a base class for hybrid accessors.
            </summary>
            <typeparam name="T">The type of the accessed object.</typeparam>
            <remarks>
            <para>Hybrid accessors store the accessed object in HttpContext if they can,
            otherwise they rely on the logical call context, to maintain an ambient
            object that flows with async.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.HybridUmbracoContextAccessor">
            <summary>
            Implements a hybrid <see cref="T:Umbraco.Web.IUmbracoContextAccessor"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.HybridUmbracoContextAccessor.#ctor(Umbraco.Web.IHttpContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.HybridUmbracoContextAccessor"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.HybridUmbracoContextAccessor.ItemKey">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Web.HybridUmbracoContextAccessor.UmbracoContext">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Web.HybridUmbracoContextAccessor.UmbracoContext"/> object.
            </summary>
        </member>
        <member name="T:Umbraco.Web.IPublishedContentQuery">
            <summary>
            Query methods used for accessing strongly typed content in templates
            </summary>
        </member>
        <member name="M:Umbraco.Web.IPublishedContentQuery.Search(System.String,System.String,System.String)">
            <summary>
            Searches content.
            </summary>
            <param name="term">The term to search.</param>
            <param name="culture">The culture (defaults to a culture insensitive search).</param>
            <param name="indexName">The name of the index to search (defaults to <see cref="F:Umbraco.Core.Constants.UmbracoIndexes.ExternalIndexName" />).</param>
            <returns>
            The search results.
            </returns>
            <remarks>
            <para>
            When the <paramref name="culture" /> is not specified or is *, all cultures are searched.
            To search for only invariant documents and fields use null.
            When searching on a specific culture, all culture specific fields are searched for the provided culture and all invariant fields for all documents.
            </para>
            <para>While enumerating results, the ambient culture is changed to be the searched culture.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.IPublishedContentQuery.Search(System.String,System.Int32,System.Int32,System.Int64@,System.String,System.String)">
            <summary>
            Searches content.
            </summary>
            <param name="term">The term to search.</param>
            <param name="skip">The amount of results to skip.</param>
            <param name="take">The amount of results to take/return.</param>
            <param name="totalRecords">The total amount of records.</param>
            <param name="culture">The culture (defaults to a culture insensitive search).</param>
            <param name="indexName">The name of the index to search (defaults to <see cref="F:Umbraco.Core.Constants.UmbracoIndexes.ExternalIndexName" />).</param>
            <returns>
            The search results.
            </returns>
            <remarks>
            <para>
            When the <paramref name="culture" /> is not specified or is *, all cultures are searched.
            To search for only invariant documents and fields use null.
            When searching on a specific culture, all culture specific fields are searched for the provided culture and all invariant fields for all documents.
            </para>
            <para>While enumerating results, the ambient culture is changed to be the searched culture.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.IPublishedContentQuery.Search(Examine.Search.IQueryExecutor)">
            <summary>
            Executes the query and converts the results to <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedSearchResult" />.
            </summary>
            <param name="query">The query.</param>
            <returns>
            The search results.
            </returns>
        </member>
        <member name="M:Umbraco.Web.IPublishedContentQuery.Search(Examine.Search.IQueryExecutor,System.Int32,System.Int32,System.Int64@)">
            <summary>
            Executes the query and converts the results to <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedSearchResult" />.
            </summary>
            <param name="query">The query.</param>
            <param name="skip">The amount of results to skip.</param>
            <param name="take">The amount of results to take/return.</param>
            <param name="totalRecords">The total amount of records.</param>
            <returns>
            The search results.
            </returns>
        </member>
        <member name="T:Umbraco.Web.HtmlHelperBackOfficeExtensions">
            <summary>
            HtmlHelper extensions for the back office
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperBackOfficeExtensions.BareMinimumServerVariablesScript(System.Web.Mvc.HtmlHelper,System.Web.Mvc.UrlHelper,System.String,Umbraco.Web.Features.UmbracoFeatures,Umbraco.Core.Configuration.IGlobalSettings)">
            <summary>
            Outputs a script tag containing the bare minimum (non secure) server vars for use with the angular app
            </summary>
            <param name="html"></param>
            <param name="uri"></param>
            <param name="externalLoginsUrl">
            The post URL used to sign in with external logins - this can change depending on for what service the external login is service.
            Example: normal back office login or authenticating upgrade login
            </param>
            <param name="features"></param>
            <param name="globalSettings"></param>
            <returns></returns>
            <remarks>
            These are the bare minimal server variables that are required for the application to start without being authenticated,
            we will load the rest of the server vars after the user is authenticated.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperBackOfficeExtensions.AngularValueExternalLoginInfoScript(System.Web.Mvc.HtmlHelper,Umbraco.Web.Security.BackOfficeExternalLoginProviderErrors)">
            <summary>
            Used to render the script that will pass in the angular "externalLoginInfo" service/value on page load
            </summary>
            <param name="html"></param>
            <param name="externalLoginErrors"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperBackOfficeExtensions.AngularValueResetPasswordCodeInfoScript(System.Web.Mvc.HtmlHelper,System.Object)">
            <summary>
            Used to render the script that will pass in the angular "resetPasswordCodeInfo" service/value on page load
            </summary>
            <param name="html"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PublishedElementExtensions">
            <summary>
            Provides extension methods for <c>IPublishedElement</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedElementExtensions.IsComposedOf(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String)">
            <summary>
            Gets a value indicating whether the content is of a content type composed of the given alias
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The content type alias.</param>
            <returns>A value indicating whether the content is of a content type composed of a content type identified by the alias.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedElementExtensions.HasProperty(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String)">
            <summary>
            Gets a value indicating whether the content has a property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <returns>A value indicating whether the content has the property identified by the alias.</returns>
            <remarks>The content may have a property, and that property may not have a value.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedElementExtensions.HasValue(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String)">
            <summary>
            Gets a value indicating whether the content has a value for a property identified by its alias.
            </summary>
            <remarks>Returns true if <c>GetProperty(alias)</c> is not <c>null</c> and <c>GetProperty(alias).HasValue</c> is <c>true</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedElementExtensions.Value(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,System.Object)">
            <summary>
            Gets the value of a content's property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The variation language.</param>
            <param name="segment">The variation segment.</param>
            <param name="fallback">Optional fallback strategy.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, if it exists, otherwise a default value.</returns>
            <remarks>
            <para>The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering content.</para>
            <para>If no property with the specified alias exists, or if the property has no value, returns <paramref name="defaultValue"/>.</para>
            <para>If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the converter.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedElementExtensions.Value``1(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,``0)">
            <summary>
            Gets the value of a content's property identified by its alias, converted to a specified type.
            </summary>
            <typeparam name="T">The target property type.</typeparam>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The variation language.</param>
            <param name="segment">The variation segment.</param>
            <param name="fallback">Optional fallback strategy.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, converted to the specified type.</returns>
            <remarks>
            <para>The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering content.</para>
            <para>If no property with the specified alias exists, or if the property has no value, or if it could not be converted, returns <c>default(T)</c>.</para>
            <para>If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the converter.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedElementExtensions.IsVisible(Umbraco.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
            Gets a value indicating whether the content is visible.
            </summary>
            <param name="content">The content.</param>
            <returns>A value indicating whether the content is visible.</returns>
            <remarks>A content is not visible if it has an umbracoNaviHide property with a value of "1". Otherwise,
            the content is visible.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedElementExtensions.MediaUrl(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Core.Models.PublishedContent.UrlMode,System.String)">
            <summary>
            Gets the URL for a media.
            </summary>
            <param name="content">The content item.</param>
            <param name="culture">The culture (use current culture by default).</param>
            <param name="mode">The URL mode (use site configuration by default).</param>
            <param name="propertyAlias">The alias of the property (use 'umbracoFile' by default).</param>
            <returns>The URL for the media.</returns>
            <remarks>
            <para>The value of this property is contextual. It depends on the 'current' request uri,
            if any. In addition, when the content type is multi-lingual, this is the URL for the
            specified culture. Otherwise, it is the invariant URL.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Tour.BackOfficeTourFilter">
            <summary>
            Represents a back-office tour filter.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Tour.BackOfficeTourFilter.#ctor(System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Tour.BackOfficeTourFilter"/> class.
            </summary>
            <param name="pluginName">Value to filter out tours by a plugin, can be null</param>
            <param name="tourFileName">Value to filter out a tour file, can be null</param>
            <param name="tourAlias">Value to filter out a tour alias, can be null</param>
            <remarks>
            Depending on what is null will depend on how the filter is applied. 
            If pluginName is not NULL and it's matched then we check if tourFileName is not NULL and it's matched then we check tour alias is not NULL and then match it,
            if any steps is NULL then the filters upstream are applied.
            Example, pluginName = "hello", tourFileName="stuff", tourAlias=NULL = we will filter out the tour file "stuff" from the plugin "hello" but not from other plugins if the same file name exists.
            Example, tourAlias="test.*" = we will filter out all tour aliases that start with the word "test" regardless of the plugin or file name
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Tour.BackOfficeTourFilter.PluginName">
            <summary>
            Gets the plugin name filtering regex.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Tour.BackOfficeTourFilter.TourFileName">
            <summary>
            Gets the tour filename filtering regex.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Tour.BackOfficeTourFilter.TourAlias">
            <summary>
            Gets the tour alias filtering regex.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Tour.BackOfficeTourFilter.FilterPlugin(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a filter to filter on the plugin name.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Tour.BackOfficeTourFilter.FilterFile(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a filter to filter on the tour filename.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Tour.BackOfficeTourFilter.FilterAlias(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a filter to filter on the tour alias.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Tour.TourFilterCollection">
            <summary>
            Represents a collection of <see cref="T:Umbraco.Web.Tour.BackOfficeTourFilter"/> items.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Tour.TourFilterCollection.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Web.Tour.BackOfficeTourFilter})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Tour.TourFilterCollection"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Tour.TourFilterCollectionBuilder">
            <summary>
            Builds a collection of <see cref="T:Umbraco.Web.Tour.BackOfficeTourFilter"/> items.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Tour.TourFilterCollectionBuilder.CreateItems(Umbraco.Core.Composing.IFactory)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.Tour.TourFilterCollectionBuilder.AddFilter(Umbraco.Web.Tour.BackOfficeTourFilter)">
            <summary>
            Adds a filter instance.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Tour.TourFilterCollectionBuilder.RemoveFilter(Umbraco.Web.Tour.BackOfficeTourFilter)">
            <summary>
            Removes a filter instance.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Tour.TourFilterCollectionBuilder.RemoveAllFilters">
            <summary>
            Removes all filter instances.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Tour.TourFilterCollectionBuilder.RemoveFilter(System.Func{Umbraco.Web.Tour.BackOfficeTourFilter,System.Boolean})">
            <summary>
            Removes filters matching a condition.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Tour.TourFilterCollectionBuilder.AddFilterByPlugin(System.String)">
            <summary>
            Creates and adds a filter instance filtering by plugin name.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Tour.TourFilterCollectionBuilder.AddFilterByFile(System.String)">
            <summary>
            Creates and adds a filter instance filtering by tour filename.
            </summary>
        </member>
        <member name="T:Umbraco.Web.UmbracoModule">
            <summary>
            Represents the main Umbraco module.
            </summary>
            <remarks>
            <para>Register that one in web.config.</para>
            <para>It will inject <see cref="T:Umbraco.Web.UmbracoInjectedModule"/> which contains most of the actual code.</para>
            </remarks>
        </member>
        <member name="E:Umbraco.Web.UmbracoModule.RouteAttempt">
            <summary>
            Occurs when...
            </summary>
        </member>
        <member name="E:Umbraco.Web.UmbracoModule.EndRequest">
            <summary>
            Occurs when...
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.OnRouteAttempt(System.Object,Umbraco.Web.Routing.RoutableAttemptEventArgs)">
            <summary>
            Triggers the RouteAttempt event.
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.OnEndRequest(System.Object,Umbraco.Web.Routing.UmbracoRequestEventArgs)">
            <summary>
            Triggers the EndRequest event.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionAssignDomain">
            <summary>
            This action is invoked when a domain is being assigned to a document
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionBrowse">
            <summary>
            This action is used as a security constraint that grants a user the ability to view nodes in a tree
            that has  permissions applied to it.
            </summary>
            <remarks>
            This action should not be invoked. It is used as the minimum required permission to view nodes in the content tree. By
            granting a user this permission, the user is able to see the node in the tree but not edit the document. This may be used by other trees
            that support permissions in the future.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionCopy">
            <summary>
            This action is invoked when copying a document, media, member
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionDelete">
            <summary>
            This action is invoked when a document, media, member is deleted
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionMove">
            <summary>
            This action is invoked upon creation of a document, media, member
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionNew">
            <summary>
            This action is invoked upon creation of a document
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionProtect">
            <summary>
            This action is invoked when a document is protected or unprotected
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionPublish">
            <summary>
            This action is invoked when a document is being published
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionRestore">
            <summary>
            This action is invoked when the content/media item is to be restored from the recycle bin
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionRights">
            <summary>
            This action is invoked when rights are changed on a document
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionRollback">
            <summary>
            This action is invoked when copying a document is being rolled back
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionSort">
            <summary>
            This action is invoked when children to a document, media, member is being sorted
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionToPublish">
            <summary>
            This action is invoked when children to a document is being sent to published (by an editor without publishrights)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionUnpublish">
            <summary>
            This action is invoked when a document is being unpublished
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.ActionUpdate">
            <summary>
            This action is invoked when copying a document or media
            </summary>
        </member>
        <member name="T:Umbraco.Web.Actions.IAction">
            <summary>
            Defines a back office action that can be permission assigned or subscribed to for notifications
            </summary>
            <remarks>
            If an IAction returns false for both ShowInNotifier and CanBePermissionAssigned then the IAction should not exist
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Actions.IAction.Letter">
            <summary>
            The letter used to assign a permission (must be unique)
            </summary>
        </member>
        <member name="P:Umbraco.Web.Actions.IAction.ShowInNotifier">
            <summary>
            Whether to allow subscribing to notifications for this action
            </summary>
        </member>
        <member name="P:Umbraco.Web.Actions.IAction.CanBePermissionAssigned">
            <summary>
            Whether to allow assigning permissions based on this action
            </summary>
        </member>
        <member name="P:Umbraco.Web.Actions.IAction.Icon">
            <summary>
            The icon to display for this action
            </summary>
        </member>
        <member name="P:Umbraco.Web.Actions.IAction.Alias">
            <summary>
            The alias for this action (must be unique)
            </summary>
        </member>
        <member name="P:Umbraco.Web.Actions.IAction.Category">
            <summary>
            The category used for this action
            </summary>
            <remarks>
            Used in the UI when assigning permissions
            </remarks>
        </member>
        <member name="T:Umbraco.Web.UmbracoDefaultOwinStartup">
            <summary>
            The default way to configure OWIN for Umbraco
            </summary>
            <remarks>
            The startup type is specified in appSettings under owin:appStartup
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoDefaultOwinStartup.Configuration(Owin.IAppBuilder)">
            <summary>
            Main startup method
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoDefaultOwinStartup.ConfigureServices(Owin.IAppBuilder,Umbraco.Core.Services.ServiceContext)">
            <summary>
            Configures services to be created in the OWIN context (CreatePerOwinContext)
            </summary>
            <param name="app"></param>
            <param name="services"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoDefaultOwinStartup.ConfigureMiddleware(Owin.IAppBuilder)">
            <summary>
            Configures middleware to be used (i.e. app.Use...)
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoDefaultOwinStartup.ConfigureUmbracoUserManager(Owin.IAppBuilder)">
            <summary>
            Configure the Identity user manager for use with Umbraco Back office
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoDefaultOwinStartup.ConfigureUmbracoAuthentication(Owin.IAppBuilder)">
            <summary>
            Configure external/OAuth login providers
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:Umbraco.Web.IUmbracoContextAccessor">
            <summary>
            Provides access to UmbracoContext.
            </summary>
        </member>
        <member name="T:Umbraco.Web.HtmlStringUtilities">
            <summary>
            Provides utility methods for UmbracoHelper for working with strings and HTML in views.
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlStringUtilities.ReplaceLineBreaksForHtml(System.String)">
            <summary>
            Replaces text line breaks with HTML line breaks.
            </summary>
            <param name="text">The text.</param>
            <returns>
            The text with text line breaks replaced with HTML line breaks (<c>&lt;br /&gt;</c>).
            </returns>
        </member>
        <member name="M:Umbraco.Web.HtmlStringUtilities.ReplaceLineBreaks(System.String)">
            <summary>
            HTML encodes the text and replaces text line breaks with HTML line breaks.
            </summary>
            <param name="text">The text.</param>
            <returns>
            The HTML encoded text with text line breaks replaced with HTML line breaks (<c>&lt;br /&gt;</c>).
            </returns>
        </member>
        <member name="M:Umbraco.Web.HtmlStringUtilities.WordsToLength(System.String,System.Int32)">
            <summary>
            Returns the length of the words from a HTML block
            </summary>
            <param name="html">HTML text</param>
            <param name="words">Amount of words you would like to measure</param>
            <param name="tagsAsContent"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.ITagQuery.GetContentByTag(System.String,System.String,System.String)">
            <summary>
            Gets all documents tagged with the specified tag.
            </summary>
        </member>
        <member name="M:Umbraco.Web.ITagQuery.GetContentByTagGroup(System.String,System.String)">
            <summary>
            Gets all documents tagged with any tag in the specified group.
            </summary>
        </member>
        <member name="M:Umbraco.Web.ITagQuery.GetMediaByTag(System.String,System.String,System.String)">
            <summary>
            Gets all media tagged with the specified tag.
            </summary>
        </member>
        <member name="M:Umbraco.Web.ITagQuery.GetMediaByTagGroup(System.String,System.String)">
            <summary>
            Gets all media tagged with any tag in the specified group.
            </summary>
        </member>
        <member name="M:Umbraco.Web.ITagQuery.GetAllTags(System.String,System.String)">
            <summary>
            Gets all tags.
            </summary>
        </member>
        <member name="M:Umbraco.Web.ITagQuery.GetAllContentTags(System.String,System.String)">
            <summary>
            Gets all document tags.
            </summary>
        </member>
        <member name="M:Umbraco.Web.ITagQuery.GetAllMediaTags(System.String,System.String)">
            <summary>
            Gets all media tags.
            </summary>
        </member>
        <member name="M:Umbraco.Web.ITagQuery.GetAllMemberTags(System.String,System.String)">
            <summary>
            Gets all member tags.
            </summary>
        </member>
        <member name="M:Umbraco.Web.ITagQuery.GetTagsForProperty(System.Int32,System.String,System.String,System.String)">
            <summary>
            Gets all tags attached to an entity via a property.
            </summary>
        </member>
        <member name="M:Umbraco.Web.ITagQuery.GetTagsForEntity(System.Int32,System.String,System.String)">
            <summary>
            Gets all tags attached to an entity.
            </summary>
        </member>
        <member name="T:Umbraco.Web.IUmbracoComponentRenderer">
            <summary>
            Methods used to render umbraco components as HTML in templates
            </summary>
        </member>
        <member name="M:Umbraco.Web.IUmbracoComponentRenderer.RenderTemplate(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Renders the template for the specified pageId and an optional altTemplateId
            </summary>
            <param name="contentId"></param>
            <param name="altTemplateId">If not specified, will use the template assigned to the node</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.IUmbracoComponentRenderer.RenderMacro(System.Int32,System.String)">
            <summary>
            Renders the macro with the specified alias.
            </summary>
            <param name="contentId"></param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.IUmbracoComponentRenderer.RenderMacro(System.Int32,System.String,System.Object)">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="contentId"></param>
            <param name="alias">The alias.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.IUmbracoComponentRenderer.RenderMacro(System.Int32,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="contentId"></param>
            <param name="alias">The alias.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.IUmbracoComponentRenderer.RenderMacroForContent(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="content">An IPublishedContent to use for the context for the macro rendering</param>
            <param name="alias">The alias.</param>
            <param name="parameters">The parameters.</param>
            <returns>A raw HTML string of the macro output</returns>
            <remarks>
            Currently only used when the node is unpublished and unable to get the contentId item from the
            content cache as its unpublished. This deals with taking in a preview/draft version of the content node
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Web.BatchedDatabaseServerMessenger" -->
        <member name="T:Umbraco.Web.CacheHelperExtensions">
            <summary>
            Extension methods for the cache helper
            </summary>
        </member>
        <member name="M:Umbraco.Web.CacheHelperExtensions.CachedPartialView(Umbraco.Core.Cache.AppCaches,System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Int32,System.String,System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Outputs and caches a partial view in MVC
            </summary>
            <param name="appCaches"></param>
            <param name="htmlHelper"></param>
            <param name="partialViewName"></param>
            <param name="model"></param>
            <param name="cachedSeconds"></param>
            <param name="cacheKey">used to cache the partial view, this key could change if it is cached by page or by member</param>
            <param name="viewData"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.CacheHelperExtensions.ClearPartialViewCache(Umbraco.Core.Cache.AppCaches)">
            <summary>
            Clears the cache for partial views
            </summary>
            <param name="appCaches"></param>
        </member>
        <member name="M:Umbraco.Web.MembershipProviderExtensions.GetConfiguration(System.Web.Security.MembershipProvider,Umbraco.Core.Services.IUserService)">
            <summary>
            Returns the configuration of the membership provider used to configure change password editors
            </summary>
            <param name="membershipProvider"></param>
            <param name="userService"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PublishedContentQuery">
            <summary>
            A class used to query for published content, media items
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedContentQuery.#ctor(Umbraco.Web.PublishedCache.IPublishedSnapshot,Umbraco.Core.Models.PublishedContent.IVariationContextAccessor,Examine.IExamineManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PublishedContentQuery"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedContentQuery.Search(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PublishedContentQuery.Search(System.String,System.Int32,System.Int32,System.Int64@,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PublishedContentQuery.Search(Examine.Search.IQueryExecutor)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.PublishedContentQuery.Search(Examine.Search.IQueryExecutor,System.Int32,System.Int32,System.Int64@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.PublishedContentQuery.CultureContextualSearchResults">
            <summary>
            This is used to contextualize the values in the search results when enumerating over them so that the correct culture values are used
            </summary>
        </member>
        <member name="T:Umbraco.Web.PublishedContentQuery.CultureContextualSearchResults.CultureContextualSearchResultsEnumerator">
            <summary>
            Resets the variation context when this is disposed
            </summary>
        </member>
        <member name="T:Umbraco.Web.ImageCropperTemplateExtensions">
            <summary>
            Provides extension methods for getting ImageProcessor URL from the core Image Cropper property editor
            </summary>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateExtensions.GetCropUrl(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the ImageProcessor URL by the crop alias (from the "umbracoFile" property alias) on the IPublishedContent item
            </summary>
            <param name="mediaItem">
            The IPublishedContent item.
            </param>
            <param name="cropAlias">
            The crop alias e.g. thumbnail
            </param>
            <returns>
            The ImageProcessor.Web URL.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateExtensions.GetCropUrl(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            Gets the ImageProcessor URL by the crop alias using the specified property containing the image cropper Json data on the IPublishedContent item.
            </summary>
            <param name="mediaItem">
            The IPublishedContent item.
            </param>
            <param name="propertyAlias">
            The property alias of the property containing the Json data e.g. umbracoFile
            </param>
            <param name="cropAlias">
            The crop alias e.g. thumbnail
            </param>
            <returns>
            The ImageProcessor.Web URL.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateExtensions.GetCropUrl(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{Umbraco.Web.Models.ImageCropMode},System.Nullable{Umbraco.Web.Models.ImageCropAnchor},System.Boolean,System.Boolean,System.Boolean,System.String,System.Nullable{Umbraco.Web.Models.ImageCropRatioMode},System.Boolean)">
            <summary>
            Gets the ImageProcessor URL from the IPublishedContent item.
            </summary>
            <param name="mediaItem">
            The IPublishedContent item.
            </param>
            <param name="width">
            The width of the output image.
            </param>
            <param name="height">
            The height of the output image.
            </param>
            <param name="propertyAlias">
            Property alias of the property containing the Json data.
            </param>
            <param name="cropAlias">
            The crop alias.
            </param>
            <param name="quality">
            Quality percentage of the output image.
            </param>
            <param name="imageCropMode">
            The image crop mode.
            </param>
            <param name="imageCropAnchor">
            The image crop anchor.
            </param>
            <param name="preferFocalPoint">
            Use focal point, to generate an output image using the focal point instead of the predefined crop
            </param>
            <param name="useCropDimensions">
            Use crop dimensions to have the output image sized according to the predefined crop sizes, this will override the width and height parameters.
            </param>
            <param name="cacheBuster">
            Add a serialized date of the last edit of the item to ensure client cache refresh when updated
            </param>
            <param name="furtherOptions">
            These are any query string parameters (formatted as query strings) that ImageProcessor supports. For example:
            <example>
            <![CDATA[
            furtherOptions: "&bgcolor=fff"
            ]]>
            </example>
            </param>
            <param name="ratioMode">
            Use a dimension as a ratio
            </param>
            <param name="upScale">
            If the image should be upscaled to requested dimensions
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateExtensions.GetCropUrl(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{Umbraco.Web.Models.ImageCropMode},System.Nullable{Umbraco.Web.Models.ImageCropAnchor},System.Boolean,System.Boolean,System.String,System.String,System.Nullable{Umbraco.Web.Models.ImageCropRatioMode},System.Boolean)">
            <summary>
            Gets the ImageProcessor URL from the image path.
            </summary>
            <param name="imageUrl">
            The image URL.
            </param>
            <param name="width">
            The width of the output image.
            </param>
            <param name="height">
            The height of the output image.
            </param>
            <param name="imageCropperValue">
            The Json data from the Umbraco Core Image Cropper property editor
            </param>
            <param name="cropAlias">
            The crop alias.
            </param>
            <param name="quality">
            Quality percentage of the output image.
            </param>
            <param name="imageCropMode">
            The image crop mode.
            </param>
            <param name="imageCropAnchor">
            The image crop anchor.
            </param>
            <param name="preferFocalPoint">
            Use focal point to generate an output image using the focal point instead of the predefined crop if there is one
            </param>
            <param name="useCropDimensions">
            Use crop dimensions to have the output image sized according to the predefined crop sizes, this will override the width and height parameters
            </param>
            <param name="cacheBusterValue">
            Add a serialized date of the last edit of the item to ensure client cache refresh when updated
            </param>
            <param name="furtherOptions">
            These are any query string parameters (formatted as query strings) that ImageProcessor supports. For example:
            <example>
            <![CDATA[
            furtherOptions: "&bgcolor=fff"
            ]]>
            </example>
            </param>
            <param name="ratioMode">
            Use a dimension as a ratio
            </param>
            <param name="upScale">
            If the image should be upscaled to requested dimensions
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateExtensions.GetCropUrl(System.String,Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{Umbraco.Web.Models.ImageCropMode},System.Nullable{Umbraco.Web.Models.ImageCropAnchor},System.Boolean,System.Boolean,System.String,System.String,System.Nullable{Umbraco.Web.Models.ImageCropRatioMode},System.Boolean)">
            <summary>
            Gets the ImageProcessor URL from the image path.
            </summary>
            <param name="imageUrl">
            The image URL.
            </param>
            <param name="cropDataSet"></param>
            <param name="width">
            The width of the output image.
            </param>
            <param name="height">
            The height of the output image.
            </param>
            <param name="cropAlias">
            The crop alias.
            </param>
            <param name="quality">
            Quality percentage of the output image.
            </param>
            <param name="imageCropMode">
            The image crop mode.
            </param>
            <param name="imageCropAnchor">
            The image crop anchor.
            </param>
            <param name="preferFocalPoint">
            Use focal point to generate an output image using the focal point instead of the predefined crop if there is one
            </param>
            <param name="useCropDimensions">
            Use crop dimensions to have the output image sized according to the predefined crop sizes, this will override the width and height parameters
            </param>
            <param name="cacheBusterValue">
            Add a serialized date of the last edit of the item to ensure client cache refresh when updated
            </param>
            <param name="furtherOptions">
            These are any query string parameters (formatted as query strings) that ImageProcessor supports. For example:
            <example>
            <![CDATA[
            furtherOptions: "&bgcolor=fff"
            ]]>
            </example>
            </param>
            <param name="ratioMode">
            Use a dimension as a ratio
            </param>
            <param name="upScale">
            If the image should be upscaled to requested dimensions
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:Umbraco.Web.TagQuery">
            <summary>
            Implements <see cref="T:Umbraco.Web.ITagQuery"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.TagQuery.#ctor(Umbraco.Core.Services.ITagService,Umbraco.Web.IPublishedContentQuery,Umbraco.Core.Mapping.UmbracoMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.TagQuery"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetContentByTag(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetContentByTagGroup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetMediaByTag(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetMediaByTagGroup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetAllTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetAllContentTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetAllMediaTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetAllMemberTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetTagsForProperty(System.Int32,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetTagsForEntity(System.Int32,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Web.UmbracoComponentRenderer">
            <summary>
            Methods used to render umbraco components as HTML in templates
            </summary>
            <remarks>
            Used by UmbracoHelper
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoComponentRenderer.RenderTemplate(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Renders the template for the specified pageId and an optional altTemplateId
            </summary>
            <param name="contentId"></param>
            <param name="altTemplateId">If not specified, will use the template assigned to the node</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoComponentRenderer.RenderMacro(System.Int32,System.String)">
            <summary>
            Renders the macro with the specified alias.
            </summary>
            <param name="contentId"></param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoComponentRenderer.RenderMacro(System.Int32,System.String,System.Object)">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="contentId"></param>
            <param name="alias">The alias.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoComponentRenderer.RenderMacro(System.Int32,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="contentId"></param>
            <param name="alias">The alias.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoComponentRenderer.RenderMacro(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="alias">The macro alias.</param>
            <param name="parameters">The parameters.</param>
            <param name="content">The content used for macro rendering</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PublishedPropertyExtension">
            <summary>
            Provides extension methods for <c>IPublishedProperty</c>.
            </summary>
        </member>
        <member name="T:Umbraco.Web.HttpCookieExtensions">
            <summary>
            Extension methods used to check/set cookie values
            </summary>
            <remarks>
            This should 100% supersede the StateManager.Cookies
            </remarks>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.GetCookieValue(System.Net.Http.Headers.HttpRequestHeaders,System.String)">
            <summary>
            Retrieves an individual cookie from the cookies collection
            </summary>
            <param name="requestHeaders"></param>
            <param name="cookieName"></param>
            <returns></returns>
            <remarks>
            Adapted from: https://stackoverflow.com/a/29057304/5018 because there's an issue with .NET WebApi cookie parsing logic
            when using requestHeaders.GetCookies() when an invalid cookie name is present.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.ExpireCookie(System.Web.HttpContextBase,System.String)">
            <summary>
            Removes the cookie from the request and the response if it exists
            </summary>
            <param name="http"></param>
            <param name="cookieName"></param>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.ExpireCookie(System.Web.HttpContext,System.String)">
            <summary>
            Removes the cookie from the request and the response if it exists
            </summary>
            <param name="http"></param>
            <param name="cookieName"></param>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.HasPreviewCookie(System.Web.HttpRequestBase)">
            <summary>
            Does a preview cookie exist ?
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.HasPreviewCookie(System.Web.HttpRequest)">
            <summary>
            Does a preview cookie exist ?
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.HasPreviewCookie(Microsoft.Owin.IOwinRequest)">
            <summary>
            Does a preview cookie exist ?
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.GetCookieValue(System.Web.HttpRequestBase,System.String)">
            <summary>
            Returns the cookie's string value
            </summary>
            <param name="request"></param>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.GetCookieValue(System.Web.HttpRequest,System.String)">
            <summary>
            Returns the cookie's string value
            </summary>
            <param name="request"></param>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.HasCookie(System.Web.HttpRequestBase,System.String)">
            <summary>
            Does a cookie exist with the specified key ?
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.HasCookie(System.Web.HttpRequest,System.String)">
            <summary>
            Does a cookie exist with the specified key ?
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.HasCookieValue(System.Web.HttpRequestBase,System.String)">
            <summary>
            Is there a cookie with the key supplied and does it have a value that is not empty
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.HasCookieValue(System.Web.HttpRequest,System.String)">
            <summary>
            Is there a cookie with the key supplied and does it have a value that is not empty
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Web.FormDataCollectionExtensions.ToQueryString(System.Net.Http.Formatting.FormDataCollection,System.String[])" -->
        <member name="M:Umbraco.Web.FormDataCollectionExtensions.ToDictionary(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Converts the FormCollection to a dictionary
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.FormDataCollectionExtensions.GetRequiredString(System.Net.Http.Formatting.FormDataCollection,System.String)">
            <summary>
            Returns the value of a mandatory item in the FormCollection
            </summary>
            <param name="items"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.FormDataCollectionExtensions.HasKey(System.Net.Http.Formatting.FormDataCollection,System.String)">
            <summary>
            Checks if the collection contains the key
            </summary>
            <param name="items"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.FormDataCollectionExtensions.GetValue``1(System.Net.Http.Formatting.FormDataCollection,System.String)">
            <summary>
            Returns the object based in the collection based on it's key. This does this with a conversion so if it doesn't convert a null object is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.FormDataCollectionExtensions.GetRequiredValue``1(System.Net.Http.Formatting.FormDataCollection,System.String)">
            <summary>
            Returns the object based in the collection based on it's key. This does this with a conversion so if it doesn't convert or the query string is no there an exception is thrown
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.HttpRequestExtensions">
            <summary>
            Extension methods for the HttpRequest and HttpRequestBase objects
            </summary>
        </member>
        <member name="M:Umbraco.Web.HttpRequestExtensions.CleanForXss(System.Web.HttpRequest,System.String,System.String)">
            <summary>
            Extracts the value from the query string and cleans it to prevent xss attacks.
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <param name="valueIfNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpRequestExtensions.GetItemAsString(System.Web.HttpRequest,System.String,System.String)">
            <summary>
            Safely get a request item as string, if the item does not exist, an empty string is returned.
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <param name="valueIfNotFound">The value to return if the key is not found in the collection</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpRequestExtensions.GetItemAsString(System.Web.HttpRequestBase,System.String,System.String)">
            <summary>
            Safely get a request item as string, if the item does not exist, an empty string is returned.
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <param name="valueIfNotFound">The value to return if the key is not found in the collection</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpRequestExtensions.GetItemAs``1(System.Web.HttpRequestBase,System.String)">
            <summary>
            Safely get the item from the query string and convert it to type 'T', otherwise will return default(T).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpRequestExtensions.GetItemAs``1(System.Web.HttpRequest,System.String)">
            <summary>
            Safely get the item from the query string and convert it to type 'T', otherwise will return default(T).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpUrlHelperExtensions.GetUmbracoApiService``1(System.Web.Http.Routing.UrlHelper,System.String,System.Object)">
            <summary>
            Return the Url for a Web Api service
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpUrlHelperExtensions.GetUmbracoApiService(System.Web.Http.Routing.UrlHelper,System.String,System.Type,System.Object)">
            <summary>
            Return the Url for a Web Api service
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="apiControllerType"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpUrlHelperExtensions.GetUmbracoApiService(System.Web.Http.Routing.UrlHelper,System.String,System.String,System.Object)">
            <summary>
            Return the Url for a Web Api service
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="controllerName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpUrlHelperExtensions.GetUmbracoApiService(System.Web.Http.Routing.UrlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Return the Url for a Web Api service
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpUrlHelperExtensions.GetUmbracoApiServiceBaseUrl``1(System.Web.Http.Routing.UrlHelper,System.String)">
            <summary>
            Return the Base Url (not including the action) for a Web Api service
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Dictionary.DefaultCultureDictionary">
            <summary>
            A culture dictionary that uses the Umbraco ILocalizationService
            </summary>
            <remarks>
            TODO: The ICultureDictionary needs to represent the 'fast' way to do dictionary item retrieval - for front-end and back office.
            The ILocalizationService is the service used for interacting with this data from the database which isn't all that fast
            (even though there is caching involved, if there's lots of dictionary items the caching is not great)
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Dictionary.DefaultCultureDictionary.Item(System.String)">
            <summary>
            Returns the dictionary value based on the key supplied
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Dictionary.DefaultCultureDictionary.Culture">
            <summary>
            Returns the current culture
            </summary>
        </member>
        <member name="M:Umbraco.Web.Dictionary.DefaultCultureDictionary.GetChildren(System.String)">
            <summary>
            Returns the child dictionary entries for a given key
            </summary>
            <param name="key"></param>
            <returns></returns>
            <remarks>
            NOTE: The result of this is not cached anywhere - the underlying repository does not cache
            the child lookups because that is done by a query lookup. This method isn't used in our codebase
            so I don't think this is a performance issue but if devs are using this it could be optimized here.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Dictionary.DefaultCultureDictionaryFactory">
            <summary>
            A culture dictionary factory used to create an Umbraco.Core.Dictionary.ICultureDictionary.
            </summary>
            <remarks>
            In the future this will allow use to potentially store dictionary items elsewhere and allows for maximum flexibility.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.CdfLogger">
            <summary>
            A logger for ClientDependency
            </summary>
        </member>
        <member name="T:Umbraco.Web.UrlHelperExtensions">
            <summary>
            Extension methods for UrlHelper
            </summary>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetUmbracoApiService``1(System.Web.Mvc.UrlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Return the URL for a Web Api service
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="routeVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetUmbracoApiService(System.Web.Mvc.UrlHelper,System.String,System.Type,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Return the URL for a Web Api service
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="apiControllerType"></param>
            <param name="routeVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetUmbracoApiService(System.Web.Mvc.UrlHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Return the URL for a Web Api service
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <param name="routeVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetUrlWithCacheBust(System.Web.Mvc.UrlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Return the URL for an action with a cache-busting hash appended
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="controllerName"></param>
            <param name="routeVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetCacheBustHash">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:Umbraco.Web.UrlHelperRenderExtensions">
            <summary>
            Extension methods for UrlHelper for use in templates
            </summary>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.GetCropUrl(System.Web.Mvc.UrlHelper,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.Boolean)">
            <summary>
            Gets the ImageProcessor URL of a media item by the crop alias (using default media item property alias of "umbracoFile")
            </summary>
            <param name="urlHelper"></param>
            <param name="mediaItem">
            The IPublishedContent item.
            </param>
            <param name="cropAlias">
            The crop alias e.g. thumbnail
            </param>
            <param name="htmlEncode">
            Whether to HTML encode this URL - default is true - w3c standards require HTML attributes to be HTML encoded but this can be
            set to false if using the result of this method for CSS.
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.GetCropUrl(System.Web.Mvc.UrlHelper,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.Boolean)">
            <summary>
            Gets the ImageProcessor URL by the crop alias using the specified property containing the image cropper Json data on the IPublishedContent item.
            </summary>
            <param name="urlHelper"></param>
            <param name="mediaItem">
            The IPublishedContent item.
            </param>
            <param name="propertyAlias">
            The property alias of the property containing the Json data e.g. umbracoFile
            </param>
            <param name="cropAlias">
            The crop alias e.g. thumbnail
            </param>
            <param name="htmlEncode">
            Whether to HTML encode this URL - default is true - w3c standards require HTML attributes to be HTML encoded but this can be
            set to false if using the result of this method for CSS.
            </param>
            <returns>
            The ImageProcessor.Web URL.
            </returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.GetCropUrl(System.Web.Mvc.UrlHelper,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{Umbraco.Web.Models.ImageCropMode},System.Nullable{Umbraco.Web.Models.ImageCropAnchor},System.Boolean,System.Boolean,System.Boolean,System.String,System.Nullable{Umbraco.Web.Models.ImageCropRatioMode},System.Boolean,System.Boolean)">
            <summary>
            Gets the ImageProcessor URL from the image path.
            </summary>
            <param name="mediaItem">
            The IPublishedContent item.
            </param>
            <param name="width">
            The width of the output image.
            </param>
            <param name="height">
            The height of the output image.
            </param>
            <param name="propertyAlias">
            Property alias of the property containing the Json data.
            </param>
            <param name="cropAlias">
            The crop alias.
            </param>
            <param name="quality">
            Quality percentage of the output image.
            </param>
            <param name="imageCropMode">
            The image crop mode.
            </param>
            <param name="imageCropAnchor">
            The image crop anchor.
            </param>
            <param name="preferFocalPoint">
            Use focal point to generate an output image using the focal point instead of the predefined crop if there is one
            </param>
            <param name="useCropDimensions">
            Use crop dimensions to have the output image sized according to the predefined crop sizes, this will override the width and height parameters
            </param>
            <param name="cacheBuster">
            Add a serialized date of the last edit of the item to ensure client cache refresh when updated
            </param>
            <param name="furtherOptions">
            These are any query string parameters (formatted as query strings) that ImageProcessor supports. For example:
            <example>
            <![CDATA[
            furtherOptions: "&bgcolor=fff"
            ]]>
            </example>
            </param>
            <param name="ratioMode">
            Use a dimension as a ratio
            </param>
            <param name="upScale">
            If the image should be upscaled to requested dimensions
            </param>
            <param name="urlHelper"></param>
            <param name="htmlEncode">
            Whether to HTML encode this URL - default is true - w3c standards require HTML attributes to be HTML encoded but this can be
            set to false if using the result of this method for CSS.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.GetCropUrl(System.Web.Mvc.UrlHelper,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{Umbraco.Web.Models.ImageCropMode},System.Nullable{Umbraco.Web.Models.ImageCropAnchor},System.Boolean,System.Boolean,System.String,System.String,System.Nullable{Umbraco.Web.Models.ImageCropRatioMode},System.Boolean,System.Boolean)">
            <summary>
            Gets the ImageProcessor URL from the image path.
            </summary>
            <param name="imageUrl">
            The image URL.
            </param>
            <param name="width">
            The width of the output image.
            </param>
            <param name="height">
            The height of the output image.
            </param>
            <param name="imageCropperValue">
            The Json data from the Umbraco Core Image Cropper property editor
            </param>
            <param name="cropAlias">
            The crop alias.
            </param>
            <param name="quality">
            Quality percentage of the output image.
            </param>
            <param name="imageCropMode">
            The image crop mode.
            </param>
            <param name="imageCropAnchor">
            The image crop anchor.
            </param>
            <param name="preferFocalPoint">
            Use focal point to generate an output image using the focal point instead of the predefined crop if there is one
            </param>
            <param name="useCropDimensions">
            Use crop dimensions to have the output image sized according to the predefined crop sizes, this will override the width and height parameters
            </param>
            <param name="cacheBusterValue">
            Add a serialized date of the last edit of the item to ensure client cache refresh when updated
            </param>
            <param name="furtherOptions">
            These are any query string parameters (formatted as query strings) that ImageProcessor supports. For example:
            <example>
            <![CDATA[
            furtherOptions: "&bgcolor=fff"
            ]]>
            </example>
            </param>
            <param name="ratioMode">
            Use a dimension as a ratio
            </param>
            <param name="upScale">
            If the image should be upscaled to requested dimensions
            </param>
            <param name="urlHelper"></param>
            <param name="htmlEncode">
            Whether to HTML encode this URL - default is true - w3c standards require HTML attributes to be HTML encoded but this can be
            set to false if using the result of this method for CSS.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction(System.Web.Mvc.UrlHelper,System.String,System.String)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction(System.Web.Mvc.UrlHelper,System.String,System.String,System.Object)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction(System.Web.Mvc.UrlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction(System.Web.Mvc.UrlHelper,System.String,System.Type)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="surfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction(System.Web.Mvc.UrlHelper,System.String,System.Type,System.Object)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="surfaceType"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction``1(System.Web.Mvc.UrlHelper,System.String)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction``1(System.Web.Mvc.UrlHelper,System.String,System.Object)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.CreateEncryptedRouteString(System.String,System.String,System.String,System.Object)">
            <summary>
            This is used in methods like BeginUmbracoForm and SurfaceAction to generate an encrypted string which gets submitted in a request for which
            Umbraco can decrypt during the routing process in order to delegate the request to a specific MVC Controller.
            </summary>
            <param name="controllerName"></param>
            <param name="controllerAction"></param>
            <param name="area"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PublishedContentExtensions">
            <summary>
            Provides extension methods for <c>IPublishedContent</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsComposedOf(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets a value indicating whether the content is of a content type composed of the given alias
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The content type alias.</param>
            <returns>A value indicating whether the content is of a content type composed of a content type identified by the alias.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetTemplateAlias(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Returns the current template Alias
            </summary>
            <param name="content"></param>
            <returns>Empty string if none is set.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.HasValue(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback)">
            <summary>
            Gets a value indicating whether the content has a value for a property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The variation language.</param>
            <param name="segment">The variation segment.</param>
            <param name="fallback">Optional fallback strategy.</param>
            <returns>A value indicating whether the content has a value for the property identified by the alias.</returns>
            <remarks>Returns true if HasValue is true, or a fallback strategy can provide a value.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Value(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,System.Object)">
            <summary>
            Gets the value of a content's property identified by its alias, if it exists, otherwise a default value.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The variation language.</param>
            <param name="segment">The variation segment.</param>
            <param name="fallback">Optional fallback strategy.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, if it exists, otherwise a default value.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Value``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,``0)">
            <summary>
            Gets the value of a content's property identified by its alias, converted to a specified type.
            </summary>
            <typeparam name="T">The target property type.</typeparam>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The variation language.</param>
            <param name="segment">The variation segment.</param>
            <param name="fallback">Optional fallback strategy.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, converted to the specified type.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetCultureFromDomains(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Uri)">
            <summary>
            Gets the culture assigned to a document by domains, in the context of a current Uri.
            </summary>
            <param name="content">The document.</param>
            <param name="current">An optional current Uri.</param>
            <returns>The culture assigned to the document by domains.</returns>
            <remarks>
            <para>In 1:1 multilingual setup, a document contains several cultures (there is not
            one document per culture), and domains, withing the context of a current Uri, assign
            a culture to that document.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsDocumentType(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Determines whether the specified content is a specified content type.
            </summary>
            <param name="content">The content to determine content type of.</param>
            <param name="docTypeAlias">The alias of the content type to test against.</param>
            <returns>True if the content is of the specified content type; otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsDocumentType(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.Boolean)">
            <summary>
            Determines whether the specified content is a specified content type or it's derived types.
            </summary>
            <param name="content">The content to determine content type of.</param>
            <param name="docTypeAlias">The alias of the content type to test against.</param>
            <param name="recursive">When true, recurses up the content type tree to check inheritance; when false just calls IsDocumentType(this IPublishedContent content, string docTypeAlias).</param>
            <returns>True if the content is of the specified content type or a derived content type; otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsEqual(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            If the specified <paramref name="content" /> is equal to <paramref name="other" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsEqual(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            If the specified <paramref name="content" /> is equal to <paramref name="other" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsNotEqual(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            If the specified <paramref name="content" /> is not equal to <paramref name="other" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsNotEqual(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            If the specified <paramref name="content" /> is not equal to <paramref name="other" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsNotEqual(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            If the specified <paramref name="content" /> is not equal to <paramref name="other" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsDescendant(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            If the specified <paramref name="content" /> is a decendant of <paramref name="other" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsDescendant(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            If the specified <paramref name="content" /> is a decendant of <paramref name="other" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsDescendantOrSelf(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            If the specified <paramref name="content" /> is a decendant of <paramref name="other" /> or are the same, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsDescendantOrSelf(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            If the specified <paramref name="content" /> is a decendant of <paramref name="other" /> or are the same, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsAncestor(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            If the specified <paramref name="content" /> is an ancestor of <paramref name="other" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsAncestor(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            If the specified <paramref name="content" /> is an ancestor of <paramref name="other" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsAncestorOrSelf(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            If the specified <paramref name="content" /> is an ancestor of <paramref name="other" /> or are the same, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsAncestorOrSelf(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            If the specified <paramref name="content" /> is an ancestor of <paramref name="other" /> or are the same, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="content">The content.</param>
            <param name="other">The other content.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestors(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Gets the ancestors of the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The ancestors of the content, in down-top order.</returns>
            <remarks>Does not consider the content itself.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestors(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Int32)">
            <summary>
            Gets the ancestors of the content, at a level lesser or equal to a specified level.
            </summary>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The ancestors of the content, at a level lesser or equal to the specified level, in down-top order.</returns>
            <remarks>Does not consider the content itself. Only content that are "high enough" in the tree are returned.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestors(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the ancestors of the content, of a specified content type.
            </summary>
            <param name="content">The content.</param>
            <param name="contentTypeAlias">The content type.</param>
            <returns>The ancestors of the content, of the specified content type, in down-top order.</returns>
            <remarks>Does not consider the content itself. Returns all ancestors, of the specified content type.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestors``1(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Gets the ancestors of the content, of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <returns>The ancestors of the content, of the specified content type, in down-top order.</returns>
            <remarks>Does not consider the content itself. Returns all ancestors, of the specified content type.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestors``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Int32)">
            <summary>
            Gets the ancestors of the content, at a level lesser or equal to a specified level, and of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The ancestors of the content, at a level lesser or equal to the specified level, and of the specified
            content type, in down-top order.</returns>
            <remarks>Does not consider the content itself. Only content that are "high enough" in the trees, and of the
            specified content type, are returned.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorsOrSelf(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Gets the content and its ancestors.
            </summary>
            <param name="content">The content.</param>
            <returns>The content and its ancestors, in down-top order.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorsOrSelf(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Int32)">
            <summary>
            Gets the content and its ancestors, at a level lesser or equal to a specified level.
            </summary>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The content and its ancestors, at a level lesser or equal to the specified level,
            in down-top order.</returns>
            <remarks>Only content that are "high enough" in the tree are returned. So it may or may not begin
            with the content itself, depending on its level.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorsOrSelf(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the content and its ancestors, of a specified content type.
            </summary>
            <param name="content">The content.</param>
            <param name="contentTypeAlias">The content type.</param>
            <returns>The content and its ancestors, of the specified content type, in down-top order.</returns>
            <remarks>May or may not begin with the content itself, depending on its content type.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorsOrSelf``1(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Gets the content and its ancestors, of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <returns>The content and its ancestors, of the specified content type, in down-top order.</returns>
            <remarks>May or may not begin with the content itself, depending on its content type.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorsOrSelf``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Int32)">
            <summary>
            Gets the content and its ancestor, at a lever lesser or equal to a specified level, and of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The content and its ancestors, at a level lesser or equal to the specified level, and of the specified
            content type, in down-top order.</returns>
            <remarks>May or may not begin with the content itself, depending on its level and content type.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestor(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Gets the ancestor of the content, ie its parent.
            </summary>
            <param name="content">The content.</param>
            <returns>The ancestor of the content.</returns>
            <remarks>This method is here for consistency purposes but does not make much sense.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestor(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Int32)">
            <summary>
            Gets the nearest ancestor of the content, at a lever lesser or equal to a specified level.
            </summary>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The nearest (in down-top order) ancestor of the content, at a level lesser or equal to the specified level.</returns>
            <remarks>Does not consider the content itself. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestor(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the nearest ancestor of the content, of a specified content type.
            </summary>
            <param name="content">The content.</param>
            <param name="contentTypeAlias">The content type alias.</param>
            <returns>The nearest (in down-top order) ancestor of the content, of the specified content type.</returns>
            <remarks>Does not consider the content itself. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestor``1(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Gets the nearest ancestor of the content, of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <returns>The nearest (in down-top order) ancestor of the content, of the specified content type.</returns>
            <remarks>Does not consider the content itself. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestor``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Int32)">
            <summary>
            Gets the nearest ancestor of the content, at the specified level and of the specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The ancestor of the content, at the specified level and of the specified content type.</returns>
            <remarks>Does not consider the content itself. If the ancestor at the specified level is
            not of the specified type, returns <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorOrSelf(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Gets the content or its nearest ancestor.
            </summary>
            <param name="content">The content.</param>
            <returns>The content.</returns>
            <remarks>This method is here for consistency purposes but does not make much sense.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorOrSelf(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Int32)">
            <summary>
            Gets the content or its nearest ancestor, at a lever lesser or equal to a specified level.
            </summary>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The content or its nearest (in down-top order) ancestor, at a level lesser or equal to the specified level.</returns>
            <remarks>May or may not return the content itself depending on its level. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorOrSelf(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the content or its nearest ancestor, of a specified content type.
            </summary>
            <param name="content">The content.</param>
            <param name="contentTypeAlias">The content type.</param>
            <returns>The content or its nearest (in down-top order) ancestor, of the specified content type.</returns>
            <remarks>May or may not return the content itself depending on its content type. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorOrSelf``1(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Gets the content or its nearest ancestor, of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <returns>The content or its nearest (in down-top order) ancestor, of the specified content type.</returns>
            <remarks>May or may not return the content itself depending on its content type. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorOrSelf``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Int32)">
            <summary>
            Gets the content or its nearest ancestor, at a lever lesser or equal to a specified level, and of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.EnumerateAncestors(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Boolean)">
            <summary>
            Enumerates ancestors of the content, bottom-up.
            </summary>
            <param name="content">The content.</param>
            <param name="orSelf">Indicates whether the content should be included.</param>
            <returns>Enumerates bottom-up ie walking up the tree (parent, grand-parent, etc).</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.DescendantsOrSelfOfType(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.IPublishedContent},System.String,System.String)">
            <summary>
            Returns all DescendantsOrSelf of all content referenced
            </summary>
            <param name="parentNodes"></param>
            <param name="docTypeAlias"></param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <returns></returns>
            <remarks>
            This can be useful in order to return all nodes in an entire site by a type when combined with <see cref="M:Umbraco.Web.UmbracoHelper.ContentAtRoot"/> or similar.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.DescendantsOrSelf``1(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.IPublishedContent},System.String)">
            <summary>
            Returns all DescendantsOrSelf of all content referenced
            </summary>
            <param name="parentNodes"></param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <returns></returns>
            <remarks>
            This can be useful in order to return all nodes in an entire site by a type when combined with <see cref="M:Umbraco.Web.UmbracoHelper.ContentAtRoot"/> or similar.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Parent``1(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Gets the parent of the content, of a given content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <returns>The parent of content, of the given content type, else null.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Children(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Func{Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Boolean},System.String)">
            <summary>
            Gets the children of the content, filtered by a predicate.
            </summary>
            <param name="content">The content.</param>
            <param name="predicate">The predicate.</param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <returns>The children of the content, filtered by the predicate.</returns>
            <remarks>
            <para>Children are sorted by their sortOrder.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.ChildrenOfType(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            Gets the children of the content, of any of the specified types.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <param name="contentTypeAlias">The content type alias.</param>
            <returns>The children of the content, of any of the specified types.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Children``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the children of the content, of a given content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <returns>The children of content, of the given content type.</returns>
            <remarks>
            <para>Children are sorted by their sortOrder.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.FirstChildOfType(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            Gets the first child of the content, of a given content type.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.ChildrenAsTable(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Services.ServiceContext,System.String,System.String)">
            <summary>
            Gets the children of the content in a DataTable.
            </summary>
            <param name="content">The content.</param>
            <param name="services">A service context.</param>
            <param name="contentTypeAliasFilter">An optional content type alias.</param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <returns>The children of the content.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GenerateDataTable(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Services.ServiceContext,System.String,System.String)">
            <summary>
            Gets the children of the content in a DataTable.
            </summary>
            <param name="content">The content.</param>
            <param name="services">A service context.</param>
            <param name="contentTypeAliasFilter">An optional content type alias.</param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <returns>The children of the content.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Siblings(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the siblings of the content.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <returns>The siblings of the content.</returns>
            <remarks>
              <para>Note that in V7 this method also return the content node self.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.SiblingsOfType(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            Gets the siblings of the content, of a given content type.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <param name="contentTypeAlias">The content type alias.</param>
            <returns>The siblings of the content, of the given content type.</returns>
            <remarks>
              <para>Note that in V7 this method also return the content node self.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Siblings``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the siblings of the content, of a given content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <returns>The siblings of the content, of the given content type.</returns>
            <remarks>
              <para>Note that in V7 this method also return the content node self.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.SiblingsAndSelf(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the siblings of the content including the node itself to indicate the position.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <returns>The siblings of the content including the node itself.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.SiblingsAndSelfOfType(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            Gets the siblings of the content including the node itself to indicate the position, of a given content type.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <param name="contentTypeAlias">The content type alias.</param>
            <returns>The siblings of the content including the node itself, of the given content type.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.SiblingsAndSelf``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the siblings of the content including the node itself to indicate the position, of a given content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null)</param>
            <returns>The siblings of the content including the node itself, of the given content type.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Root(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Gets the root content for this content.
            </summary>
            <param name="content">The content.</param>
            <returns>The 'site' content ie AncestorOrSelf(1).</returns>
        </member>
        <member name="P:Umbraco.Web.PublishedContentExtensions.GetPropertyAliasesAndNames">
            <summary>
            This is used only for unit tests to set the delegate to look up aliases/names dictionary of a content type
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Url(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Core.Models.PublishedContent.UrlMode)">
            <summary>
            Gets the URL of the content item.
            </summary>
            <remarks>
            <para>If the content item is a document, then this method returns the URL of the
            document. If it is a media, then this methods return the media URL for the
            'umbracoFile' property. Use the MediaUrl() method to get the media URL for other
            properties.</para>
            <para>The value of this property is contextual. It depends on the 'current' request uri,
            if any. In addition, when the content type is multi-lingual, this is the URL for the
            specified culture. Otherwise, it is the invariant URL.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.ExamineExtensions">
            <summary>
            Extension methods for Examine.
            </summary>
        </member>
        <member name="M:Umbraco.Web.ExamineExtensions.ToPublishedSearchResults(System.Collections.Generic.IEnumerable{Examine.ISearchResult},Umbraco.Web.PublishedCache.IPublishedCache)">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all content from the <paramref name="cache" />.
            </summary>
            <param name="results">The search results.</param>
            <param name="cache">The cache to fetch the content from.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all content.
            </returns>
            <exception cref="T:System.ArgumentNullException">cache</exception>
            <remarks>
            Search results are skipped if it can't be fetched from the <paramref name="cache" /> by its integer id.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.ExamineExtensions.ToPublishedSearchResults(System.Collections.Generic.IEnumerable{Examine.ISearchResult},Umbraco.Web.PublishedCache.IPublishedSnapshot)">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all content, media or members from the <paramref name="snapshot" />.
            </summary>
            <param name="results">The search results.</param>
            <param name="snapshot">The snapshot.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all content, media or members.
            </returns>
            <exception cref="T:System.ArgumentNullException">snapshot</exception>
            <remarks>
            Search results are skipped if it can't be fetched from the respective cache by its integer id.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.FormlessPage">
            <summary>
            A formless page for use with the rendering a control in a page via Server.Execute.
            This ignores the check to check for a form control on the page.
            </summary>
            <remarks>
            UmbracoHelper currently uses this for rendering macros but could be used anywhere we want when rendering
            a page with Server.Execute.
            SD: I have a custom MVC engine that uses this in my own internal libs if we want to pull it out which is called ViewManager
            and works really well for things like this.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.HtmlHelperRenderExtensions">
            <summary>
            HtmlHelper extensions for use in templates
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.RenderProfiler(System.Web.Mvc.HtmlHelper)">
            <summary>
            Renders the markup for the profiler
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.AreaPartial(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Renders a partial view that is found in the specified area
            </summary>
            <param name="helper"></param>
            <param name="partial"></param>
            <param name="area"></param>
            <param name="model"></param>
            <param name="viewData"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.PreviewBadge(System.Web.Mvc.HtmlHelper)">
            <summary>
            Will render the preview badge when in preview mode which is not required ever unless the MVC page you are
            using does not inherit from UmbracoViewPage
            </summary>
            <param name="helper"></param>
            <returns></returns>
            <remarks>
            See: http://issues.umbraco.org/issue/U4-1614
            </remarks>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            A validation summary that lets you pass in a prefix so that the summary only displays for elements
            containing the prefix. This allows you to have more than on validation summary on a page.
            </summary>
            <param name="htmlHelper"></param>
            <param name="prefix"></param>
            <param name="excludePropertyErrors"></param>
            <param name="message"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Action``1(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Returns the result of a child action of a strongly typed SurfaceController
            </summary>
            <typeparam name="T"></typeparam>
            <param name="htmlHelper"></param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Type)">
            <summary>
            Returns the result of a child action of a SurfaceController
            </summary>
            <typeparam name="T"></typeparam>
            <param name="htmlHelper"></param>
            <param name="actionName"></param>
            <param name="surfaceType"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.HtmlHelperRenderExtensions.UmbracoForm">
            <summary>
            Used for rendering out the Form for BeginUmbracoForm
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.UmbracoForm.#ctor(System.Web.Mvc.ViewContext,System.String,System.String,System.String,System.Web.Mvc.FormMethod,System.Object)">
            <summary>
            Creates an UmbracoForm
            </summary>
            <param name="viewContext"></param>
            <param name="controllerName"></param>
            <param name="controllerAction"></param>
            <param name="area"></param>
            <param name="method"></param>
            <param name="additionalRouteVals"></param>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller.
            </summary>
            <param name="html">The HTML helper.</param>
            <param name="action">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Object,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Object,System.Object,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Object,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.RenderForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.String,System.Object)">
            <summary>
            This renders out the form for us
            </summary>
            <param name="htmlHelper"></param>
            <param name="formAction"></param>
            <param name="method"></param>
            <param name="htmlAttributes"></param>
            <param name="surfaceController"></param>
            <param name="surfaceAction"></param>
            <param name="area"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
            <remarks>
            This code is pretty much the same as the underlying MVC code that writes out the form
            </remarks>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.If(System.Web.Mvc.HtmlHelper,System.Boolean,System.String)">
            <summary>
            If <paramref name="test" /> is <c>true</c>, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="html">The HTML helper.</param>
            <param name="test">If set to <c>true</c> returns <paramref name="valueIfTrue" />; otherwise, <see cref="F:System.String.Empty" />.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.If(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.String)">
            <summary>
            If <paramref name="test" /> is <c>true</c>, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="html">The HTML helper.</param>
            <param name="test">If set to <c>true</c> returns <paramref name="valueIfTrue" />; otherwise, <paramref name="valueIfFalse" />.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.ReplaceLineBreaksForHtml(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Replaces text line breaks with HTML line breaks.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="text">The text.</param>
            <returns>
            The text with text line breaks replaced with HTML line breaks (<c>&lt;br /&gt;</c>).
            </returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.ReplaceLineBreaks(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            HTML encodes the text and replaces text line breaks with HTML line breaks.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="text">The text.</param>
            <returns>
            The HTML encoded text with text line breaks replaced with HTML line breaks (<c>&lt;br /&gt;</c>).
            </returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.CreateHash(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Generates a hash based on the text string passed in.  This method will detect the
            security requirements (is FIPS enabled) and return an appropriate hash.
            </summary>
            <param name="helper"></param>
            <param name="text">The text to create a hash from</param>
            <returns>Hash of the text string</returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.StripHtml(System.Web.Mvc.HtmlHelper,System.Web.IHtmlString,System.String[])">
            <summary>
            Strips all HTML tags from a given string, all contents of the tags will remain.
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.StripHtml(System.Web.Mvc.HtmlHelper,System.String,System.String[])">
            <summary>
            Strips all HTML tags from a given string, all contents of the tags will remain.
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Coalesce(System.Web.Mvc.HtmlHelper,System.Object[])">
            <summary>
            Will take the first non-null value in the collection and return the value of it.
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Concatenate(System.Web.Mvc.HtmlHelper,System.Object[])">
            <summary>
            Joins any number of int/string/objects into one string
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Join(System.Web.Mvc.HtmlHelper,System.String,System.Object[])">
            <summary>
            Joins any number of int/string/objects into one string and separates them with the string separator parameter.
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Truncate(System.Web.Mvc.HtmlHelper,System.Web.IHtmlString,System.Int32)">
            <summary>
            Truncates a string to a given length, can add a ellipsis at the end (...). Method checks for open HTML tags, and makes sure to close them
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Truncate(System.Web.Mvc.HtmlHelper,System.Web.IHtmlString,System.Int32,System.Boolean)">
            <summary>
            Truncates a string to a given length, can add a ellipsis at the end (...). Method checks for open HTML tags, and makes sure to close them
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Truncate(System.Web.Mvc.HtmlHelper,System.Web.IHtmlString,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Truncates a string to a given length, can add a ellipsis at the end (...). Method checks for open HTML tags, and makes sure to close them
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Truncate(System.Web.Mvc.HtmlHelper,System.String,System.Int32)">
            <summary>
            Truncates a string to a given length, can add a ellipsis at the end (...). Method checks for open HTML tags, and makes sure to close them
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Truncate(System.Web.Mvc.HtmlHelper,System.String,System.Int32,System.Boolean)">
            <summary>
            Truncates a string to a given length, can add a ellipsis at the end (...). Method checks for open HTML tags, and makes sure to close them
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Truncate(System.Web.Mvc.HtmlHelper,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Truncates a string to a given length, can add a ellipsis at the end (...). Method checks for open HTML tags, and makes sure to close them
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.TruncateByWords(System.Web.Mvc.HtmlHelper,System.String,System.Int32)">
            <summary>
            Truncates a string to a given amount of words, can add a ellipsis at the end (...). Method checks for open HTML tags, and makes sure to close them
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.TruncateByWords(System.Web.Mvc.HtmlHelper,System.String,System.Int32,System.Boolean)">
            <summary>
            Truncates a string to a given amount of words, can add a ellipsis at the end (...). Method checks for open HTML tags, and makes sure to close them
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.TruncateByWords(System.Web.Mvc.HtmlHelper,System.Web.IHtmlString,System.Int32)">
            <summary>
            Truncates a string to a given amount of words, can add a ellipsis at the end (...). Method checks for open HTML tags, and makes sure to close them
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.TruncateByWords(System.Web.Mvc.HtmlHelper,System.Web.IHtmlString,System.Int32,System.Boolean)">
            <summary>
            Truncates a string to a given amount of words, can add a ellipsis at the end (...). Method checks for open HTML tags, and makes sure to close them
            </summary>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.Merge(System.Web.Mvc.ModelStateDictionary,System.Web.Mvc.ModelStateDictionary,System.String)">
            <summary>
            Merges ModelState that has names matching the prefix
            </summary>
            <param name="state"></param>
            <param name="dictionary"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.IsValid(System.Web.Mvc.ModelStateDictionary,System.String)">
            <summary>
            Checks if there are any model errors on any fields containing the prefix
            </summary>
            <param name="state"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.AddPropertyError(System.Web.Http.ModelBinding.ModelStateDictionary,System.ComponentModel.DataAnnotations.ValidationResult,System.String,System.String,System.String)">
            <summary>
            Adds an <see cref="T:Umbraco.Web.PropertyEditors.Validation.ContentPropertyValidationResult"/> error to model state for a property so we can use it on the client side.
            </summary>
            <param name="modelState"></param>
            <param name="result"></param>
            <param name="propertyAlias"></param>
            <param name="culture">The culture for the property, if the property is invariant than this is empty</param>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.AddPropertyValidationError(System.Web.Http.ModelBinding.ModelStateDictionary,System.ComponentModel.DataAnnotations.ValidationResult,System.String,System.String,System.String)">
            <summary>
            Adds the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> to the model state with the appropriate keys for property errors
            </summary>
            <param name="modelState"></param>
            <param name="result"></param>
            <param name="propertyAlias"></param>
            <param name="culture"></param>
            <param name="segment"></param>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.AddVariantValidationError(System.Web.Http.ModelBinding.ModelStateDictionary,System.String,System.String,System.String)">
            <summary>
            Adds a generic culture error for use in displaying the culture validation error in the save/publish/etc... dialogs
            </summary>
            <param name="modelState"></param>
            <param name="culture"></param>
            <param name="segment"></param>
            <param name="errMsg"></param>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.GetVariantsWithPropertyErrors(System.Web.Http.ModelBinding.ModelStateDictionary,System.String)">
            <summary>
            Returns a list of cultures that have property validation errors
            </summary>
            <param name="modelState"></param>
            <param name="localizationService"></param>
            <param name="cultureForInvariantErrors">The culture to affiliate invariant errors with</param>
            <returns>
            A list of cultures that have property validation errors. The default culture will be returned for any invariant property errors.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.GetVariantsWithErrors(System.Web.Http.ModelBinding.ModelStateDictionary,System.String)">
            <summary>
            Returns a list of cultures that have any validation errors
            </summary>
            <param name="modelState"></param>
            <param name="localizationService"></param>
            <param name="cultureForInvariantErrors">The culture to affiliate invariant errors with</param>
            <returns>
            A list of cultures that have validation errors. The default culture will be returned for any invariant errors.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.AddValidationError(System.Web.Http.ModelBinding.ModelStateDictionary,System.ComponentModel.DataAnnotations.ValidationResult,System.String[])">
            <summary>
            Adds the error to model state correctly for a property so we can use it on the client side.
            </summary>
            <param name="modelState"></param>
            <param name="result"></param>
            <param name="parts">
            Each model state validation error has a name and in most cases this name is made up of parts which are delimited by a '.'
            </param>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.TryAddModelError(System.Web.Http.ModelBinding.ModelStateDictionary,System.String,System.String)">
            <summary>
            Will add an error to model state for a key if that key and error don't already exist
            </summary>
            <param name="modelState"></param>
            <param name="key"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.ToJsonErrors(System.Web.Mvc.ModelStateDictionary)">
            <summary>
            Serializes the ModelState to JSON for JavaScript to interrogate the errors
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.RouteCollectionExtensions.MapUmbracoRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,Umbraco.Web.Mvc.UmbracoVirtualNodeRouteHandler,System.Object,System.String[])">
            <summary>
            Maps an Umbraco route with an UmbracoVirtualNodeRouteHandler
            </summary>
            <param name="routes"></param>
            <param name="name"></param>
            <param name="url"></param>
            <param name="defaults"></param>
            <param name="virtualNodeHandler"></param>
            <param name="constraints"></param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.String[])">
            <summary>
            Routes a webapi controller with namespaces
            </summary>
            <param name="routes"></param>
            <param name="name"></param>
            <param name="url"></param>
            <param name="defaults"></param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.RouteCollectionExtensions.RegisterArea``1(System.Web.Routing.RouteCollection)">
            <summary>
            Extension method to manually register an area
            </summary>
            <typeparam name="T"></typeparam>
            <param name="routes"></param>
        </member>
        <member name="T:Umbraco.Web.UmbracoHelper">
            <summary>
            A helper class that provides many useful methods and functionality for using Umbraco in templates
            </summary>
            <remarks>
            This object is a request based lifetime
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Web.ITagQuery,Umbraco.Core.Dictionary.ICultureDictionaryFactory,Umbraco.Web.IUmbracoComponentRenderer,Umbraco.Web.IPublishedContentQuery,Umbraco.Web.Security.MembershipHelper)">
            <summary>
            Initializes a new instance of <see cref="T:Umbraco.Web.UmbracoHelper"/>.
            </summary>
            <param name="currentPage">The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> item assigned to the helper.</param>
            <param name="tagQuery"></param>
            <param name="cultureDictionary"></param>
            <param name="componentRenderer"></param>
            <param name="publishedContentQuery"></param>
            <param name="membershipHelper"></param>
            <remarks>Sets the current page to the context's published content request's content item.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.#ctor">
            <summary>
            Initializes a new empty instance of <see cref="T:Umbraco.Web.UmbracoHelper"/>.
            </summary>
            <remarks>For tests - nothing is initialized.</remarks>
        </member>
        <member name="P:Umbraco.Web.UmbracoHelper.TagQuery">
            <summary>
            Gets the tag context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoHelper.ContentQuery">
            <summary>
            Gets the query context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoHelper.MembershipHelper">
            <summary>
            Gets the membership helper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoHelper.AssignedContentItem">
             <summary>
             Gets (or sets) the current <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> item assigned to the UmbracoHelper.
             </summary>
             <remarks>
             <para>
             Note that this is the assigned IPublishedContent item to the
             UmbracoHelper, this is not necessarily the Current IPublishedContent
             item being rendered that is assigned to the UmbracoContext.
             This IPublishedContent object is contextual to the current UmbracoHelper instance.
             </para>
            <para>
             In some cases accessing this property will throw an exception if
             there is not IPublishedContent assigned to the Helper this will
             only ever happen if the Helper is constructed via DI during a non front-end request.
             </para>
             </remarks>
             <exception cref="T:System.InvalidOperationException">Thrown if the
             UmbracoHelper is constructed with an UmbracoContext and it is not a
             front-end request.</exception>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.RenderTemplate(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Renders the template for the specified pageId and an optional altTemplateId
            </summary>
            <param name="contentId"></param>
            <param name="altTemplateId">If not specified, will use the template assigned to the node</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.RenderMacro(System.String)">
            <summary>
            Renders the macro with the specified alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.RenderMacro(System.String,System.Object)">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="alias">The alias.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.RenderMacro(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="alias">The alias.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.GetDictionaryValue(System.String)">
            <summary>
            Returns the dictionary value for the key specified
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.GetDictionaryValue(System.String,System.String)">
            <summary>
            Returns the dictionary value for the key specified, and if empty returns the specified default fall back value
            </summary>
            <param name="key">key of dictionary item</param>
            <param name="altText">fall back text if dictionary item is empty - Name altText to match Umbraco.Field</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.UmbracoHelper.CultureDictionary">
            <summary>
            Returns the ICultureDictionary for access to dictionary items
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.MemberHasAccess(System.String)">
            <summary>
            Check if the current user has access to a document
            </summary>
            <param name="path">The full path of the document object to check</param>
            <returns>True if the current user has access or if the current document isn't protected</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.MemberIsLoggedOn">
            <summary>
            Whether or not the current member is logged in (based on the membership provider)
            </summary>
            <returns>True is the current user is logged in</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.Object)">
            <summary>
            Gets a content item from the cache.
            </summary>
            <param name="id">The unique identifier, or the key, of the content item.</param>
            <returns>The content, or null of the content item is not in the cache.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.Int32)">
            <summary>
            Gets a content item from the cache.
            </summary>
            <param name="id">The unique identifier of the content item.</param>
            <returns>The content, or null of the content item is not in the cache.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.Guid)">
            <summary>
            Gets a content item from the cache.
            </summary>
            <param name="id">The key of the content item.</param>
            <returns>The content, or null of the content item is not in the cache.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.String)">
            <summary>
            Gets a content item from the cache.
            </summary>
            <param name="id">The unique identifier, or the key, of the content item.</param>
            <returns>The content, or null of the content item is not in the cache.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.Object[])">
            <summary>
            Gets content items from the cache.
            </summary>
            <param name="ids">The unique identifiers, or the keys, of the content items.</param>
            <returns>The content items that were found in the cache.</returns>
            <remarks>Does not support mixing identifiers and keys.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(Umbraco.Core.Udi[])">
            <summary>
            Gets the contents corresponding to the identifiers.
            </summary>
            <param name="ids">The content identifiers.</param>
            <returns>The existing contents corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing content, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(Umbraco.Core.GuidUdi[])">
            <summary>
            Gets the contents corresponding to the identifiers.
            </summary>
            <param name="ids">The content identifiers.</param>
            <returns>The existing contents corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing content, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.Int32[])">
            <summary>
            Gets content items from the cache.
            </summary>
            <param name="ids">The unique identifiers of the content items.</param>
            <returns>The content items that were found in the cache.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.Guid[])">
            <summary>
            Gets content items from the cache.
            </summary>
            <param name="ids">The keys of the content items.</param>
            <returns>The content items that were found in the cache.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.String[])">
            <summary>
            Gets content items from the cache.
            </summary>
            <param name="ids">The unique identifiers, or the keys, of the content items.</param>
            <returns>The content items that were found in the cache.</returns>
            <remarks>Does not support mixing identifiers and keys.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets the contents corresponding to the identifiers.
            </summary>
            <param name="ids">The content identifiers.</param>
            <returns>The existing contents corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing content, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.Collections.Generic.IEnumerable{Umbraco.Core.Udi})">
            <summary>
            Gets the contents corresponding to the identifiers.
            </summary>
            <param name="ids">The content identifiers.</param>
            <returns>The existing contents corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing content, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.Collections.Generic.IEnumerable{Umbraco.Core.GuidUdi})">
            <summary>
            Gets the contents corresponding to the identifiers.
            </summary>
            <param name="ids">The content identifiers.</param>
            <returns>The existing contents corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing content, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the contents corresponding to the identifiers.
            </summary>
            <param name="ids">The content identifiers.</param>
            <returns>The existing contents corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing content, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Content(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the contents corresponding to the identifiers.
            </summary>
            <param name="ids">The content identifiers.</param>
            <returns>The existing contents corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing content, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.ConvertIdObjectToUdi(System.Object,Umbraco.Core.Udi@)">
            <remarks>Had to change to internal for testing.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Media(System.Object)">
            <summary>
            Overloaded method accepting an 'object' type
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            We accept an object type because GetPropertyValue now returns an 'object', we still want to allow people to pass
            this result in to this method.
            This method will throw an exception if the value is not of type int or string.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Media(System.Object[])">
            <summary>
            Gets the medias corresponding to the identifiers.
            </summary>
            <param name="ids">The media identifiers.</param>
            <returns>The existing medias corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing media, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Media(System.Int32[])">
            <summary>
            Gets the medias corresponding to the identifiers.
            </summary>
            <param name="ids">The media identifiers.</param>
            <returns>The existing medias corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing media, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Media(System.String[])">
            <summary>
            Gets the medias corresponding to the identifiers.
            </summary>
            <param name="ids">The media identifiers.</param>
            <returns>The existing medias corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing media, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Media(Umbraco.Core.Udi[])">
            <summary>
            Gets the medias corresponding to the identifiers.
            </summary>
            <param name="ids">The media identifiers.</param>
            <returns>The existing medias corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing media, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Media(Umbraco.Core.GuidUdi[])">
            <summary>
            Gets the medias corresponding to the identifiers.
            </summary>
            <param name="ids">The media identifiers.</param>
            <returns>The existing medias corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing media, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Media(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets the medias corresponding to the identifiers.
            </summary>
            <param name="ids">The media identifiers.</param>
            <returns>The existing medias corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing media, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Media(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the medias corresponding to the identifiers.
            </summary>
            <param name="ids">The media identifiers.</param>
            <returns>The existing medias corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing media, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Media(System.Collections.Generic.IEnumerable{Umbraco.Core.Udi})">
            <summary>
            Gets the medias corresponding to the identifiers.
            </summary>
            <param name="ids">The media identifiers.</param>
            <returns>The existing medias corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing media, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Media(System.Collections.Generic.IEnumerable{Umbraco.Core.GuidUdi})">
            <summary>
            Gets the medias corresponding to the identifiers.
            </summary>
            <param name="ids">The media identifiers.</param>
            <returns>The existing medias corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing media, it will be missing in the returned value.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Media(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the medias corresponding to the identifiers.
            </summary>
            <param name="ids">The media identifiers.</param>
            <returns>The existing medias corresponding to the identifiers.</returns>
            <remarks>If an identifier does not match an existing media, it will be missing in the returned value.</remarks>
        </member>
        <member name="T:Umbraco.Web.TypeLoaderExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Umbraco.Core.Composing.TypeLoader"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.TypeLoaderExtensions.GetSurfaceControllers(Umbraco.Core.Composing.TypeLoader)">
            <summary>
            Gets all types implementing <see cref="T:Umbraco.Web.Mvc.SurfaceController"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.TypeLoaderExtensions.GetUmbracoApiControllers(Umbraco.Core.Composing.TypeLoader)">
            <summary>
            Gets all types implementing <see cref="T:Umbraco.Web.WebApi.UmbracoApiController"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Web.UmbracoApplication">
            <summary>
            Represents the Umbraco global.asax class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoApplication.GetMainDom(Umbraco.Core.Logging.ILogger)">
            <summary>
            Returns a new MainDom
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoApplication.Restart">
            <summary>
            Restarts the Umbraco application.
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoApplication.Restart(System.Web.HttpContextBase)">
            <summary>
            Restarts the Umbraco application.
            </summary>
        </member>
        <member name="T:Umbraco.Web.UmbracoContext">
            <summary>
            Class that encapsulates Umbraco information of a specific HTTP request
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.ObjectCreated">
            <summary>
            This is used internally for performance calculations, the ObjectCreated DateTime is set as soon as this
            object is instantiated which in the web site is created during the BeginRequest phase.
            We can then determine complete rendering time from that.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.UmbracoRequestId">
            <summary>
            This is used internally for debugging and also used to define anything required to distinguish this request from another.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.Security">
            <summary>
            Gets the WebSecurity class
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.OriginalRequestUrl">
            <summary>
            Gets the uri that is handled by ASP.NET after server-side rewriting took place.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.CleanedUmbracoUrl">
            <summary>
            Gets the cleaned up URL that is handled by Umbraco.
            </summary>
            <remarks>That is, lowercase, no trailing slash after path, no .aspx...</remarks>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.PublishedSnapshot">
            <summary>
            Gets the published snapshot.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.ContentCache">
            <summary>
            Gets the published content cache.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.Content">
            <summary>
            Gets the published content cache.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.MediaCache">
            <summary>
            Gets the published media cache.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.Media">
            <summary>
            Gets the published media cache.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.Domains">
            <summary>
            Gets the domains cache.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.IsFrontEndUmbracoRequest">
            <summary>
            Boolean value indicating whether the current request is a front-end umbraco request
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.UrlProvider">
            <summary>
            Gets the URL provider.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.PublishedRequest">
            <summary>
            Gets/sets the PublishedRequest object
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.HttpContext">
            <summary>
            Exposes the HttpContext for the current request
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.VariationContextAccessor">
            <summary>
            Gets the variation context accessor.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.IsDebug">
            <summary>
            Gets a value indicating whether the request has debugging enabled
            </summary>
            <value><c>true</c> if this instance is debug; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.InPreviewMode">
            <summary>
            Determines whether the current user is in a preview mode and browsing the site (ie. not in the admin UI)
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.Url(System.Int32,System.String)">
            <summary>
            Gets the URL of a content identified by its identifier.
            </summary>
            <param name="contentId">The content identifier.</param>
            <param name="culture"></param>
            <returns>The URL for the content.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.Url(System.Guid,System.String)">
            <summary>
            Gets the URL of a content identified by its identifier.
            </summary>
            <param name="contentId">The content identifier.</param>
            <param name="culture"></param>
            <returns>The URL for the content.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.Url(System.Int32,Umbraco.Core.Models.PublishedContent.UrlMode,System.String)">
            <summary>
            Gets the URL of a content identified by its identifier, in a specified mode.
            </summary>
            <param name="contentId">The content identifier.</param>
            <param name="mode">The mode.</param>
            <param name="culture"></param>
            <returns>The URL for the content.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.Url(System.Guid,Umbraco.Core.Models.PublishedContent.UrlMode,System.String)">
            <summary>
            Gets the URL of a content identified by its identifier, in a specified mode.
            </summary>
            <param name="contentId">The content identifier.</param>
            <param name="mode">The mode.</param>
            <param name="culture"></param>
            <returns>The URL for the content.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.UrlAbsolute(System.Int32,System.String)">
            <summary>
            Gets the absolute URL of a content identified by its identifier.
            </summary>
            <param name="contentId">The content identifier.</param>
            <param name="culture"></param>
            <returns>The absolute URL for the content.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.UrlAbsolute(System.Guid,System.String)">
            <summary>
            Gets the absolute URL of a content identified by its identifier.
            </summary>
            <param name="contentId">The content identifier.</param>
            <param name="culture"></param>
            <returns>The absolute URL for the content.</returns>
        </member>
        <member name="T:Umbraco.Web.UmbracoInjectedModule">
            <summary>
            Represents the main Umbraco module.
            </summary>
            <remarks>
            <para>Is registered by the <see cref="T:Umbraco.Web.Runtime.WebRuntime"/>.</para>
            <para>Do *not* try to use that one as a module in web.config.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoInjectedModule.BeginRequest(System.Web.HttpContextBase)">
            <summary>
            Begins to process a request.
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoInjectedModule.ProcessRequest(System.Web.HttpContextBase)">
             <summary>
             Processes the Umbraco Request
             </summary>
             <param name="httpContext"></param>
             <remarks>
            
             This will check if we are trying to route to the default back office page (i.e. ~/Umbraco/ or ~/Umbraco or ~/Umbraco/Default )
             and ensure that the MVC handler executes for that. This is required because the route for /Umbraco will never execute because
             files/folders exist there and we cannot set the RouteCollection.RouteExistingFiles = true since that will muck a lot of other things up.
             So we handle it here and explicitly execute the MVC controller.
            
             </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoInjectedModule.EnsureUmbracoRoutablePage(Umbraco.Web.UmbracoContext,System.Web.HttpContextBase)">
            <summary>
            Checks the current request and ensures that it is routable based on the structure of the request and URI
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoInjectedModule.RewriteToBackOfficeHandler(System.Web.HttpContextBase)">
            <summary>
            Rewrites to the default back office page.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoInjectedModule.RewriteToUmbracoHandler(System.Web.HttpContextBase,Umbraco.Web.Routing.PublishedRequest)">
            <summary>
            Rewrites to the Umbraco handler - we always send the request via our MVC rendering engine, this will deal with
            requests destined for webforms.
            </summary>
            <param name="context"></param>
            <param name="pcr"> </param>
        </member>
        <member name="M:Umbraco.Web.UmbracoInjectedModule.DisposeHttpContextItems(System.Web.HttpContext)">
            <summary>
            Any object that is in the HttpContext.Items collection that is IDisposable will get disposed on the end of the request
            </summary>
            <param name="http"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoInjectedModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize the module,  this will trigger for each new application
            and there may be more than 1 application per application domain
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Umbraco.Web.UriUtility.ToFullUrl(System.String,System.Web.HttpContextBase)">
            <summary>
            Returns an full URL with the host, port, etc...
            </summary>
            <param name="absolutePath">An absolute path (i.e. starts with a '/' )</param>
            <param name="httpContext"> </param>
            <returns></returns>
            <remarks>
            Based on http://stackoverflow.com/questions/3681052/get-absolute-url-from-relative-path-refactored-method
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoAuthorizedHttpHandler.ValidateUserContextId(System.String)">
            <summary>
            Checks if the umbraco context id is valid
            </summary>
            <param name="currentUmbracoUserContextId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoAuthorizedHttpHandler.ValidateCredentials(System.String,System.String)">
            <summary>
            Checks if the username/password credentials are valid
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoAuthorizedHttpHandler.AuthorizeRequest(System.String,System.Boolean)">
            <summary>
            Validates the user for access to a certain application
            </summary>
            <param name="app">The application alias.</param>
            <param name="throwExceptions">true if an exception should be thrown if authorization fails</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoAuthorizedHttpHandler.UserHasAppAccess(System.String,Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Checks if the specified user as access to the app
            </summary>
            <param name="app"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoAuthorizedHttpHandler.UserHasAppAccess(System.String,System.String)">
            <summary>
            Checks if the specified user by username as access to the app
            </summary>
            <param name="app"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoAuthorizedHttpHandler.AuthorizeRequest(System.Boolean)">
            <summary>
            Returns true if there is a valid logged in user and that ssl is enabled if required
            </summary>
            <param name="throwExceptions">true if an exception should be thrown if authorization fails</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.UmbracoHttpHandler.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoHttpHandler.ProfilingLogger">
            <summary>
            Gets the ProfilingLogger.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoHttpHandler.UmbracoContextAccessor">
            <summary>
            Gets the Umbraco context accessor.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoHttpHandler.Umbraco">
            <summary>
            Gets the Umbraco helper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoHttpHandler.Services">
            <summary>
            Gets the services context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoHttpHandler.Security">
            <summary>
            Gets the web security helper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoHttpHandler.Url">
            <summary>
            Gets the URL helper.
            </summary>
            <remarks>This URL helper is created without any route data and an empty request context.</remarks>
        </member>
        <member name="T:Umbraco.Web.UmbracoWebService">
            <summary>
            An abstract web service class exposing common umbraco objects
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoWebService.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoWebService.ProfilingLogger">
            <summary>
            Gets the ProfilingLogger.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoWebService.UmbracoContext">
            <summary>
            Gets the Umbraco context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoWebService.UmbracoContextAccessor">
            <summary>
            Gets the Umbraco context accessor.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoWebService.Umbraco">
            <summary>
            Gets the Umbraco helper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoWebService.Services">
            <summary>
            Gets the services context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoWebService.GlobalSettings">
            <summary>
            Gets the global settings.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoWebService.Security">
            <summary>
            Gets the web security helper.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoWebService.Url">
            <summary>
            Gets the URL helper.
            </summary>
            <remarks>This URL helper is created without any route data and an empty request context.</remarks>
        </member>
    </members>
</doc>
