<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Umbraco.Examine</name>
    </assembly>
    <members>
        <member name="T:Umbraco.Examine.BaseValueSetBuilder`1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Examine.BaseValueSetBuilder`1.GetValueSets(`0[])">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Examine.ContentIndexPopulator">
            <summary>
            Performs the data lookups required to rebuild a content index
            </summary>
        </member>
        <member name="F:Umbraco.Examine.ContentIndexPopulator._publishedQuery">
            <summary>
            This is a static query, it's parameters don't change so store statically
            </summary>
        </member>
        <member name="M:Umbraco.Examine.ContentIndexPopulator.#ctor(Umbraco.Core.Services.IContentService,Umbraco.Core.Persistence.ISqlContext,Umbraco.Examine.IContentValueSetBuilder)">
            <summary>
            Default constructor to lookup all content data
            </summary>
            <param name="contentService"></param>
            <param name="sqlContext"></param>
            <param name="contentValueSetBuilder"></param>
        </member>
        <member name="M:Umbraco.Examine.ContentIndexPopulator.#ctor(System.Boolean,System.Nullable{System.Int32},Umbraco.Core.Services.IContentService,Umbraco.Core.Persistence.ISqlContext,Umbraco.Examine.IValueSetBuilder{Umbraco.Core.Models.IContent})">
            <summary>
            Optional constructor allowing specifying custom query parameters
            </summary>
            <param name="publishedValuesOnly"></param>
            <param name="parentId"></param>
            <param name="contentService"></param>
            <param name="sqlContext"></param>
            <param name="contentValueSetBuilder"></param>
        </member>
        <member name="T:Umbraco.Examine.ContentValueSetBuilder">
            <summary>
            Builds <see cref="T:Examine.ValueSet"/>s for <see cref="T:Umbraco.Core.Models.IContent"/> items
            </summary>
        </member>
        <member name="M:Umbraco.Examine.ContentValueSetBuilder.GetValueSets(Umbraco.Core.Models.IContent[])">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Examine.ExamineExtensions">
            <summary>
            Extension methods for the LuceneIndex
            </summary>
        </member>
        <member name="F:Umbraco.Examine.ExamineExtensions.CultureIsoCodeFieldNameMatchExpression">
            <summary>
            Matches a culture iso name suffix
            </summary>
            <remarks>
            myFieldName_en-us will match the "en-us"
            </remarks>
        </member>
        <member name="M:Umbraco.Examine.ExamineExtensions.ConfigureIndexes(Examine.IExamineManager,Umbraco.Core.IMainDom,Umbraco.Core.Logging.ILogger)">
            <summary>
            Called on startup to configure each index.
            </summary>
            <remarks>
            Configures and unlocks all Lucene based indexes registered with the <see cref="T:Examine.IExamineManager"/>.
            </remarks>
        </member>
        <member name="M:Umbraco.Examine.ExamineExtensions.GetCultureFields(Umbraco.Examine.IUmbracoIndex,System.String)">
            <summary>
            Returns all index fields that are culture specific (suffixed)
            </summary>
            <param name="index"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Examine.ExamineExtensions.GetCultureAndInvariantFields(Umbraco.Examine.IUmbracoIndex,System.String)">
            <summary>
            Returns all index fields that are culture specific (suffixed) or invariant
            </summary>
            <param name="index"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Examine.ExamineExtensions.ConfigureLuceneIndexes(Examine.IExamineManager,Umbraco.Core.Logging.ILogger,System.Boolean)">
            <summary>
            Forcibly unlocks all lucene based indexes
            </summary>
            <remarks>
            This is not thread safe, use with care
            </remarks>
        </member>
        <member name="M:Umbraco.Examine.ExamineExtensions.IsHealthy(Examine.LuceneEngine.Providers.LuceneIndex,System.Exception@)">
            <summary>
            Checks if the index can be read/opened
            </summary>
            <param name="indexer"></param>
            <param name="ex">The exception returned if there was an error</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Examine.ExamineExtensions.GetIndexDocumentCount(Examine.LuceneEngine.Providers.LuceneIndex)">
            <summary>
            Return the number of indexed documents in Lucene
            </summary>
            <param name="indexer"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Examine.ExamineExtensions.GetIndexFieldCount(Examine.LuceneEngine.Providers.LuceneIndex)">
            <summary>
            Return the total number of fields in the index
            </summary>
            <param name="indexer"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Examine.IContentValueSetBuilder">
            <inheritdoc />
            <summary>
            Marker interface for a <see cref="T:Examine.ValueSet" /> builder for supporting unpublished content
            </summary>
        </member>
        <member name="T:Umbraco.Examine.IContentValueSetValidator">
            <summary>
            An extended <see cref="T:Examine.IValueSetValidator"/> for content indexes
            </summary>
        </member>
        <member name="P:Umbraco.Examine.IContentValueSetValidator.PublishedValuesOnly">
            <summary>
            When set to true the index will only retain published values
            </summary>
            <remarks>
            Any non-published values will not be put or kept in the index:
            * Deleted, Trashed, non-published Content items
            * non-published Variants
            </remarks>
        </member>
        <member name="P:Umbraco.Examine.IContentValueSetValidator.SupportProtectedContent">
            <summary>
            If true, protected content will be indexed otherwise it will not be put or kept in the index
            </summary>
        </member>
        <member name="T:Umbraco.Examine.IUmbracoContentIndex2">
            <summary>
            Marker interface for indexes of Umbraco content
            </summary>
            <remarks>
            This is a backwards compat change, in next major version remove the need for this and just have a single interface
            </remarks>
        </member>
        <member name="T:Umbraco.Examine.IUmbracoContentIndex">
            <summary>
            Marker interface for indexes of Umbraco content
            </summary>
        </member>
        <member name="T:Umbraco.Examine.IIndexCreator">
            <summary>
            Creates <see cref="T:Examine.IIndex"/>'s 
            </summary>
        </member>
        <member name="T:Umbraco.Examine.IIndexDiagnostics">
            <summary>
            Exposes diagnostic information about an index
            </summary>
        </member>
        <member name="P:Umbraco.Examine.IIndexDiagnostics.DocumentCount">
            <summary>
            The number of documents in the index
            </summary>
        </member>
        <member name="P:Umbraco.Examine.IIndexDiagnostics.FieldCount">
            <summary>
            The number of fields in the index
            </summary>
        </member>
        <member name="M:Umbraco.Examine.IIndexDiagnostics.IsHealthy">
            <summary>
            If the index can be open/read
            </summary>
            <returns>
            A successful attempt if it is healthy, else a failed attempt with a message if unhealthy
            </returns>
        </member>
        <member name="P:Umbraco.Examine.IIndexDiagnostics.Metadata">
            <summary>
            A key/value collection of diagnostic properties for the index
            </summary>
            <remarks>
            Used to display in the UI
            </remarks>
        </member>
        <member name="M:Umbraco.Examine.IIndexPopulator.IsRegistered(Examine.IIndex)">
            <summary>
            If this index is registered with this populator
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Examine.IIndexPopulator.Populate(Examine.IIndex[])">
            <summary>
            Populate indexers
            </summary>
            <param name="indexes"></param>
        </member>
        <member name="M:Umbraco.Examine.UmbracoIndexConfig.GetMemberValueSetValidator">
            <summary>
            Returns the <see cref="T:Examine.IValueSetValidator"/> for the member indexer
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Examine.IndexPopulator`1">
            <summary>
            An <see cref="T:Umbraco.Examine.IIndexPopulator"/> that is automatically associated to any index of type <see cref="!:TIndex"/>
            </summary>
            <typeparam name="TIndex"></typeparam>
        </member>
        <member name="M:Umbraco.Examine.IndexPopulator.RegisterIndex(System.String)">
            <summary>
            Registers an index for this populator
            </summary>
            <param name="indexName"></param>
        </member>
        <member name="T:Umbraco.Examine.IndexRebuilder">
            <summary>
            Utility to rebuild all indexes ensuring minimal data queries
            </summary>
        </member>
        <member name="T:Umbraco.Examine.IPublishedContentValueSetBuilder">
            <summary>
            Marker interface for a <see cref="T:Examine.ValueSet"/> builder for only published content
            </summary>
        </member>
        <member name="T:Umbraco.Examine.IUmbracoIndex">
            <summary>
            A Marker interface for defining an Umbraco indexer
            </summary>
        </member>
        <member name="P:Umbraco.Examine.IUmbracoIndex.EnableDefaultEventHandler">
            <summary>
            When set to true Umbraco will keep the index in sync with Umbraco data automatically
            </summary>
        </member>
        <member name="P:Umbraco.Examine.IUmbracoIndex.PublishedValuesOnly">
            <summary>
            When set to true the index will only retain published values
            </summary>
            <remarks>
            Any non-published values will not be put or kept in the index:
            * Deleted, Trashed, non-published Content items
            * non-published Variants
            </remarks>
        </member>
        <member name="M:Umbraco.Examine.IUmbracoIndex.GetFields">
            <summary>
            Returns a list of all indexed fields
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Examine.IValueSetBuilder`1">
            <summary>
            Creates a collection of <see cref="T:Examine.ValueSet"/> to be indexed based on a collection of <see cref="!:T"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Examine.IValueSetBuilder`1.GetValueSets(`0[])">
            <summary>
            Creates a collection of <see cref="T:Examine.ValueSet"/> to be indexed based on a collection of <see cref="!:T"/>
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Examine.MediaIndexPopulator">
            <summary>
            Performs the data lookups required to rebuild a media index
            </summary>
        </member>
        <member name="M:Umbraco.Examine.MediaIndexPopulator.#ctor(Umbraco.Core.Services.IMediaService,Umbraco.Examine.IValueSetBuilder{Umbraco.Core.Models.IMedia})">
            <summary>
            Default constructor to lookup all content data
            </summary>
            <param name="mediaService"></param>
            <param name="mediaValueSetBuilder"></param>
        </member>
        <member name="M:Umbraco.Examine.MediaIndexPopulator.#ctor(System.Nullable{System.Int32},Umbraco.Core.Services.IMediaService,Umbraco.Examine.IValueSetBuilder{Umbraco.Core.Models.IMedia})">
            <summary>
            Optional constructor allowing specifying custom query parameters
            </summary>
            <param name="parentId"></param>
            <param name="mediaService"></param>
            <param name="mediaValueSetBuilder"></param>
        </member>
        <member name="M:Umbraco.Examine.MediaValueSetBuilder.GetValueSets(Umbraco.Core.Models.IMedia[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Examine.MemberValueSetBuilder.GetValueSets(Umbraco.Core.Models.IMember[])">
            <inheritdoc />
        </member>
        <member name="F:Umbraco.Examine.MemberValueSetValidator.DefaultMemberIndexFields">
            <summary>
            By default these are the member fields we index
            </summary>
        </member>
        <member name="T:Umbraco.Examine.PublishedContentIndexPopulator">
            <summary>
            Performs the data lookups required to rebuild a content index containing only published content
            </summary>
            <remarks>
            The published (external) index will still rebuild just fine using the default <see cref="T:Umbraco.Examine.ContentIndexPopulator"/> which is what
            is used when rebuilding all indexes, but this will be used when the single index is rebuilt and will go a little bit faster
            since the data query is more specific.
            </remarks>
        </member>
        <member name="M:Umbraco.Examine.UmbracoExamineExtensions.ParentId(Examine.Search.IQuery,System.Int32)">
            <summary>
            Query method to search on parent id
            </summary>
            <param name="query"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Examine.UmbracoExamineExtensions.NodeName(Examine.Search.IQuery,System.String)">
            <summary>
            Query method to search on node name
            </summary>
            <param name="query"></param>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Examine.UmbracoExamineExtensions.NodeName(Examine.Search.IQuery,Examine.Search.IExamineValue)">
            <summary>
            Query method to search on node name
            </summary>
            <param name="query"></param>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Examine.UmbracoExamineExtensions.NodeTypeAlias(Examine.Search.IQuery,System.String)">
            <summary>
            Query method to search on node type alias
            </summary>
            <param name="query"></param>
            <param name="nodeTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Examine.UmbracoExamineExtensions.NodeTypeAlias(Examine.Search.IQuery,Examine.Search.IExamineValue)">
            <summary>
            Query method to search on node type alias
            </summary>
            <param name="query"></param>
            <param name="nodeTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Examine.IndexTypes">
            <summary>
            The index types stored in the Lucene Index
            </summary>
        </member>
        <member name="F:Umbraco.Examine.IndexTypes.Content">
            <summary>
            The content index type
            </summary>
            <remarks>
            Is lower case because the Standard Analyzer requires lower case
            </remarks>
        </member>
        <member name="F:Umbraco.Examine.IndexTypes.Media">
            <summary>
            The media index type
            </summary>
            <remarks>
            Is lower case because the Standard Analyzer requires lower case
            </remarks>
        </member>
        <member name="F:Umbraco.Examine.IndexTypes.Member">
            <summary>
            The member index type
            </summary>
            <remarks>
            Is lower case because the Standard Analyzer requires lower case
            </remarks>
        </member>
        <member name="T:Umbraco.Examine.NoPrefixSimpleFsLockFactory">
            <summary>
            A custom <see cref="T:Lucene.Net.Store.SimpleFSLockFactory"/> that ensures a prefixless lock prefix
            </summary>
            <remarks>
            This is a work around for the Lucene APIs. By default Lucene will use a null prefix however when we set a custom
            lock factory the null prefix is overwritten.
            </remarks>
        </member>
        <member name="T:Umbraco.Examine.UmbracoContentIndex">
            <summary>
            An indexer for Umbraco content and media
            </summary>
        </member>
        <member name="M:Umbraco.Examine.UmbracoContentIndex.#ctor(System.String,Lucene.Net.Store.Directory,Examine.FieldDefinitionCollection,Lucene.Net.Analysis.Analyzer,Umbraco.Core.Logging.IProfilingLogger,Umbraco.Core.Services.ILocalizationService,Umbraco.Examine.IContentValueSetValidator,System.Collections.Generic.IReadOnlyDictionary{System.String,Examine.LuceneEngine.IFieldValueTypeFactory})">
            <summary>
            Create an index at runtime
            </summary>
            <param name="name"></param>
            <param name="fieldDefinitions"></param>
            <param name="luceneDirectory"></param>
            <param name="defaultAnalyzer"></param>
            <param name="profilingLogger"></param>
            <param name="languageService"></param>
            <param name="validator"></param>
            <param name="indexValueTypes"></param>
        </member>
        <member name="M:Umbraco.Examine.UmbracoContentIndex.PerformIndexItems(System.Collections.Generic.IEnumerable{Examine.ValueSet},System.Action{Examine.IndexOperationEventArgs})">
            <summary>
            Special check for invalid paths
            </summary>
            <param name="values"></param>
            <param name="onComplete"></param>
        </member>
        <member name="M:Umbraco.Examine.UmbracoContentIndex.PerformDeleteFromIndex(System.Collections.Generic.IEnumerable{System.String},System.Action{Examine.IndexOperationEventArgs})">
            <inheritdoc />
            <summary>
            Deletes a node from the index.
            </summary>
            <remarks>
            When a content node is deleted, we also need to delete it's children from the index so we need to perform a
            custom Lucene search to find all decendents and create Delete item queues for them too.
            </remarks>
            <param name="itemIds">ID of the node to delete</param>
            <param name="onComplete"></param>
        </member>
        <member name="T:Umbraco.Examine.ContentValueSetValidator">
            <summary>
            Used to validate a ValueSet for content/media - based on permissions, parent id, etc....
            </summary>
        </member>
        <member name="T:Umbraco.Examine.UmbracoExamineIndex">
            <summary>
            An abstract provider containing the basic functionality to be able to query against Umbraco data.
            </summary>
        </member>
        <member name="F:Umbraco.Examine.UmbracoExamineIndex.IndexPathFieldName">
            <summary>
            Used to store the path of a content object
            </summary>
        </member>
        <member name="F:Umbraco.Examine.UmbracoExamineIndex.RawFieldPrefix">
            <summary>
            The prefix added to a field when it is duplicated in order to store the original raw value.
            </summary>
        </member>
        <member name="M:Umbraco.Examine.UmbracoExamineIndex.#ctor(System.String,Lucene.Net.Store.Directory,Examine.FieldDefinitionCollection,Lucene.Net.Analysis.Analyzer,Umbraco.Core.Logging.IProfilingLogger,Examine.IValueSetValidator,System.Collections.Generic.IReadOnlyDictionary{System.String,Examine.LuceneEngine.IFieldValueTypeFactory})">
            <summary>
            Create a new <see cref="T:Umbraco.Examine.UmbracoExamineIndex"/>
            </summary>
            <param name="name"></param>
            <param name="fieldDefinitions"></param>
            <param name="luceneDirectory"></param>
            <param name="defaultAnalyzer"></param>
            <param name="profilingLogger"></param>
            <param name="validator"></param>
            <param name="indexValueTypes"></param>
        </member>
        <member name="P:Umbraco.Examine.UmbracoExamineIndex.EnableDefaultEventHandler">
            <summary>
            When set to true Umbraco will keep the index in sync with Umbraco data automatically
            </summary>
        </member>
        <member name="M:Umbraco.Examine.UmbracoExamineIndex.GetFields">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Examine.UmbracoExamineIndex.PerformDeleteFromIndex(System.Collections.Generic.IEnumerable{System.String},System.Action{Examine.IndexOperationEventArgs})">
            <summary>
            override to check if we can actually initialize.
            </summary>
            <remarks>
            This check is required since the base examine lib will try to rebuild on startup
            </remarks>
        </member>
        <member name="M:Umbraco.Examine.UmbracoExamineIndex.CanInitialize">
            <summary>
            Returns true if the Umbraco application is in a state that we can initialize the examine indexes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Examine.UmbracoExamineIndex.OnIndexingError(Examine.IndexingErrorEventArgs)">
            <summary>
            overridden for logging
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Umbraco.Examine.UmbracoExamineIndex.OnDocumentWriting(Examine.LuceneEngine.DocumentWritingEventArgs)">
            <summary>
            This ensures that the special __Raw_ fields are indexed correctly
            </summary>
            <param name="docArgs"></param>
        </member>
        <member name="M:Umbraco.Examine.UmbracoExamineIndex.AddDocument(Lucene.Net.Documents.Document,Examine.ValueSet,Lucene.Net.Index.IndexWriter)">
            <summary>
            Overridden for logging.
            </summary>
        </member>
        <member name="T:Umbraco.Examine.LuceneIndexCreator">
            <inheritdoc />
            <summary>
            Abstract class for creating Lucene based Indexes
            </summary>
        </member>
        <member name="M:Umbraco.Examine.LuceneIndexCreator.CreateFileSystemLuceneDirectory(System.String)">
            <summary>
            Creates a file system based Lucene <see cref="T:Lucene.Net.Store.Directory"/> with the correct locking guidelines for Umbraco
            </summary>
            <param name="folderName">
            The folder name to store the index (single word, not a fully qualified folder) (i.e. Internal)
            </param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Examine.UmbracoFieldDefinitionCollection">
            <summary>
            Custom <see cref="T:Examine.FieldDefinitionCollection"/> allowing dynamic creation of <see cref="T:Examine.FieldDefinition"/>
            </summary>
        </member>
        <member name="F:Umbraco.Examine.UmbracoFieldDefinitionCollection.UmbracoIndexFieldDefinitions">
            <summary>
            A type that defines the type of index for each Umbraco field (non user defined fields)
            Alot of standard umbraco fields shouldn't be tokenized or even indexed, just stored into lucene
            for retreival after searching.
            </summary>
        </member>
        <member name="M:Umbraco.Examine.UmbracoFieldDefinitionCollection.TryGetValue(System.String,Examine.FieldDefinition@)">
             <summary>
             Overridden to dynamically add field definitions for culture variations
             </summary>
             <param name="fieldName"></param>
             <param name="fieldDefinition"></param>
             <returns></returns>
             <remarks>
             We need to do this so that we don't have to maintain a huge static list of all field names and their definitions
             otherwise we'd have to dynamically add/remove definitions anytime languages are added/removed, etc...
             For example, we have things like `nodeName` and `__Published` which are also used for culture fields like `nodeName_en-us`
             and we don't want to have a full static list of all of these definitions when we can just define the one definition and then
             dynamically apply that to culture specific fields.
            
             There is a caveat to this however, when a field definition is found for a non-culture field we will create and store a new field
             definition for that culture so that the next time it needs to be looked up and used we are not allocating more objects. This does mean
             however that if a language is deleted, the field definitions for that language will still exist in memory. This isn't going to cause any
             problems and the mem will be cleared on next site restart but it's worth pointing out.
             </remarks>
        </member>
        <member name="T:Umbraco.Examine.UmbracoMemberIndex">
            <summary>
            Custom indexer for members
            </summary>
        </member>
        <member name="M:Umbraco.Examine.UmbracoMemberIndex.#ctor(System.String,Examine.FieldDefinitionCollection,Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer,Umbraco.Core.Logging.IProfilingLogger,Examine.IValueSetValidator)">
            <summary>
            Constructor to allow for creating an indexer at runtime
            </summary>
            <param name="name"></param>
            <param name="fieldDefinitions"></param>
            <param name="luceneDirectory"></param>
            <param name="profilingLogger"></param>
            <param name="validator"></param>
            <param name="analyzer"></param>
        </member>
        <member name="T:Umbraco.Examine.ValueSetValidator">
            <summary>
            Performing basic validation of a value set
            </summary>
        </member>
        <member name="P:Umbraco.Examine.ValueSetValidator.IncludeItemTypes">
            <summary>
            Optional inclusion list of content types to index
            </summary>
            <remarks>
            All other types will be ignored if they do not match this list
            </remarks>
        </member>
        <member name="P:Umbraco.Examine.ValueSetValidator.ExcludeItemTypes">
            <summary>
            Optional exclusion list of content types to ignore
            </summary>
            <remarks>
            Any content type alias matched in this will not be included in the index
            </remarks>
        </member>
        <member name="P:Umbraco.Examine.ValueSetValidator.IncludeFields">
            <summary>
            Optional inclusion list of index fields to index
            </summary>
            <remarks>
            If specified, all other fields in a <see cref="T:Examine.ValueSet"/> will be filtered
            </remarks>
        </member>
        <member name="P:Umbraco.Examine.ValueSetValidator.ExcludeFields">
            <summary>
            Optional exclusion list of index fields
            </summary>
            <remarks>
            If specified, all fields matching these field names will be filtered from the <see cref="T:Examine.ValueSet"/>
            </remarks>
        </member>
    </members>
</doc>
