<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MiniProfiler</name>
    </assembly>
    <members>
        <member name="T:StackExchange.Profiling.Helpers.IpAddressIdentity">
            <summary>
            Identifies users based on IP Address.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Helpers.IpAddressIdentity.GetUser(System.Web.HttpRequest)">
            <summary>
            Returns the <paramref name="request"/>'s client IP address.
            We combine both the REMOTE_ADDR header (which is the connecting device's IP address),
            plus the X-Forwarded-For header if present (which is set by some proxy
            servers and load balancers). This allows us to have a unique per-user view, even
            when behind a proxy or load balancer.
            </summary>
            <param name="request">The request to get the client IP from.</param>
        </member>
        <member name="T:StackExchange.Profiling.MiniProfilerHandler">
            <summary>
            Understands how to route and respond to MiniProfiler UI URLS.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.MiniProfilerHandler.ResourceCache">
            <summary>
            Embedded resource contents keyed by filename.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfilerHandler.IsReusable">
            <summary>
            Gets a value indicating whether to keep things static and reusable.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfilerHandler.Options">
            <summary>
            The options this handler was created with.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerHandler.#ctor(StackExchange.Profiling.MiniProfilerOptions)">
            <summary>
            Usually called internally, sometimes you may clear the routes during the apps lifecycle, 
            if you do that call this to bring back mini profiler.
            </summary>
            <param name="options">The options to configure this handler with.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerHandler.Configure(StackExchange.Profiling.MiniProfilerOptions)">
            <summary>
            Creates a MiniProfilerHandler and registers routes for it.
            </summary>
            <param name="options">The options to configure the handler with.</param>
            <returns>The configured and registered handler.</returns>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerHandler.RegisterRoutes">
            <summary>
            Registers the routes for this handler to handle.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Returns this <see cref="T:StackExchange.Profiling.MiniProfilerHandler"/> to handle <paramref name="requestContext"/>.
            </summary>
            <param name="requestContext">The <see cref="T:System.Web.Routing.RequestContext"/> to handle.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Returns either includes' <c>css/javascript</c> or results' html.
            </summary>
            <param name="context">The <see cref="T:System.Web.HttpContext"/> to process.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerHandler.Includes(System.Web.HttpContext,System.String)">
            <summary>
            Handles rendering static content files.
            </summary>
            <param name="context">The <see cref="T:System.Web.HttpContext"/> being handled.</param>
            <param name="path">The path being requested.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerHandler.AuthorizeRequest(System.Web.HttpContext,System.Boolean,System.String@)">
            <summary>
            Returns true if the current request is allowed to see the profiler response.
            </summary>
            <param name="context">The <see cref="T:System.Web.HttpContext"/> context for the request being authorixed.</param>
            <param name="isList">Whether this is a list route being accessed.</param>
            <param name="message">The access denied message, if present.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerHandler.GetSingleProfilerResult(System.Web.HttpContext)">
            <summary>
            Returns either json or full page html of a previous <see cref="T:StackExchange.Profiling.MiniProfiler"/> session, 
            identified by its <c>"?id=GUID"</c> on the query.
            </summary>
            <param name="context">The context to get a profiler response for.</param>
        </member>
        <member name="T:StackExchange.Profiling.MiniProfilerOptions">
            <summary>
            Contains the settings specific to web applications (not in MiniProfiler.Standard)
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerOptions.#ctor">
            <summary>
            Creates a new <see cref="T:StackExchange.Profiling.MiniProfilerOptions"/> with <see cref="T:StackExchange.Profiling.AspNetRequestProvider"/> as the provider.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfilerOptions.RouteBasePath">
            <summary>
            The path under which ALL routes are registered in, defaults to the application root.  For example, "~/myDirectory/" would yield
            "/myDirectory/includes.js" rather than just "/mini-profiler-resources/includes.js"
            Any setting here should be in APP RELATIVE FORM, e.g. "~/myDirectory/"
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfilerOptions.ResultsAuthorize">
            <summary>
            A function that determines who can access the MiniProfiler results URL and list URL.  It should return true when
            the request client has access to results, false for a 401 to be returned. HttpRequest parameter is the current request and
            </summary>
            <remarks>
            The HttpRequest parameter that will be passed into this function should never be null.
            </remarks>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfilerOptions.ResultsListAuthorize">
            <summary>
            Special authorization function that is called for the list results (listing all the profiling sessions), 
            we also test for results authorize always. This must be set and return true, to enable the listing feature.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfilerOptions.UserIdProvider">
            <summary>
            Function to provide the unique user ID based on the request, to store MiniProfiler IDs user
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfilerOptions.EnableCompression">
            <summary>
            By default, the output of the MiniProfilerHandler is compressed, if the request supports that.
            If this setting is false, the output won't be compressed. (Only do this when you take care of compression yourself)
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerOptions.OnConfigure">
            <summary>
            Configures the <see cref="T:StackExchange.Profiling.MiniProfilerHandler"/>.
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.MiniProfilerWebExtensions">
            <summary>
            Contains helper methods that ease working with null <see cref="T:StackExchange.Profiling.MiniProfiler"/>s.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerWebExtensions.RenderIncludes(StackExchange.Profiling.MiniProfiler,System.Nullable{StackExchange.Profiling.RenderPosition},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns the <c>css</c> and <c>javascript</c> includes needed to display the MiniProfiler results UI.
            </summary>
            <param name="profiler">The profiler this extension method is called on</param>
            <param name="position">Which side of the page the profiler popup button should be displayed on (defaults to left)</param>
            <param name="showTrivial">Whether to show trivial timings by default (defaults to false)</param>
            <param name="showTimeWithChildren">Whether to show time the time with children column by default (defaults to false)</param>
            <param name="maxTracesToShow">The maximum number of trace popups to show before removing the oldest (defaults to 15)</param>
            <param name="showControls">when true, shows buttons to minimize and clear MiniProfiler results</param>
            <param name="startHidden">Should the profiler start as hidden. Default to null.</param>
            <returns>Script and link elements normally; an empty string when there is no active profiling session.</returns>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerWebExtensions.Render(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Returns an HTML-encoded string with a text-representation of <paramref name="profiler"/>; returns "" when profiler is null.
            </summary>
            <param name="profiler">The current profiling session or null.</param>
        </member>
        <member name="T:StackExchange.Profiling.AspNetRequestProvider">
            <summary>
            For ASP.NET NON-Core applications, the MiniPofiler v3 and below style, using <see cref="P:System.Web.HttpContext.Items"/> for storage.
            This is a <see cref="T:System.Web.HttpContext"/>-based profiler provider.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.AspNetRequestProvider.CurrentProfiler">
            <summary>
            Gets the currently running MiniProfiler for the current HttpContext; null if no MiniProfiler was <see cref="M:StackExchange.Profiling.AspNetRequestProvider.Start(System.String,StackExchange.Profiling.Internal.MiniProfilerBaseOptions)"/>ed.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.AspNetRequestProvider.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:StackExchange.Profiling.AspNetRequestProvider"/>, optionally enabling fall back to async context.
            </summary>
            <param name="enableFallback">Enables AsyncLocal fall back (if not found in HttpContext.Current.Items.</param>
        </member>
        <member name="M:StackExchange.Profiling.AspNetRequestProvider.Start(System.String,StackExchange.Profiling.Internal.MiniProfilerBaseOptions)">
            <summary>
            Starts a new MiniProfiler and associates it with the current <see cref="P:System.Web.HttpContext.Current"/>.
            </summary>
            <param name="profilerName">The name for the started <see cref="T:StackExchange.Profiling.MiniProfiler"/>.</param>
            <param name="options">The options to start the MiniPofiler with. Likely a more-specific type underneath.</param>
        </member>
        <member name="M:StackExchange.Profiling.AspNetRequestProvider.Stopped(StackExchange.Profiling.MiniProfiler,System.Boolean)">
            <summary>
            Ends the current profiling session, if one exists.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to stop.</param>
            <param name="discardResults">
            When true, clears the <see cref="P:StackExchange.Profiling.MiniProfiler.Current"/> for this HttpContext, allowing profiling to 
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:StackExchange.Profiling.AspNetRequestProvider.StoppedAsync(StackExchange.Profiling.MiniProfiler,System.Boolean)">
            <summary>
            Asynchronously ends the current profiling session, if one exists.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to stop.</param>
            <param name="discardResults">
            When true, clears the <see cref="P:StackExchange.Profiling.MiniProfiler.Current"/> for this HttpContext, allowing profiling to 
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:StackExchange.Profiling.AspNetRequestProvider.EnsureName(StackExchange.Profiling.MiniProfiler,System.Web.HttpContext)">
            <summary>
            Makes sure <paramref name="profiler"/> has a Name, pulling it from route data or URL.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to ensure a name is set on.</param>
            <param name="context">The <see cref="T:System.Web.HttpContext"/> request to get the name from.</param>
        </member>
        <member name="T:StackExchange.Profiling.Storage.MemoryCacheStorage">
            <summary>
            A IMemoryCache-based provider for storing MiniProfiler instances (based on System.Runtime.Caching.MemoryCache)
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Storage.MemoryCacheStorage.CacheKeyPrefix">
            <summary>
            The string that prefixes all keys that MiniProfilers are saved under, e.g.
            <c>"mini-profiler-ecfb0050-7ce8-4bf1-bf82-2cb38e90e31e".</c>
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Storage.MemoryCacheStorage.CacheDuration">
            <summary>
            Gets or sets how long to cache each <see cref="T:StackExchange.Profiling.MiniProfiler"/> for, in absolute terms.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.#ctor(System.TimeSpan)">
            <summary>
            Creates a memory cache provider, storing each result in a MemoryCache for the specified duration.
            </summary>
            <param name="cacheDuration">The duration to cache each profiler, before it expires from cache.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <c>MiniProfilerOptions.UserProvider</c></param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.GetUnviewedIdsAsync(System.String)">
            <summary>
            Returns a list of <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <c>MiniProfilerOptions.UserProvider</c></param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.List(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},StackExchange.Profiling.Storage.ListResultsOrder)">
            <summary>
            List the latest profiling results.
            </summary>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="start">(Optional) The start of the date range to fetch.</param>
            <param name="finish">(Optional) The end of the date range to fetch.</param>
            <param name="orderBy">(Optional) The order to fetch profiler IDs in.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.ListAsync(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},StackExchange.Profiling.Storage.ListResultsOrder)">
            <summary>
            List the latest profiling results.
            </summary>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="start">(Optional) The start of the date range to fetch.</param>
            <param name="finish">(Optional) The end of the date range to fetch.</param>
            <param name="orderBy">(Optional) The order to fetch profiler IDs in.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.Load(System.Guid)">
            <summary>
            Returns the saved <see cref="T:StackExchange.Profiling.MiniProfiler"/> identified by <paramref name="id"/>. Also marks the resulting
            profiler <see cref="P:StackExchange.Profiling.MiniProfiler.HasUserViewed"/> to true.
            </summary>
            <param name="id">The profiler ID to load.</param>
            <returns>The loaded <see cref="T:StackExchange.Profiling.MiniProfiler"/>.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.LoadAsync(System.Guid)">
            <summary>
            Returns the saved <see cref="T:StackExchange.Profiling.MiniProfiler"/> identified by <paramref name="id"/>. Also marks the resulting
            profiler <see cref="P:StackExchange.Profiling.MiniProfiler.HasUserViewed"/> to true.
            </summary>
            <param name="id">The profiler ID to load.</param>
            <returns>The loaded <see cref="T:StackExchange.Profiling.MiniProfiler"/>.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.Save(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Saves <paramref name="profiler"/> to the HttpRuntime.Cache under a key concatenated with <see cref="F:StackExchange.Profiling.Storage.MemoryCacheStorage.CacheKeyPrefix"/>
            and the parameter's <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to save.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.SaveAsync(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Saves <paramref name="profiler"/> to the HttpRuntime.Cache under a key concatenated with <see cref="F:StackExchange.Profiling.Storage.MemoryCacheStorage.CacheKeyPrefix"/>
            and the parameter's <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to save.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.SetUnviewed(System.String,System.Guid)">
            <summary>
            Set the profile to unviewed for this user
            </summary>
            <param name="user">The user to set this profiler ID as unviewed for.</param>
            <param name="id">The profiler ID to set unviewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.SetUnviewedAsync(System.String,System.Guid)">
            <summary>
            Set the profile to unviewed for this user
            </summary>
            <param name="user">The user to set this profiler ID as unviewed for.</param>
            <param name="id">The profiler ID to set unviewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.SetViewed(System.String,System.Guid)">
            <summary>
            Set the profile to viewed for this user
            </summary>
            <param name="user">The user to set this profiler ID as viewed for.</param>
            <param name="id">The profiler ID to set viewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MemoryCacheStorage.SetViewedAsync(System.String,System.Guid)">
            <summary>
            Set the profile to viewed for this user
            </summary>
            <param name="user">The user to set this profiler ID as viewed for.</param>
            <param name="id">The profiler ID to set viewed.</param>
        </member>
    </members>
</doc>
