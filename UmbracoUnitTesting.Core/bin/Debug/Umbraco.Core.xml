<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Umbraco.Core</name>
    </assembly>
    <members>
        <member name="M:Umbraco.Core.AssemblyExtensions.GetAssemblyFile(System.Reflection.Assembly)">
            <summary>
            Returns the file used to load the assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.AssemblyExtensions.IsAppCodeAssembly(System.Reflection.Assembly)">
            <summary>
            Returns true if the assembly is the App_Code assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.AssemblyExtensions.IsGlobalAsaxAssembly(System.Reflection.Assembly)">
            <summary>
            Returns true if the assembly is the compiled global asax.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.AssemblyExtensions.GetAssemblyFile(System.Reflection.AssemblyName)">
            <summary>
             Returns the file used to load the assembly
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Constants">
            <summary>
            Defines constants.
            </summary>
            <summary>
            Constants all the identifiers within the Umbraco core.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.SvgSanitizer">
            <summary>
            Defines the alias identifiers for Umbraco's core application sections.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.SvgSanitizer.Attributes">
            <summary>
            Allowlist for SVG attributes.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.SvgSanitizer.Tags">
            <summary>
            Allowlist for SVG tabs.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Applications">
            <summary>
            Defines the alias identifiers for Umbraco's core application sections.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Content">
            <summary>
            Application alias for the content section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Packages">
            <summary>
            Application alias for the packages section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Media">
            <summary>
            Application alias for the media section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Members">
            <summary>
            Application alias for the members section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Settings">
            <summary>
            Application alias for the settings section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Translation">
            <summary>
            Application alias for the translation section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Users">
            <summary>
            Application alias for the users section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Forms">
            <summary>
            Application alias for the forms section.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Trees">
            <summary>
            Defines the alias identifiers for Umbraco's core trees.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Content">
            <summary>
            alias for the content tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.ContentBlueprints">
            <summary>
            alias for the content blueprint tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Members">
            <summary>
            alias for the member tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Media">
            <summary>
            alias for the media tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Macros">
            <summary>
            alias for the macro tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.DataTypes">
            <summary>
            alias for the datatype tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Packages">
            <summary>
            alias for the packages tree
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Dictionary">
            <summary>
            alias for the dictionary tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.DocumentTypes">
            <summary>
            alias for the document type tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.MediaTypes">
            <summary>
            alias for the media type tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.MemberTypes">
            <summary>
            alias for the member type tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.MemberGroups">
            <summary>
            alias for the member group tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Templates">
            <summary>
            alias for the template tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.UserTypes">
            <summary>
            alias for the user types tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.UserPermissions">
            <summary>
            alias for the user permissions tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Users">
            <summary>
            alias for the users tree.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions">
            <summary>
            Defines the identifiers for property-type alias conventions that are used within the Umbraco core.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.Content">
            <summary>
            Constants for Umbraco Content property aliases.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Content.InternalRedirectId">
            <summary>
            Property alias for the Content's Url (internal) redirect.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Content.NaviHide">
            <summary>
            Property alias for the Content's navigational hide, (not actually used in core code).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Content.Redirect">
            <summary>
            Property alias for the Content's Url redirect.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Content.UrlAlias">
            <summary>
            Property alias for the Content's Url alias.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Content.UrlName">
            <summary>
            Property alias for the Content's Url name.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.Media">
            <summary>
            Constants for Umbraco Media property aliases.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Media.File">
            <summary>
            Property alias for the Media's file name.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Media.Width">
            <summary>
            Property alias for the Media's width.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Media.Height">
            <summary>
            Property alias for the Media's height.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Media.Bytes">
            <summary>
            Property alias for the Media's file size (in bytes).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Media.Extension">
            <summary>
            Property alias for the Media's file extension.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Media.DefaultSize">
            <summary>
            The default height/width of an image file if the size can't be determined from the metadata
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.MediaTypes">
            <summary>
            Defines the alias identifiers for Umbraco media types.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.MediaTypes.File">
            <summary>
            MediaType alias for a file.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.MediaTypes.Folder">
            <summary>
            MediaType alias for a folder.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.MediaTypes.Image">
            <summary>
            MediaType alias for an image.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.MediaTypes.AutoSelect">
            <summary>
            MediaType alias indicating allowing auto-selection.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.Member">
            <summary>
            Constants for Umbraco Member property aliases.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.InternalRolePrefix">
            <summary>
            if a role starts with __umbracoRole we won't show it as it's an internal role used for public access
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.PasswordQuestion">
            <summary>
            Property alias for a Members Password Question
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.PasswordAnswer">
            <summary>
            Property alias for Members Password Answer
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.Comments">
            <summary>
            Property alias for the Comments on a Member
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.IsApproved">
            <summary>
            Property alias for the Approved boolean of a Member
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.IsLockedOut">
            <summary>
            Property alias for the Locked out boolean of a Member
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.LastLoginDate">
            <summary>
            Property alias for the last date the Member logged in
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.LastPasswordChangeDate">
            <summary>
            Property alias for the last date a Member changed its password
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.LastLockoutDate">
            <summary>
            Property alias for the last date a Member was locked out
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.FailedPasswordAttempts">
            <summary>
            Property alias for the number of failed login attempts
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.StandardPropertiesGroupName">
            <summary>
            Group name to put the membership properties on
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.MemberTypes">
            <summary>
            Defines the alias identifiers for Umbraco member types.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.MemberTypes.DefaultAlias">
            <summary>
            MemberType alias for default member type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.Url">
            <summary>
            Constants for Umbraco URLs/Querystrings.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Url.AltTemplate">
            <summary>
            Querystring parameter name used for Umbraco's alternative template functionality.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.RelationTypes">
            <summary>
            Defines the alias identifiers for built-in Umbraco relation types.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelatedMediaName">
            <summary>
            Name for default relation type "Related Media".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelatedMediaAlias">
            <summary>
            Alias for default relation type "Related Media"
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelatedDocumentName">
            <summary>
            Name for default relation type "Related Document".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelatedDocumentAlias">
            <summary>
            Alias for default relation type "Related Document"
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelateDocumentOnCopyName">
            <summary>
            Name for default relation type "Relate Document On Copy".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelateDocumentOnCopyAlias">
            <summary>
            Alias for default relation type "Relate Document On Copy".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelateParentDocumentOnDeleteName">
            <summary>
            Name for default relation type "Relate Parent Document On Delete".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelateParentDocumentOnDeleteAlias">
            <summary>
            Alias for default relation type "Relate Parent Document On Delete".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelateParentMediaFolderOnDeleteName">
            <summary>
            Name for default relation type "Relate Parent Media Folder On Delete".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelateParentMediaFolderOnDeleteAlias">
            <summary>
            Alias for default relation type "Relate Parent Media Folder On Delete".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.AutomaticRelationTypes">
            <summary>
            Returns the types of relations that are automatically tracked
            </summary>
            <remarks>
            Developers should not manually use these relation types since they will all be cleared whenever an entity
            (content, media or member) is saved since they are auto-populated based on property values.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Constants.DataTypes.Guids">
            <summary>
            Defines the identifiers for Umbraco data types as constants for easy centralized access/management.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.ContentPicker">
            <summary>
            Guid for Content Picker as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.ContentPickerGuid">
            <summary>
            Guid for Content Picker
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.MemberPicker">
            <summary>
            Guid for Member Picker as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.MemberPickerGuid">
            <summary>
            Guid for Member Picker
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.MediaPicker">
            <summary>
            Guid for Media Picker as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.MediaPickerGuid">
            <summary>
            Guid for Media Picker
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.MultipleMediaPicker">
            <summary>
            Guid for Multiple Media Picker as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.MultipleMediaPickerGuid">
            <summary>
            Guid for Multiple Media Picker
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.RelatedLinks">
            <summary>
            Guid for Related Links as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.RelatedLinksGuid">
            <summary>
            Guid for Related Links
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.Member">
            <summary>
            Guid for Member as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.MemberGuid">
            <summary>
            Guid for Member
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.ImageCropper">
            <summary>
            Guid for Image Cropper as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.ImageCropperGuid">
            <summary>
            Guid for Image Cropper
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.Tags">
            <summary>
            Guid for Tags as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.TagsGuid">
            <summary>
            Guid for Tags
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.ListViewContent">
            <summary>
            Guid for List View - Content as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.ListViewContentGuid">
            <summary>
            Guid for List View - Content
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.ListViewMedia">
            <summary>
            Guid for List View - Media as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.ListViewMediaGuid">
            <summary>
            Guid for List View - Media
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.ListViewMembers">
            <summary>
            Guid for List View - Members as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.ListViewMembersGuid">
            <summary>
            Guid for List View - Members
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.DatePickerWithTime">
            <summary>
            Guid for Date Picker with time as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.DatePickerWithTimeGuid">
            <summary>
            Guid for Date Picker with time
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.ApprovedColor">
            <summary>
            Guid for Approved Color as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.ApprovedColorGuid">
            <summary>
            Guid for Approved Color
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.DropdownMultiple">
            <summary>
            Guid for Dropdown multiple as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.DropdownMultipleGuid">
            <summary>
            Guid for Dropdown multiple
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.Radiobox">
            <summary>
            Guid for Radiobox as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.RadioboxGuid">
            <summary>
            Guid for Radiobox
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.DatePicker">
            <summary>
            Guid for Date Picker as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.DatePickerGuid">
            <summary>
            Guid for Date Picker
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.Dropdown">
            <summary>
            Guid for Dropdown as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.DropdownGuid">
            <summary>
            Guid for Dropdown
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.CheckboxList">
            <summary>
            Guid for Checkbox list as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.CheckboxListGuid">
            <summary>
            Guid for Checkbox list
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.Checkbox">
            <summary>
            Guid for Checkbox as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.CheckboxGuid">
            <summary>
            Guid for Checkbox
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.Numeric">
            <summary>
            Guid for Numeric as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.NumericGuid">
            <summary>
            Guid for Dropdown
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.RichtextEditor">
            <summary>
            Guid for Richtext editor as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.RichtextEditorGuid">
            <summary>
            Guid for Richtext editor
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.Textstring">
            <summary>
            Guid for Textstring as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.TextstringGuid">
            <summary>
            Guid for Textstring
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.Textarea">
            <summary>
            Guid for Textarea as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.TextareaGuid">
            <summary>
            Guid for Dropdown
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.Upload">
            <summary>
            Guid for Upload as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.UploadGuid">
            <summary>
            Guid for Upload
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.LabelString">
            <summary>
            Guid for Label as string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.LabelStringGuid">
            <summary>
            Guid for Label string
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.LabelInt">
            <summary>
            Guid for Label as int
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.LabelIntGuid">
            <summary>
            Guid for Label int
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.LabelBigInt">
            <summary>
            Guid for Label as big int
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.LabelBigIntGuid">
            <summary>
            Guid for Label big int
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.LabelDateTime">
            <summary>
            Guid for Label as date time
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.LabelDateTimeGuid">
            <summary>
            Guid for Label date time
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.LabelTime">
            <summary>
            Guid for Label as time
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.LabelTimeGuid">
            <summary>
            Guid for Label time
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.LabelDecimal">
            <summary>
            Guid for Label as decimal
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.DataTypes.Guids.LabelDecimalGuid">
            <summary>
            Guid for Label decimal
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Composing">
            <summary>
            Defines constants for composition.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.DeploySelector">
            <summary>
            Contains the valid selector values.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.DefaultIcon">
            <summary>
            System default icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.Content">
            <summary>
            System content icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.ContentType">
            <summary>
            System content type icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.DataType">
            <summary>
            System data type icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.ListView">
            <summary>
            System list view icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.Macro">
            <summary>
            System macro icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.MediaFile">
            <summary>
            System media file icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.MediaFolder">
            <summary>
            System media folder icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.MediaImage">
            <summary>
            System media image icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.MediaType">
            <summary>
            System media type icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.Member">
            <summary>
            System member icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.MemberGroup">
            <summary>
            System member group icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.MemberType">
            <summary>
            System member type icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.PropertyEditor">
            <summary>
            System property editor icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.Template">
            <summary>
            System member icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.User">
            <summary>
            System user icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.UserGroup">
            <summary>
            System user group icon
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.ObjectTypes">
            <summary>
            Defines the Umbraco object type unique identifiers.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.ObjectTypes.Strings">
            <summary>
            Defines the Umbraco object type unique identifiers as string.
            </summary>
            <remarks>Should be used only when it's not possible to use the corresponding
            readonly Guid value, e.g. in attributes (where only consts can be used).</remarks>
        </member>
        <member name="T:Umbraco.Core.Constants.PackageRepository">
            <summary>
            Defines the constants used for the Umbraco package repository
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.PropertyEditors">
            <summary>
            Defines property editors constants.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.InternalGenericPropertiesPrefix">
            <summary>
            Used to prefix generic properties that are internal content properties
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.PropertyEditors.Aliases">
            <summary>
            Defines Umbraco built-in property editor aliases.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.BlockList">
            <summary>
            Block List.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.CheckBoxList">
            <summary>
            CheckBox List.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.ColorPicker">
            <summary>
            Color Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.ContentPicker">
            <summary>
            Content Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.DateTime">
            <summary>
            DateTime.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.DropDownListFlexible">
            <summary>
            DropDown List.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.Grid">
            <summary>
            Grid.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.ImageCropper">
            <summary>
            Image Cropper.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.Integer">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.Decimal">
            <summary>
            Decimal.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.ListView">
            <summary>
            ListView.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.MediaPicker">
            <summary>
            Media Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.MultipleMediaPicker">
            <summary>
            Multiple Media Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.MemberPicker">
            <summary>
            Member Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.MemberGroupPicker">
            <summary>
            Member Group Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.MultiNodeTreePicker">
            <summary>
            MultiNode Tree Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.MultipleTextstring">
            <summary>
            Multiple TextString.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.Label">
            <summary>
            Label.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.PickerRelations">
            <summary>
            Picker Relations.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.RadioButtonList">
            <summary>
            RadioButton list.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.Slider">
            <summary>
            Slider.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.Tags">
            <summary>
            Tags.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.TextBox">
            <summary>
            Textbox.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.TextArea">
            <summary>
            Textbox Multiple.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.TinyMce">
            <summary>
            TinyMCE
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.Boolean">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.MarkdownEditor">
            <summary>
            Markdown Editor.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.UserPicker">
            <summary>
            User Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.UploadField">
            <summary>
            Upload Field.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.EmailAddress">
            <summary>
            Email Address.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.NestedContent">
            <summary>
            Nested Content.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Aliases.MultiUrlPicker">
            <summary>
            Alias for the multi URL picker editor.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.PropertyEditors.ConfigurationKeys">
            <summary>
            Defines Umbraco build-in datatype configuration keys.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.ConfigurationKeys.DataValueType">
            <summary>
            The value type of property data (i.e., string, integer, etc)
            </summary>
            <remarks>Must be a valid <see cref="T:Umbraco.Core.PropertyEditors.ValueTypes"/> value.</remarks>
        </member>
        <member name="T:Umbraco.Core.Constants.PropertyEditors.Groups">
            <summary>
            Defines Umbraco's built-in property editor groups.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.PropertyTypeGroups">
            <summary>
            Defines the identifiers for property-type groups conventions that are used within the Umbraco core.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyTypeGroups.Image">
            <summary>
            Guid for a Image PropertyTypeGroup object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyTypeGroups.File">
            <summary>
            Guid for a File PropertyTypeGroup object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyTypeGroups.Membership">
            <summary>
            Guid for a Image PropertyTypeGroup object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Security.SuperUserId">
            <summary>
            Gets the identifier of the 'super' user.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Security.UnknownUserId">
            <summary>
            The id for the 'unknown' user.
            </summary>
            <remarks>
            This is a user row that exists in the DB only for referential integrity but the user is never returned from any of the services
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Constants.Security.UnknownUserName">
            <summary>
            The name of the 'unknown' user.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Security.BackOfficeExternalAuthenticationTypePrefix">
            <summary>
            The prefix used for external identity providers for their authentication type
            </summary>
            <remarks>
            By default we don't want to interfere with front-end external providers and their default setup, for back office the
            providers need to be setup differently and each auth type for the back office will be prefixed with this value
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Constants.System">
            <summary>
            Defines the identifiers for Umbraco system nodes.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.System.Root">
            <summary>
            The integer identifier for global system root node.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.System.RootString">
            <summary>
            The string identifier for global system root node.
            </summary>
            <remarks>Use this instead of re-creating the string everywhere.</remarks>
        </member>
        <member name="F:Umbraco.Core.Constants.System.RecycleBinContent">
            <summary>
            The integer identifier for content's recycle bin.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.System.RecycleBinContentString">
            <summary>
            The string identifier for content's recycle bin.
            </summary>
            <remarks>Use this instead of re-creating the string everywhere.</remarks>
        </member>
        <member name="F:Umbraco.Core.Constants.System.RecycleBinContentPathPrefix">
            <summary>
            The string path prefix of the content's recycle bin.
            </summary>
            <remarks>
            <para>Everything that is in the content recycle bin, has a path that starts with the prefix.</para>
            <para>Use this instead of re-creating the string everywhere.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Constants.System.RecycleBinMedia">
            <summary>
            The integer identifier for media's recycle bin.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.System.RecycleBinMediaString">
            <summary>
            The string identifier for media's recycle bin.
            </summary>
            <remarks>Use this instead of re-creating the string everywhere.</remarks>
        </member>
        <member name="F:Umbraco.Core.Constants.System.RecycleBinMediaPathPrefix">
            <summary>
            The string path prefix of the media's recycle bin.
            </summary>
            <remarks>
            <para>Everything that is in the media recycle bin, has a path that starts with the prefix.</para>
            <para>Use this instead of re-creating the string everywhere.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Constants.AppSettings">
            <summary>
            Specific web.config AppSetting keys for Umbraco.Core application
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.RegisterType">
            <summary>
            TODO: FILL ME IN
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.PublishedMediaCacheSeconds">
            <summary>
            This is used for a unit test in PublishedMediaCache
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.AssembliesAcceptingLoadExceptions">
            <summary>
            TODO: FILL ME IN
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Umbraco.Core.Constants.AppSettings.ConfigurationStatus" -->
        <member name="F:Umbraco.Core.Constants.AppSettings.Path">
            <summary>
            Gets the path to umbraco's root directory (/umbraco by default).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.IconsPath">
            <summary>
            Gets the path to umbraco's icons directory (/umbraco/assets/icons by default).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.CssPath">
            <summary>
            Gets the path to the css directory (/css by default).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.ScriptsPath">
            <summary>
            Gets the path to the scripts directory (/scripts by default).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.MediaPath">
            <summary>
            Gets the path to  media directory (/media by default).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.ReservedUrls">
            <summary>
            The reserved URLs from web.config.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.ReservedPaths">
            <summary>
            The reserved paths from web.config
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.TimeOutInMinutes">
            <summary>
            Set the timeout for the Umbraco backoffice in minutes
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.VersionCheckPeriod">
            <summary>
            The number of days to check for a new version of Umbraco
            </summary>
            <remarks>
            Default is set to 7. Setting this to 0 will never check
            This is used to help track statistics
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.LocalTempStorage">
            <summary>
            This is the location type to store temporary files such as cache files or other localized files for a given machine
            </summary>
            <remarks>
            Currently used for the xml cache file and the plugin cache files
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.DefaultUILanguage">
            <summary>
            The default UI language of the backoffice such as 'en-US'
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.HideTopLevelNodeFromPath">
            <summary>
            A true/false value indicating whether umbraco should hide top level nodes from generated URLs.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.UseHttps">
            <summary>
            A true or false indicating whether umbraco should force a secure (https) connection to the backoffice.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.DisableElectionForSingleServer">
            <summary>
            TODO: FILL ME IN
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.AppSettings.Debug">
            <summary>
            Debug specific web.config AppSetting keys for Umbraco
            </summary>
            <remarks>
            Do not use these keys in a production environment
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.Debug.LogUncompletedScopes">
            <summary>
            When set to true, Scope logs the stack trace for any scope that gets disposed without being completed.
            this helps troubleshooting rogue scopes that we forget to complete
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.Debug.DumpOnTimeoutThreadAbort">
            <summary>
            When set to true, the Logger creates a mini dump of w3wp in ~/App_Data/MiniDump whenever it logs
            an error due to a ThreadAbortException that is due to a timeout.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.AppSettings.Debug.DatabaseFactoryServerVersion">
            <summary>
            TODO: FILL ME IN
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Web">
            <summary>
            Defines the identifiers for Umbraco system nodes.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Web.PreviewCookieName">
            <summary>
            The preview cookie name
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Umbraco.Core.Constants.Web.AcceptPreviewCookieName" -->
        <member name="T:Umbraco.Core.Constants.Locks">
            <summary>
            Defines lock objects.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Locks.MainDom">
            <summary>
            The <see cref="T:Umbraco.Core.IMainDom"/> lock
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Locks.Servers">
            <summary>
            All servers.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Locks.ContentTypes">
            <summary>
            All content and media types.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Locks.ContentTree">
            <summary>
            The entire content tree, i.e. all content items.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Locks.MediaTree">
            <summary>
            The entire media tree, i.e. all media items.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Locks.MemberTree">
            <summary>
            The entire member tree, i.e. all members.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Locks.MediaTypes">
            <summary>
            All media types.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Locks.MemberTypes">
            <summary>
            All member types.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Locks.Domains">
            <summary>
            All domains.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Locks.KeyValues">
            <summary>
            All key-values.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Locks.Languages">
            <summary>
            All languages.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.UdiEntityType">
            <summary>
            Defines well-known entity types.
            </summary>
            <remarks>Well-known entity types are those that Deploy already knows about,
            but entity types are strings and so can be extended beyond what is defined here.</remarks>
        </member>
        <member name="T:Umbraco.Core.Migrations.Upgrade.V_8_0_0.Models.ContentTypeDto80">
            <summary>
            Snapshot of the <see cref="T:Umbraco.Core.Persistence.Dtos.ContentTypeDto"/> as it was at version 8.0
            </summary>
            <remarks>
            This is required during migrations the schema of this table changed and running SQL against the new table would result in errors
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Migrations.Upgrade.V_8_0_0.Models.PropertyDataDto80">
            <summary>
            Snapshot of the <see cref="T:Umbraco.Core.Persistence.Dtos.PropertyDataDto"/> as it was at version 8.0
            </summary>
            <remarks>
            This is required during migrations the schema of this table changed and running SQL against the new table would result in errors
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Migrations.Upgrade.V_8_0_0.Models.PropertyTypeDto80">
            <summary>
            Snapshot of the <see cref="T:Umbraco.Core.Persistence.Dtos.PropertyTypeDto"/> as it was at version 8.0
            </summary>
            <remarks>
            This is required during migrations before 8.6 since the schema has changed and running SQL against the new table would result in errors
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.IPreValueMigrator">
            <summary>
            Defines a service migrating preValues.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.IPreValueMigrator.CanMigrate(System.String)">
            <summary>
            Determines whether this migrator can migrate a data type.
            </summary>
            <param name="editorAlias">The data type editor alias.</param>
        </member>
        <member name="M:Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.IPreValueMigrator.GetNewAlias(System.String)">
            <summary>
            Gets the v8 codebase data type editor alias.
            </summary>
            <param name="editorAlias">The original v7 codebase editor alias.</param>
            <remarks>
            <para>This is used to validate that the migrated configuration can be parsed
            by the new property editor. Return <c>null</c> to bypass this validation,
            when for instance we know it will fail, and another, later migration will
            deal with it.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.IPreValueMigrator.GetConfiguration(System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.PreValueDto})">
            <summary>
            Gets the configuration object corresponding to preValue.
            </summary>
            <param name="dataTypeId">The data type identifier.</param>
            <param name="editorAlias">The data type editor alias.</param>
            <param name="preValues">PreValues.</param>
        </member>
        <member name="T:Umbraco.Core.Migrations.Upgrade.V_8_0_0.FallbackLanguage">
            <summary>
            Adds a new, self-joined field to umbracoLanguages to hold the fall-back language for
            a given language.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Upgrade.V_8_0_0.UserForeignKeys">
            <summary>
            Creates/Updates non mandatory FK columns to the user table
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Upgrade.V_8_9_0.ExternalLoginTableUserData.Migrate">
            <summary>
            Adds new column to the External Login table
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Upgrade.V_8_6_0.MissingDictionaryIndex.Migrate">
            <summary>
            Adds an index to the foreign key column <c>parent</c> on <c>DictionaryDto</c>'s table
            if it doesn't already exist
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Upgrade.V_8_6_0.AddNewRelationTypes">
            <summary>
            Ensures the new relation types are created
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Upgrade.UmbracoPlan">
            <summary>
            Represents Umbraco's migration plan.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Upgrade.UmbracoPlan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.Upgrade.UmbracoPlan"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Upgrade.UmbracoPlan.GetInitState(Semver.SemVersion)">
            <summary>
            Gets the initial state corresponding to a version.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Upgrade.UmbracoPlan.TryGetInitStateVersion(System.String,System.String@)">
            <summary>
            Tries to extract a version from an initial state.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Upgrade.UmbracoPlan.InitialState">
            <inheritdoc />
            <remarks>
            <para>The default initial state in plans is string.Empty.</para>
            <para>When upgrading from version 7, we want to use specific initial states
            that are e.g. "{init-7.9.3}", "{init-7.11.1}", etc. so we can chain the proper
            migrations.</para>
            <para>This is also where we detect the current version, and reject invalid
            upgrades (from a tool old version, or going back in time, etc).</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Migrations.Upgrade.Upgrader">
            <summary>
            Represents an upgrader.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Upgrade.Upgrader.#ctor(Umbraco.Core.Migrations.MigrationPlan)">
            <summary>
            Initializes a new instance of the <see ref="Upgrader"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Upgrade.Upgrader.Name">
            <summary>
            Gets the name of the migration plan.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Upgrade.Upgrader.Plan">
            <summary>
            Gets the migration plan.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Upgrade.Upgrader.StateValueKey">
            <summary>
            Gets the key for the state value.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Upgrade.Upgrader.Execute(Umbraco.Core.Scoping.IScopeProvider,Umbraco.Core.Migrations.IMigrationBuilder,Umbraco.Core.Services.IKeyValueService,Umbraco.Core.Logging.ILogger)">
            <summary>
            Executes.
            </summary>
            <param name="scopeProvider">A scope provider.</param>
            <param name="migrationBuilder">A migration builder.</param>
            <param name="keyValueService">A key-value service.</param>
            <param name="logger">A logger.</param>
        </member>
        <member name="M:Umbraco.Core.Migrations.Upgrade.Upgrader.BeforeMigrations(Umbraco.Core.Scoping.IScope,Umbraco.Core.Logging.ILogger)">
            <summary>
            Executes as part of the upgrade scope and before all migrations have executed.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Upgrade.Upgrader.AfterMigrations(Umbraco.Core.Scoping.IScope,Umbraco.Core.Logging.ILogger)">
            <summary>
            Executes as part of the upgrade scope and after all migrations have executed.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.IncompleteMigrationExpressionException">
            <summary>
            The exception that is thrown when a migration expression is not executed.
            </summary>
            <remarks>
            Migration expressions such as Alter.Table(...).Do() must end with Do(), else they are not executed.
            When a non-executed expression is detected, an IncompleteMigrationExpressionException is thrown.
            </remarks>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Core.Migrations.IncompleteMigrationExpressionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.IncompleteMigrationExpressionException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.IncompleteMigrationExpressionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.IncompleteMigrationExpressionException" /> class with a message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.Migrations.IncompleteMigrationExpressionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.IncompleteMigrationExpressionException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Core.Migrations.IncompleteMigrationExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.IncompleteMigrationExpressionException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Umbraco.Core.Migrations.MergeBuilder">
            <summary>
            Represents a migration plan builder for merges.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MergeBuilder.#ctor(Umbraco.Core.Migrations.MigrationPlan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.MergeBuilder"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MergeBuilder.To(System.String)">
            <summary>
            Adds a transition to a target state through an empty migration.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MergeBuilder.To``1(System.String)">
            <summary>
            Adds a transition to a target state through a migration.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MergeBuilder.To(System.String,System.Type)">
            <summary>
            Adds a transition to a target state through a migration.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MergeBuilder.With">
            <summary>
            Begins the second branch of the merge.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MergeBuilder.As(System.String)">
            <summary>
            Completes the merge.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.MigrationBase">
            <summary>
            Provides a base class to all migrations.
            </summary>
            <summary>
            Provides a base class to all migrations.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationBase.#ctor(Umbraco.Core.Migrations.IMigrationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.MigrationBase"/> class.
            </summary>
            <param name="context">A migration context.</param>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationBase.Context">
            <summary>
            Gets the migration context.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationBase.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationBase.SqlSyntax">
            <summary>
            Gets the Sql syntax.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationBase.Database">
            <summary>
            Gets the database instance.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationBase.DatabaseType">
            <summary>
            Gets the database type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationBase.Sql">
            <summary>
            Creates a new Sql statement.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationBase.Sql(System.String,System.Object[])">
            <summary>
            Creates a new Sql statement with arguments.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationBase.Migrate">
            <summary>
            Executes the migration.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationBase.Umbraco#Core#Migrations#IMigration#Migrate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationBase.Alter">
            <summary>
            Builds an Alter expression.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationBase.Create">
            <summary>
            Builds a Create expression.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationBase.Delete">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationBase.Execute">
            <summary>
            Builds an Execute expression.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationBase.Insert">
            <summary>
            Builds an Insert expression.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationBase.Rename">
            <summary>
            Builds a Rename expression.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationBase.Update">
            <summary>
            Builds an Update expression.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.PostMigrations.IPublishedSnapshotRebuilder">
            <summary>
            Rebuilds the published snapshot.
            </summary>
            <remarks>
            <para>This interface exists because the entire published snapshot lives in Umbraco.Web
            but we may want to trigger rebuilds from Umbraco.Core. These two assemblies should
            be refactored, really.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.PostMigrations.IPublishedSnapshotRebuilder.Rebuild">
            <summary>
            Rebuilds.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.PostMigrations.PublishedSnapshotRebuilder">
            <summary>
            Implements <see cref="T:Umbraco.Core.Migrations.PostMigrations.IPublishedSnapshotRebuilder"/> in Umbraco.Core (doing nothing).
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.PostMigrations.PublishedSnapshotRebuilder.Rebuild">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.PostMigrations.RebuildPublishedSnapshot">
            <summary>
            Rebuilds the published snapshot.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.PostMigrations.RebuildPublishedSnapshot.#ctor(Umbraco.Core.Migrations.PostMigrations.IPublishedSnapshotRebuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.PostMigrations.RebuildPublishedSnapshot"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.PostMigrations.RebuildPublishedSnapshot.Migrate">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Common.ExecutableBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Common.IExecutableBuilder.Do">
            <summary>
            Executes.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Common.IColumnTypeBuilder`1">
            <summary>
            Builds a column type expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Common.IForeignKeyCascadeBuilder`2.OnDelete(System.Data.Rule)">
            <summary>
            Specifies a rule on deletes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Common.IForeignKeyCascadeBuilder`2.OnUpdate(System.Data.Rule)">
            <summary>
            Specifies a rule on updates.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Common.IForeignKeyCascadeBuilder`2.OnDeleteOrUpdate(System.Data.Rule)">
            <summary>
            Specifies a rule on deletes and updates.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.KeysAndIndexes.CreateKeysAndIndexesBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableOfDtoBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.WithColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.WithDefault(Umbraco.Core.Persistence.DatabaseModelDefinitions.SystemMethods)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.Identity">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.Indexed">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.Indexed(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.PrimaryKey">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.PrimaryKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.Nullable">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.NotNullable">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.Unique">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.Unique(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.ForeignKey(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.ForeignKey(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.ForeignKey(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.ForeignKey">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.ReferencedBy(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.ReferencedBy(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.ReferencedBy(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.OnDelete(System.Data.Rule)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.OnUpdate(System.Data.Rule)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder.OnDeleteOrUpdate(System.Data.Rule)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Column.ICreateColumnOnTableBuilder.OnTable(System.String)">
            <summary>
            Specifies the name of the table.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Constraint.CreateConstraintBuilder.OnTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Constraint.CreateConstraintBuilder.Column(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Constraint.CreateConstraintBuilder.Columns(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Constraint.ICreateConstraintColumnsBuilder.Column(System.String)">
            <summary>
            Specifies the constraint column.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Constraint.ICreateConstraintColumnsBuilder.Columns(System.String[])">
            <summary>
            Specifies the constraint columns.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Constraint.ICreateConstraintOnTableBuilder.OnTable(System.String)">
            <summary>
            Specifies the table name.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.Table``1(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.KeysAndIndexes``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.KeysAndIndexes(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.Table(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.Column(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.ForeignKey">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.ForeignKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.Index">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.Index(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.PrimaryKey">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.PrimaryKey(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.PrimaryKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.PrimaryKey(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.UniqueConstraint">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.UniqueConstraint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.CreateBuilder.Constraint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.FromTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.ForeignColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.ForeignColumns(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.ToTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.PrimaryColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.PrimaryColumns(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.OnDelete(System.Data.Rule)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.OnUpdate(System.Data.Rule)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.OnDeleteOrUpdate(System.Data.Rule)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder">
            <summary>
            Builds a Create expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.Table``1(System.Boolean)">
            <summary>
            Builds a Create Table expression, and executes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.KeysAndIndexes``1">
            <summary>
            Builds a Create Keys and Indexes expression, and executes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.KeysAndIndexes(System.Type)">
            <summary>
            Builds a Create Keys and Indexes expression, and executes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.Table(System.String)">
            <summary>
            Builds a Create Table expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.Column(System.String)">
            <summary>
            Builds a Create Column expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.ForeignKey">
            <summary>
            Builds a Create Foreign Key expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.ForeignKey(System.String)">
            <summary>
            Builds a Create Foreign Key expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.Index">
            <summary>
            Builds a Create Index expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.Index(System.String)">
            <summary>
            Builds a Create Index expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.PrimaryKey">
            <summary>
            Builds a Create Primary Key expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.PrimaryKey(System.String)">
            <summary>
            Builds a Create Primary Key expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.PrimaryKey(System.Boolean)">
            <summary>
            Builds a Create Primary Key expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.PrimaryKey(System.String,System.Boolean)">
            <summary>
            Builds a Create Primary Key expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.UniqueConstraint">
            <summary>
            Builds a Create Unique Constraint expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.UniqueConstraint(System.String)">
            <summary>
            Builds a Create Unique Constraint expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder.Constraint(System.String)">
            <summary>
            Builds a Create Constraint expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Index.CreateIndexBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Index.CreateIndexBuilder.OnTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Index.CreateIndexBuilder.OnColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Index.CreateIndexBuilder.WithOptions">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Index.CreateIndexBuilder.Ascending">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Index.CreateIndexBuilder.Descending">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Index.CreateIndexBuilder.Umbraco#Core#Migrations#Expressions#Create#Index#ICreateIndexColumnOptionsBuilder#Unique">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Index.CreateIndexBuilder.NonClustered">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Index.CreateIndexBuilder.Clustered">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Index.CreateIndexBuilder.Umbraco#Core#Migrations#Expressions#Create#Index#ICreateIndexOptionsBuilder#Unique">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Index.ICreateIndexOnColumnBuilder.OnColumn(System.String)">
            <summary>
            Specifies the index column.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Create.Index.ICreateIndexOnColumnBuilder.WithOptions">
            <summary>
            Specifies options.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.KeysAndIndexes.DeleteKeysAndIndexesBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Column.DeleteColumnBuilder.FromTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Column.DeleteColumnBuilder.Column(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.Column.IDeleteColumnBuilder">
            <summary>
            Builds a Delete Column expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Column.IDeleteColumnBuilder.FromTable(System.String)">
            <summary>
            Specifies the table of the column to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Column.IDeleteColumnBuilder.Column(System.String)">
            <summary>
            Specifies the column to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Constraint.DeleteConstraintBuilder.FromTable(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.Constraint.IDeleteConstraintBuilder">
            <summary>
            Builds a Delete Constraint expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Constraint.IDeleteConstraintBuilder.FromTable(System.String)">
            <summary>
            Specifies the table of the constraint to delete.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.DefaultConstraint.DeleteDefaultConstraintBuilder">
            <summary>
            Implements <see cref="T:Umbraco.Core.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnTableBuilder"/>, <see cref="T:Umbraco.Core.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnColumnBuilder"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DefaultConstraint.DeleteDefaultConstraintBuilder.OnTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DefaultConstraint.DeleteDefaultConstraintBuilder.OnColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnColumnBuilder">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnColumnBuilder.OnColumn(System.String)">
            <summary>
            Specifies the column of the constraint to delete.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnTableBuilder">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnTableBuilder.OnTable(System.String)">
            <summary>
            Specifies the table of the constraint to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder.Table(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder.KeysAndIndexes``1(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder.KeysAndIndexes(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder.Column(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder.ForeignKey">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder.ForeignKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder.FromTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder.Index">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder.Index(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder.PrimaryKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder.UniqueConstraint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder.DefaultConstraint">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Data.DeleteDataBuilder.IsNull(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Data.DeleteDataBuilder.Row(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Data.DeleteDataBuilder.AllRows">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Data.DeleteDataBuilder.Do">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.Data.IDeleteDataBuilder">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Data.IDeleteDataBuilder.Row(System.Object)">
            <summary>
            Specifies a row to be deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Data.IDeleteDataBuilder.AllRows">
            <summary>
            Specifies that all rows must be deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Data.IDeleteDataBuilder.IsNull(System.String)">
            <summary>
            Specifies that rows with a specified column being null must be deleted.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder">
            <summary>
            Implements IDeleteForeignKey...
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.FromTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.ForeignColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.ForeignColumns(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.ToTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.PrimaryColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.PrimaryColumns(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.OnTable(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyForeignColumnBuilder">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyForeignColumnBuilder.ForeignColumn(System.String)">
            <summary>
            Specifies the foreign column.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyForeignColumnBuilder.ForeignColumns(System.String[])">
            <summary>
            Specifies the foreign columns.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyFromTableBuilder">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyFromTableBuilder.FromTable(System.String)">
            <summary>
            Specifies the source table of the foreign key.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyOnTableBuilder">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyOnTableBuilder.OnTable(System.String)">
            <summary>
            Specifies the table of the foreign key.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyPrimaryColumnBuilder">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyPrimaryColumnBuilder.PrimaryColumn(System.String)">
            <summary>
            Specifies the target primary column.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyPrimaryColumnBuilder.PrimaryColumns(System.String[])">
            <summary>
            Specifies the target primary columns.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyToTableBuilder">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyToTableBuilder.ToTable(System.String)">
            <summary>
            Specifies the target table of the foreign key.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder.Table(System.String)">
            <summary>
            Specifies the table to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder.KeysAndIndexes``1(System.Boolean,System.Boolean)">
            <summary>
            Builds a Delete Keys and Indexes expression, and executes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder.KeysAndIndexes(System.String,System.Boolean,System.Boolean)">
            <summary>
            Builds a Delete Keys and Indexes expression, and executes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder.Column(System.String)">
            <summary>
            Specifies the column to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder.ForeignKey">
            <summary>
            Specifies the foreign key to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder.ForeignKey(System.String)">
            <summary>
            Specifies the foreign key to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder.FromTable(System.String)">
            <summary>
            Specifies the table to delete data from.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder.Index">
            <summary>
            Specifies the index to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder.Index(System.String)">
            <summary>
            Specifies the index to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder.PrimaryKey(System.String)">
            <summary>
            Specifies the primary key to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder.UniqueConstraint(System.String)">
            <summary>
            Specifies the unique constraint to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder.DefaultConstraint">
            <summary>
            Specifies the default constraint to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Index.DeleteIndexBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Index.DeleteIndexBuilder.OnColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Index.DeleteIndexBuilder.OnColumns(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.Index.IDeleteIndexForTableBuilder">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Index.IDeleteIndexForTableBuilder.OnTable(System.String)">
            <summary>
            Specifies the table of the index to delete.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Delete.Index.IDeleteIndexOnColumnBuilder">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Index.IDeleteIndexOnColumnBuilder.OnColumn(System.String)">
            <summary>
            Specifies the column of the index.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Delete.Index.IDeleteIndexOnColumnBuilder.OnColumns(System.String[])">
            <summary>
            Specifies the column of the index.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Alter.AlterBuilder">
            <summary>
            Implements <see cref="T:Umbraco.Core.Migrations.Expressions.Alter.IAlterBuilder"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Alter.AlterBuilder.Table(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Alter.IAlterBuilder">
            <summary>
            Builds an Alter expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Alter.IAlterBuilder.Table(System.String)">
            <summary>
            Specifies the table to alter.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Alter.Table.IAlterTableBuilder">
            <summary>
            Builds an Alter Table expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Alter.Table.IAlterTableBuilder.AddColumn(System.String)">
            <summary>
            Specifies a column to add.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Alter.Table.IAlterTableBuilder.AlterColumn(System.String)">
            <summary>
            Specifies a column to alter.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Execute.ExecuteBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Execute.ExecuteBuilder.Sql(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Execute.ExecuteBuilder.Sql(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Execute.IExecuteBuilder">
            <summary>
            Builds and executes an Sql statement.
            </summary>
            <remarks>Deals with multi-statements Sql.</remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Execute.IExecuteBuilder.Sql(System.String)">
            <summary>
            Specifies the Sql statement to execute.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Execute.IExecuteBuilder.Sql(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext})">
            <summary>
            Specifies the Sql statement to execute.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.ExpressionBuilderBase`2">
            <summary>
            Provides a base class for expression builders.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.ExpressionBuilderBase`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.Expressions.ExpressionBuilderBase`2"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.ExpressionBuilderBase`1">
            <summary>
            Provides a base class for expression builders.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.ExpressionBuilderBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.Expressions.ExpressionBuilderBase`1"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Expressions.ExpressionBuilderBase`1.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Insert.IInsertBuilder">
            <summary>
            Builds an Insert expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Insert.IInsertBuilder.IntoTable(System.String)">
            <summary>
            Specifies the table to insert into.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Insert.IInsertIntoBuilder">
            <summary>
            Builds an Insert Into expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Insert.IInsertIntoBuilder.EnableIdentityInsert">
            <summary>
            Enables identity insert.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Insert.IInsertIntoBuilder.Row(System.Object)">
            <summary>
            Specifies a row to be inserted.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Insert.InsertBuilder">
            <summary>
            Implements <see cref="T:Umbraco.Core.Migrations.Expressions.Insert.IInsertBuilder"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Insert.InsertBuilder.IntoTable(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Insert.InsertIntoBuilder">
            <summary>
            Implements <see cref="T:Umbraco.Core.Migrations.Expressions.Insert.IInsertIntoBuilder"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Insert.InsertIntoBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Insert.InsertIntoBuilder.EnableIdentityInsert">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Insert.InsertIntoBuilder.Row(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Rename.Column.IRenameColumnBuilder">
            <summary>
            Builds a Rename Column expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.Column.IRenameColumnBuilder.OnTable(System.String)">
            <summary>
            Specifies the table name.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Rename.Column.IRenameColumnToBuilder">
            <summary>
            Builds a Rename Column expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.Column.IRenameColumnToBuilder.To(System.String)">
            <summary>
            Specifies the new name of the column.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.Column.RenameColumnBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.Column.RenameColumnBuilder.To(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.Column.RenameColumnBuilder.OnTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.Expressions.RenameColumnExpression.GetSql">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Rename.Expressions.RenameTableExpression">
            <summary>
            Represents a Rename Table expression.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Expressions.Rename.Expressions.RenameTableExpression.OldName">
            <summary>
            Gets or sets the source name.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Expressions.Rename.Expressions.RenameTableExpression.NewName">
            <summary>
            Gets or sets the target name.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.Expressions.RenameTableExpression.GetSql">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Rename.IRenameBuilder">
            <summary>
            Builds a Rename expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.IRenameBuilder.Table(System.String)">
            <summary>
            Specifies the table to rename.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.IRenameBuilder.Column(System.String)">
            <summary>
            Specifies the column to rename.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.RenameBuilder.Table(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.RenameBuilder.Column(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Rename.Table.IRenameTableBuilder">
            <summary>
            Builds a Rename Table expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.Table.IRenameTableBuilder.To(System.String)">
            <summary>
            Specifies the new name of the table.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.Table.RenameTableBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Rename.Table.RenameTableBuilder.To(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Update.IUpdateBuilder">
            <summary>
            Builds an Update expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Update.IUpdateBuilder.Table(System.String)">
            <summary>
            Specifies the table to update.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Update.IUpdateTableBuilder">
            <summary>
            Builds an Update expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Update.IUpdateTableBuilder.Set(System.Object)">
            <summary>
            Specifies the data.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Expressions.Update.IUpdateWhereBuilder">
            <summary>
            Builds an Update expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Update.IUpdateWhereBuilder.Where(System.Object)">
            <summary>
            Specifies rows to update.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Update.IUpdateWhereBuilder.AllRows">
            <summary>
            Specifies that all rows must be updated.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Update.UpdateBuilder.Table(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Update.UpdateDataBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Update.UpdateDataBuilder.Set(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Update.UpdateDataBuilder.Where(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.Expressions.Update.UpdateDataBuilder.AllRows">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.Install.DatabaseBuilder">
            <summary>
            Supports building and configuring the database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.#ctor(Umbraco.Core.Scoping.IScopeProvider,Umbraco.Core.Configuration.IGlobalSettings,Umbraco.Core.Persistence.IUmbracoDatabaseFactory,Umbraco.Core.IRuntimeState,Umbraco.Core.Logging.ILogger,Umbraco.Core.Migrations.IMigrationBuilder,Umbraco.Core.Services.IKeyValueService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.Install.DatabaseBuilder"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Install.DatabaseBuilder.IsDatabaseConfigured">
            <summary>
            Gets a value indicating whether the database is configured. It does not necessarily
            mean that it is possible to connect, nor that Umbraco is installed, nor up-to-date.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Install.DatabaseBuilder.CanConnectToDatabase">
            <summary>
            Gets a value indicating whether it is possible to connect to the configured database.
            It does not necessarily mean that Umbraco is installed, nor up-to-date.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.CanConnect(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Verifies whether a it is possible to connect to a database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.ConfigureEmbeddedDatabaseConnection">
            <summary>
            Configures a connection string for the embedded database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.ConfigureDatabaseConnection(System.String)">
            <summary>
            Configures a connection string that has been entered manually.
            </summary>
            <param name="connectionString">A connection string.</param>
            <remarks>Has to be SQL Server</remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.ConfigureDatabaseConnection(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Configures a connection string from the installer.
            </summary>
            <param name="server">The name or address of the database server.</param>
            <param name="databaseName">The name of the database.</param>
            <param name="user">The user name.</param>
            <param name="password">The user password.</param>
            <param name="databaseProvider">The name of the provider (Sql, Sql Azure, Sql Ce).</param>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.GetDatabaseConnectionString(System.String,System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            Gets a connection string from the installer.
            </summary>
            <param name="server">The name or address of the database server.</param>
            <param name="databaseName">The name of the database.</param>
            <param name="user">The user name.</param>
            <param name="password">The user password.</param>
            <param name="databaseProvider">The name of the provider (Sql, Sql Azure, Sql Ce).</param>
            <param name="providerName"></param>
            <returns>A connection string.</returns>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.ConfigureIntegratedSecurityDatabaseConnection(System.String,System.String)">
            <summary>
            Configures a connection string using Microsoft SQL Server integrated security.
            </summary>
            <param name="server">The name or address of the database server.</param>
            <param name="databaseName">The name of the database</param>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.GetIntegratedSecurityDatabaseConnectionString(System.String,System.String)">
            <summary>
            Gets a connection string using Microsoft SQL Server integrated security.
            </summary>
            <param name="server">The name or address of the database server.</param>
            <param name="databaseName">The name of the database</param>
            <returns>A connection string.</returns>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.GetAzureConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
            Gets an Azure connection string.
            </summary>
            <param name="server">The name or address of the database server.</param>
            <param name="databaseName">The name of the database.</param>
            <param name="user">The user name.</param>
            <param name="password">The user password.</param>
            <returns>A connection string.</returns>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.SaveConnectionString(System.String,System.String,Umbraco.Core.Logging.ILogger)">
            <summary>
            Saves the connection string as a proper .net connection string in web.config.
            </summary>
            <remarks>Saves the ConnectionString in the very nasty 'medium trust'-supportive way.</remarks>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">The provider name.</param>
            <param name="logger">A logger.</param>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.ValidateSchema">
            <summary>
            Validates the database schema.
            </summary>
            <remarks>
            <para>This assumes that the database exists and the connection string is
            configured and it is possible to connect to the database.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.CreateSchemaAndData">
            <summary>
            Creates the database schema and inserts initial data.
            </summary>
            <remarks>
            <para>This assumes that the database exists and the connection string is
            configured and it is possible to connect to the database.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseBuilder.UpgradeSchemaAndData(Umbraco.Core.Migrations.MigrationPlan)">
            <summary>
            Upgrades the database schema and data by running migrations.
            </summary>
            <remarks>
            <para>This assumes that the database exists and the connection string is
            configured and it is possible to connect to the database.</para>
            <para>Runs whichever migrations need to run.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Migrations.Install.DatabaseBuilder.Result">
            <summary>
            Represents the result of a database creation or upgrade.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Install.DatabaseBuilder.Result.RequiresUpgrade">
            <summary>
            Gets or sets a value indicating whether an upgrade is required.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Install.DatabaseBuilder.Result.Message">
            <summary>
            Gets or sets the message returned by the operation.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Install.DatabaseBuilder.Result.Success">
            <summary>
            Gets or sets a value indicating whether the operation succeeded.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.Install.DatabaseBuilder.Result.Percentage">
            <summary>
            Gets or sets an install progress pseudo-percentage.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.Install.DatabaseDataCreator">
            <summary>
            Creates the initial database data during install.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseDataCreator.InitializeBaseData(System.String)">
            <summary>
            Initialize the base data creation by inserting the data foundation for umbraco
            specific to a table
            </summary>
            <param name="tableName">Name of the table to create base data for</param>
        </member>
        <member name="T:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator">
            <summary>
            Creates the initial database schema during install.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.UninstallDatabaseSchema">
            <summary>
            Drops all Umbraco tables in the db.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.InitializeDatabaseSchema">
            <summary>
            Initializes the database by creating the umbraco db schema.
            </summary>
            <remarks>This needs to execute as part of a transaction.</remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.ValidateSchema">
            <summary>
            Validates the schema of the current database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.ValidateDbConstraints(Umbraco.Core.Migrations.Install.DatabaseSchemaResult)">
            <summary>
            This validates the Primary/Foreign keys in the database
            </summary>
            <param name="result"></param>
            <remarks>
            This does not validate any database constraints that are not PKs or FKs because Umbraco does not create a database with non PK/FK constraints.
            Any unique "constraints" in the database are done with unique indexes.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.DatabaseEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="E:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.BeforeCreation">
            <summary>
            Occurs when [before save].
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.FireBeforeCreation(Umbraco.Core.Events.DatabaseCreationEventArgs)">
            <summary>
            Raises the <see cref="E:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.BeforeCreation"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.AfterCreation">
            <summary>
            Occurs when [after save].
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.FireAfterCreation(Umbraco.Core.Events.DatabaseCreationEventArgs)">
            <summary>
            Raises the <see cref="E:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.AfterCreation"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.TableExists(System.String)">
            <summary>
            Returns whether a table with the specified <paramref name="tableName"/> exists in the database.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns><c>true</c> if the table exists; otherwise <c>false</c>.</returns>
            <example>
            <code>
            if (schemaHelper.TableExist("MyTable"))
            {
                // do something when the table exists
            }
            </code>
            </example>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.TableExists``1">
            <summary>
            Returns whether the table for the specified <typeparamref name="T"/> exists in the database.
            </summary>
            <typeparam name="T">The type representing the DTO/table.</typeparam>
            <returns><c>true</c> if the table exists; otherwise <c>false</c>.</returns>
            <example>
            <code>
            if (schemaHelper.TableExist&lt;MyDto&gt;)
            {
                // do something when the table exists
            }
            </code>
            </example>
            <remarks>
            If <typeparamref name="T"/> has been decorated with an <see cref="T:NPoco.TableNameAttribute"/>, the name from that
            attribute will be used for the table name. If the attribute is not present, the name
            <typeparamref name="T"/> will be used instead.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.CreateTable``1(System.Boolean)">
             <summary>
             Creates a new table in the database based on the type of <typeparamref name="T"/>.
             </summary>
             <typeparam name="T">The type representing the DTO/table.</typeparam>
             <param name="overwrite">Whether the table should be overwritten if it already exists.</param>
             <remarks>
             If <typeparamref name="T"/> has been decorated with an <see cref="T:NPoco.TableNameAttribute"/>, the name from that
             attribute will be used for the table name. If the attribute is not present, the name
             <typeparamref name="T"/> will be used instead.
            
             If a table with the same name already exists, the <paramref name="overwrite"/> parameter will determine
             whether the table is overwritten. If <c>true</c>, the table will be overwritten, whereas this method will
             not do anything if the parameter is <c>false</c>.
             </remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.CreateTable(System.Boolean,System.Type,Umbraco.Core.Migrations.Install.DatabaseDataCreator)">
             <summary>
             Creates a new table in the database for the specified <paramref name="modelType"/>.
             </summary>
             <param name="overwrite">Whether the table should be overwritten if it already exists.</param>
             <param name="modelType">The representing the table.</param>
             <param name="dataCreation"></param>
             <remarks>
             If <paramref name="modelType"/> has been decorated with an <see cref="T:NPoco.TableNameAttribute"/>, the name from
             that  attribute will be used for the table name. If the attribute is not present, the name
             <paramref name="modelType"/> will be used instead.
            
             If a table with the same name already exists, the <paramref name="overwrite"/> parameter will determine
             whether the table is overwritten. If <c>true</c>, the table will be overwritten, whereas this method will
             not do anything if the parameter is <c>false</c>.
            
             This need to execute as part of a transaction.
             </remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaCreator.DropTable(System.String)">
            <summary>
            Drops the table for the specified <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type representing the DTO/table.</typeparam>
            <example>
            <code>
            schemaHelper.DropTable&lt;MyDto&gt;);
            </code>
            </example>
            <remarks>
            If <typeparamref name="T"/> has been decorated with an <see cref="T:NPoco.TableNameAttribute"/>, the name from that
            attribute will be used for the table name. If the attribute is not present, the name
            <typeparamref name="T"/> will be used instead.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Migrations.Install.DatabaseSchemaResult">
            <summary>
            Represents ...
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaResult.DetermineHasInstalledVersion">
            <summary>
            Determines whether the database contains an installed version.
            </summary>
            <remarks>
            <para>A database contains an installed version when it contains at least one valid table.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.Install.DatabaseSchemaResult.GetSummary">
            <summary>
            Gets a summary of the schema validation result
            </summary>
            <returns>A string containing a human readable string with a summary message</returns>
        </member>
        <member name="T:Umbraco.Core.Migrations.MigrationPlan">
            <summary>
            Represents a migration plan.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.MigrationPlan"/> class.
            </summary>
            <param name="name">The name of the plan.</param>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationPlan.Transitions">
            <summary>
            Gets the transitions.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationPlan.Name">
            <summary>
            Gets the name of the plan.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.To(System.String)">
            <summary>
            Adds a transition to a target state through an empty migration.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.To``1(System.String)">
            <summary>
            Adds a transition to a target state through a migration.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.To(System.String,System.Type)">
            <summary>
            Adds a transition to a target state through a migration.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.From(System.String)">
            <summary>
            Sets the starting state.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.ToWithReplace``2(System.String,System.String)">
            <summary>
            Adds a transition to a target state through a migration, replacing a previous migration.
            </summary>
            <typeparam name="TMigrationNew">The new migration.</typeparam>
            <typeparam name="TMigrationRecover">The migration to use to recover from the previous target state.</typeparam>
            <param name="recoverState">The previous target state, which we need to recover from through <typeparamref name="TMigrationRecover"/>.</param>
            <param name="targetState">The new target state.</param>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.ToWithReplace``1(System.String,System.String)">
            <summary>
            Adds a transition to a target state through a migration, replacing a previous migration.
            </summary>
            <typeparam name="TMigrationNew">The new migration.</typeparam>
            <param name="recoverState">The previous target state, which we can recover from directly.</param>
            <param name="targetState">The new target state.</param>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.ToWithClone(System.String,System.String,System.String)">
            <summary>
            Adds transitions to a target state by cloning transitions from a start state to an end state.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.PreparePostMigrations(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Prepares post-migrations.
            </summary>
            <remarks>
            <para>This can be overriden to filter, complement, and/or re-order post-migrations.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.AddPostMigration``1">
            <summary>
            Adds a post-migration to the plan.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.CreateRandomState">
            <summary>
            Creates a random, unique state.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.Merge">
            <summary>
            Begins a merge.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationPlan.InitialState">
            <summary>
            Gets the initial state.
            </summary>
            <remarks>The initial state is the state when the plan has never
            run. By default, it is the empty string, but plans may override
            it if they have other ways of determining where to start from.</remarks>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationPlan.FinalState">
            <summary>
            Gets the final state.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.Validate">
            <summary>
            Validates the plan.
            </summary>
            <returns>The plan's final state.</returns>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.ThrowOnUnknownInitialState(System.String)">
            <summary>
            Throws an exception when the initial state is unknown.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.Execute(Umbraco.Core.Scoping.IScope,System.String,Umbraco.Core.Migrations.IMigrationBuilder,Umbraco.Core.Logging.ILogger)">
            <summary>
            Executes the plan.
            </summary>
            <param name="scope">A scope.</param>
            <param name="fromState">The state to start execution at.</param>
            <param name="migrationBuilder">A migration builder.</param>
            <param name="logger">A logger.</param>
            <returns>The final state.</returns>
            <remarks>The plan executes within the scope, which must then be completed.</remarks>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.FollowPath(System.String,System.String)">
            <summary>
            Follows a path (for tests and debugging).
            </summary>
            <remarks>Does the same thing Execute does, but does not actually execute migrations.</remarks>
        </member>
        <member name="T:Umbraco.Core.Migrations.MigrationPlan.Transition">
            <summary>
            Represents a plan transition.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.Transition.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.MigrationPlan.Transition"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationPlan.Transition.SourceState">
            <summary>
            Gets the source state.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationPlan.Transition.TargetState">
            <summary>
            Gets the target state.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationPlan.Transition.MigrationType">
            <summary>
            Gets the migration type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationPlan.Transition.ToString">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.IMigration">
            <summary>
            Represents a migration.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.IMigration.Migrate">
            <summary>
            Executes the migration.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.IMigrationContext">
            <summary>
            Provides context to migrations.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.IMigrationContext.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.IMigrationContext.Database">
            <summary>
            Gets the database instance.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.IMigrationContext.SqlContext">
            <summary>
            Gets the Sql context.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.IMigrationContext.Index">
            <summary>
            Gets or sets the expression index.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.IMigrationContext.BuildingExpression">
            <summary>
            Gets or sets a value indicating whether an expression is being built.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.IMigrationContext.AddPostMigration``1">
            <summary>
            Adds a post-migration.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.IMigrationExpression">
            <summary>
            Marker interface for migration expressions
            </summary>
        </member>
        <member name="T:Umbraco.Core.Migrations.MigrationContext">
            <summary>
            Implements <see cref="T:Umbraco.Core.Migrations.IMigrationContext"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationContext.#ctor(Umbraco.Core.Persistence.IUmbracoDatabase,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Migrations.MigrationContext"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationContext.Logger">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationContext.Database">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationContext.SqlContext">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationContext.Index">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Migrations.MigrationContext.BuildingExpression">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Migrations.MigrationContext.AddPostMigration``1">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Migrations.MigrationExpressionBase">
            <summary>
            Provides a base class for migration expressions.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Umbraco.Core.Migrations.MigrationExpressionBase.Name" -->
        <member name="T:Umbraco.Core.Models.Blocks.BlockEditorDataConverter">
            <summary>
            Converts the block json data into objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Blocks.BlockEditorDataConverter.GetBlockReferences(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Return the collection of <see cref="T:Umbraco.Core.Models.Blocks.IBlockReference"/> from the block editor's Layout (which could be an array or an object depending on the editor)
            </summary>
            <param name="jsonLayout"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.Blocks.BlockEditorData">
            <summary>
            Convertable block data from json
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockEditorData.Layout">
            <summary>
            Returns the layout for this specific property editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockEditorData.BlockValue">
            <summary>
            Returns the reference to the original BlockValue
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Blocks.BlockItemData">
            <summary>
            Represents a single block's data in raw form
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockItemData.ContentTypeAlias">
            <summary>
            not serialized, manually set and used during internally
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockItemData.RawPropertyValues">
            <summary>
            The remaining properties will be serialized to a dictionary
            </summary>
            <remarks>
            The JsonExtensionDataAttribute is used to put the non-typed properties into a bucket
            http://www.newtonsoft.com/json/help/html/DeserializeExtensionData.htm
            NestedContent serializes to string, int, whatever eg
              "stringValue":"Some String","numericValue":125,"otherNumeric":null
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockItemData.PropertyValues">
            <summary>
            Used during deserialization to convert the raw property data into data with a property type context
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Blocks.BlockItemData.BlockPropertyValue">
            <summary>
            Used during deserialization to populate the property value/property type of a block item content property
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Blocks.BlockListLayoutItem">
            <summary>
            Used for deserializing the block list layout
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Blocks.BlockListEditorDataConverter">
            <summary>
            Data converter for the block list property editor
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Blocks.IBlockReference">
            <summary>
            Represents a data item reference for a Block Editor implementation.
            </summary>
            <remarks>
            See: https://github.com/umbraco/rfcs/blob/907f3758cf59a7b6781296a60d57d537b3b60b8c/cms/0011-block-data-structure.md#strongly-typed
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.IBlockReference.ContentUdi">
            <summary>
            Gets the content UDI.
            </summary>
            <value>
            The content UDI.
            </value>
        </member>
        <member name="T:Umbraco.Core.Models.Blocks.IBlockReference`1">
            <summary>
            Represents a data item reference with settings for a Block editor implementation.
            </summary>
            <typeparam name="TSettings">The type of the settings.</typeparam>
            <remarks>
            See: https://github.com/umbraco/rfcs/blob/907f3758cf59a7b6781296a60d57d537b3b60b8c/cms/0011-block-data-structure.md#strongly-typed
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.IBlockReference`1.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="T:Umbraco.Core.Models.Blocks.BlockListItem">
            <summary>
            Represents a layout item for the Block List editor.
            </summary>
            <seealso cref="!:Umbraco.Core.Models.Blocks.IBlockReference&lt;Umbraco.Core.Models.PublishedContent.IPublishedElement&gt;" />
        </member>
        <member name="M:Umbraco.Core.Models.Blocks.BlockListItem.#ctor(Umbraco.Core.Udi,Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Udi,Umbraco.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Blocks.BlockListItem" /> class.
            </summary>
            <param name="contentUdi">The content UDI.</param>
            <param name="content">The content.</param>
            <param name="settingsUdi">The settings UDI.</param>
            <param name="settings">The settings.</param>
            <exception cref="T:System.ArgumentNullException">contentUdi
            or
            content</exception>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockListItem.ContentUdi">
            <summary>
            Gets the content UDI.
            </summary>
            <value>
            The content UDI.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockListItem.Content">
            <summary>
            Gets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockListItem.SettingsUdi">
            <summary>
            Gets the settings UDI.
            </summary>
            <value>
            The settings UDI.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockListItem.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="T:Umbraco.Core.Models.Blocks.BlockListItem`1">
            <summary>
            Represents a layout item with a generic content type for the Block List editor.
            </summary>
            <typeparam name="T">The type of the content.</typeparam>
            <seealso cref="!:Umbraco.Core.Models.Blocks.IBlockReference&lt;Umbraco.Core.Models.PublishedContent.IPublishedElement&gt;" />
        </member>
        <member name="M:Umbraco.Core.Models.Blocks.BlockListItem`1.#ctor(Umbraco.Core.Udi,`0,Umbraco.Core.Udi,Umbraco.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Blocks.BlockListItem`1" /> class.
            </summary>
            <param name="contentUdi">The content UDI.</param>
            <param name="content">The content.</param>
            <param name="settingsUdi">The settings UDI.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockListItem`1.Content">
            <summary>
            Gets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="T:Umbraco.Core.Models.Blocks.BlockListItem`2">
            <summary>
            Represents a layout item with generic content and settings types for the Block List editor.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <typeparam name="TSettings">The type of the settings.</typeparam>
            <seealso cref="!:Umbraco.Core.Models.Blocks.IBlockReference&lt;Umbraco.Core.Models.PublishedContent.IPublishedElement&gt;" />
        </member>
        <member name="M:Umbraco.Core.Models.Blocks.BlockListItem`2.#ctor(Umbraco.Core.Udi,`0,Umbraco.Core.Udi,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Blocks.BlockListItem`2" /> class.
            </summary>
            <param name="contentUdi">The content udi.</param>
            <param name="content">The content.</param>
            <param name="settingsUdi">The settings udi.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockListItem`2.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="T:Umbraco.Core.Models.Blocks.BlockListModel">
            <summary>
            The strongly typed model for the Block List editor.
            </summary>
            <seealso cref="!:System.Collections.ObjectModel.ReadOnlyCollection&lt;Umbraco.Core.Models.Blocks.BlockListItem&gt;" />
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockListModel.Empty">
            <summary>
            Gets the empty <see cref="T:Umbraco.Core.Models.Blocks.BlockListModel" />.
            </summary>
            <value>
            The empty <see cref="T:Umbraco.Core.Models.Blocks.BlockListModel" />.
            </value>
        </member>
        <member name="M:Umbraco.Core.Models.Blocks.BlockListModel.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Umbraco.Core.Models.Blocks.BlockListModel" /> class from being created.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Blocks.BlockListModel.#ctor(System.Collections.Generic.IList{Umbraco.Core.Models.Blocks.BlockListItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Blocks.BlockListModel" /> class.
            </summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockListModel.Item(System.Guid)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Blocks.BlockListItem" /> with the specified content key.
            </summary>
            <value>
            The <see cref="T:Umbraco.Core.Models.Blocks.BlockListItem" />.
            </value>
            <param name="contentKey">The content key.</param>
            <returns>
            The <see cref="T:Umbraco.Core.Models.Blocks.BlockListItem" /> with the specified content key.
            </returns>
        </member>
        <member name="P:Umbraco.Core.Models.Blocks.BlockListModel.Item(Umbraco.Core.Udi)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Blocks.BlockListItem" /> with the specified content UDI.
            </summary>
            <value>
            The <see cref="T:Umbraco.Core.Models.Blocks.BlockListItem" />.
            </value>
            <param name="contentUdi">The content UDI.</param>
            <returns>
            The <see cref="T:Umbraco.Core.Models.Blocks.BlockListItem" /> with the specified content UDI.
            </returns>
        </member>
        <member name="F:Umbraco.Core.Models.ContentDataIntegrityReport.IssueType.InvalidPathAndLevelByParentId">
            <summary>
            The item's level and path are inconsistent with it's parent's path and level
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentDataIntegrityReport.IssueType.InvalidPathEmpty">
            <summary>
            The item's path doesn't contain all required parts
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentDataIntegrityReport.IssueType.InvalidPathLevelMismatch">
            <summary>
            The item's path parts are inconsistent with it's level value
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentDataIntegrityReport.IssueType.InvalidPathById">
            <summary>
            The item's path does not end with it's own ID
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentDataIntegrityReport.IssueType.InvalidPathByParentId">
            <summary>
            The item's path does not have it's parent Id as the 2nd last entry
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentDataIntegrityReportOptions.FixIssues">
            <summary>
            Set to true to try to automatically resolve data integrity issues
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Identity.ExternalLogin">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Identity.ExternalLogin.LoginProvider">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Identity.ExternalLogin.ProviderKey">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Identity.ExternalLogin.UserData">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.Identity.IExternalLogin">
            <summary>
            Used to persist external login data for a user
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.CreateNew(System.String,System.String,System.String)">
            <summary>
             Used to construct a new instance without an identity
            </summary>
            <param name="username"></param>
            <param name="email">This is allowed to be null (but would need to be filled in if trying to persist this instance)</param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.#ctor(System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Membership.IReadOnlyUserGroup})">
            <summary>
            Creates an existing user with the specified groups
            </summary>
            <param name="userId"></param>
            <param name="groups"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.HasIdentity">
            <summary>
            Returns true if an Id has been set on this object this will be false if the object is new and not persisted to the database
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.Email">
            <summary>
            Override Email so we can track changes to it
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.UserName">
            <summary>
            Override UserName so we can track changes to it
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.LastPasswordChangeDateUtc">
            <summary>
            LastPasswordChangeDateUtc so we can track changes to it
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.LastLoginDateUtc">
            <summary>
            Override LastLoginDateUtc so we can track changes to it
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.EmailConfirmed">
            <summary>
            Override EmailConfirmed so we can track changes to it
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.Name">
            <summary>
            Gets/sets the user's real name
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.AccessFailedCount">
            <summary>
            Override AccessFailedCount so we can track changes to it
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.PasswordHash">
            <summary>
            Override PasswordHash so we can track changes to it
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.StartContentIds">
            <summary>
            Content start nodes assigned to the User (not ones assigned to the user's groups)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.StartMediaIds">
            <summary>
            Media start nodes assigned to the User (not ones assigned to the user's groups)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.AllowedSections">
            <summary>
            This is a readonly list of the user's allowed sections which are based on it's user groups
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.LockoutEnabled">
            <summary>
            Lockout is always enabled
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.IsLockedOut">
            <summary>
            Based on the user's lockout end date, this will determine if they are locked out
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.IsApproved">
            <summary>
            This is a 1:1 mapping with IUser.IsApproved
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.Logins">
            <summary>
            Overridden to make the retrieval lazy
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.AddRole(System.String)">
            <summary>
            helper method to easily add a role without having to deal with IdentityUserRole{T}
            </summary>
            <param name="role"></param>
            <remarks>
            Adding a role this way will not reflect on the user's group's collection or it's allowed sections until the user is persisted
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.Roles">
            <summary>
            Override Roles because the value of these are the user's group aliases
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.SetLoginsCallback(System.Lazy{System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Identity.IIdentityUserLogin}})">
            <summary>
            Used to set a lazy call back to populate the user's Login list
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.IsDirty">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.IsPropertyDirty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.GetDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.ResetDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.WasDirty">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.WasPropertyDirty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.ResetWereDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.ResetDirtyProperties(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.GetWereDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.DisableChangeTracking">
            <summary>
            Disables change tracking.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.EnableChangeTracking">
            <summary>
            Enables change tracking.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Identity.IdentityUser`4">
            <summary>
            Default IUser implementation
            </summary>
            <typeparam name="TKey"/><typeparam name="TLogin"/><typeparam name="TRole"/><typeparam name="TClaim"/>
            <remarks>
            This class normally exists inside of the EntityFramework library, not sure why MS chose to explicitly put it there but we don't want
            references to that so we will create our own here
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Identity.IdentityUser`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Identity.IdentityUser`4"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.LastLoginDateUtc">
            <summary>
            Last login date
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.EmailConfirmed">
            <summary>
            True if the email is confirmed, default is false
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.PasswordHash">
            <summary>
            The salted/hashed form of the user password
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.SecurityStamp">
            <summary>
            A random value that should change whenever a users credentials have changed (password changed, login removed)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.PhoneNumber">
            <summary>
            PhoneNumber for the user
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.PhoneNumberConfirmed">
            <summary>
            True if the phone number is confirmed, default is false
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.TwoFactorEnabled">
            <summary>
            Is two factor enabled for the user
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.LockoutEndDateUtc">
            <summary>
            DateTime in UTC when lockout ends, any time in the past is considered not locked out.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.LastPasswordChangeDateUtc">
            <summary>
            DateTime in UTC when the password was last changed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.LockoutEnabled">
            <summary>
            Is lockout enabled for this user
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.AccessFailedCount">
            <summary>
            Used to record failures for the purposes of lockout
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.Roles">
            <summary>
            Navigation property for user roles
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.Claims">
            <summary>
            Navigation property for user claims
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.Logins">
            <summary>
            Navigation property for user logins
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.Id">
            <summary>
            User ID (Primary Key)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Identity.IdentityUserClaim`1">
             <summary>
             EntityType that represents one specific user claim
            
             </summary>
             <typeparam name="TKey"/>
             <remarks>
             This class normally exists inside of the EntityFramework library, not sure why MS chose to explicitly put it there but we don't want
             references to that so we will create our own here
             </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserClaim`1.Id">
             <summary>
             Primary key
            
             </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserClaim`1.UserId">
             <summary>
             User Id for the user who owns this login
            
             </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserClaim`1.ClaimType">
             <summary>
             Claim type
            
             </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserClaim`1.ClaimValue">
             <summary>
             Claim value
            
             </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Identity.IdentityUserLogin">
            <summary>
            Entity type for a user's login (i.e. Facebook, Google)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserLogin.LoginProvider">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserLogin.ProviderKey">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserLogin.UserId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserLogin.UserData">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.Identity.IdentityUserRole`1">
             <summary>
             EntityType that represents a user belonging to a role
            
             </summary>
             <typeparam name="TKey"/>
             <remarks>
             This class normally exists inside of the EntityFramework library, not sure why MS chose to explicitly put it there but we don't want
             references to that so we will create our own here
             </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserRole`1.UserId">
             <summary>
             UserId for the user that is in the role
            
             </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserRole`1.RoleId">
             <summary>
             RoleId for the role
            
             </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IIdentityUserLoginExtended.UserData">
            <summary>
            Used to store any arbitrary data for the user and external provider - like user tokens returned from the provider
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IIdentityUserLogin.LoginProvider">
            <summary>
            The login provider for the login (i.e. Facebook, Google)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IIdentityUserLogin.ProviderKey">
            <summary>
            Key representing the login for the provider
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IIdentityUserLogin.UserId">
            <summary>
            User Id for the user who owns this login
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentTypeExtensions.TryGetKey(Umbraco.Core.Models.PublishedContent.IPublishedContentType,System.Guid@)">
            <summary>
            Get the GUID key from an <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContentType"/>
            </summary>
            <param name="publishedContentType"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.ILivePublishedModelFactory2">
            <summary>
            Provides a live published model creation service.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ILivePublishedModelFactory2.Reset">
            <summary>
            Tells the factory that it should build a new generation of models
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.ILivePublishedModelFactory2.Enabled">
            <summary>
            If the live model factory 
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.ILivePublishedModelFactory">
            <summary>
            Provides a live published model creation service.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.ILivePublishedModelFactory.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the factory.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ILivePublishedModelFactory.Refresh">
            <summary>
            Refreshes the factory.
            </summary>
            <remarks>
            <para>This will typically re-compiled models/classes into a new DLL that are used to populate the cache.</para>
            <para>This is called prior to refreshing the cache.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IPublishedContentType2">
            <summary>
            Represents an <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedElement"/> type.
            </summary>
            <remarks>Instances implementing the <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContentType"/> interface should be
            immutable, ie if the content type changes, then a new instance needs to be created.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContentType2.Key">
            <summary>
            Gets the unique key for the content type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IPublishedContentType">
            <summary>
            Represents an <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedElement"/> type.
            </summary>
            <remarks>Instances implementing the <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContentType"/> interface should be
            immutable, ie if the content type changes, then a new instance needs to be created.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContentType.Id">
            <summary>
            Gets the content type identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContentType.Alias">
            <summary>
            Gets the content type alias.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContentType.ItemType">
            <summary>
            Gets the content item type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContentType.CompositionAliases">
            <summary>
            Gets the aliases of the content types participating in the composition.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContentType.Variations">
            <summary>
            Gets the content variations of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContentType.IsElement">
            <summary>
            Gets a value indicating whether this content type is for an element.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContentType.PropertyTypes">
            <summary>
            Gets the content type properties.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentType.GetPropertyIndex(System.String)">
            <summary>
            Gets a property type index.
            </summary>
            <remarks>The alias is case-insensitive. This is the only place where alias strings are compared.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentType.GetPropertyType(System.String)">
            <summary>
            Gets a property type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentType.GetPropertyType(System.Int32)">
            <summary>
            Gets a property type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType">
            <summary>
            Represents a published property type.
            </summary>
            <remarks>Instances implementing the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyType"/> interface should be
            immutable, ie if the property type changes, then a new instance needs to be created.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.ContentType">
            <summary>
            Gets the published content type containing the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.DataType">
            <summary>
            Gets the data type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.Alias">
            <summary>
            Gets property type alias.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.EditorAlias">
            <summary>
            Gets the property editor alias.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.IsUserProperty">
            <summary>
            Gets a value indicating whether the property is a user content property.
            </summary>
            <remarks>A non-user content property is a property that has been added to a
            published content type by Umbraco but does not corresponds to a user-defined
            published property.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.Variations">
            <summary>
            Gets the content variations of the property type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.IsValue(System.Object,Umbraco.Core.PropertyEditors.PropertyValueLevel)">
            <summary>
            Determines whether a value is an actual value, or not a value.
            </summary>
            <remarks>Used by property.HasValue and, for instance, in fallback scenarios.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.CacheLevel">
            <summary>
            Gets the property cache level.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.ConvertSourceToInter(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.Object,System.Boolean)">
            <summary>
            Converts the source value into the intermediate value.
            </summary>
            <param name="owner">The published element owning the property.</param>
            <param name="source">The source value.</param>
            <param name="preview">A value indicating whether content should be considered draft.</param>
            <returns>The intermediate value.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.ConvertInterToObject(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <summary>
            Converts the intermediate value into the object value.
            </summary>
            <param name="owner">The published element owning the property.</param>
            <param name="referenceCacheLevel">The reference cache level.</param>
            <param name="inter">The intermediate value.</param>
            <param name="preview">A value indicating whether content should be considered draft.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.ConvertInterToXPath(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <summary>
            Converts the intermediate value into the XPath value.
            </summary>
            <param name="owner">The published element owning the property.</param>
            <param name="referenceCacheLevel">The reference cache level.</param>
            <param name="inter">The intermediate value.</param>
            <param name="preview">A value indicating whether content should be considered draft.</param>
            <returns>The XPath value.</returns>
            <remarks>
            <para>The XPath value can be either a string or an XPathNavigator.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.ModelClrType">
            <summary>
            Gets the property model CLR type.
            </summary>
            <remarks>
            <para>The model CLR type may be a <see cref="T:Umbraco.Core.Models.PublishedContent.ModelType"/> type, or may contain <see cref="T:Umbraco.Core.Models.PublishedContent.ModelType"/> types.</para>
            <para>For the actual CLR type, see <see cref="P:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.ClrType"/>.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.ClrType">
            <summary>
            Gets the property CLR type.
            </summary>
            <remarks>
            <para>Returns the actual CLR type which does not contain <see cref="T:Umbraco.Core.Models.PublishedContent.ModelType"/> types.</para>
            <para>Mapping from <see cref="P:Umbraco.Core.Models.PublishedContent.IPublishedPropertyType.ModelClrType"/> may throw if some <see cref="T:Umbraco.Core.Models.PublishedContent.ModelType"/> instances
            could not be mapped to actual CLR types.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.UrlMode">
            <summary>
            Specifies the type of URLs that the URL provider should produce, Auto is the default.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.UrlMode.Default">
            <summary>
            Indicates that the URL provider should do what it has been configured to do.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.UrlMode.Relative">
            <summary>
            Indicates that the URL provider should produce relative URLs exclusively.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.UrlMode.Absolute">
            <summary>
            Indicates that the URL provider should produce absolute URLs exclusively.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.UrlMode.Auto">
            <summary>
            Indicates that the URL provider should determine automatically whether to return relative or absolute URLs.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.Fallback">
            <summary>
            Manages the built-in fallback policies.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.Fallback.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.Fallback"/> struct with values.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.Fallback.To(System.Int32[])">
            <summary>
            Gets an ordered set of fallback policies.
            </summary>
            <param name="values"></param>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.Fallback.None">
            <summary>
            Do not fallback.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.Fallback.DefaultValue">
            <summary>
            Fallback to default value.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.Fallback.ToDefaultValue">
            <summary>
            Gets the fallback to default value policy.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.Fallback.Language">
            <summary>
            Fallback to other languages.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.Fallback.ToLanguage">
            <summary>
            Gets the fallback to language policy.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.Fallback.Ancestors">
            <summary>
            Fallback to tree ancestors.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.Fallback.ToAncestors">
            <summary>
            Gets the fallback to tree ancestors policy.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.Fallback.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.Fallback.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.NoopPublishedValueFallback">
            <summary>
            Provides a noop implementation for <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedValueFallback"/>.
            </summary>
            <remarks>
            <para>This is for tests etc - does not implement fallback at all.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.NoopPublishedValueFallback.TryGetValue(Umbraco.Core.Models.PublishedContent.IPublishedProperty,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.NoopPublishedValueFallback.TryGetValue``1(Umbraco.Core.Models.PublishedContent.IPublishedProperty,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,``0,``0@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.NoopPublishedValueFallback.TryGetValue(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.NoopPublishedValueFallback.TryGetValue``1(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,``0,``0@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.NoopPublishedValueFallback.TryGetValue(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,System.Object,System.Object@,Umbraco.Core.Models.PublishedContent.IPublishedProperty@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.NoopPublishedValueFallback.TryGetValue``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,``0,``0@,Umbraco.Core.Models.PublishedContent.IPublishedProperty@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedCultureInfo">
            <summary>
            Contains culture specific values for <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedCultureInfo.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedCultureInfo"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedCultureInfo.Culture">
            <summary>
            Gets the culture.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedCultureInfo.Name">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedCultureInfo.UrlSegment">
            <summary>
            Gets the URL segment of the item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedCultureInfo.Date">
            <summary>
            Gets the date associated with the culture.
            </summary>
            <remarks>
            <para>For published culture, this is the date the culture was published. For draft
            cultures, this is the date the culture was made available, ie the last time its
            name changed.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IVariationContextAccessor">
            <summary>
            Gives access to the current <see cref="P:Umbraco.Core.Models.PublishedContent.IVariationContextAccessor.VariationContext"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IVariationContextAccessor.VariationContext">
            <summary>
            Gets or sets the current <see cref="P:Umbraco.Core.Models.PublishedContent.IVariationContextAccessor.VariationContext"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IPublishedValueFallback">
            <summary>
            Provides a fallback strategy for getting <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedElement"/> values.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedValueFallback.TryGetValue(Umbraco.Core.Models.PublishedContent.IPublishedProperty,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,System.Object,System.Object@)">
            <summary>
            Tries to get a fallback value for a property.
            </summary>
            <param name="property">The property.</param>
            <param name="culture">The requested culture.</param>
            <param name="segment">The requested segment.</param>
            <param name="fallback">A fallback strategy.</param>
            <param name="defaultValue">An optional default value.</param>
            <param name="value">The fallback value.</param>
            <returns>A value indicating whether a fallback value could be provided.</returns>
            <remarks>
            <para>This method is called whenever property.Value(culture, segment, defaultValue) is called, and
            property.HasValue(culture, segment) is false.</para>
            <para>It can only fallback at property level (no recurse).</para>
            <para>At property level, property.GetValue() does *not* implement fallback, and one has to
            get property.Value() or property.Value{T}() to trigger fallback.</para>
            <para>Note that <paramref name="culture"/> and <paramref name="segment"/> may not be contextualized,
            so the variant context should be used to contextualize them (see our default implementation in
            the web project.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedValueFallback.TryGetValue``1(Umbraco.Core.Models.PublishedContent.IPublishedProperty,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,``0,``0@)">
            <summary>
            Tries to get a fallback value for a property.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="property">The property.</param>
            <param name="culture">The requested culture.</param>
            <param name="segment">The requested segment.</param>
            <param name="fallback">A fallback strategy.</param>
            <param name="defaultValue">An optional default value.</param>
            <param name="value">The fallback value.</param>
            <returns>A value indicating whether a fallback value could be provided.</returns>
            <remarks>
            <para>This method is called whenever property.Value{T}(culture, segment, defaultValue) is called, and
            property.HasValue(culture, segment) is false.</para>
            <para>It can only fallback at property level (no recurse).</para>
            <para>At property level, property.GetValue() does *not* implement fallback, and one has to
            get property.Value() or property.Value{T}() to trigger fallback.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedValueFallback.TryGetValue(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,System.Object,System.Object@)">
            <summary>
            Tries to get a fallback value for a published element property.
            </summary>
            <param name="content">The published element.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The requested culture.</param>
            <param name="segment">The requested segment.</param>
            <param name="fallback">A fallback strategy.</param>
            <param name="defaultValue">An optional default value.</param>
            <param name="value">The fallback value.</param>
            <returns>A value indicating whether a fallback value could be provided.</returns>
            <remarks>
            <para>This method is called whenever getting the property value for the specified alias, culture and
            segment, either returned no property at all, or a property with HasValue(culture, segment) being false.</para>
            <para>It can only fallback at element level (no recurse).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedValueFallback.TryGetValue``1(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,``0,``0@)">
            <summary>
            Tries to get a fallback value for a published element property.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="content">The published element.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The requested culture.</param>
            <param name="segment">The requested segment.</param>
            <param name="fallback">A fallback strategy.</param>
            <param name="defaultValue">An optional default value.</param>
            <param name="value">The fallback value.</param>
            <returns>A value indicating whether a fallback value could be provided.</returns>
            <remarks>
            <para>This method is called whenever getting the property value for the specified alias, culture and
            segment, either returned no property at all, or a property with HasValue(culture, segment) being false.</para>
            <para>It can only fallback at element level (no recurse).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedValueFallback.TryGetValue(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,System.Object,System.Object@,Umbraco.Core.Models.PublishedContent.IPublishedProperty@)">
            <summary>
            Tries to get a fallback value for a published content property.
            </summary>
            <param name="content">The published element.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The requested culture.</param>
            <param name="segment">The requested segment.</param>
            <param name="fallback">A fallback strategy.</param>
            <param name="defaultValue">An optional default value.</param>
            <param name="value">The fallback value.</param>
            <param name="noValueProperty">The property that does not have a value.</param>
            <returns>A value indicating whether a fallback value could be provided.</returns>
            <remarks>
            <para>This method is called whenever getting the property value for the specified alias, culture and
            segment, either returned no property at all, or a property with HasValue(culture, segment) being false.</para>
            <para>In an <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>, because walking up the tree is possible, the content itself may not even
            have a property with the specified alias, but such a property may exist up in the tree. The <paramref name="noValueProperty"/>
            parameter is used to return a property with no value. That can then be used to invoke a converter and get the
            converter's interpretation of "no value".</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedValueFallback.TryGetValue``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Core.Models.PublishedContent.Fallback,``0,``0@,Umbraco.Core.Models.PublishedContent.IPublishedProperty@)">
            <summary>
            Tries to get a fallback value for a published content property.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="content">The published element.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The requested culture.</param>
            <param name="segment">The requested segment.</param>
            <param name="fallback">A fallback strategy.</param>
            <param name="defaultValue">An optional default value.</param>
            <param name="value">The fallback value.</param>
            <param name="noValueProperty">The property that does not have a value.</param>
            <returns>A value indicating whether a fallback value could be provided.</returns>
            <remarks>
            <para>This method is called whenever getting the property value for the specified alias, culture and
            segment, either returned no property at all, or a property with HasValue(culture, segment) being false.</para>
            <para>In an <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>, because walking up the tree is possible, the content itself may not even
            have a property with the specified alias, but such a property may exist up in the tree. The <paramref name="noValueProperty"/>
            parameter is used to return a property with no value. That can then be used to invoke a converter and get the
            converter's interpretation of "no value".</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.VariationContext">
            <summary>
            Represents the variation context.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.VariationContext.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.VariationContext"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.VariationContext.Culture">
            <summary>
            Gets the culture.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.VariationContext.Segment">
            <summary>
            Gets the segment.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.VariationContext.GetSegment(System.Int32)">
            <summary>
            Gets the segment for the content item
            </summary>
            <param name="contentId"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.ThreadCultureVariationContextAccessor">
            <summary>
            Provides a CurrentUICulture-based implementation of <see cref="T:Umbraco.Core.Models.PublishedContent.IVariationContextAccessor"/>.
            </summary>
            <remarks>
            <para>This accessor does not support segments. There is no need to set the current context.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1">
            <summary>
            Represents an item in an array that stores its own index and the total count.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1" /> class.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.Content">
            <summary>
            Gets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.Index">
            <summary>
            Gets the index.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.TotalCount">
            <summary>
            Gets the total count.
            </summary>
            <value>
            The total count.
            </value>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsFirst">
            <summary>
            Determines whether this item is the first.
            </summary>
            <returns>
              <c>true</c> if this item is the first; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsFirst(System.String)">
            <summary>
            If this item is the first, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsFirst(System.String,System.String)">
            <summary>
            If this item is the first, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotFirst">
            <summary>
            Determines whether this item is not the first.
            </summary>
            <returns>
              <c>true</c> if this item is not the first; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotFirst(System.String)">
            <summary>
            If this item is not the first, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotFirst(System.String,System.String)">
            <summary>
            If this item is not the first, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsIndex(System.Int32)">
            <summary>
            Determines whether this item is at the specified <paramref name="index" />.
            </summary>
            <param name="index">The index.</param>
            <returns>
              <c>true</c> if this item is at the specified <paramref name="index" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsIndex(System.Int32,System.String)">
            <summary>
            If this item is at the specified <paramref name="index" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsIndex(System.Int32,System.String,System.String)">
            <summary>
            If this item is at the specified <paramref name="index" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsModZero(System.Int32)">
            <summary>
            Determines whether this item is at an index that can be divided by the specified <paramref name="modulus" />.
            </summary>
            <param name="modulus">The modulus.</param>
            <returns>
              <c>true</c> if this item is at an index that can be divided by the specified <paramref name="modulus" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsModZero(System.Int32,System.String)">
            <summary>
            If this item is at an index that can be divided by the specified <paramref name="modulus" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsModZero(System.Int32,System.String,System.String)">
            <summary>
            If this item is at an index that can be divided by the specified <paramref name="modulus" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotModZero(System.Int32)">
            <summary>
            Determines whether this item is not at an index that can be divided by the specified <paramref name="modulus" />.
            </summary>
            <param name="modulus">The modulus.</param>
            <returns>
              <c>true</c> if this item is not at an index that can be divided by the specified <paramref name="modulus" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotModZero(System.Int32,System.String)">
            <summary>
            If this item is not at an index that can be divided by the specified <paramref name="modulus" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotModZero(System.Int32,System.String,System.String)">
            <summary>
            If this item is not at an index that can be divided by the specified <paramref name="modulus" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotIndex(System.Int32)">
            <summary>
            Determines whether this item is not at the specified <paramref name="index" />.
            </summary>
            <param name="index">The index.</param>
            <returns>
              <c>true</c> if this item is not at the specified <paramref name="index" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotIndex(System.Int32,System.String)">
            <summary>
            If this item is not at the specified <paramref name="index" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotIndex(System.Int32,System.String,System.String)">
            <summary>
            If this item is at the specified <paramref name="index" />, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsLast">
            <summary>
            Determines whether this item is the last.
            </summary>
            <returns>
              <c>true</c> if this item is the last; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsLast(System.String)">
            <summary>
            If this item is the last, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsLast(System.String,System.String)">
            <summary>
            If this item is the last, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotLast">
            <summary>
            Determines whether this item is not the last.
            </summary>
            <returns>
              <c>true</c> if this item is not the last; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotLast(System.String)">
            <summary>
            If this item is not the last, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotLast(System.String,System.String)">
            <summary>
            If this item is not the last, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsEven">
            <summary>
            Determines whether this item is at an even index.
            </summary>
            <returns>
              <c>true</c> if this item is at an even index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsEven(System.String)">
            <summary>
            If this item is at an even index, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsEven(System.String,System.String)">
            <summary>
            If this item is at an even index, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsOdd">
            <summary>
            Determines whether this item is at an odd index.
            </summary>
            <returns>
              <c>true</c> if this item is at an odd index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsOdd(System.String)">
            <summary>
            If this item is at an odd index, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1.IsOdd(System.String,System.String)">
            <summary>
            If this item is at an odd index, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
            The HTML encoded value.
            </returns>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IPublishedContent">
            <inheritdoc />
            <summary>
            Represents a published content item.
            </summary>
            <remarks>
            <para>Can be a published document, media or member.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.Id">
            <summary>
            Gets the unique identifier of the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.Name">
            <summary>
            Gets the name of the content item for the current culture.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.UrlSegment">
            <summary>
            Gets the URL segment of the content item for the current culture.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.SortOrder">
            <summary>
            Gets the sort order of the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.Level">
            <summary>
            Gets the tree level of the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.Path">
            <summary>
            Gets the tree path of the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.TemplateId">
            <summary>
            Gets the identifier of the template to use to render the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.CreatorId">
            <summary>
            Gets the identifier of the user who created the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.CreatorName">
            <summary>
            Gets the name of the user who created the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.CreateDate">
            <summary>
            Gets the date the content item was created.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.WriterId">
            <summary>
            Gets the identifier of the user who last updated the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.WriterName">
            <summary>
            Gets the name of the user who last updated the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.UpdateDate">
            <summary>
            Gets the date the content item was last updated.
            </summary>
            <remarks>
            <para>For published content items, this is also the date the item was published.</para>
            <para>This date is always global to the content item, see CultureDate() for the
            date each culture was published.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.Url">
            <summary>
            Gets the URL of the content item for the current culture.
            </summary>
            <remarks>
            <para>The value of this property is contextual. It depends on the 'current' request uri,
            if any.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.Cultures">
            <summary>
            Gets available culture infos.
            </summary>
            <remarks>
            <para>Contains only those culture that are available. For a published content, these are
            the cultures that are published. For a draft content, those that are 'available' ie
            have a non-empty content name.</para>
            <para>Does not contain the invariant culture.</para> // fixme?
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.ItemType">
            <summary>
            Gets the type of the content item (document, media...).
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContent.IsDraft(System.String)">
            <summary>
            Gets a value indicating whether the content is draft.
            </summary>
            <remarks>
            <para>A content is draft when it is the unpublished version of a content, which may
            have a published version, or not.</para>
            <para>When retrieving documents from cache in non-preview mode, IsDraft is always false,
            as only published documents are returned. When retrieving in preview mode, IsDraft can
            either be true (document is not published, or has been edited, and what is returned
            is the edited version) or false (document is published, and has not been edited, and
            what is returned is the published version).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContent.IsPublished(System.String)">
            <summary>
            Gets a value indicating whether the content is published.
            </summary>
            <remarks>
            <para>A content is published when it has a published version.</para>
            <para>When retrieving documents from cache in non-preview mode, IsPublished is always
            true, as only published documents are returned. When retrieving in draft mode, IsPublished
            can either be true (document has a published version) or false (document has no
            published version).</para>
            <para>It is therefore possible for both IsDraft and IsPublished to be true at the same
            time, meaning that the content is the draft version, and a published version exists.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.Parent">
            <summary>
            Gets the parent of the content item.
            </summary>
            <remarks>The parent of root content is <c>null</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.Children">
            <summary>
            Gets the children of the content item that are available for the current culture.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContent.ChildrenForAllCultures">
            <summary>
            Gets all the children of the content item, regardless of whether they are available for the current culture.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory">
            <summary>
            Creates published content types.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory.CreateContentType(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Creates a published content type.
            </summary>
            <param name="contentType">An content type.</param>
            <returns>A published content type corresponding to the item type and content type.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory.CreatePropertyType(Umbraco.Core.Models.PublishedContent.IPublishedContentType,Umbraco.Core.Models.PropertyType)">
            <summary>
            Creates a published property type.
            </summary>
            <param name="contentType">The published content type owning the property.</param>
            <param name="propertyType">A property type.</param>
            <remarks>Is used by <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentType"/> constructor to create property types.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory.CreatePropertyType(Umbraco.Core.Models.PublishedContent.IPublishedContentType,System.String,System.Int32,Umbraco.Core.Models.ContentVariation)">
            <summary>
            Creates a published property type.
            </summary>
            <param name="contentType">The published content type owning the property.</param>
            <param name="propertyTypeAlias">The property type alias.</param>
            <param name="dataTypeId">The datatype identifier.</param>
            <param name="variations">The variations.</param>
            <remarks>Is used by <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentType"/> constructor to create special property types.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory.CreateCorePropertyType(Umbraco.Core.Models.PublishedContent.IPublishedContentType,System.String,System.Int32,Umbraco.Core.Models.ContentVariation)">
            <summary>
            Creates a core (non-user) published property type.
            </summary>
            <param name="contentType">The published content type owning the property.</param>
            <param name="propertyTypeAlias">The property type alias.</param>
            <param name="dataTypeId">The datatype identifier.</param>
            <param name="variations">The variations.</param>
            <remarks>Is used by <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentType"/> constructor to create special property types.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory.GetDataType(System.Int32)">
            <summary>
            Gets a published datatype.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory.NotifyDataTypeChanges(System.Int32[])">
            <summary>
            Notifies the factory of datatype changes.
            </summary>
            <remarks>
            <para>This is so the factory can flush its caches.</para>
            <para>Invoked by the IPublishedSnapshotService.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IPublishedModelFactory">
            <summary>
            Provides the published model creation service.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedModelFactory.CreateModel(Umbraco.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
            Creates a strongly-typed model representing a published element.
            </summary>
            <param name="element">The original published element.</param>
            <returns>The strongly-typed model representing the published element, or the published element
            itself it the factory has no model for the corresponding element type.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedModelFactory.CreateModelList(System.String)">
            <summary>
            Creates a List{T} of a strongly-typed model for a model type alias.
            </summary>
            <param name="alias">The model type alias.</param>
            <returns>A List{T} of the strongly-typed model, exposed as an IList.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedModelFactory.MapModelType(System.Type)">
            <summary>
            Maps a CLR type that may contain model types, to an actual CLR type.
            </summary>
            <param name="type">The CLR type.</param>
            <returns>The actual CLR type.</returns>
            <remarks>See <seealso cref="T:Umbraco.Core.Models.PublishedContent.ModelType"/> for more details.</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IPublishedElement">
            <summary>
            Represents a published element.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedElement.ContentType">
            <summary>
            Gets the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedElement.Key">
            <summary>
            Gets the unique key of the published element.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedElement.Properties">
            <summary>
            Gets the properties of the element.
            </summary>
            <remarks>Contains one <c>IPublishedProperty</c> for each property defined for the content type, including
            inherited properties. Some properties may have no value.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedElement.GetProperty(System.String)">
            <summary>
            Gets a property identified by its alias.
            </summary>
            <param name="alias">The property alias.</param>
            <returns>The property identified by the alias.</returns>
            <remarks>
            <para>If the content type has no property with that alias, including inherited properties, returns <c>null</c>,</para>
            <para>otherwise return a property -- that may have no value (ie <c>HasValue</c> is <c>false</c>).</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IPublishedProperty">
            <summary>
            Represents a property of an <c>IPublishedElement</c>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedProperty.Alias">
            <summary>
            Gets the alias of the property.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedProperty.HasValue(System.String,System.String)">
            <summary>
            Gets a value indicating whether the property has a value.
            </summary>
            <remarks>
            <para>This is somewhat implementation-dependent -- depending on whatever IPublishedCache considers
            a missing value.</para>
            <para>The XmlPublishedCache raw values are strings, and it will consider missing, null or empty (and
            that includes whitespace-only) strings as "no value".</para>
            <para>Other caches that get their raw value from the database would consider that a property has "no
            value" if it is missing, null, or an empty string (including whitespace-only).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedProperty.GetSourceValue(System.String,System.String)">
            <summary>
            Gets the source value of the property.
            </summary>
            <remarks>
            <para>The source value is whatever was passed to the property when it was instantiated, and it is
            somewhat implementation-dependent -- depending on how the IPublishedCache is implemented.</para>
            <para>The XmlPublishedCache source values are strings exclusively since they come from the Xml cache.</para>
            <para>For other caches that get their source value from the database, it would be either a string,
            an integer (Int32), a date and time (DateTime) or a decimal (double).</para>
            <para>If you're using that value, you're probably wrong, unless you're doing some internal
            Umbraco stuff.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedProperty.GetValue(System.String,System.String)">
            <summary>
            Gets the object value of the property.
            </summary>
            <remarks>
            <para>The value is what you want to use when rendering content in an MVC view ie in C#.</para>
            <para>It can be null, or any type of CLR object.</para>
            <para>It has been fully prepared and processed by the appropriate converter.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedProperty.GetXPathValue(System.String,System.String)">
            <summary>
            Gets the XPath value of the property.
            </summary>
            <remarks>
            <para>The XPath value is what you want to use when navigating content via XPath eg in the XSLT engine.</para>
            <para>It must be either null, or a string, or an XPathNavigator.</para>
            <para>It has been fully prepared and processed by the appropriate converter.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.ModelType">
            <inheritdoc />
            <summary>
            Represents the CLR type of a model.
            </summary>
            <example>
            ModelType.For("alias")
            typeof (IEnumerable{}).MakeGenericType(ModelType.For("alias"))
            Model.For("alias").MakeArrayType()
            </example>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.ModelType.ContentTypeAlias">
            <summary>
            Gets the content type alias.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.ToString">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.For(System.String)">
            <summary>
            Gets the model type for a published element type.
            </summary>
            <param name="alias">The published element type alias.</param>
            <returns>The model type for the published element type.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.Map(System.Type,System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Gets the actual CLR type by replacing model types, if any.
            </summary>
            <param name="type">The type.</param>
            <param name="modelTypes">The model types map.</param>
            <returns>The actual CLR type.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.MapToName(System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets the actual CLR type name by replacing model types, if any.
            </summary>
            <param name="type">The type.</param>
            <param name="map">The model types map.</param>
            <returns>The actual CLR type name.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.Equals(System.Type,System.Type)">
            <summary>
            Gets a value indicating whether two <see cref="T:System.Type"/> instances are equal.
            </summary>
            <param name="t1">The first instance.</param>
            <param name="t2">The second instance.</param>
            <returns>A value indicating whether the two instances are equal.</returns>
            <remarks>Knows how to compare <see cref="T:Umbraco.Core.Models.PublishedContent.ModelType"/> instances.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetAttributeFlagsImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetConstructors(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetInterfaces">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetInterface(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetEvents(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetEvent(System.String,System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetNestedTypes(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetNestedType(System.String,System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetProperties(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetMethods(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetFields(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetField(System.String,System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetMembers(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetCustomAttributes(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.IsDefined(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.GetElementType">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.HasElementTypeImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.IsArrayImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.IsByRefImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.IsPointerImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.IsPrimitiveImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.IsCOMObjectImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.ModelType.UnderlyingSystemType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.ModelType.BaseType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.ModelType.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.ModelType.GUID">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.ModelType.Module">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.ModelType.Assembly">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.ModelType.FullName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.ModelType.Namespace">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.ModelType.AssemblyQualifiedName">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.ModelType.MakeArrayType">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.NoopPublishedModelFactory">
            <inheritdoc />
            <summary>Represents a no-operation factory.</summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.NoopPublishedModelFactory.CreateModel(Umbraco.Core.Models.PublishedContent.IPublishedElement)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.NoopPublishedModelFactory.CreateModelList(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.NoopPublishedModelFactory.MapModelType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentTypeFactory">
            <summary>
            Provides a default implementation for <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentTypeFactory.CreateContentType(Umbraco.Core.Models.IContentTypeComposition)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentTypeFactory.CreateContentType(System.Guid,System.Int32,System.String,System.Func{Umbraco.Core.Models.PublishedContent.IPublishedContentType,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.IPublishedPropertyType}},Umbraco.Core.Models.ContentVariation,System.Boolean)">
            <summary>
            This method is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>Values are assumed to be consisted and are not checked.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentTypeFactory.CreateContentType(System.Guid,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{Umbraco.Core.Models.PublishedContent.IPublishedContentType,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.IPublishedPropertyType}},Umbraco.Core.Models.ContentVariation,System.Boolean)">
            <summary>
            This method is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>Values are assumed to be consisted and are not checked.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentTypeFactory.CreatePropertyType(Umbraco.Core.Models.PublishedContent.IPublishedContentType,Umbraco.Core.Models.PropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentTypeFactory.CreatePropertyType(Umbraco.Core.Models.PublishedContent.IPublishedContentType,System.String,System.Int32,Umbraco.Core.Models.ContentVariation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentTypeFactory.CreateCorePropertyType(Umbraco.Core.Models.PublishedContent.IPublishedContentType,System.String,System.Int32,Umbraco.Core.Models.ContentVariation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentTypeFactory.CreatePropertyType(System.String,System.Int32,System.Boolean,Umbraco.Core.Models.ContentVariation)">
            <summary>
            This method is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>Values are assumed to be consisted and are not checked.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentTypeFactory.GetDataType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentTypeFactory.NotifyDataTypeChanges(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedDataType">
            <summary>
            Represents a published data type.
            </summary>
            <remarks>
            <para>Instances of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedDataType"/> class are immutable, ie
            if the data type changes, then a new class needs to be created.</para>
            <para>These instances should be created by an <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory"/>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedDataType.#ctor(System.Int32,System.String,System.Lazy{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedDataType"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedDataType.Id">
            <summary>
            Gets the datatype identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedDataType.EditorAlias">
            <summary>
            Gets the data type editor alias.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedDataType.Configuration">
            <summary>
            Gets the data type configuration.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedDataType.ConfigurationAs``1">
            <summary>
            Gets the configuration object.
            </summary>
            <typeparam name="T">The expected type of the configuration object.</typeparam>
            <exception cref="T:System.InvalidCastException">When the datatype configuration is not of the expected type.</exception>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedElementModel">
            <inheritdoc />
            <summary>
            Represents a strongly-typed published element.
            </summary>
            <remarks>Every strongly-typed property set class should inherit from <c>PublishedElementModel</c>
            (or inherit from a class that inherits from... etc.) so they are picked by the factory.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedElementModel.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedElement)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedElementModel"/> class with
            an original <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedElement"/> instance.
            </summary>
            <param name="content">The original content.</param>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedElementWrapped">
            <summary>
            Provides an abstract base class for <c>IPublishedElement</c> implementations that
            wrap and extend another <c>IPublishedElement</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedElementWrapped.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedElementWrapped"/> class
            with an <c>IPublishedElement</c> instance to wrap.
            </summary>
            <param name="content">The content to wrap.</param>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedElementWrapped.Unwrap">
            <summary>
            Gets the wrapped content.
            </summary>
            <returns>The wrapped content, that was passed as an argument to the constructor.</returns>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedElementWrapped.ContentType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedElementWrapped.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedElementWrapped.Properties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedElementWrapped.GetProperty(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentExtensionsForModels">
            <summary>
            Provides strongly typed published content models services.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentExtensionsForModels.CreateModel(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Creates a strongly typed published content model for an internal published content.
            </summary>
            <param name="content">The internal published content.</param>
            <returns>The strongly typed published content model.</returns>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentModel">
            <summary>
            Represents a strongly-typed published content.
            </summary>
            <remarks>Every strongly-typed published content class should inherit from <c>PublishedContentModel</c>
            (or inherit from a class that inherits from... etc.) so they are picked by the factory.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentModel.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentModel"/> class with
            an original <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> instance.
            </summary>
            <param name="content">The original content.</param>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedModelAttribute">
            <inheritdoc />
            <summary>
            Indicates that the class is a published content model for a specified content type.
            </summary>
            <remarks>By default, the name of the class is assumed to be the content type alias. The
            <c>PublishedContentModelAttribute</c> can be used to indicate a different alias.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedModelAttribute.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedModelAttribute" /> class with a content type alias.
            </summary>
            <param name="contentTypeAlias">The content type alias.</param>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedModelAttribute.ContentTypeAlias">
            <summary>
            Gets or sets the content type alias.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedModelFactory">
            <summary>
            Implements a strongly typed content model factory
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedModelFactory.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedModelFactory"/> class with types.
            </summary>
            <param name="types">The model types.</param>
            <remarks>
            <para>Types must implement <c>IPublishedContent</c> and have a unique constructor that
            accepts one IPublishedContent as a parameter.</para>
            <para>To activate,</para>
            <code>
            var types = TypeLoader.Current.GetTypes{PublishedContentModel}();
            var factory = new PublishedContentModelFactoryImpl(types);
            PublishedContentModelFactoryResolver.Current.SetFactory(factory);
            </code>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedModelFactory.CreateModel(Umbraco.Core.Models.PublishedContent.IPublishedElement)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedModelFactory.CreateModelList(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedModelFactory.MapModelType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentType">
            <summary>
            Represents an <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedElement"/> type.
            </summary>
            <remarks>Instances of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentType"/> class are immutable, ie
            if the content type changes, then a new class needs to be created.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentType.#ctor(Umbraco.Core.Models.IContentTypeComposition,Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentType"/> class with a content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentType.#ctor(System.Guid,System.Int32,System.String,Umbraco.Core.Models.PublishedContent.PublishedItemType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.PublishedPropertyType},Umbraco.Core.Models.ContentVariation,System.Boolean)">
            <summary>
            This constructor is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>
            <para>Values are assumed to be consistent and are not checked.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentType.#ctor(System.Guid,System.Int32,System.String,Umbraco.Core.Models.PublishedContent.PublishedItemType,System.Collections.Generic.IEnumerable{System.String},System.Func{Umbraco.Core.Models.PublishedContent.IPublishedContentType,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.IPublishedPropertyType}},Umbraco.Core.Models.ContentVariation,System.Boolean)">
            <summary>
            This constructor is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>
            <para>Values are assumed to be consistent and are not checked.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentType.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentType.Id">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentType.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentType.ItemType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentType.CompositionAliases">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentType.Variations">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentType.PropertyTypes">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentType.GetPropertyIndex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentType.GetPropertyType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentType.GetPropertyType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentType.IsElement">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped">
            <summary>
            Provides an abstract base class for <c>IPublishedContent</c> implementations that
            wrap and extend another <c>IPublishedContent</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Initialize a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped"/> class
            with an <c>IPublishedContent</c> instance to wrap.
            </summary>
            <param name="content">The content to wrap.</param>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.Unwrap">
            <summary>
            Gets the wrapped content.
            </summary>
            <returns>The wrapped content, that was passed as an argument to the constructor.</returns>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.ContentType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.Id">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.UrlSegment">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.Level">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.Path">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.TemplateId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.CreatorId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.CreatorName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.CreateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.WriterId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.WriterName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.UpdateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.Url">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.Cultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.ItemType">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.IsDraft(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.IsPublished(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.Parent">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.Children">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.ChildrenForAllCultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.Properties">
            <inheritdoc cref="P:Umbraco.Core.Models.PublishedContent.IPublishedElement.Properties"/>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.GetProperty(System.String)">
            <inheritdoc cref="M:Umbraco.Core.Models.PublishedContent.IPublishedElement.GetProperty(System.String)"/>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedItemType">
            <summary>
            The type of published element.
            </summary>
            <remarks>Can be a simple element, or a document, a media, a member.</remarks>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.PublishedItemType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.PublishedItemType.Element">
            <summary>
            An element.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.PublishedItemType.Content">
            <summary>
            A document.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.PublishedItemType.Media">
            <summary>
            A media.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedContent.PublishedItemType.Member">
            <summary>
            A member.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyBase">
            <summary>
            Provides a base class for <c>IPublishedProperty</c> implementations which converts and caches
            the value source to the actual value to use when rendering content.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyBase.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Core.PropertyEditors.PropertyCacheLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyBase"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyBase.PropertyType">
            <summary>
            Gets the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyBase.ReferenceCacheLevel">
            <summary>
            Gets the property reference cache level.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyBase.Alias">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyBase.HasValue(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyBase.GetSourceValue(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyBase.GetValue(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyBase.GetXPathValue(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyType">
            <summary>
            Represents a published property type.
            </summary>
            <remarks>Instances of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyType"/> class are immutable, ie
            if the property type changes, then a new class needs to be created.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContentType,Umbraco.Core.Models.PropertyType,Umbraco.Core.PropertyEditors.PropertyValueConverterCollection,Umbraco.Core.Models.PublishedContent.IPublishedModelFactory,Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory)">
            <summary>
            Initialize a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyType"/> class with a property type.
            </summary>
            <remarks>
            <para>The new published property type belongs to the published content type.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContentType,System.String,System.Int32,System.Boolean,Umbraco.Core.Models.ContentVariation,Umbraco.Core.PropertyEditors.PropertyValueConverterCollection,Umbraco.Core.Models.PublishedContent.IPublishedModelFactory,Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory)">
            <summary>
            This constructor is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>
            <para>Values are assumed to be consisted and are not checked.</para>
            <para>The new published property type belongs to the published content type.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.#ctor(System.String,System.Int32,System.Boolean,Umbraco.Core.Models.ContentVariation,Umbraco.Core.PropertyEditors.PropertyValueConverterCollection,Umbraco.Core.Models.PublishedContent.IPublishedModelFactory,Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory)">
            <summary>
            This constructor is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>
            <para>Values are assumed to be consistent and are not checked.</para>
            <para>The new published property type does not belong to a published content type.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.ContentType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.DataType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.EditorAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.IsUserProperty">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.Variations">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.IsValue(System.Object,Umbraco.Core.PropertyEditors.PropertyValueLevel)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.CacheLevel">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.ConvertSourceToInter(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.ConvertInterToObject(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.ConvertInterToXPath(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.ModelClrType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.ClrType">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.RawValueProperty">
            <inheritdoc />
            <summary>
            Represents a published property that has a unique invariant-neutral value
            and caches conversion results locally.
            </summary>
            <remarks>
            <para>Conversions results are stored within the property and will not
            be refreshed, so this class is not suitable for cached properties.</para>
            <para>Does not support variations: the ctor throws if the property type
            supports variations.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.ImageUrlGenerationOptions">
            <summary>
            These are options that are passed to the IImageUrlGenerator implementation to determine
            the propery URL that is needed
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ImageUrlGenerationOptions.FocalPointPosition">
            <summary>
            The focal point position, in whatever units the registered IImageUrlGenerator uses,
            typically a percentage of the total image from 0.0 to 1.0.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ImageUrlGenerationOptions.CropCoordinates">
            <summary>
            The bounds of the crop within the original image, in whatever units the registered
            IImageUrlGenerator uses, typically a percentage between 0 and 100.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Editors.UmbracoEntityReference">
            <summary>
            Used to track reference to other entities in a property value
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Editors.ContentPropertyFile">
            <summary>
            Represents an uploaded file for a property.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyFile.PropertyAlias">
            <summary>
            Gets or sets the property alias.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyFile.Culture">
            <summary>
            When dealing with content variants, this is the culture for the variant
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyFile.Segment">
            <summary>
            When dealing with content variants, this is the segment for the variant
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyFile.Metadata">
            <summary>
            An array of metadata that is parsed out from the file info posted to the server which is set on the client. 
            </summary>
            <remarks>
            This can be used for property types like Nested Content that need to have special unique identifiers for each file since there might be multiple files
            per property.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyFile.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyFile.TempFilePath">
            <summary>
            Gets or sets the temporary path where the file has been uploaded.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Editors.ContentPropertyData">
            <summary>
            Represents data that has been submitted to be saved for a content property
            </summary>
            <remarks>
            This object exists because we may need to save additional data for each property, more than just
            the string representation of the value being submitted. An example of this is uploaded files.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyData.Value">
            <summary>
            The value submitted for the property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyData.DataTypeConfiguration">
            <summary>
            The data type configuration for the property.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyData.ContentKey">
            <summary>
            Gets or sets the unique identifier of the content owning the property.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyData.PropertyTypeKey">
            <summary>
            Gets or sets the unique identifier of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyData.Files">
            <summary>
            Gets or sets the uploaded files.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentEditing.ContentAppBadge">
            <summary>
            Represents a content app badge
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentEditing.ContentAppBadge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ContentEditing.ContentAppBadge"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentEditing.ContentAppBadge.Count">
            <summary>
            Gets or sets the number displayed in the badge
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentEditing.ContentAppBadge.Type">
            <summary>
            Gets or sets the type of badge to display
            </summary>
            <remarks>
            <para>This controls the background color of the badge.</para>
            <para>Warning will display a dark yellow badge</para>
            <para>Alert will display a red badge</para>
            <para>Default will display a turquoise badge</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.ContentEditing.ContentAppBadgeType">
            <summary>
            Represent the content app badge types
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentEditing.ContentApp">
            <summary>
            Represents a content app.
            </summary>
            <remarks>
            <para>Content apps are editor extensions.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentEditing.ContentApp.Name">
            <summary>
            Gets the name of the content app.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentEditing.ContentApp.Alias">
            <summary>
            Gets the unique alias of the content app.
            </summary>
            <remarks>
            <para>Must be a valid javascript identifier, ie no spaces etc.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentEditing.ContentApp.Weight">
            <summary>
            Gets or sets the weight of the content app.
            </summary>
            <remarks>
            <para>Content apps are ordered by weight, from left (lowest values) to right (highest values).</para>
            <para>Some built-in apps have special weights: listview is -666, content is -100 and infos is +100.</para>
            <para>The default weight is 0, meaning somewhere in-between content and infos, but weight could
            be used for ordering between user-level apps, or anything really.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentEditing.ContentApp.Icon">
            <summary>
            Gets the icon of the content app.
            </summary>
            <remarks>
            <para>Must be a valid helveticons class name (see http://hlvticons.ch/).</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentEditing.ContentApp.View">
            <summary>
            Gets the view for rendering the content app.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentEditing.ContentApp.ViewModel">
            <summary>
            The view model specific to this app
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentEditing.ContentApp.Active">
            <summary>
            Gets a value indicating whether the app is active.
            </summary>
            <remarks>
            <para>Normally reserved for Angular to deal with but in some cases this can be set on the server side.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentEditing.ContentApp.Badge">
            <summary>
            Gets or sets the content app badge.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentEditing.IContentAppFactory">
            <summary>
            Represents a content app factory.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentEditing.IContentAppFactory.GetContentAppFor(System.Object,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Membership.IReadOnlyUserGroup})">
            <summary>
            Gets the content app for an object.
            </summary>
            <param name="source">The source object.</param>
            <returns>The content app for the object, or null.</returns>
            <remarks>
            <para>The definition must determine, based on <paramref name="source"/>, whether
            the content app should be displayed or not, and return either a <see cref="T:Umbraco.Core.Models.ContentEditing.ContentApp"/>
            instance, or null.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.EntityExtensions.UpdatingEntity(Umbraco.Core.Models.Entities.IEntity)">
            <summary>
            Updates the entity when it is being saved.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.EntityExtensions.AddingEntity(Umbraco.Core.Models.Entities.IEntity)">
            <summary>
            Updates the entity when it is being saved for the first time.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.IMediaEntitySlim">
            <summary>
            Represents a lightweight media entity, managed by the entity service.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IMediaEntitySlim.MediaPath">
            <summary>
            The media file's path/URL
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.MediaEntitySlim">
            <summary>
            Implements <see cref="T:Umbraco.Core.Models.Entities.IMediaEntitySlim"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.BeingDirty">
            <summary>
            Provides a concrete implementation of <see cref="T:Umbraco.Core.Models.Entities.BeingDirtyBase"/>.
            </summary>
            <remarks>
            <para>This class is provided for classes that cannot inherit from <see cref="T:Umbraco.Core.Models.Entities.BeingDirtyBase"/>
            and therefore need to implement <see cref="T:Umbraco.Core.Models.Entities.IRememberBeingDirty"/>, by re-using some of
            <see cref="T:Umbraco.Core.Models.Entities.BeingDirtyBase"/> logic.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirty.SetPropertyValueAndDetectChanges``1(``0,``0@,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Sets a property value, detects changes and manages the dirty flag.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The new value.</param>
            <param name="valueRef">A reference to the value to set.</param>
            <param name="propertyName">The property name.</param>
            <param name="comparer">A comparer to compare property values.</param>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirty.OnPropertyChanged(System.String)">
            <summary>
            Registers that a property has changed.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.IEntitySlim">
            <summary>
            Represents a lightweight entity, managed by the entity service.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IEntitySlim.NodeObjectType">
            <summary>
            Gets or sets the entity object type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IEntitySlim.HasChildren">
            <summary>
            Gets or sets a value indicating whether the entity has children.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IEntitySlim.IsContainer">
            <summary>
            Gets a value indicating whether the entity is a container.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.IHaveAdditionalData">
            <summary>
            Provides support for additional data.
            </summary>
            <remarks>
            <para>Additional data are transient, not deep-cloned.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IHaveAdditionalData.AdditionalData">
            <summary>
            Gets additional data for this entity.
            </summary>
            <remarks>Can be empty, but never null. To avoid allocating, do not
            test for emptiness, but use <see cref="P:Umbraco.Core.Models.Entities.IHaveAdditionalData.HasAdditionalData"/> instead.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IHaveAdditionalData.HasAdditionalData">
            <summary>
            Determines whether this entity has additional data.
            </summary>
            <remarks>Use this property to check for additional data without
            getting <see cref="P:Umbraco.Core.Models.Entities.IHaveAdditionalData.AdditionalData"/>, to avoid allocating.</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.ITreeEntity">
            <summary>
            Defines an entity that belongs to a tree.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.ITreeEntity.Name">
            <summary>
            Gets or sets the name of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.ITreeEntity.CreatorId">
            <summary>
            Gets or sets the identifier of the user who created this entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.ITreeEntity.ParentId">
            <summary>
            Gets or sets the identifier of the parent entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.ITreeEntity.SetParent(Umbraco.Core.Models.Entities.ITreeEntity)">
            <summary>
            Sets the parent entity.
            </summary>
            <remarks>Use this method to set the parent entity when the parent entity is known, but has not
            been persistent and does not yet have an identity. The parent identifier will be retrieved
            from the parent entity when needed. If the parent entity still does not have an entity by that
            time, an exception will be thrown by <see cref="P:Umbraco.Core.Models.Entities.ITreeEntity.ParentId"/> getter.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.ITreeEntity.Level">
            <summary>
            Gets or sets the level of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.ITreeEntity.Path">
            <summary>
            Gets or sets the path to the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.ITreeEntity.SortOrder">
            <summary>
            Gets or sets the sort order of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.ITreeEntity.Trashed">
            <summary>
            Gets a value indicating whether this entity is trashed.
            </summary>
            <remarks>
            <para>Trashed entities are located in the recycle bin.</para>
            <para>Always false for entities that do not support being trashed.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.IContentEntitySlim">
            <summary>
            Represents a lightweight content entity, managed by the entity service.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IContentEntitySlim.ContentTypeAlias">
            <summary>
            Gets the content type alias.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IContentEntitySlim.ContentTypeIcon">
            <summary>
            Gets the content type icon.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IContentEntitySlim.ContentTypeThumbnail">
            <summary>
            Gets the content type thumbnail.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.IDocumentEntitySlim">
            <summary>
            Represents a lightweight document entity, managed by the entity service.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IDocumentEntitySlim.CultureNames">
            <summary>
            Gets the variant name for each culture
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IDocumentEntitySlim.PublishedCultures">
            <summary>
            Gets the published cultures.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IDocumentEntitySlim.EditedCultures">
            <summary>
            Gets the edited cultures.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IDocumentEntitySlim.Variations">
            <summary>
            Gets the content variation of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IDocumentEntitySlim.Published">
            <summary>
            Gets a value indicating whether the content is published.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IDocumentEntitySlim.Edited">
            <summary>
            Gets a value indicating whether the content has been edited.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.ContentEntitySlim">
            <summary>
            Implements <see cref="T:Umbraco.Core.Models.Entities.IContentEntitySlim"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.ContentEntitySlim.ContentTypeAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.ContentEntitySlim.ContentTypeIcon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.ContentEntitySlim.ContentTypeThumbnail">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.Entities.DocumentEntitySlim">
            <summary>
            Implements <see cref="T:Umbraco.Core.Models.Entities.IDocumentEntitySlim"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.DocumentEntitySlim.CultureNames">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.DocumentEntitySlim.PublishedCultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.DocumentEntitySlim.EditedCultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.DocumentEntitySlim.Published">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.DocumentEntitySlim.Edited">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.Entities.TreeEntityBase">
            <summary>
            Provides a base class for tree entities.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.TreeEntityBase.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.TreeEntityBase.CreatorId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.TreeEntityBase.ParentId">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Entities.TreeEntityBase.SetParent(Umbraco.Core.Models.Entities.ITreeEntity)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.TreeEntityBase.Level">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.TreeEntityBase.Path">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.TreeEntityBase.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.TreeEntityBase.Trashed">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.Entities.EntityBase">
            <summary>
            Provides a base class for entities.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntityBase.Id">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntityBase.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntityBase.CreateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntityBase.UpdateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntityBase.DeleteDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntityBase.HasIdentity">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Entities.EntityBase.ResetIdentity">
            <summary>
            Resets the entity identity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.EntityBase.PerformDeepClone(System.Object)">
            <summary>
            Used by inheritors to modify the DeepCloning logic
            </summary>
            <param name="clone"></param>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.TreeEntityPath">
            <summary>
            Represents the path of a tree entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.TreeEntityPath.Id">
            <summary>
            Gets or sets the identifier of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.TreeEntityPath.Path">
            <summary>
            Gets or sets the path of the entity.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.ICanBeDirty">
            <summary>
            Defines an entity that tracks property changes and can be dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.ICanBeDirty.IsDirty">
            <summary>
            Determines whether the current entity is dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.ICanBeDirty.IsPropertyDirty(System.String)">
            <summary>
            Determines whether a specific property is dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.ICanBeDirty.GetDirtyProperties">
            <summary>
            Gets properties that are dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.ICanBeDirty.ResetDirtyProperties">
            <summary>
            Resets dirty properties.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.IEntity">
            <summary>
            Defines an entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IEntity.Id">
            <summary>
            Gets or sets the integer identifier of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IEntity.Key">
            <summary>
            Gets or sets the Guid unique identifier of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IEntity.CreateDate">
            <summary>
            Gets or sets the creation date.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IEntity.UpdateDate">
            <summary>
            Gets or sets the last update date.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IEntity.DeleteDate">
            <summary>
            Gets or sets the delete date.
            </summary>
            <remarks>
            <para>The delete date is null when the entity has not been deleted.</para>
            <para>The delete date has a value when the entity instance has been deleted, but this value
            is transient and not persisted in database (since the entity does not exist anymore).</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.IEntity.HasIdentity">
            <summary>
            Gets a value indicating whether the entity has an identity.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.IRememberBeingDirty">
            <summary>
            Defines an entity that tracks property changes and can be dirty, and remembers
            which properties were dirty when the changes were committed.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.IRememberBeingDirty.WasDirty">
            <summary>
            Determines whether the current entity is dirty.
            </summary>
            <remarks>A property was dirty if it had been changed and the changes were committed.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.IRememberBeingDirty.WasPropertyDirty(System.String)">
            <summary>
            Determines whether a specific property was dirty.
            </summary>
            <remarks>A property was dirty if it had been changed and the changes were committed.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.IRememberBeingDirty.ResetWereDirtyProperties">
            <summary>
            Resets properties that were dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.IRememberBeingDirty.ResetDirtyProperties(System.Boolean)">
            <summary>
            Resets dirty properties.
            </summary>
            <param name="rememberDirty">A value indicating whether to remember dirty properties.</param>
            <remarks>When <paramref name="rememberDirty"/> is true, dirty properties are saved so they can be checked with WasDirty.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.IRememberBeingDirty.GetWereDirtyProperties">
            <summary>
            Gets properties that were dirty.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.IUmbracoEntity">
            <summary>
            Represents an entity that can be managed by the entity service.
            </summary>
            <remarks>
            <para>An IUmbracoEntity can be related to another via the IRelationService.</para>
            <para>IUmbracoEntities can be retrieved with the IEntityService.</para>
            <para>An IUmbracoEntity can participate in notifications.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.IValueObject">
            <summary>
            Marker interface for value object, eg. objects without
            the same kind of identity as an Entity (with its Id).
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.BeingDirtyBase">
            <summary>
            Provides a base implementation of <see cref="T:Umbraco.Core.Models.Entities.ICanBeDirty"/> and <see cref="T:Umbraco.Core.Models.Entities.IRememberBeingDirty"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.IsDirty">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.IsPropertyDirty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.GetDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.ResetDirtyProperties">
            <inheritdoc />
            <remarks>Saves dirty properties so they can be checked with WasDirty.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.WasDirty">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.WasPropertyDirty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.ResetWereDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.ResetDirtyProperties(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.GetWereDirtyProperties">
            <inheritdoc />
        </member>
        <member name="E:Umbraco.Core.Models.Entities.BeingDirtyBase.PropertyChanged">
            <summary>
            Occurs when a property changes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.OnPropertyChanged(System.String)">
            <summary>
            Registers that a property has changed.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.DisableChangeTracking">
            <summary>
            Disables change tracking.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.EnableChangeTracking">
            <summary>
            Enables change tracking.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.SetPropertyValueAndDetectChanges``1(``0,``0@,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Sets a property value, detects changes and manages the dirty flag.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The new value.</param>
            <param name="valueRef">A reference to the value to set.</param>
            <param name="propertyName">The property name.</param>
            <param name="comparer">A comparer to compare property values.</param>
        </member>
        <member name="M:Umbraco.Core.Models.Entities.BeingDirtyBase.DetectChanges``1(``0,``0,System.String,System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Detects changes and manages the dirty flag.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The new value.</param>
            <param name="orig">The original value.</param>
            <param name="propertyName">The property name.</param>
            <param name="comparer">A comparer to compare property values.</param>
            <param name="changed">A value indicating whether we know values have changed and no comparison is required.</param>
        </member>
        <member name="T:Umbraco.Core.Models.Entities.EntitySlim">
            <summary>
            Implementation of <see cref="T:Umbraco.Core.Models.Entities.IEntitySlim"/> for internal use.
            </summary>
            <remarks>
            <para>Although it implements <see cref="T:Umbraco.Core.Models.Entities.IEntitySlim"/>, this class does not 
            implement <see cref="T:Umbraco.Core.Models.Entities.IRememberBeingDirty"/> and everything this interface defines, throws.</para>
            <para>Although it implements <see cref="T:Umbraco.Core.Models.Entities.IEntitySlim"/>, this class does not
            implement <see cref="T:Umbraco.Core.Models.IDeepCloneable"/> and deep-cloning throws.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Models.Entities.EntitySlim.Root">
            <summary>
            Gets an entity representing "root".
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.Id">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.CreateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.UpdateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.DeleteDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.HasIdentity">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.CreatorId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.ParentId">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Entities.EntitySlim.SetParent(Umbraco.Core.Models.Entities.ITreeEntity)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.Level">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.Path">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.Trashed">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.AdditionalData">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.HasAdditionalData">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.NodeObjectType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.HasChildren">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Entities.EntitySlim.IsContainer">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Entities.EntitySlim.DeepClone">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.CultureImpact">
            <summary>
            Represents the impact of a culture set.
            </summary>
            <remarks>
            <para>A set of cultures can be either all cultures (including the invariant culture), or
            the invariant culture, or a specific culture.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.CultureImpact.GetCultureForInvariantErrors(Umbraco.Core.Models.IContent,System.String[],System.String)">
            <summary>
            Utility method to return the culture used for invariant property errors based on what cultures are being actively saved,
            the default culture and the state of the current content item
            </summary>
            <param name="content"></param>
            <param name="savingCultures"></param>
            <param name="defaultCulture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.CultureImpact.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.CultureImpact"/> class.
            </summary>
            <param name="culture">The culture code.</param>
            <param name="isDefault">A value indicating whether the culture is the default culture.</param>
        </member>
        <member name="P:Umbraco.Core.Models.CultureImpact.All">
            <summary>
            Gets the impact of 'all' cultures (including the invariant culture).
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.CultureImpact.Invariant">
            <summary>
            Gets the impact of the invariant culture.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.CultureImpact.Explicit(System.String,System.Boolean)">
            <summary>
            Creates an impact instance representing the impact of a specific culture.
            </summary>
            <param name="culture">The culture code.</param>
            <param name="isDefault">A value indicating whether the culture is the default culture.</param>
        </member>
        <member name="M:Umbraco.Core.Models.CultureImpact.Create(System.String,System.Boolean,Umbraco.Core.Models.IContent)">
            <summary>
            Creates an impact instance representing the impact of a culture set,
            in the context of a content item variation.
            </summary>
            <param name="culture">The culture code.</param>
            <param name="isDefault">A value indicating whether the culture is the default culture.</param>
            <param name="content">The content item.</param>
            <remarks>
            <para>Validates that the culture is compatible with the variation.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.CultureImpact.TryCreate(System.String,System.Boolean,Umbraco.Core.Models.ContentVariation,System.Boolean,Umbraco.Core.Models.CultureImpact@)">
            <summary>
            Tries to create an impact instance representing the impact of a culture set,
            in the context of a content item variation.
            </summary>
            <param name="culture">The culture code.</param>
            <param name="isDefault">A value indicating whether the culture is the default culture.</param>
            <param name="variation">A content variation.</param>
            <param name="throwOnFail">A value indicating whether to throw if the impact cannot be created.</param>
            <param name="impact">The impact if it could be created, otherwise null.</param>
            <returns>A value indicating whether the impact could be created.</returns>
            <remarks>
            <para>Validates that the culture is compatible with the variation.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.CultureImpact.Culture">
            <summary>
            Gets the culture code.
            </summary>
            <remarks>
            <para>Can be null (invariant) or * (all cultures) or a specific culture code.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.CultureImpact.ImpactsAllCultures">
            <summary>
            Gets a value indicating whether this impact impacts all cultures, including,
            indirectly, the invariant culture.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.CultureImpact.ImpactsOnlyInvariantCulture">
            <summary>
            Gets a value indicating whether this impact impacts only the invariant culture,
            directly, not because all cultures are impacted.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.CultureImpact.ImpactsExplicitCulture">
            <summary>
            Gets a value indicating whether this impact impacts an implicit culture.
            </summary>
            <remarks>And then it does not impact the invariant culture. The impacted
            explicit culture could be the default culture.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.CultureImpact.ImpactsOnlyDefaultCulture">
            <summary>
            Gets a value indicating whether this impact impacts the default culture, directly,
            not because all cultures are impacted.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.CultureImpact.ImpactsInvariantProperties">
            <summary>
            Gets a value indicating whether this impact impacts the invariant properties, either
            directly, or because all cultures are impacted, or because the default culture is impacted.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.CultureImpact.ImpactsAlsoInvariantProperties">
            <summary>
            Gets a value indicating whether this also impact impacts the invariant properties,
            even though it does not impact the invariant culture, neither directly (ImpactsInvariantCulture)
            nor indirectly (ImpactsAllCultures).
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PagedResult">
            <summary>
            Represents a paged result for a model collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Models.PagedResult.GetSkipSize">
            <summary>
            Calculates the skip size based on the paged parameters specified
            </summary>
            <remarks>
            Returns 0 if the page number or page size is zero
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.AuditEntry">
            <summary>
            Represents an audited event.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.AuditEntry.PerformingUserId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.AuditEntry.PerformingDetails">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.AuditEntry.PerformingIp">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.AuditEntry.EventDateUtc">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.AuditEntry.AffectedUserId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.AuditEntry.AffectedDetails">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.AuditEntry.EventType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.AuditEntry.EventDetails">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.Consent">
            <summary>
            Represents a consent.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Consent.Current">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Consent.Source">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Consent.Context">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Consent.Action">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Consent.State">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Consent.Comment">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Consent.History">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Consent.HistoryInternal">
            <summary>
            Gets the previous states of this consent.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ConsentExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Umbraco.Core.Models.IConsent"/> interface.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ConsentExtensions.IsGranted(Umbraco.Core.Models.IConsent)">
            <summary>
            Determines whether the consent is granted.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ConsentExtensions.IsRevoked(Umbraco.Core.Models.IConsent)">
            <summary>
            Determines whether the consent is revoked.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ConsentState">
            <summary>
            Represents the state of a consent.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ConsentState.None">
            <summary>
            There is no consent.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ConsentState.Pending">
            <summary>
            Consent is pending and has not been granted yet.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ConsentState.Granted">
            <summary>
            Consent has been granted.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ConsentState.Revoked">
            <summary>
            Consent has been revoked.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentRepositoryExtensions">
            <summary>
            Extension methods used to manipulate content variations by the document repository
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentRepositoryExtensions.GetCulturesUnpublishing(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the cultures that have been flagged for unpublishing.
            </summary>
            <remarks>Gets cultures for which content.UnpublishCulture() has been invoked.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentRepositoryExtensions.CopyFrom(Umbraco.Core.Models.IContent,Umbraco.Core.Models.IContent,System.String)">
            <summary>
            Copies values from another document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentRepositoryExtensions.AdjustDates(Umbraco.Core.Models.IContent,System.DateTime)">
            <summary>
            Used to synchronize all culture dates to the same date if they've been modified
            </summary>
            <param name="content"></param>
            <param name="date"></param>
            <remarks>
            This is so that in an operation where (for example) 2 languages are updates like french and english, it is possible that
            these dates assigned to them differ by a couple of Ticks, but we need to ensure they are persisted at the exact same time.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentRepositoryExtensions.PublishCulture(Umbraco.Core.Models.IContent,Umbraco.Core.Models.CultureImpact)">
            <summary>
            Sets the publishing values for names and properties.
            </summary>
            <param name="content"></param>
            <param name="impact"></param>
            <returns>A value indicating whether it was possible to publish the names and values for the specified
            culture(s). The method may fail if required names are not set, but it does NOT validate property data</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentRepositoryExtensions.UnpublishCulture(Umbraco.Core.Models.IContent,System.String)">
            <summary>
            Returns false if the culture is already unpublished
            </summary>
            <param name="content"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentRepositoryExtensions.ClearPublishInfo(Umbraco.Core.Models.IContent,System.String)">
            <summary>
            Returns false if the culture is already unpublished
            </summary>
            <param name="content"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentRepositoryExtensions.TouchCulture(Umbraco.Core.Models.IContentBase,System.String)">
            <summary>
            Updates a culture date, if the culture exists.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentSchedule">
            <summary>
            Represents a scheduled action for a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentSchedule.#ctor(System.String,System.DateTime,Umbraco.Core.Models.ContentScheduleAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ContentSchedule"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentSchedule.#ctor(System.Guid,System.String,System.DateTime,Umbraco.Core.Models.ContentScheduleAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ContentSchedule"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentSchedule.Id">
            <summary>
            Gets the unique identifier of the document targeted by the scheduled action.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentSchedule.Culture">
            <summary>
            Gets the culture of the scheduled action.
            </summary>
            <remarks>
            string.Empty represents the invariant culture.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentSchedule.Date">
            <summary>
            Gets the date of the scheduled action.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentSchedule.Action">
            <summary>
            Gets the action to take.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentScheduleAction">
            <summary>
            Defines scheduled actions for documents.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentScheduleAction.Release">
            <summary>
            Release the document.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentScheduleAction.Expire">
            <summary>
            Expire the document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentScheduleCollection.Add(Umbraco.Core.Models.ContentSchedule)">
            <summary>
            Add an existing schedule
            </summary>
            <param name="schedule"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentScheduleCollection.Add(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Adds a new schedule for invariant content
            </summary>
            <param name="releaseDate"></param>
            <param name="expireDate"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentScheduleCollection.Add(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Adds a new schedule for a culture
            </summary>
            <param name="culture"></param>
            <param name="releaseDate"></param>
            <param name="expireDate"></param>
            <returns>true if successfully added, false if validation fails</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentScheduleCollection.Remove(Umbraco.Core.Models.ContentSchedule)">
            <summary>
            Remove a scheduled change
            </summary>
            <param name="change"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentScheduleCollection.Clear(Umbraco.Core.Models.ContentScheduleAction,System.Nullable{System.DateTime})">
            <summary>
            Clear all of the scheduled change type for invariant content
            </summary>
            <param name="action"></param>
            <param name="changeDate">If specified, will clear all entries with dates less than or equal to the value</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentScheduleCollection.Clear(System.String,Umbraco.Core.Models.ContentScheduleAction,System.Nullable{System.DateTime})">
            <summary>
            Clear all of the scheduled change type for the culture
            </summary>
            <param name="culture"></param>
            <param name="action"></param>
            <param name="date">If specified, will clear all entries with dates less than or equal to the value</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentScheduleCollection.GetPending(Umbraco.Core.Models.ContentScheduleAction,System.DateTime)">
            <summary>
            Returns all pending schedules based on the date and type provided
            </summary>
            <param name="action"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentScheduleCollection.GetSchedule(System.Nullable{Umbraco.Core.Models.ContentScheduleAction})">
            <summary>
            Gets the schedule for invariant content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentScheduleCollection.GetSchedule(System.String,System.Nullable{Umbraco.Core.Models.ContentScheduleAction})">
            <summary>
            Gets the schedule for a culture
            </summary>
            <param name="culture"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.ContentScheduleCollection.FullSchedule">
            <summary>
            Returns all schedules registered
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTagsExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Umbraco.Core.Models.IContentBase"/> class, to manage tags.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTagsExtensions.AssignTags(Umbraco.Core.Models.IContentBase,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
            <summary>
            Assign tags.
            </summary>
            <param name="content">The content item.</param>
            <param name="propertyTypeAlias">The property alias.</param>
            <param name="tags">The tags.</param>
            <param name="merge">A value indicating whether to merge the tags with existing tags instead of replacing them.</param>
            <param name="culture">A culture, for multi-lingual properties.</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTagsExtensions.RemoveTags(Umbraco.Core.Models.IContentBase,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Remove tags.
            </summary>
            <param name="content">The content item.</param>
            <param name="propertyTypeAlias">The property alias.</param>
            <param name="tags">The tags.</param>
            <param name="culture">A culture, for multi-lingual properties.</param>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeBaseExtensions">
            <summary>
            Provides extensions methods for <see cref="T:Umbraco.Core.Models.IContentTypeBase"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBaseExtensions.WasPropertyTypeVariationChanged(Umbraco.Core.Models.IContentTypeBase)">
            <summary>
            Used to check if any property type was changed between variant/invariant
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBaseExtensions.WasPropertyTypeVariationChanged(Umbraco.Core.Models.IContentTypeBase,System.Collections.Generic.IReadOnlyCollection{System.String}@)">
            <summary>
            Used to check if any property type was changed between variant/invariant
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.ContentCultureInfos">
            <summary>
            The name of a content variant for a given culture
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentCultureInfos.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ContentCultureInfos"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentCultureInfos.#ctor(Umbraco.Core.Models.ContentCultureInfos)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ContentCultureInfos"/> class.
            </summary>
            <remarks>Used for cloning, without change tracking.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentCultureInfos.Culture">
            <summary>
            Gets the culture.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentCultureInfos.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentCultureInfos.Date">
            <summary>
            Gets the date.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentCultureInfos.DeepClone">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentCultureInfos.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentCultureInfos.Equals(Umbraco.Core.Models.ContentCultureInfos)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentCultureInfos.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentCultureInfos.Deconstruct(System.String@,System.String@)">
            <summary>
            Deconstructs into culture and name.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentCultureInfos.Deconstruct(System.String@,System.String@,System.DateTime@)">
            <summary>
            Deconstructs into culture, name and date.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentCultureInfosCollection">
            <summary>
            The culture names of a content's variants
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentCultureInfosCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ContentCultureInfosCollection"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentCultureInfosCollection.AddOrUpdate(System.String,System.String,System.DateTime)">
            <summary>
            Adds or updates a <see cref="T:Umbraco.Core.Models.ContentCultureInfos"/> instance.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentCultureInfosCollection.DeepClone">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.DataTypeExtensions">
            <summary>
            Provides extensions methods for <see cref="T:Umbraco.Core.Models.IDataType"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.DataTypeExtensions.ConfigurationAs``1(Umbraco.Core.Models.IDataType)">
            <summary>
            Gets the configuration object.
            </summary>
            <typeparam name="T">The expected type of the configuration object.</typeparam>
            <param name="dataType">This datatype.</param>
            <exception cref="T:System.InvalidCastException">When the datatype configuration is not of the expected type.</exception>
        </member>
        <member name="M:Umbraco.Core.Models.DataTypeExtensions.IsBuildInDataType(Umbraco.Core.Models.IDataType)">
            <summary>
            Returns true if this date type is build-in/default.
            </summary>
            <param name="dataType">The data type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.DataTypeExtensions.IsBuildInDataType(System.Guid)">
            <summary>
            Returns true if this date type is build-in/default.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IAuditEntry">
            <summary>
            Represents an audited event.
            </summary>
            <remarks>
            <para>The free-form details properties can be used to capture relevant infos (for example,
            a user email and identifier) at the time of the audited event, even though they may change
            later on - but we want to keep a track of their value at that time.</para>
            <para>Depending on audit loggers, these properties can be purely free-form text, or
            contain json serialized objects.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditEntry.PerformingUserId">
            <summary>
            Gets or sets the identifier of the user triggering the audited event.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditEntry.PerformingDetails">
            <summary>
            Gets or sets free-form details about the user triggering the audited event.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditEntry.PerformingIp">
            <summary>
            Gets or sets the IP address or the request triggering the audited event.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditEntry.EventDateUtc">
            <summary>
            Gets or sets the date and time of the audited event.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditEntry.AffectedUserId">
            <summary>
            Gets or sets the identifier of the user affected by the audited event.
            </summary>
            <remarks>Not used when no single user is affected by the event.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditEntry.AffectedDetails">
            <summary>
            Gets or sets free-form details about the entity affected by the audited event.
            </summary>
            <remarks>The entity affected by the event can be another user, a member...</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditEntry.EventType">
            <summary>
            Gets or sets the type of the audited event.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditEntry.EventDetails">
            <summary>
            Gets or sets free-form details about the audited event.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IAuditItem">
            <summary>
            Represents an audit item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditItem.AuditType">
            <summary>
            Gets the audit type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditItem.EntityType">
            <summary>
            Gets the audited entity type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditItem.UserId">
            <summary>
            Gets the audit user identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditItem.Comment">
            <summary>
            Gets the audit comments.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IAuditItem.Parameters">
            <summary>
            Gets optional additional data parameters.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IConsent">
            <summary>
            Represents a consent state.
            </summary>
            <remarks>
            <para>A consent is fully identified by a source (whoever is consenting), a context (for
            example, an application), and an action (whatever is consented).</para>
            <para>A consent state registers the state of the consent (granted, revoked...).</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IConsent.Current">
            <summary>
            Determines whether the consent entity represents the current state.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IConsent.Source">
            <summary>
            Gets the unique identifier of whoever is consenting.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IConsent.Context">
            <summary>
            Gets the unique identifier of the context of the consent.
            </summary>
            <remarks>
            <para>Represents the domain, application, scope... of the action.</para>
            <para>When the action is a Udi, this should be the Udi type.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IConsent.Action">
            <summary>
            Gets the unique identifier of the consented action.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IConsent.State">
            <summary>
            Gets the state of the consent.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IConsent.Comment">
            <summary>
            Gets some additional free text.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IConsent.History">
            <summary>
            Gets the previous states of this consent.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ISimpleContentType">
            <summary>
            Represents a simplified view of a content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ISimpleContentType.Alias">
            <summary>
            Gets the alias of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ISimpleContentType.DefaultTemplate">
            <summary>
            Gets the default template of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ISimpleContentType.Variations">
            <summary>
            Gets the content variation of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ISimpleContentType.Icon">
            <summary>
            Gets the icon of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ISimpleContentType.IsContainer">
            <summary>
            Gets a value indicating whether the content type is a container.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ISimpleContentType.AllowedAsRoot">
            <summary>
            Gets a value indicating whether content of that type can be created at the root of the tree.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ISimpleContentType.IsElement">
            <summary>
            Gets a value indicating whether the content type is an element content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ISimpleContentType.SupportsPropertyVariation(System.String,System.String,System.Boolean)">
            <summary>
            Validates that a combination of culture and segment is valid for the content type properties.
            </summary>
            <param name="culture">The culture.</param>
            <param name="segment">The segment.</param>
            <param name="wildcards">A value indicating whether wildcard are supported.</param>
            <returns>True if the combination is valid; otherwise false.</returns>
            <remarks>
            <para>The combination must be valid for properties of the content type. For instance, if the content type varies by culture,
            then an invariant culture is valid, because some properties may be invariant. On the other hand, if the content type is invariant,
            then a variant culture is invalid, because no property could possibly vary by culture.</para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.Models.Membership.ContentPermissionSet" -->
        <member name="T:Umbraco.Core.Models.Membership.EntityPermission">
            <summary>
            Represents an entity permission (defined on the user group and derived to retrieve permissions for a given user)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.EntityPermission.AssignedPermissions">
            <summary>
            The assigned permissions for the user/entity combo
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.EntityPermission.IsDefaultPermissions">
            <summary>
            True if the permissions assigned to this object are the group's default permissions and not explicitly defined permissions
            </summary>
            <remarks>
            This will be the case when looking up entity permissions and falling back to the default permissions
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.EntityPermissionCollection">
            <summary>
            A <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:Umbraco.Core.Models.Membership.EntityPermission"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.EntityPermissionCollection.GetAllPermissions(System.Int32)">
            <summary>
            Returns the aggregate permissions in the permission set for a single node
            </summary>
            <returns></returns>
            <remarks>
            This value is only calculated once per node
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.EntityPermissionCollection.GetAllPermissions">
            <summary>
            Returns the aggregate permissions in the permission set for all nodes
            </summary>
            <returns></returns>
            <remarks>
            This value is only calculated once
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.Models.Membership.EntityPermissionSet" -->
        <member name="M:Umbraco.Core.Models.Membership.EntityPermissionSet.Empty">
            <summary>
            Returns an empty permission set
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.EntityPermissionSet.EntityId">
            <summary>
            The entity id with permissions assigned
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Umbraco.Core.Models.Membership.EntityPermissionSet.PermissionsSet" -->
        <member name="M:Umbraco.Core.Models.Membership.EntityPermissionSet.GetAllPermissions">
            <summary>
            Returns the aggregate permissions in the permission set
            </summary>
            <returns></returns>
            <remarks>
            This value is only calculated once
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.IMembershipUser">
            <summary>
            Defines the base contract for <see cref="T:Umbraco.Core.Models.IMember"/> and <see cref="T:Umbraco.Core.Models.Membership.IUser"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IMembershipUser.RawPasswordValue">
            <summary>
            Gets or sets the raw password value
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IMembershipUser.RawPasswordAnswerValue">
            <summary>
            Gets or sets the raw password answer value
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IMembershipUser.FailedPasswordAttempts">
            <summary>
            Gets or sets the number of failed password attempts.
            This is the number of times the password was entered incorrectly upon login.
            </summary>
            <remarks>
            Alias: umbracoMemberFailedPasswordAttempts
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.IProfile">
            <summary>
            Defines the User Profile interface
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.IReadOnlyUserGroup">
            <summary>
            A readonly user group providing basic information
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IReadOnlyUserGroup.Alias">
            <summary>
            The alias
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IReadOnlyUserGroup.Permissions">
            <summary>
            The set of default permissions
            </summary>
            <remarks>
            By default each permission is simply a single char but we've made this an enumerable{string} to support a more flexible permissions structure in the future.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.IUser">
            <summary>
            Defines the interface for a <see cref="T:Umbraco.Core.Models.Membership.User"/>
            </summary>
            <remarks>Will be left internal until a proper Membership implementation is part of the roadmap</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUser.Groups">
            <summary>
            Gets the groups that user is part of
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUser.ProfileData">
            <summary>
            Exposes the basic profile data
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUser.SecurityStamp">
            <summary>
            The security stamp used by ASP.Net identity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUser.Avatar">
            <summary>
            Will hold the media file system relative path of the users custom avatar if they uploaded one
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUser.TourData">
            <summary>
            A Json blob stored for recording tour data for a user
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUserGroup.Icon">
            <summary>
            The icon
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUserGroup.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUserGroup.Permissions">
            <summary>
            The set of default permissions
            </summary>
            <remarks>
            By default each permission is simply a single char but we've made this an enumerable{string} to support a more flexible permissions structure in the future.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUserGroup.UserCount">
            <summary>
            Specifies the number of users assigned to this group
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.MemberCountType">
            <summary>
            The types of members to count
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.MembershipScenario">
            <summary>
            How membership is implemented in the current install.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.Membership.MembershipScenario.NativeUmbraco">
            <summary>
            The member is based on the native Umbraco members (IMember + Umbraco membership provider)
            </summary>
            <remarks>
            This supports custom member properties
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Models.Membership.MembershipScenario.CustomProviderWithUmbracoLink">
            <summary>
            The member is based on a custom member provider but it is linked to an IMember
            </summary>
            <remarks>
            This supports custom member properties (but that is not enabled yet)
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Models.Membership.MembershipScenario.StandaloneCustomProvider">
            <summary>
            The member is based purely on a custom member provider and is not linked to umbraco data
            </summary>
            <remarks>
            This does not support custom member properties.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.MembershipUserExtensions.GetMembershipScenario(Umbraco.Core.Services.IMemberService)">
            <summary>
            Returns the currently configured membership scenario for members in umbraco
            </summary>
            <value></value>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.ReadOnlyUserGroup.Permissions">
            <summary>
            The set of default permissions
            </summary>
            <remarks>
            By default each permission is simply a single char but we've made this an enumerable{string} to support a more flexible permissions structure in the future.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.UmbracoMembershipUser`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Membership.UmbracoMembershipUser`1"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.UmbracoMembershipUser`1.#ctor(System.String,System.String,System.Object,System.String,System.String,System.String,System.Boolean,System.Boolean,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Membership.UmbracoMembershipUser`1"/> class.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="name">The name.</param>
            <param name="providerUserKey">The provider user key.</param>
            <param name="email">The email.</param>
            <param name="passwordQuestion">The password question.</param>
            <param name="comment">The comment.</param>
            <param name="isApproved">if set to <c>true</c> [is approved].</param>
            <param name="isLockedOut">if set to <c>true</c> [is locked out].</param>
            <param name="creationDate">The creation date.</param>
            <param name="lastLoginDate">The last login date.</param>
            <param name="lastActivityDate">The last activity date.</param>
            <param name="lastPasswordChangedDate">The last password changed date.</param>
            <param name="lastLockoutDate">The last lockout date.</param>
            <param name="fullName">The full name.</param>
            <param name="language">The language.</param>
            <param name="user"></param>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.User">
            <summary>
            Represents a backoffice user
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.User.#ctor">
            <summary>
            Constructor for creating a new/empty user
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.User.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for creating a new/empty user
            </summary>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="rawPasswordValue"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.User.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Membership.IReadOnlyUserGroup},System.Int32[],System.Int32[])">
            <summary>
            Constructor for creating a new User instance for an existing user
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="rawPasswordValue"></param>
            <param name="userGroups"></param>
            <param name="startContentIds"></param>
            <param name="startMediaIds"></param>
        </member>
        <member name="F:Umbraco.Core.Models.Membership.User.GroupsToSave">
            <summary>
            This used purely for hacking backwards compatibility into this class for &lt; 7.7 compat
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.SecurityStamp">
            <summary>
            The security stamp used by ASP.Net identity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.TourData">
            <summary>
            A Json blob stored for recording tour data for a user
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.SessionTimeout">
            <summary>
            Gets or sets the session timeout.
            </summary>
            <value>
            The session timeout.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.StartContentIds">
            <summary>
            Gets or sets the start content id.
            </summary>
            <value>
            The start content id.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.StartMediaIds">
            <summary>
            Gets or sets the start media id.
            </summary>
            <value>
            The start media id.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.Groups">
            <summary>
            Gets the groups that user is part of
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.AdditionalData">
            <summary>
            This is used as an internal cache for this entity - specifically for calculating start nodes so we don't re-calculated all of the time
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.User.WrappedUserProfile">
            <summary>
            Internal class used to wrap the user in a profile
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.UserGroup">
            <summary>
            Represents a Group for a Backoffice User
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.UserGroup.#ctor">
            <summary>
            Constructor to create a new user group
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.UserGroup.#ctor(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Constructor to create an existing user group
            </summary>
            <param name="userCount"></param>
            <param name="alias"></param>
            <param name="name"></param>
            <param name="permissions"></param>
            <param name="icon"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.UserGroup.Permissions">
            <summary>
            The set of default permissions for the user group
            </summary>
            <remarks>
            By default each permission is simply a single char but we've made this an enumerable{string} to support a more flexible permissions structure in the future.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.UserState">
            <summary>
            The state of a user
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.NotificationEmailBodyParams.Summary">
            <summary>
            This will either be an HTML or text based summary depending on the email type being sent
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Packaging.CompiledPackage">
            <summary>
            The model of the package definition within an umbraco (zip) package file
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Packaging.CompiledPackageDocument.XmlData">
            <summary>
            The serialized version of the content
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Packaging.IPackageInfo.PackageView">
            <summary>
            This is the angular view path that will be loaded when the package installs
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Packaging.PackageDefinition.FromCompiledPackage(Umbraco.Core.Models.Packaging.CompiledPackage)">
            <summary>
            Converts a <see cref="T:Umbraco.Core.Models.Packaging.CompiledPackage"/> model to a <see cref="T:Umbraco.Core.Models.Packaging.PackageDefinition"/> model
            </summary>
            <param name="compiled"></param>
            <returns></returns>
            <remarks>
            This is used only for conversions and will not 'get' a PackageDefinition from the repository with a valid ID
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Packaging.PackageDefinition.PackagePath">
            <summary>
            The full path to the package's zip file when it was installed (or is being installed)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Packaging.PackageDefinition.UmbracoVersion">
            <summary>
            The minimum umbraco version that this package requires
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Packaging.PackageDefinition.PackageView">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.Packaging.PackageAction">
            <summary>
            Defines a package action declared within a package manifest
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PathValidationExtensions">
            <summary>
            Provides extension methods for path validation.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PathValidationExtensions.ValidatePathWithException(Umbraco.Core.Persistence.Dtos.NodeDto)">
            <summary>
            Does a quick check on the entity's set path to ensure that it's valid and consistent
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.PathValidationExtensions.ValidatePath(Umbraco.Core.Models.Entities.IUmbracoEntity)">
            <summary>
            Does a quick check on the entity's set path to ensure that it's valid and consistent
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.PathValidationExtensions.EnsureValidPath``1(``0,Umbraco.Core.Logging.ILogger,System.Func{``0,``0},System.Action{``0})">
            <summary>
            This will validate the entity's path and if it's invalid it will fix it, if fixing is required it will recursively
            check and fix all ancestors if required.
            </summary>
            <param name="entity"></param>
            <param name="logger"></param>
            <param name="getParent">A callback specified to retrieve the parent entity of the entity</param>
            <param name="update">A callback specified to update a fixed entity</param>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyTagsExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Umbraco.Core.Models.Property"/> class to manage tags.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyTagsExtensions.AssignTags(Umbraco.Core.Models.Property,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
            <summary>
            Assign tags.
            </summary>
            <param name="property">The property.</param>
            <param name="tags">The tags.</param>
            <param name="merge">A value indicating whether to merge the tags with existing tags instead of replacing them.</param>
            <param name="culture">A culture, for multi-lingual properties.</param>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyTagsExtensions.RemoveTags(Umbraco.Core.Models.Property,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Removes tags.
            </summary>
            <param name="property">The property.</param>
            <param name="tags">The tags.</param>
            <param name="culture">A culture, for multi-lingual properties.</param>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyTagsExtensions.SetTagsValue(Umbraco.Core.Models.Property,System.Object,Umbraco.Core.PropertyEditors.TagConfiguration,System.String)">
            <summary>
            Sets tags on a content property, based on the property editor tags configuration.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The property value.</param>
            <param name="tagConfiguration">The datatype configuration.</param>
            <param name="culture">A culture, for multi-lingual properties.</param>
            <remarks>
            <para>The value is either a string (delimited string) or an enumeration of strings (tag list).</para>
            <para>This is used both by the content repositories to initialize a property with some tag values, and by the
            content controllers to update a property with values received from the property editor.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.SimpleContentType">
            <summary>
            Implements <see cref="T:Umbraco.Core.Models.ISimpleContentType"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.SimpleContentType.#ctor(Umbraco.Core.Models.IContentType)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.SimpleContentType"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.SimpleContentType.#ctor(Umbraco.Core.Models.IMediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.SimpleContentType"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.SimpleContentType.#ctor(Umbraco.Core.Models.IMemberType)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.SimpleContentType"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.SimpleContentType.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.SimpleContentType.DefaultTemplate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.SimpleContentType.Variations">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.SimpleContentType.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.SimpleContentType.IsContainer">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.SimpleContentType.AllowedAsRoot">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.SimpleContentType.IsElement">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.SimpleContentType.SupportsPropertyVariation(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.SimpleContentType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.SimpleContentType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.Sections.ISection">
            <summary>
            Defines a back office section.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Sections.ISection.Alias">
            <summary>
            Gets the alias of the section.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Sections.ISection.Name">
            <summary>
            Gets the name of the section.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.AuditItem.#ctor(System.Int32,Umbraco.Core.Models.AuditType,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.AuditItem"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.AuditItem.AuditType">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Core.Models.AuditItem.EntityType">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Core.Models.AuditItem.UserId">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Core.Models.AuditItem.Comment">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Core.Models.AuditItem.Parameters">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Core.Models.AuditType">
            <summary>
            Defines audit types.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.New">
            <summary>
            New node(s) being added.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Save">
            <summary>
            Node(s) being saved.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.SaveVariant">
            <summary>
            Variant(s) being saved.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Open">
            <summary>
            Node(s) being opened.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Delete">
            <summary>
            Node(s) being deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Publish">
            <summary>
            Node(s) being published.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.PublishVariant">
            <summary>
            Variant(s) being published.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.SendToPublish">
            <summary>
            Node(s) being sent to publishing.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.SendToPublishVariant">
            <summary>
            Variant(s) being sent to publishing.
            </summary>        
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Unpublish">
            <summary>
            Node(s) being unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.UnpublishVariant">
            <summary>
            Variant(s) being unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Move">
            <summary>
            Node(s) being moved.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Copy">
            <summary>
            Node(s) being copied.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.AssignDomain">
            <summary>
            Node(s) being assigned domains.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.PublicAccess">
            <summary>
            Node(s) public access changing.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Sort">
            <summary>
            Node(s) being sorted.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Notify">
            <summary>
            Notification(s) being sent to user.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.System">
            <summary>
            General system audit message.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.RollBack">
            <summary>
            Node's content being rolled back to a previous version.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.PackagerInstall">
            <summary>
            Package being installed.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.PackagerUninstall">
            <summary>
            Package being uninstalled.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Custom">
            <summary>
            Custom audit message.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Content">
            <summary>
            Represents a Content object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Content.#ctor(System.String,Umbraco.Core.Models.IContent,Umbraco.Core.Models.IContentType,System.String)">
            <summary>
            Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IContent"/> object</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="culture">An optional culture.</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.#ctor(System.String,Umbraco.Core.Models.IContent,Umbraco.Core.Models.IContentType,Umbraco.Core.Models.PropertyCollection,System.String)">
            <summary>
            Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IContent"/> object</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="properties">Collection of properties</param>
            <param name="culture">An optional culture.</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.#ctor(System.String,System.Int32,Umbraco.Core.Models.IContentType,System.String)">
            <summary>
            Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parentId">Id of the Parent content</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="culture">An optional culture.</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.#ctor(System.String,System.Int32,Umbraco.Core.Models.IContentType,Umbraco.Core.Models.PropertyCollection,System.String)">
            <summary>
            Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parentId">Id of the Parent content</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="properties">Collection of properties</param>
            <param name="culture">An optional culture.</param>
        </member>
        <member name="P:Umbraco.Core.Models.Content.ContentSchedule">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Content.ScheduleCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Collection changed event handler to ensure the schedule field is set to dirty when the schedule changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Content.TemplateId">
            <summary>
            Gets or sets the template used by the Content.
            This is used to override the default one from the ContentType.
            </summary>
            <remarks>
            If no template is explicitly set on the Content object,
            the Default template from the ContentType will be returned.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Content.Published">
            <summary>
            Gets or sets a value indicating whether this content item is published or not.
            </summary>
            <remarks>
            the setter is should only be invoked from
            - the ContentFactory when creating a content entity from a dto
            - the ContentRepository when updating a content entity
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Content.PublishedState">
            <summary>
            Gets the published state of the content item.
            </summary>
            <remarks>The state should be Published or Unpublished, depending on whether Published
            is true or false, but can also temporarily be Publishing or Unpublishing when the
            content item is about to be saved.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Content.PublishDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Content.PublisherId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Content.PublishTemplateId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Content.PublishName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Content.EditedCultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Content.PublishedCultures">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Content.IsCulturePublished(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Content.IsCultureEdited(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Content.PublishCultureInfos">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Models.Content.GetPublishName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Models.Content.GetPublishDate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.Content.PublishNamesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles culture infos collection changes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Content.ChangeContentType(Umbraco.Core.Models.IContentType)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.ContentType"/> for the current content object
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <remarks>Leaves PropertyTypes intact after change</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Content.ChangeContentType(Umbraco.Core.Models.IContentType,System.Boolean)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.ContentType"/> for the current content object and removes PropertyTypes,
            which are not part of the new ContentType.
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <param name="clearProperties">Boolean indicating whether to clear PropertyTypes upon change</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.IsPropertyDirty(System.String)">
            <inheritdoc />
            <remarks>Overridden to check special keys.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Content.WasPropertyDirty(System.String)">
            <inheritdoc />
            <remarks>Overridden to check special keys.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Content.DeepCloneWithResetIdentities">
            <summary>
            Creates a deep clone of the current entity with its identity and it's property identities reset
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.ContentBase">
            <summary>
            Represents an abstract class for base Content properties and methods
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.#ctor(System.String,System.Int32,Umbraco.Core.Models.IContentTypeComposition,Umbraco.Core.Models.PropertyCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ContentBase"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.#ctor(System.String,Umbraco.Core.Models.IContentBase,Umbraco.Core.Models.IContentTypeComposition,Umbraco.Core.Models.PropertyCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ContentBase"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.WriterId">
            <summary>
            Id of the user who wrote/updated this entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.ContentTypeId">
            <summary>
            Integer Id of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Properties">
            <summary>
            Gets or sets the collection of properties for the entity.
            </summary>
            <remarks>
            Marked DoNotClone since we'll manually clone the underlying field to deal with the event handling
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.AvailableCultures">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.IsCultureAvailable(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.CultureInfos">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.GetCultureName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.GetUpdateDate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetCultureName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.CultureInfosCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles culture infos collection changes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.HasProperty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.GetValue(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.GetValue``1(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetValue(System.String,System.Object,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.ResetDirtyProperties(System.Boolean)">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.IsDirty">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.WasDirty">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.IsEntityDirty">
            <summary>
            Gets a value indicating whether the current entity's own properties (not user) are dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.WasEntityDirty">
            <summary>
            Gets a value indicating whether the current entity's own properties (not user) were dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.IsPropertyDirty(System.String)">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.WasPropertyDirty(System.String)">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.GetDirtyProperties">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.GetWereDirtyProperties">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.PerformDeepClone(System.Object)">
            <inheritdoc />
            <remarks>
            Overridden to deal with specific object instances
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.ContentStatus">
            <summary>
            Describes the states of a document, with regard to (schedule) publishing.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentStatus.Unpublished">
            <summary>
            The document is not trashed, and not published. 
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentStatus.Published">
            <summary>
            The document is published.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentStatus.Expired">
            <summary>
            The document is not trashed, not published, after being unpublished by a scheduled action.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentStatus.Trashed">
            <summary>
            The document is trashed.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentStatus.AwaitingRelease">
            <summary>
            The document is not trashed, not published, and pending publication by a scheduled action.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentType">
            <summary>
            Represents the content type that a <see cref="T:Umbraco.Core.Models.Content"/> object is based on
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.#ctor(System.Int32)">
            <summary>
            Constuctor for creating a ContentType with the parent's id.
            </summary>
            <remarks>Only use this for creating ContentTypes at the root (with ParentId -1).</remarks>
            <param name="parentId"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.#ctor(Umbraco.Core.Models.IContentType,System.String)">
            <summary>
            Constuctor for creating a ContentType with the parent as an inherited type.
            </summary>
            <remarks>Use this to ensure inheritance from parent.</remarks>
            <param name="parent"></param>
            <param name="alias"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.ToSimple">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.ContentType.SupportsPublishing">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.ContentType.DefaultTemplate">
            <summary>
            Gets or sets the alias of the default Template.
            TODO: This should be ignored from cloning!!!!!!!!!!!!!!
             - but to do that we have to implement callback hacks, this needs to be fixed in v8,
                we should not store direct entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentType.DefaultTemplateId">
            <summary>
            Internal property to store the Id of the default template
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentType.AllowedTemplates">
            <summary>
            Gets or Sets a list of Templates which are allowed for the ContentType
            TODO: This should be ignored from cloning!!!!!!!!!!!!!!
             - but to do that we have to implement callback hacks, this needs to be fixed in v8,
                we should not store direct entity
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.IsAllowedTemplate(System.Int32)">
            <summary>
            Determines if AllowedTemplates contains templateId
            </summary>
            <param name="templateId">The template id to check</param>
            <returns>True if AllowedTemplates contains the templateId else False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.IsAllowedTemplate(System.String)">
            <summary>
            Determines if AllowedTemplates contains templateId
            </summary>
            <param name="templateAlias">The template alias to check</param>
            <returns>True if AllowedTemplates contains the templateAlias else False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.SetDefaultTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Sets the default template for the ContentType
            </summary>
            <param name="template">Default <see cref="T:Umbraco.Core.Models.ITemplate"/></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.RemoveTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Removes a template from the list of allowed templates
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to remove</param>
            <returns>True if template was removed, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.Umbraco#Core#Models#IContentType#DeepCloneWithResetIdentities(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeAvailableCompositionsResult">
            <summary>
            Used when determining available compositions for a given content type
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeAvailableCompositionsResults">
            <summary>
            Used when determining available compositions for a given content type
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeBase">
            <summary>
            Represents an abstract class for base ContentType properties and methods
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.SupportsPublishing">
            <summary>
            Gets a value indicating whether the content type supports publishing.
            </summary>
            <remarks>
            <para>A publishing content type supports draft and published values for properties.
            It is possible to retrieve either the draft (default) or published value of a property.
            Setting the value always sets the draft value, which then needs to be published.</para>
            <para>A non-publishing content type only supports one value for properties. Getting
            the draft or published value of a property returns the same thing, and publishing
            a value property has no effect.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Alias">
            <summary>
            The Alias of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Description">
            <summary>
            Description for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Icon">
            <summary>
            Name of the icon (sprite class) used to identify the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Thumbnail">
            <summary>
            Name of the thumbnail used to identify the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.AllowedAsRoot">
            <summary>
            Gets or Sets a boolean indicating whether this ContentType is allowed at the root
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.IsContainer">
            <summary>
            Gets or Sets a boolean indicating whether this ContentType is a Container
            </summary>
            <remarks>
            ContentType Containers doesn't show children in the tree, but rather in grid-type view.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.IsElement">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.AllowedContentTypes">
            <summary>
            Gets or sets a list of integer Ids for allowed ContentTypes
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Variations">
            <summary>
            Gets or sets the content variation of the content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.SupportsVariation(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.SupportsPropertyVariation(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.PropertyGroups">
            <inheritdoc />
            <remarks>
            <para>A PropertyGroup corresponds to a Tab in the UI</para>
            <para>Marked DoNotClone because we will manually deal with cloning and the event handlers</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.PropertyTypes">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.NoGroupPropertyTypes">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.HasPropertyTypeBeenRemoved">
            <summary>
            A boolean flag indicating if a property type has been removed from this instance.
            </summary>
            <remarks>
            This is currently (specifically) used in order to know that we need to refresh the content cache which
            needs to occur when a property has been removed from a content type
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.PropertyTypeExists(System.String)">
            <summary>
            Checks whether a PropertyType with a given alias already exists
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>Returns <c>True</c> if a PropertyType with the passed in alias exists, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.AddPropertyGroup(System.String)">
            <summary>
            Adds a PropertyGroup.
            This method will also check if a group already exists with the same name and link it to the parent.
            </summary>
            <param name="groupName">Name of the PropertyGroup to add</param>
            <returns>Returns <c>True</c> if a PropertyGroup with the passed in name was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.AddPropertyType(Umbraco.Core.Models.PropertyType,System.String)">
            <summary>
            Adds a PropertyType to a specific PropertyGroup
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <param name="propertyGroupName">Name of the PropertyGroup to add the PropertyType to</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.AddPropertyType(Umbraco.Core.Models.PropertyType)">
            <summary>
            Adds a PropertyType, which does not belong to a PropertyGroup.
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.MovePropertyType(System.String,System.String)">
            <summary>
            Moves a PropertyType to a specified PropertyGroup
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to move</param>
            <param name="propertyGroupName">Name of the PropertyGroup to move the PropertyType to</param>
            <returns></returns>
            <remarks>If <paramref name="propertyGroupName"/> is null then the property is moved back to
            "generic properties" ie does not have a tab anymore.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.RemovePropertyType(System.String)">
            <summary>
            Removes a PropertyType from the current ContentType
            </summary>
            <param name="propertyTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.PropertyType"/> to remove</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.RemovePropertyGroup(System.String)">
            <summary>
            Removes a PropertyGroup from the current ContentType
            </summary>
            <param name="propertyGroupName">Name of the <see cref="T:Umbraco.Core.Models.PropertyGroup"/> to remove</param>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.PropertyTypeCollection">
            <summary>
            PropertyTypes that are not part of a PropertyGroup
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.IsDirty">
            <summary>
            Indicates whether the current entity is dirty.
            </summary>
            <returns>True if entity is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.ResetDirtyProperties">
            <summary>
            Resets dirty properties by clearing the dictionary used to track changes.
            </summary>
            <remarks>
            Please note that resetting the dirty properties could potentially
            obstruct the saving of a new or updated entity.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeCompositionBase">
            <summary>
            Represents an abstract class for composition specific ContentType properties and methods
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeCompositionBase.ContentTypeComposition">
            <summary>
            Gets or sets the content types that compose this content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeCompositionBase.CompositionPropertyGroups">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeCompositionBase.CompositionPropertyTypes">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeCompositionBase.RawComposedPropertyTypes">
            <summary>
            Gets the property types obtained via composition.
            </summary>
            <remarks>
            <para>Gets them raw, ie with their original variation.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.AddContentType(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Adds a content type to the composition.
            </summary>
            <param name="contentType">The content type to add.</param>
            <returns>True if the content type was added, otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.RemoveContentType(System.String)">
            <summary>
            Removes a content type with a specified alias from the composition.
            </summary>
            <param name="alias">The alias of the content type to remove.</param>
            <returns>True if the content type was removed, otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.ContentTypeCompositionExists(System.String)">
            <summary>
            Checks if a ContentType with the supplied alias exists in the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Core.Models.ContentType"/></param>
            <returns>True if ContentType with alias exists, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.PropertyTypeExists(System.String)">
            <summary>
            Checks whether a PropertyType with a given alias already exists
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>Returns <c>True</c> if a PropertyType with the passed in alias exists, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.AddPropertyGroup(System.String)">
            <summary>
            Adds a PropertyGroup.
            </summary>
            <param name="groupName">Name of the PropertyGroup to add</param>
            <returns>Returns <c>True</c> if a PropertyGroup with the passed in name was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.AddPropertyType(Umbraco.Core.Models.PropertyType,System.String)">
            <summary>
            Adds a PropertyType to a specific PropertyGroup
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <param name="propertyGroupName">Name of the PropertyGroup to add the PropertyType to</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.CompositionAliases">
            <summary>
            Gets a list of ContentType aliases from the current composition
            </summary>
            <returns>An enumerable list of string aliases</returns>
            <remarks>Does not contain the alias of the Current ContentType</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.CompositionIds">
            <summary>
            Gets a list of ContentType Ids from the current composition
            </summary>
            <returns>An enumerable list of integer ids</returns>
            <remarks>Does not contain the Id of the Current ContentType</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeSort">
            <summary>
            Represents a POCO for setting sort order on a ContentType reference
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeSort.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeSort.Id">
            <summary>
            Gets or sets the Id of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeSort.SortOrder">
            <summary>
            Gets or sets the Sort Order of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeSort.Alias">
            <summary>
            Gets or sets the Alias of the ContentType
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentVariation">
            <summary>
            Indicates how values can vary.
            </summary>
            <remarks>
            <para>Values can vary by nothing, or culture, or segment, or both.</para>
            <para>Varying by culture implies that each culture version of a document can
            be available or not, and published or not, individually. Varying by segment
            is a property-level thing.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Models.ContentVariation.Nothing">
            <summary>
            Values do not vary.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentVariation.Culture">
            <summary>
            Values vary by culture.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentVariation.Segment">
            <summary>
            Values vary by segment.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ContentVariation.CultureAndSegment">
            <summary>
            Values vary by culture and segment.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ValueStorageType">
            <summary>
            Represents the supported database types for storing a value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ValueStorageType.Ntext">
            <summary>
            Store property value as NText.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ValueStorageType.Nvarchar">
            <summary>
            Store property value as NVarChar.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ValueStorageType.Integer">
            <summary>
            Store property value as Integer.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ValueStorageType.Date">
            <summary>
            Store property value as Date.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.ValueStorageType.Decimal">
            <summary>
            Store property value as Decimal.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.DataType">
            <summary>
            Implements <see cref="T:Umbraco.Core.Models.IDataType"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.DataType.#ctor(Umbraco.Core.PropertyEditors.IDataEditor,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.DataType"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataType.Editor">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.DataType.EditorAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.DataType.DatabaseType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.DataType.Configuration">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.DataType.SetLazyConfiguration(System.String)">
            <summary>
            Lazily set the configuration as a serialized json string.
            </summary>
            <remarks>
            <para>Will be de-serialized on-demand.</para>
            <para>This method is meant to be used when building entities from database, exclusively.
            It does NOT register a property change to dirty. It ignores the fact that the configuration
            may contain the database type, because the datatype DTO should also contain that database
            type, and they should be the same.</para>
            <para>Think before using!</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.DataType.GetLazyConfiguration">
            <summary>
            Gets a lazy configuration.
            </summary>
            <remarks>
            <para>The configuration object will be lazily de-serialized.</para>
            <para>This method is meant to be used when creating published datatypes, exclusively.</para>
            <para>Think before using!</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.DeepCloneHelper.ClonePropertyInfo">
            <summary>
            Stores the metadata for the properties for a given type so we know how to create them
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.DeepCloneHelper.PropCache">
            <summary>
            Used to avoid constant reflection (perf)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.DeepCloneHelper.DeepCloneRefProperties(Umbraco.Core.Models.IDeepCloneable,Umbraco.Core.Models.IDeepCloneable)">
            <summary>
            Used to deep clone any reference properties on the object (should be done after a MemberwiseClone for which the outcome is 'output')
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.DictionaryItem">
            <summary>
            Represents a Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryItem.ParentId">
            <summary>
            Gets or Sets the Parent Id of the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryItem.ItemKey">
            <summary>
            Gets or sets the Key for the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryItem.Translations">
            <summary>
            Gets or sets a list of translations for the Dictionary Item
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.DictionaryItemExtensions.GetTranslatedValue(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Returns the translation value for the language id, if no translation is found it returns an empty string
            </summary>
            <param name="d"></param>
            <param name="languageId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.DictionaryItemExtensions.GetDefaultValue(Umbraco.Core.Models.IDictionaryItem)">
            <summary>
            Returns the default translated value based on the default language
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.DictionaryTranslation">
            <summary>
            Represents a translation for a <see cref="T:Umbraco.Core.Models.DictionaryItem"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryTranslation.Language">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Core.Models.DictionaryTranslation.Language"/> for the translation
            </summary>
            <remarks>
            Marked as DoNotClone - TODO: this member shouldn't really exist here in the first place, the DictionaryItem
            class will have a deep hierarchy of objects which all get deep cloned which we don't want. This should have simply
            just referenced a language ID not the actual language object. In v8 we need to fix this.
            We're going to have to do the same hacky stuff we had to do with the Template/File contents so that this is returned
            on a callback.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryTranslation.Value">
            <summary>
            Gets or sets the translated text
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.DoNotCloneAttribute">
             <summary>
             Used to attribute properties that have a setter and are a reference type
             that should be ignored for cloning when using the DeepCloneHelper
             </summary>
             <remarks>
            
             This attribute must be used:
             * when the property is backed by a field but the result of the property is the un-natural data stored in the field
            
             This attribute should not be used:
             * when the property is virtual
             * when the setter performs additional required logic other than just setting the underlying field
            
             </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.EntityContainer">
            <summary>
            Represents a folder for organizing entities such as content types and data types.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityContainer.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of an <see cref="T:Umbraco.Core.Models.EntityContainer"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityContainer.#ctor(System.Int32,System.Guid,System.Int32,System.String,System.Int32,System.Int32,System.Guid,System.String,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:Umbraco.Core.Models.EntityContainer"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityContainer.ContainedObjectType">
            <summary>
            Gets or sets the node object type of the contained objects.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityContainer.ContainerObjectType">
            <summary>
            Gets the node object type of the container objects.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityContainer.GetContainerObjectType(System.Guid)">
            <summary>
            Gets the container object type corresponding to a contained object type.
            </summary>
            <param name="containedObjectType">The contained object type.</param>
            <returns>The object type of containers containing objects of the contained object type.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.EntityContainer.GetContainedObjectType(System.Guid)">
            <summary>
            Gets the contained object type corresponding to a container object type.
            </summary>
            <param name="containerObjectType">The container object type.</param>
            <returns>The object type of objects that containers of the container object type can contain.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.EntityExtensions.GetAdditionalDataValueIgnoreCase(Umbraco.Core.Models.Entities.IHaveAdditionalData,System.String,System.Object)">
            <summary>
            Gets additional data.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.File">
            <summary>
            Represents an abstract file which provides basic functionality for a File with an Alias and Name
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.Name">
            <summary>
            Gets or sets the Name of the File including extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.Alias">
            <summary>
            Gets or sets the Alias of the File, which is the name without the extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.Path">
            <summary>
            Gets or sets the Path to the File from the root of the file's associated IFileSystem
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.OriginalPath">
            <summary>
            Gets the original path of the file
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.File.ResetOriginalPath">
            <summary>
            Called to re-set the OriginalPath to the Path
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.Content">
            <summary>
            Gets or sets the Content of a File
            </summary>
            <remarks>Marked as DoNotClone, because it should be lazy-reloaded from disk.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.File.VirtualPath">
            <summary>
            Gets or sets the file's virtual path (i.e. the file path relative to the root of the website)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.GridValue">
            <summary>
            A model representing the value saved for the grid
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IContent">
            <summary>
            Represents a document.
            </summary>
            <remarks>
            <para>A document can be published, rendered by a template.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.ContentSchedule">
            <summary>
            Gets or sets the content schedule
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.TemplateId">
            <summary>
            Gets or sets the template id used to render the content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.Published">
            <summary>
            Gets a value indicating whether the content is published.
            </summary>
            <remarks>The <see cref="P:Umbraco.Core.Models.IContent.PublishedVersionId"/> property tells you which version of the content is currently published.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.Edited">
            <summary>
            Gets a value indicating whether the content has been edited.
            </summary>
            <remarks>Will return `true` once unpublished edits have been made after the version with <see cref="P:Umbraco.Core.Models.IContent.PublishedVersionId"/> has been published.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.PublishedVersionId">
            <summary>
            Gets the version identifier for the currently published version of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.Blueprint">
            <summary>
            Gets a value indicating whether the content item is a blueprint.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.PublishTemplateId">
            <summary>
            Gets the template id used to render the published version of the content.
            </summary>
            <remarks>When editing the content, the template can change, but this will not until the content is published.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.PublishName">
            <summary>
            Gets the name of the published version of the content.
            </summary>
            <remarks>When editing the content, the name can change, but this will not until the content is published.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.PublisherId">
            <summary>
            Gets the identifier of the user who published the content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.PublishDate">
            <summary>
            Gets the date and time the content was published.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContent.IsCulturePublished(System.String)">
            <summary>
            Gets a value indicating whether a culture is published.
            </summary>
            <remarks>
            <para>A culture becomes published whenever values for this culture are published,
            and the content published name for this culture is non-null. It becomes non-published
            whenever values for this culture are unpublished.</para>
            <para>A culture becomes published as soon as PublishCulture has been invoked,
            even though the document might not have been saved yet (and can have no identity).</para>
            <para>Does not support the '*' wildcard (returns false).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContent.GetPublishDate(System.String)">
            <summary>
            Gets the date a culture was published.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContent.IsCultureEdited(System.String)">
            <summary>
            Gets a value indicated whether a given culture is edited.
            </summary>
            <remarks>
            <para>A culture is edited when it is available, and not published or published but
            with changes.</para>
            <para>A culture can be edited even though the document might now have been saved yet (and can have no identity).</para>
            <para>Does not support the '*' wildcard (returns false).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContent.GetPublishName(System.String)">
            <summary>
            Gets the name of the published version of the content for a given culture.
            </summary>
            <remarks>
            <para>When editing the content, the name can change, but this will not until the content is published.</para>
            <para>When <paramref name="culture"/> is <c>null</c>, gets the invariant
            language, which is the value of the <see cref="P:Umbraco.Core.Models.IContent.PublishName"/> property.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.PublishCultureInfos">
            <summary>
            Gets the published culture infos of the content.
            </summary>
            <remarks>
            <para>Because a dictionary key cannot be <c>null</c> this cannot get the invariant
            name, which must be get via the <see cref="P:Umbraco.Core.Models.IContent.PublishName"/> property.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.PublishedCultures">
            <summary>
            Gets the published cultures.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.EditedCultures">
            <summary>
            Gets the edited cultures.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContent.DeepCloneWithResetIdentities">
            <summary>
            Creates a deep clone of the current entity with its identity/alias and it's property identities reset
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.IContentBase">
            <summary>
            Provides a base class for content items.
            </summary>
            <remarks>
            <para>Content items are documents, medias and members.</para>
            <para>Content items have a content type, and properties.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.ContentTypeId">
            <summary>
            Integer Id of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.ContentType">
            <summary>
            Gets the content type of this content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.WriterId">
            <summary>
            Gets the identifier of the writer.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.VersionId">
            <summary>
            Gets the version identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.SetCultureName(System.String,System.String)">
            <summary>
            Sets the name of the content item for a specified culture.
            </summary>
            <remarks>
            <para>When <paramref name="culture"/> is null, sets the invariant
            culture name, which sets the <see cref="P:Umbraco.Core.Models.Entities.TreeEntityBase.Name"/> property.</para>
            <para>When <paramref name="culture"/> is not null, throws if the content
            type does not vary by culture.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.GetCultureName(System.String)">
            <summary>
            Gets the name of the content item for a specified language.
            </summary>
            <remarks>
            <para>When <paramref name="culture"/> is null, gets the invariant
            culture name, which is the value of the <see cref="P:Umbraco.Core.Models.Entities.TreeEntityBase.Name"/> property.</para>
            <para>When <paramref name="culture"/> is not null, and the content type
            does not vary by culture, returns null.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.CultureInfos">
            <summary>
            Gets culture infos of the content item.
            </summary>
            <remarks>
            <para>Because a dictionary key cannot be <c>null</c> this cannot contain the invariant
            culture name, which must be get or set via the <see cref="P:Umbraco.Core.Models.Entities.TreeEntityBase.Name"/> property.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.AvailableCultures">
            <summary>
            Gets the available cultures.
            </summary>
            <remarks>
            <para>Cannot contain the invariant culture, which is always available.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.IsCultureAvailable(System.String)">
            <summary>
            Gets a value indicating whether a given culture is available.
            </summary>
            <remarks>
            <para>A culture becomes available whenever the content name for this culture is
            non-null, and it becomes unavailable whenever the content name is null.</para>
            <para>Returns <c>false</c> for the invariant culture, in order to be consistent
            with <seealso cref="P:Umbraco.Core.Models.IContentBase.AvailableCultures"/>, even though the invariant culture is
            always available.</para>
            <para>Does not support the '*' wildcard (returns false).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.GetUpdateDate(System.String)">
            <summary>
            Gets the date a culture was updated.
            </summary>
            <remarks>
            <para>When <paramref name="culture" /> is <c>null</c>, returns <c>null</c>.</para>
            <para>If the specified culture is not available, returns <c>null</c>.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.Properties">
            <summary>
            List of properties, which make up all the data available for this Content object
            </summary>
            <remarks>Properties are loaded as part of the Content object graph</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.HasProperty(System.String)">
            <summary>
            Gets a value indicating whether the content entity has a property with the supplied alias.
            </summary>
            <remarks>Indicates that the content entity has a property with the supplied alias, but
            not necessarily that the content has a value for that property. Could be missing.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.GetValue(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the value of a Property
            </summary>
            <remarks>Values 'null' and 'empty' are equivalent for culture and segment.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.GetValue``1(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the typed value of a Property
            </summary>
            <remarks>Values 'null' and 'empty' are equivalent for culture and segment.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.SetValue(System.String,System.Object,System.String,System.String)">
            <summary>
            Sets the (edited) value of a Property
            </summary>
            <remarks>Values 'null' and 'empty' are equivalent for culture and segment.</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.IContentType">
            <summary>
            Defines a ContentType, which Content is based on
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentType.DefaultTemplate">
            <summary>
            Gets the default Template of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentType.AllowedTemplates">
            <summary>
            Gets or Sets a list of Templates which are allowed for the ContentType
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContentType.IsAllowedTemplate(System.Int32)">
            <summary>
            Determines if AllowedTemplates contains templateId
            </summary>
            <param name="templateId">The template id to check</param>
            <returns>True if AllowedTemplates contains the templateId else False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentType.IsAllowedTemplate(System.String)">
            <summary>
            Determines if AllowedTemplates contains templateId
            </summary>
            <param name="templateAlias">The template alias to check</param>
            <returns>True if AllowedTemplates contains the templateAlias else False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentType.SetDefaultTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Sets the default template for the ContentType
            </summary>
            <param name="template">Default <see cref="T:Umbraco.Core.Models.ITemplate"/></param>
        </member>
        <member name="M:Umbraco.Core.Models.IContentType.RemoveTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Removes a template from the list of allowed templates
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to remove</param>
            <returns>True if template was removed, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentType.DeepCloneWithResetIdentities(System.String)">
            <summary>
            Creates a deep clone of the current entity with its identity/alias and it's property identities reset
            </summary>
            <param name="newAlias"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.IContentTypeBase">
            <summary>
            Defines the base for a ContentType with properties that
            are shared between ContentTypes and MediaTypes.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Alias">
            <summary>
            Gets or Sets the Alias of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Description">
            <summary>
            Gets or Sets the Description for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Icon">
             <summary>
             Gets or sets the icon for the content type. The value is a CSS class name representing
             the icon (eg. <c>icon-home</c>) along with an optional CSS class name representing the
             color (eg. <c>icon-blue</c>). Put together, the value for this scenario would be
             <c>icon-home color-blue</c>.
            
             If a class name for the color isn't specified, the icon color will default to black.
             </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Thumbnail">
            <summary>
            Gets or Sets the Thumbnail for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.AllowedAsRoot">
            <summary>
            Gets or Sets a boolean indicating whether this ContentType is allowed at the root
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.IsContainer">
            <summary>
            Gets or Sets a boolean indicating whether this ContentType is a Container
            </summary>
            <remarks>
            ContentType Containers doesn't show children in the tree, but rather in grid-type view.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.IsElement">
            <summary>
            Gets or sets a value indicating whether this content type is for an element.
            </summary>
            <remarks>
            <para>By default a content type is for a true media, member or document, but
            it can also be for an element, ie a subset that can for instance be used in
            nested content.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Variations">
            <summary>
            Gets or sets the content variation of the content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.SupportsVariation(System.String,System.String,System.Boolean)">
            <summary>
            Validates that a combination of culture and segment is valid for the content type.
            </summary>
            <param name="culture">The culture.</param>
            <param name="segment">The segment.</param>
            <param name="wildcards">A value indicating whether wildcard are supported.</param>
            <returns>True if the combination is valid; otherwise false.</returns>
            <remarks>
            <para>The combination must match the content type variation exactly. For instance, if the content type varies by culture,
            then an invariant culture would be invalid.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.SupportsPropertyVariation(System.String,System.String,System.Boolean)">
            <summary>
            Validates that a combination of culture and segment is valid for the content type properties.
            </summary>
            <param name="culture">The culture.</param>
            <param name="segment">The segment.</param>
            <param name="wildcards">A value indicating whether wildcard are supported.</param>
            <returns>True if the combination is valid; otherwise false.</returns>
            <remarks>
            <para>The combination must be valid for properties of the content type. For instance, if the content type varies by culture,
            then an invariant culture is valid, because some properties may be invariant. On the other hand, if the content type is invariant,
            then a variant culture is invalid, because no property could possibly vary by culture.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.AllowedContentTypes">
            <summary>
            Gets or Sets a list of integer Ids of the ContentTypes allowed under the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.PropertyGroups">
            <summary>
            Gets or sets the local property groups.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.PropertyTypes">
            <summary>
            Gets all local property types all local property groups or ungrouped.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.NoGroupPropertyTypes">
            <summary>
            Gets or sets the local property types that do not belong to a group.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.RemovePropertyType(System.String)">
            <summary>
            Removes a PropertyType from the current ContentType
            </summary>
            <param name="propertyTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.PropertyType"/> to remove</param>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.RemovePropertyGroup(System.String)">
            <summary>
            Removes a PropertyGroup from the current ContentType
            </summary>
            <param name="propertyGroupName">Name of the <see cref="T:Umbraco.Core.Models.PropertyGroup"/> to remove</param>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.PropertyTypeExists(System.String)">
            <summary>
            Checks whether a PropertyType with a given alias already exists
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>Returns <c>True</c> if a PropertyType with the passed in alias exists, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.AddPropertyType(Umbraco.Core.Models.PropertyType,System.String)">
            <summary>
            Adds a PropertyType to a specific PropertyGroup
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <param name="propertyGroupName">Name of the PropertyGroup to add the PropertyType to</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.AddPropertyType(Umbraco.Core.Models.PropertyType)">
            <summary>
            Adds a PropertyType, which does not belong to a PropertyGroup.
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.AddPropertyGroup(System.String)">
            <summary>
            Adds a PropertyGroup.
            This method will also check if a group already exists with the same name and link it to the parent.
            </summary>
            <param name="groupName">Name of the PropertyGroup to add</param>
            <returns>Returns <c>True</c> if a PropertyGroup with the passed in name was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.MovePropertyType(System.String,System.String)">
            <summary>
            Moves a PropertyType to a specified PropertyGroup
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to move</param>
            <param name="propertyGroupName">Name of the PropertyGroup to move the PropertyType to</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.ToSimple">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.ISimpleContentType"/> corresponding to this content type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IContentTypeComposition">
            <summary>
            Defines the Composition of a ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeComposition.ContentTypeComposition">
            <summary>
            Gets or sets the content types that compose this content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeComposition.CompositionPropertyGroups">
            <summary>
            Gets the property groups for the entire composition.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeComposition.CompositionPropertyTypes">
            <summary>
            Gets the property types for the entire composition.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.AddContentType(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Adds a new ContentType to the list of composite ContentTypes
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Core.Models.IContentType"/> to add</param>
            <returns>True if ContentType was added, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.RemoveContentType(System.String)">
            <summary>
            Removes a ContentType with the supplied alias from the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>True if ContentType was removed, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.ContentTypeCompositionExists(System.String)">
            <summary>
            Checks if a ContentType with the supplied alias exists in the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>True if ContentType with alias exists, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.CompositionAliases">
            <summary>
            Gets a list of ContentType aliases from the current composition
            </summary>
            <returns>An enumerable list of string aliases</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.CompositionIds">
            <summary>
            Gets a list of ContentType Ids from the current composition
            </summary>
            <returns>An enumerable list of integer ids</returns>
        </member>
        <member name="T:Umbraco.Core.Models.IDataType">
            <summary>
            Represents a data type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDataType.Editor">
            <summary>
            Gets or sets the property editor.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDataType.EditorAlias">
            <summary>
            Gets the property editor alias.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDataType.DatabaseType">
            <summary>
            Gets or sets the database type for the data type values.
            </summary>
            <remarks>In most cases this is imposed by the property editor, but some editors
            may support storing different types.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IDataType.Configuration">
            <summary>
            Gets or sets the configuration object.
            </summary>
            <remarks>
            <para>The configuration object is serialized to Json and stored into the database.</para>
            <para>The serialized Json is deserialized by the property editor, which by default should
            return a Dictionary{string, object} but could return a typed object e.g. MyEditor.Configuration.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.IDeepCloneable">
            <summary>
            Provides a mean to deep-clone an object.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryItem.ParentId">
            <summary>
            Gets or Sets the Parent Id of the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryItem.ItemKey">
            <summary>
            Gets or sets the Key for the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryItem.Translations">
            <summary>
            Gets or sets a list of translations for the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryTranslation.Language">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Core.Models.IDictionaryTranslation.Language"/> for the translation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryTranslation.Value">
            <summary>
            Gets or sets the translated text
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDomain.LanguageIsoCode">
            <summary>
            Readonly value of the language ISO code for the domain
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IFile">
            <summary>
            Defines a File
            </summary>
            <remarks>Used for Scripts, Stylesheets and Templates</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.Name">
            <summary>
            Gets the Name of the File including extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.Alias">
            <summary>
            Gets the Alias of the File, which is the name without the extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.Path">
            <summary>
            Gets or sets the Path to the File from the root of the file's associated IFileSystem
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.OriginalPath">
            <summary>
            Gets the original path of the file
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IFile.ResetOriginalPath">
            <summary>
            Called to re-set the OriginalPath to the Path
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.Content">
            <summary>
            Gets or sets the Content of a File
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.VirtualPath">
            <summary>
            Gets or sets the file's virtual path (i.e. the file path relative to the root of the website)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ILanguage">
            <summary>
            Represents a language.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ILanguage.IsoCode">
            <summary>
            Gets or sets the ISO code of the language.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ILanguage.CultureName">
            <summary>
            Gets or sets the culture name of the language.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ILanguage.CultureInfo">
            <summary>
            Gets the <see cref="P:Umbraco.Core.Models.ILanguage.CultureInfo"/> object for the language.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ILanguage.IsDefault">
            <summary>
            Gets or sets a value indicating whether the language is the default language.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ILanguage.IsMandatory">
            <summary>
            Gets or sets a value indicating whether the language is mandatory.
            </summary>
            <remarks>
            <para>When a language is mandatory, a multi-lingual document cannot be published
            without that language being published, and unpublishing that language unpublishes
            the entire document.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ILanguage.FallbackLanguageId">
            <summary>
            Gets or sets the identifier of a fallback language.
            </summary>
            <remarks>
            <para>The fallback language can be used in multi-lingual scenarios, to help
            define fallback strategies when a value does not exist for a requested language.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.IMacro">
            <summary>
            Defines a Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.Alias">
            <summary>
            Gets or sets the alias of the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.Name">
            <summary>
            Gets or sets the name of the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.UseInEditor">
            <summary>
            Gets or sets a boolean indicating whether the Macro can be used in an Editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.CacheDuration">
            <summary>
            Gets or sets the Cache Duration for the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.CacheByPage">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be Cached by Page
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.CacheByMember">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be Cached Personally
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.DontRender">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be rendered in an Editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.MacroSource">
            <summary>
            Gets or set the path to the macro source to render
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.MacroType">
            <summary>
            Gets or set the macro type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.Properties">
            <summary>
            Gets or sets a list of Macro Properties
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IMacroProperty">
            <summary>
            Defines a Property for a Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroProperty.Alias">
            <summary>
            Gets or sets the Alias of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroProperty.Name">
            <summary>
            Gets or sets the Name of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroProperty.SortOrder">
            <summary>
            Gets or sets the Sort Order of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroProperty.EditorAlias">
            <summary>
            Gets or sets the parameter editor alias
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IMediaType">
            <summary>
            Defines a ContentType, which Media is based on
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IMediaType.DeepCloneWithResetIdentities(System.String)">
            <summary>
            Creates a deep clone of the current entity with its identity/alias and it's property identities reset
            </summary>
            <param name="newAlias"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.IMember.ContentTypeAlias">
            <summary>
            String alias of the default ContentType
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IMemberGroup">
            <summary>
            Represents a member type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMemberGroup.Name">
            <summary>
            The name of the member group
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMemberGroup.CreatorId">
            <summary>
            Profile of the user who created this Entity
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IMemberType">
            <summary>
            Defines a MemberType, which Member is based on
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IMemberType.MemberCanEditProperty(System.String)">
            <summary>
            Gets a boolean indicating whether a Property is editable by the Member.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IMemberType.MemberCanViewProperty(System.String)">
            <summary>
            Gets a boolean indicating whether a Property is visible on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IMemberType.IsSensitiveProperty(System.String)">
            <summary>
            Gets a boolean indicating whether a Property is marked as storing sensitive values on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IMemberType.SetMemberCanEditProperty(System.String,System.Boolean)">
            <summary>
            Sets a boolean indicating whether a Property is editable by the Member.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="M:Umbraco.Core.Models.IMemberType.SetMemberCanViewProperty(System.String,System.Boolean)">
            <summary>
            Sets a boolean indicating whether a Property is visible on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="M:Umbraco.Core.Models.IMemberType.SetIsSensitiveProperty(System.String,System.Boolean)">
            <summary>
            Sets a boolean indicating whether a Property is a sensitive value on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="T:Umbraco.Core.Models.IRedirectUrl">
            <summary>
            Represents a redirect URL.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRedirectUrl.ContentId">
            <summary>
            Gets or sets the identifier of the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRedirectUrl.ContentKey">
            <summary>
            Gets or sets the unique key identifying the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRedirectUrl.CreateDateUtc">
            <summary>
            Gets or sets the redirect URL creation date.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRedirectUrl.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRedirectUrl.Url">
            <summary>
            Gets or sets the redirect URL route.
            </summary>
            <remarks>Is a proper Umbraco route eg /path/to/foo or 123/path/tofoo.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IRelation.ParentId">
            <summary>
            Gets or sets the Parent Id of the Relation (Source)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelation.ChildId">
            <summary>
            Gets or sets the Child Id of the Relation (Destination)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelation.RelationType">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Core.Models.IRelation.RelationType"/> for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelation.Comment">
            <summary>
            Gets or sets a comment for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelation.RelationTypeId">
            <summary>
            Gets the Id of the <see cref="P:Umbraco.Core.Models.IRelation.RelationType"/> that this Relation is based on.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelationType.Name">
            <summary>
            Gets or sets the Name of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelationType.Alias">
            <summary>
            Gets or sets the Alias of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelationType.IsBidirectional">
            <summary>
            Gets or sets a boolean indicating whether the RelationType is Bidirectional (true) or Parent to Child (false)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelationType.ParentObjectType">
            <summary>
            Gets or sets the Parents object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IRelationType.ChildObjectType">
            <summary>
            Gets or sets the Childs object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IServerRegistration.ServerIdentity">
            <summary>
            Gets or sets the server unique identity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IServerRegistration.IsActive">
            <summary>
            Gets or sets a value indicating whether the server is active.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IServerRegistration.IsMaster">
            <summary>
            Gets or sets a value indicating whether the server is master.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IServerRegistration.Registered">
            <summary>
            Gets the date and time the registration was created.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IServerRegistration.Accessed">
            <summary>
            Gets the date and time the registration was last accessed.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ITag">
            <summary>
            Represents a tag entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ITag.Group">
            <summary>
            Gets or sets the tag group.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ITag.Text">
            <summary>
            Gets or sets the tag text.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ITag.LanguageId">
            <summary>
            Gets or sets the tag language.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ITag.NodeCount">
            <summary>
            Gets the number of nodes tagged with this tag.
            </summary>
            <remarks>Only when returning from queries.</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.ITemplate">
            <summary>
            Defines a Template File (Mvc View)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ITemplate.Name">
            <summary>
            Gets the Name of the File including extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ITemplate.Alias">
            <summary>
            Gets the Alias of the File, which is the name without the extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ITemplate.IsMasterTemplate">
            <summary>
            Returns true if the template is used as a layout for other templates (i.e. it has 'children')
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ITemplate.MasterTemplateAlias">
            <summary>
            returns the master template alias
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ITemplate.SetMasterTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Set the mastertemplate
            </summary>
            <param name="masterTemplate"></param>
        </member>
        <member name="T:Umbraco.Core.Models.Language">
            <summary>
            Represents a Language.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Language.IsoCode">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Language.CultureName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Language.CultureInfo">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Language.IsDefault">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Language.IsMandatory">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Language.FallbackLanguageId">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.Macro">
            <summary>
            Represents a Macro
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Macro.#ctor(System.Int32,System.Guid,System.Boolean,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,Umbraco.Core.Models.MacroTypes)">
            <summary>
            Creates an item with pre-filled properties
            </summary>
            <param name="id"></param>
            <param name="key"></param>
            <param name="useInEditor"></param>
            <param name="cacheDuration"></param>
            <param name="alias"></param>
            <param name="name"></param>
            <param name="cacheByPage"></param>
            <param name="cacheByMember"></param>
            <param name="dontRender"></param>
            <param name="macroSource"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Macro.#ctor(System.String,System.String,System.String,Umbraco.Core.Models.MacroTypes,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates an instance for persisting a new item
            </summary>
            <param name="useInEditor"></param>
            <param name="cacheDuration"></param>
            <param name="alias"></param>
            <param name="name"></param>
            <param name="cacheByPage"></param>
            <param name="cacheByMember"></param>
            <param name="dontRender"></param>
            <param name="macroSource"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Macro.PropertyDataChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            When some data of a property has changed ensure our Properties flag is dirty
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.AddedProperties">
            <summary>
            Used internally to check if we need to add a section in the repository to the db
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.RemovedProperties">
            <summary>
            Used internally to check if we need to remove  a section in the repository to the db
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.Alias">
            <summary>
            Gets or sets the alias of the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.Name">
            <summary>
            Gets or sets the name of the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.UseInEditor">
            <summary>
            Gets or sets a boolean indicating whether the Macro can be used in an Editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.CacheDuration">
            <summary>
            Gets or sets the Cache Duration for the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.CacheByPage">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be Cached by Page
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.CacheByMember">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be Cached Personally
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.DontRender">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be rendered in an Editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.MacroSource">
            <summary>
            Gets or set the path to the Partial View to render
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.MacroType">
            <summary>
            Gets or set the path to the Partial View to render
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.Properties">
            <summary>
            Gets or sets a list of Macro Properties
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.MacroProperty">
            <summary>
            Represents a Macro Property
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.MacroProperty.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Ctor for creating a new property
            </summary>
            <param name="alias"></param>
            <param name="name"></param>
            <param name="sortOrder"></param>
            <param name="editorAlias"></param>
        </member>
        <member name="M:Umbraco.Core.Models.MacroProperty.#ctor(System.Int32,System.Guid,System.String,System.String,System.Int32,System.String)">
            <summary>
            Ctor for creating an existing property
            </summary>
            <param name="id"></param>
            <param name="key"></param>
            <param name="alias"></param>
            <param name="name"></param>
            <param name="sortOrder"></param>
            <param name="editorAlias"></param>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.Key">
            <summary>
            Gets or sets the Key of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.Id">
            <summary>
            Gets or sets the Alias of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.Alias">
            <summary>
            Gets or sets the Alias of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.Name">
            <summary>
            Gets or sets the Name of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.SortOrder">
            <summary>
            Gets or sets the Sort Order of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.EditorAlias">
            <summary>
            Gets or sets the Type for this Property
            </summary>
            <remarks>
            The MacroPropertyTypes acts as a plugin for Macros.
            All types was previously contained in the database, but has been ported to code.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.MacroPropertyCollection">
            <summary>
            A macro's property collection
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.MacroPropertyCollection.UpdateProperty(System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Used to update an existing macro property
            </summary>
            <param name="name"></param>
            <param name="sortOrder"></param>
            <param name="editorAlias"></param>
            <param name="currentAlias">
            The existing property alias
            </param>
            <param name="newAlias"></param>
        </member>
        <member name="T:Umbraco.Core.Models.MacroTypes">
            <summary>
            Enum for the various types of Macros
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Media">
            <summary>
            Represents a Media object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Media.#ctor(System.String,Umbraco.Core.Models.IMedia,Umbraco.Core.Models.IMediaType)">
            <summary>
            Constructor for creating a Media object
            </summary>
            <param name="name">name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</param>
            <param name="contentType">MediaType for the current Media object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.#ctor(System.String,Umbraco.Core.Models.IMedia,Umbraco.Core.Models.IMediaType,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Constructor for creating a Media object
            </summary>
            <param name="name">name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</param>
            <param name="contentType">MediaType for the current Media object</param>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.#ctor(System.String,System.Int32,Umbraco.Core.Models.IMediaType)">
            <summary>
            Constructor for creating a Media object
            </summary>
            <param name="name">name of the Media object</param>
            <param name="parentId">Id of the Parent IMedia</param>
            <param name="contentType">MediaType for the current Media object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.#ctor(System.String,System.Int32,Umbraco.Core.Models.IMediaType,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Constructor for creating a Media object
            </summary>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of the Parent IMedia</param>
            <param name="contentType">MediaType for the current Media object</param>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.ChangeContentType(Umbraco.Core.Models.IMediaType)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IMediaType"/> for the current Media object
            </summary>
            <param name="contentType">New MediaType for this Media</param>
            <remarks>Leaves PropertyTypes intact after change</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Media.ChangeContentType(Umbraco.Core.Models.IMediaType,System.Boolean)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IMediaType"/> for the current Media object and removes PropertyTypes,
            which are not part of the new MediaType.
            </summary>
            <param name="contentType">New MediaType for this Media</param>
            <param name="clearProperties">Boolean indicating whether to clear PropertyTypes upon change</param>
        </member>
        <member name="M:Umbraco.Core.Models.MediaExtensions.GetUrl(Umbraco.Core.Models.IMedia,System.String,Umbraco.Core.Logging.ILogger)">
            <summary>
            Gets the URL of a media item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.MediaExtensions.GetUrls(Umbraco.Core.Models.IMedia,Umbraco.Core.Configuration.UmbracoSettings.IContentSection,Umbraco.Core.Logging.ILogger)">
            <summary>
            Gets the URLs of a media item.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.MediaType">
            <summary>
            Represents the content type that a <see cref="T:Umbraco.Core.Models.Media"/> object is based on
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.MediaType.#ctor(System.Int32)">
            <summary>
            Constuctor for creating a MediaType with the parent's id.
            </summary>
            <remarks>Only use this for creating MediaTypes at the root (with ParentId -1).</remarks>
            <param name="parentId"></param>
        </member>
        <member name="M:Umbraco.Core.Models.MediaType.#ctor(Umbraco.Core.Models.IMediaType)">
            <summary>
            Constuctor for creating a MediaType with the parent as an inherited type.
            </summary>
            <remarks>Use this to ensure inheritance from parent.</remarks>
            <param name="parent"></param>
        </member>
        <member name="M:Umbraco.Core.Models.MediaType.#ctor(Umbraco.Core.Models.IMediaType,System.String)">
            <summary>
            Constuctor for creating a MediaType with the parent as an inherited type.
            </summary>
            <remarks>Use this to ensure inheritance from parent.</remarks>
            <param name="parent"></param>
            <param name="alias"></param>
        </member>
        <member name="M:Umbraco.Core.Models.MediaType.ToSimple">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.MediaType.SupportsPublishing">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.MediaType.Umbraco#Core#Models#IMediaType#DeepCloneWithResetIdentities(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.Member">
            <summary>
            Represents a Member object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Member.#ctor(Umbraco.Core.Models.IMemberType)">
            <summary>
            Constructor for creating an empty Member object
            </summary>
            <param name="contentType">ContentType for the current Content object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Member.#ctor(System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Constructor for creating a Member object
            </summary>
            <param name="name">Name of the content</param>
            <param name="contentType">ContentType for the current Content object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Member.#ctor(System.String,System.String,System.String,Umbraco.Core.Models.IMemberType,System.Boolean)">
            <summary>
            Constructor for creating a Member object
            </summary>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Member.#ctor(System.String,System.String,System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Constructor for creating a Member object
            </summary>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="rawPasswordValue">
            The password value passed in to this parameter should be the encoded/encrypted/hashed format of the member's password
            </param>
            <param name="contentType"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Member.#ctor(System.String,System.String,System.String,System.String,Umbraco.Core.Models.IMemberType,System.Boolean)">
            <summary>
            Constructor for creating a Member object
            </summary>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="rawPasswordValue">
            The password value passed in to this parameter should be the encoded/encrypted/hashed format of the member's password
            </param>
            <param name="contentType"></param>
            <param name="isApproved"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Member.Username">
            <summary>
            Gets or sets the Username
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Member.Email">
            <summary>
            Gets or sets the Email
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Member.RawPasswordValue">
            <summary>
            Gets or sets the raw password value
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Member.Groups">
            <summary>
            Gets or sets the Groups that Member is part of
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Member.PasswordQuestion">
            <summary>
            Gets or sets the Password Question
            </summary>
            <remarks>
            Alias: umbracoMemberPasswordRetrievalQuestion
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.RawPasswordAnswerValue">
             <summary>
             Gets or sets the raw password answer value
             </summary>
             <remarks>
             For security reasons this value should be encrypted, the encryption process is handled by the membership provider
             Alias: umbracoMemberPasswordRetrievalAnswer
            
             Part of the standard properties collection.
             </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.Comments">
            <summary>
            Gets or set the comments for the member
            </summary>
            <remarks>
            Alias: umbracoMemberComments
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.IsApproved">
            <summary>
            Gets or sets a boolean indicating whether the Member is approved
            </summary>
            <remarks>
            Alias: umbracoMemberApproved
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.IsLockedOut">
            <summary>
            Gets or sets a boolean indicating whether the Member is locked out
            </summary>
            <remarks>
            Alias: umbracoMemberLockedOut
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.LastLoginDate">
            <summary>
            Gets or sets the date for last login
            </summary>
            <remarks>
            Alias: umbracoMemberLastLogin
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.LastPasswordChangeDate">
            <summary>
            Gest or sets the date for last password change
            </summary>
            <remarks>
            Alias: umbracoMemberLastPasswordChangeDate
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.LastLockoutDate">
            <summary>
            Gets or sets the date for when Member was locked out
            </summary>
            <remarks>
            Alias: umbracoMemberLastLockoutDate
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.FailedPasswordAttempts">
            <summary>
            Gets or sets the number of failed password attempts.
            This is the number of times the password was entered incorrectly upon login.
            </summary>
            <remarks>
            Alias: umbracoMemberFailedPasswordAttempts
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.ContentTypeAlias">
            <summary>
            String alias of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Member.ProviderUserKey">
            <summary>
            User key from the Provider.
            </summary>
            <remarks>
            When using standard umbraco provider this key will
            correspond to the guid UniqueId/Key.
            Otherwise it will the one available from the asp.net
            membership provider.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.AdditionalData">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Member.HasAdditionalData">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.MemberGroup">
            <summary>
            Represents a member type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MemberGroup.AdditionalData">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.MemberGroup.HasAdditionalData">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.MemberType">
            <summary>
            Represents the content type that a <see cref="T:Umbraco.Core.Models.Member"/> object is based on
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.MemberType.ToSimple">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.MemberType.SupportsPublishing">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.MemberType.Alias">
            <summary>
            The Alias of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MemberType.MemberTypePropertyTypes">
            <summary>
            Gets or Sets a Dictionary of Tuples (MemberCanEdit, VisibleOnProfile, IsSensitive) by the PropertyTypes' alias.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.MemberType.MemberCanEditProperty(System.String)">
            <summary>
            Gets a boolean indicating whether a Property is editable by the Member.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.MemberType.MemberCanViewProperty(System.String)">
            <summary>
            Gets a boolean indicating whether a Property is visible on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.MemberType.IsSensitiveProperty(System.String)">
            <summary>
            Gets a boolean indicating whether a Property is marked as storing sensitive values on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.MemberType.SetMemberCanEditProperty(System.String,System.Boolean)">
            <summary>
            Sets a boolean indicating whether a Property is editable by the Member.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="M:Umbraco.Core.Models.MemberType.SetMemberCanViewProperty(System.String,System.Boolean)">
            <summary>
            Sets a boolean indicating whether a Property is visible on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="M:Umbraco.Core.Models.MemberType.SetIsSensitiveProperty(System.String,System.Boolean)">
            <summary>
            Sets a boolean indicating whether a Property is a sensitive value on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="T:Umbraco.Core.Models.MemberTypePropertyProfileAccess">
            <summary>
            Used to track the property types that are visible/editable on member profiles
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PagedResult`1">
            <summary>
            Represents a paged result for a model collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Models.PartialView">
            <summary>
            Represents a Partial View file
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Property">
            <summary>
            Represents a property.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Property.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Property"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Property.#ctor(Umbraco.Core.Models.PropertyType)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Property"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Property.#ctor(System.Int32,Umbraco.Core.Models.PropertyType)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Property"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Property.PropertyValue">
            <summary>
            Represents a property value.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.PropertyValue.Culture">
            <summary>
            Gets or sets the culture of the property.
            </summary>
            <remarks>The culture is either null (invariant) or a non-empty string. If the property is
            set with an empty or whitespace value, its value is converted to null.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Property.PropertyValue.Segment">
            <summary>
            Gets or sets the segment of the property.
            </summary>
            <remarks>The segment is either null (neutral) or a non-empty string. If the property is
            set with an empty or whitespace value, its value is converted to null.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Property.PropertyValue.EditedValue">
            <summary>
            Gets or sets the edited value of the property.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.PropertyValue.PublishedValue">
            <summary>
            Gets or sets the published value of the property.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Property.PropertyValue.Clone">
            <summary>
            Clones the property value.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.PropertyType">
            <summary>
            Returns the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.Values">
            <summary>
            Gets the list of values.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.Alias">
            <summary>
            Returns the Alias of the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.PropertyTypeId">
            <summary>
            Returns the Id of the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.ValueStorageType">
            <summary>
            Returns the DatabaseType that the underlaying DataType is using to store its values
            </summary>
            <remarks>
            Only used internally when saving the property value.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Property.GetValue(System.String,System.String,System.Boolean)">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Property.SetValue(System.Object,System.String,System.String)">
            <summary>
            Sets a value.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyCollection">
            <summary>
            Represents a collection of property values.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PropertyCollection"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.#ctor(System.Func{Umbraco.Core.Models.Property,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PropertyCollection"/> class.
            </summary>
            <param name="additionValidator">A function validating added properties.</param>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Property})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PropertyCollection"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.Reset(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Property})">
            <summary>
            Replaces all properties, whilst maintaining validation delegates.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.SetItem(System.Int32,Umbraco.Core.Models.Property)">
            <summary>
            Replaces the property at the specified index with the specified property.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the property at the specified index.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.InsertItem(System.Int32,Umbraco.Core.Models.Property)">
            <summary>
            Inserts the specified property at the specified index.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.ClearItems">
            <summary>
            Removes all properties.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.Add(Umbraco.Core.Models.Property)">
            <summary>
            Adds or updates a property.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.IndexOfKey(System.String)">
            <summary>
            Gets the index for a specified property alias.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyCollection.Item(Umbraco.Core.Models.PropertyType)">
            <summary>
            Gets the property with the specified PropertyType.
            </summary>
        </member>
        <member name="E:Umbraco.Core.Models.PropertyCollection.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.EnsurePropertyTypes(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PropertyType})">
            <summary>
            Ensures that the collection contains properties for the specified property types.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.EnsureCleanPropertyTypes(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PropertyType})">
            <summary>
            Ensures that the collection does not contain properties not in the specified property types.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.DeepClone">
            <summary>
            Deep clones.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyGroup">
            <summary>
            A group of property types, which corresponds to the properties grouped under a Tab.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyGroup.Name">
            <summary>
            Gets or sets the Name of the Group, which corresponds to the Tab-name in the UI
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyGroup.SortOrder">
            <summary>
            Gets or sets the Sort Order of the Group
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyGroup.PropertyTypes">
            <summary>
            Gets or sets a collection of PropertyTypes for this PropertyGroup
            </summary>
            <remarks>
            Marked DoNotClone because we will manually deal with cloning and the event handlers
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyGroupCollection">
            <summary>
            Represents a collection of <see cref="T:Umbraco.Core.Models.PropertyGroup"/> objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyGroupCollection.Reset(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PropertyGroup})">
            <summary>
            Resets the collection to only contain the <see cref="T:Umbraco.Core.Models.PropertyGroup"/> instances referenced in the <paramref name="groups"/> parameter.
            </summary>
            <param name="groups">The property groups.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyGroupCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a <see cref="T:Umbraco.Core.Models.PropertyGroup"/> whose name matches the specified parameter.
            </summary>
            <param name="groupName">Name of the PropertyGroup.</param>
            <returns><c>true</c> if the collection contains the specified name; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyType">
            <summary>
            Represents a property type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.#ctor(Umbraco.Core.Models.IDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PropertyType"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.#ctor(Umbraco.Core.Models.IDataType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PropertyType"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.#ctor(System.String,Umbraco.Core.Models.ValueStorageType)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PropertyType"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.#ctor(System.String,Umbraco.Core.Models.ValueStorageType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PropertyType"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.#ctor(System.String,Umbraco.Core.Models.ValueStorageType,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PropertyType"/> class.
            </summary>
            <remarks>Set <paramref name="forceValueStorageType"/> to true to force the value storage type. Values assigned to
            the property, eg from the underlying datatype, will be ignored.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.SupportsPublishing">
            <summary>
            Gets a value indicating whether the content type owning this property type is publishing.
            </summary>
            <remarks>
            <para>A publishing content type supports draft and published values for properties.
            It is possible to retrieve either the draft (default) or published value of a property.
            Setting the value always sets the draft value, which then needs to be published.</para>
            <para>A non-publishing content type only supports one value for properties. Getting
            the draft or published value of a property returns the same thing, and publishing
            a value property has no effect.</para>
            <para>When true, getting the property value returns the edited value by default, but
            it is possible to get the published value using the appropriate 'published' method
            parameter.</para>
            <para>When false, getting the property value always return the edited value,
            regardless of the 'published' method parameter.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Name">
            <summary>
            Gets of sets the name of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Alias">
            <summary>
            Gets of sets the alias of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Description">
            <summary>
            Gets of sets the description of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.DataTypeId">
            <summary>
            Gets or sets the identifier of the datatype for this property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.PropertyEditorAlias">
            <summary>
            Gets or sets the alias of the property editor for this property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.ValueStorageType">
            <summary>
            Gets or sets the database type for storing value for this property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.PropertyGroupId">
            <summary>
            Gets or sets the identifier of the property group this property type belongs to.
            </summary>
            <remarks>For generic properties, the value is <c>null</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Mandatory">
            <summary>
            Gets or sets a value indicating whether a value for this property type is required.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.MandatoryMessage">
            <summary>
            Gets or sets the custom validation message used when a value for this PropertyType is required
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.LabelOnTop">
            <summary>
            Gets or sets a value indicating whether the label of this property type should be displayed on top.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.SortOrder">
            <summary>
            Gets of sets the sort order of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.ValidationRegExp">
            <summary>
            Gets or sets the regular expression validating the property values.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.ValidationRegExpMessage">
            <summary>
            Gets or sets the custom validation message used when a pattern for this PropertyType must be matched
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Variations">
            <summary>
            Gets or sets the content variation of the property type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.SupportsVariation(System.String,System.String,System.Boolean)">
            <summary>
            Determines whether the property type supports a combination of culture and segment.
            </summary>
            <param name="culture">The culture.</param>
            <param name="segment">The segment.</param>
            <param name="wildcards">A value indicating whether wildcards are valid.</param>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.CreateProperty">
            <summary>
            Creates a new property of this property type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.IsOfExpectedPropertyType(System.Object)">
            <summary>
            Determines whether a value is of the expected type for this property type.
            </summary>
            <remarks>
            <para>If the value is of the expected type, it can be directly assigned to the property.
            Otherwise, some conversion is required.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.IsValueAssignable(System.Object)">
            <summary>
            Determines whether a value can be assigned to a property.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.ConvertAssignedValue(System.Object)">
            <summary>
            Converts a value assigned to a property.
            </summary>
            <remarks>
            <para>The input value can be pretty much anything, and is converted to the actual CLR type
            expected by the property (eg an integer if the property values are integers).</para>
            <para>Throws if the value cannot be converted.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.TryConvertAssignedValue(System.Object,System.Object@)">
            <summary>
            Tries to convert a value assigned to a property.
            </summary>
            <remarks>
            <para></para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.SanitizeAlias(System.String)">
            <summary>
            Sanitizes a property type alias.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.Equals(Umbraco.Core.Models.PropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.PerformDeepClone(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.PropertyTypeCollection">
            <summary>
            Represents a collection of <see cref="T:Umbraco.Core.Models.PropertyType"/> objects.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyTypeCollection.Reset(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PropertyType})">
            <summary>
            Resets the collection to only contain the <see cref="T:Umbraco.Core.Models.PropertyType"/> instances referenced in the <paramref name="properties"/> parameter.
            </summary>
            <param name="properties">The properties.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyTypeCollection.Item_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Occurs when a property changes on a PropertyType that exists in this collection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyTypeCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a <see cref="T:Umbraco.Core.Models.Property"/> whose alias matches the specified PropertyType.
            </summary>
            <param name="propertyAlias">Alias of the PropertyType.</param>
            <returns><c>true</c> if the collection contains the specified alias; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedState">
            <summary>
            The states of a content item.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedState.Published">
            <summary>
            The content item is published.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedState.Unpublished">
            <summary>
            The content item is not published.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedState.Publishing">
            <summary>
            The version is being saved, in order to publish the content.
            </summary>
            <remarks>The <value>Publishing</value> state is transitional. Once the version
            is saved, its state changes to <value>Published</value>.</remarks>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedState.Unpublishing">
            <summary>
            The version is being saved, in order to unpublish the content.
            </summary>
            <remarks>The <value>Unpublishing</value> state is transitional. Once the version
            is saved, its state changes to <value>Unpublished</value>.</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Range`1">
            <typeparam name="T">Generic parameter.</typeparam>
        </member>
        <member name="P:Umbraco.Core.Models.Range`1.Minimum">
            <summary>Minimum value of the range.</summary>
        </member>
        <member name="P:Umbraco.Core.Models.Range`1.Maximum">
            <summary>Maximum value of the range.</summary>
        </member>
        <member name="M:Umbraco.Core.Models.Range`1.ToString">
            <summary>Presents the Range in readable format.</summary>
            <returns>String representation of the Range</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Range`1.IsValid">
            <summary>Determines if the range is valid.</summary>
            <returns>True if range is valid, else false</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Range`1.ContainsValue(`0)">
            <summary>Determines if the provided value is inside the range.</summary>
            <param name="value">The value to test</param>
            <returns>True if the value is inside Range, else false</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Range`1.IsInsideRange(Umbraco.Core.Models.Range{`0})">
            <summary>Determines if this Range is inside the bounds of another range.</summary>
            <param name="Range">The parent range to test on</param>
            <returns>True if range is inclusive, else false</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Range`1.ContainsRange(Umbraco.Core.Models.Range{`0})">
            <summary>Determines if another range is inside the bounds of this range.</summary>
            <param name="Range">The child range to test</param>
            <returns>True if range is inside, else false</returns>
        </member>
        <member name="T:Umbraco.Core.Models.RedirectUrl">
            <summary>
            Implements <see cref="T:Umbraco.Core.Models.IRedirectUrl"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.RedirectUrl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.RedirectUrl"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RedirectUrl.ContentId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.RedirectUrl.ContentKey">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.RedirectUrl.CreateDateUtc">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.RedirectUrl.Culture">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.RedirectUrl.Url">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.Relation">
            <summary>
            Represents a Relation between two items
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Relation.#ctor(System.Int32,System.Int32,Umbraco.Core.Models.IRelationType)">
            <summary>
            Constructor for constructing the entity to be created
            </summary>
            <param name="parentId"></param>
            <param name="childId"></param>
            <param name="relationType"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Relation.#ctor(System.Int32,System.Int32,System.Guid,System.Guid,Umbraco.Core.Models.IRelationType)">
            <summary>
            Constructor for reconstructing the entity from the data source
            </summary>
            <param name="parentId"></param>
            <param name="childId"></param>
            <param name="parentObjectType"></param>
            <param name="childObjectType"></param>
            <param name="relationType"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.ParentId">
            <summary>
            Gets or sets the Parent Id of the Relation (Source)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.ChildId">
            <summary>
            Gets or sets the Child Id of the Relation (Destination)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.RelationType">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Core.Models.Relation.RelationType"/> for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.Comment">
            <summary>
            Gets or sets a comment for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.RelationTypeId">
            <summary>
            Gets the Id of the <see cref="P:Umbraco.Core.Models.Relation.RelationType"/> that this Relation is based on.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.RelationType">
            <summary>
            Represents a RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.Name">
            <summary>
            Gets or sets the Name of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.Alias">
            <summary>
            Gets or sets the Alias of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.IsBidirectional">
            <summary>
            Gets or sets a boolean indicating whether the RelationType is Bidirectional (true) or Parent to Child (false)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.ParentObjectType">
            <summary>
            Gets or sets the Parents object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.ChildObjectType">
            <summary>
            Gets or sets the Childs object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Script">
            <summary>
            Represents a Script file
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Script.HasIdentity">
            <summary>
            Indicates whether the current entity has an identity, which in this case is a path/name.
            </summary>
            <remarks>
            Overrides the default Entity identity check.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.ServerRegistration">
            <summary>
            Represents a registered server in a multiple-servers environment.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ServerRegistration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ServerRegistration"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ServerRegistration.#ctor(System.Int32,System.String,System.String,System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ServerRegistration"/> class.
            </summary>
            <param name="id">The unique id of the server registration.</param>
            <param name="serverAddress">The server URL.</param>
            <param name="serverIdentity">The unique server identity.</param>
            <param name="registered">The date and time the registration was created.</param>
            <param name="accessed">The date and time the registration was last accessed.</param>
            <param name="isActive">A value indicating whether the registration is active.</param>
            <param name="isMaster">A value indicating whether the registration is master.</param>
        </member>
        <member name="M:Umbraco.Core.Models.ServerRegistration.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ServerRegistration"/> class.
            </summary>
            <param name="serverAddress">The server URL.</param>
            <param name="serverIdentity">The unique server identity.</param>
            <param name="registered">The date and time the registration was created.</param>
        </member>
        <member name="P:Umbraco.Core.Models.ServerRegistration.ServerAddress">
            <summary>
            Gets or sets the server URL.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ServerRegistration.ServerIdentity">
            <summary>
            Gets or sets the server unique identity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ServerRegistration.IsActive">
            <summary>
            Gets or sets a value indicating whether the server is active.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ServerRegistration.IsMaster">
            <summary>
            Gets or sets a value indicating whether the server is master.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ServerRegistration.Registered">
            <summary>
            Gets the date and time the registration was created.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ServerRegistration.Accessed">
            <summary>
            Gets the date and time the registration was last accessed.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ServerRegistration.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.Stylesheet">
            <summary>
            Represents a Stylesheet file
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Stylesheet.Property_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            If the property has changed then we need to update the content
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Stylesheet.Content">
            <summary>
            Gets or sets the Content of a File
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Stylesheet.Properties">
             <summary>
             Returns a list of umbraco back office enabled stylesheet properties
             </summary>
             <remarks>
             An umbraco back office enabled stylesheet property has a special prefix, for example:
            
             /** umb_name: MyPropertyName */ p { font-size: 1em; }
             </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Stylesheet.AddProperty(Umbraco.Core.Models.StylesheetProperty)">
            <summary>
            Adds an Umbraco stylesheet property for use in the back office
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Stylesheet.RemoveProperty(System.String)">
            <summary>
            Removes an Umbraco stylesheet property
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Stylesheet.HasIdentity">
            <summary>
            Indicates whether the current entity has an identity, which in this case is a path/name.
            </summary>
            <remarks>
            Overrides the default Entity identity check.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.StylesheetProperty">
            <summary>
            Represents a Stylesheet Property
            </summary>
            <remarks>
            Properties are always formatted to have a single selector, so it can be used in the backoffice
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.StylesheetProperty.Name">
            <summary>
            The CSS rule name that can be used by Umbraco in the back office
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.StylesheetProperty.Alias">
            <summary>
            This is the CSS Selector
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.StylesheetProperty.Value">
            <summary>
            The CSS value for the selector
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Tag">
            <summary>
            Represents a tag entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Tag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Tag"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Tag.#ctor(System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Tag"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Tag.Group">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Tag.Text">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Tag.LanguageId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Models.Tag.NodeCount">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Models.TagsStorageType">
            <summary>
            Defines how tags are stored.
            </summary>
            <remarks>Tags are always stored as a string, but the string can
            either be a delimited string, or a serialized Json array.</remarks>
        </member>
        <member name="F:Umbraco.Core.Models.TagsStorageType.Csv">
            <summary>
            Store tags as a delimited string.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.TagsStorageType.Json">
            <summary>
            Store tags as serialized Json.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.TaggableObjectTypes">
            <summary>
            Enum representing the taggable object types
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.TaggedEntity">
            <summary>
            Represents a tagged entity.
            </summary>
            <remarks>Note that it is the properties of an entity (like Content, Media, Members, etc.) that are tagged,
            which is why this class is composed of a list of tagged properties and the identifier the actual entity.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.TaggedEntity.#ctor(System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.TaggedProperty})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.TaggedEntity"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TaggedEntity.EntityId">
            <summary>
            Gets the identifier of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TaggedEntity.TaggedProperties">
            <summary>
            Gets the tagged properties.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.TaggedProperty">
            <summary>
            Represents a tagged property on an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.TaggedProperty.#ctor(System.Int32,System.String,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITag})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.TaggedProperty"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TaggedProperty.PropertyTypeId">
            <summary>
            Gets the identifier of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TaggedProperty.PropertyTypeAlias">
            <summary>
            Gets the alias of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TaggedProperty.Tags">
            <summary>
            Gets the tags.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Template">
            <summary>
            Represents a Template file.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Template.IsMasterTemplate">
            <summary>
            Returns true if the template is used as a layout for other templates (i.e. it has 'children')
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.TemplateNode">
            <summary>
            Represents a template in a template tree
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TemplateNode.Template">
            <summary>
            The current template
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TemplateNode.Children">
            <summary>
            The children of the current template
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TemplateNode.Parent">
            <summary>
            The parent template to the current template
            </summary>
            <remarks>
            Will be null if there is no parent
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.TemplateOnDisk">
            <summary>
            Represents a Template file that can have its content on disk.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.TemplateOnDisk.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.TemplateOnDisk"/> class.
            </summary>
            <param name="name">The name of the template.</param>
            <param name="alias">The alias of the template.</param>
        </member>
        <member name="P:Umbraco.Core.Models.TemplateOnDisk.IsOnDisk">
            <summary>
            Gets or sets a value indicating whether the content is on disk already.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TemplateOnDisk.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <remarks>
            <para>Getting the content while the template is "on disk" throws,
            the template must be saved before its content can be retrieved.</para>
            <para>Setting the content means it is not "on disk" anymore, and the
            template becomes (and behaves like) a normal template.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.UmbracoDomain.LanguageIsoCode">
            <summary>
            Readonly value of the language ISO code for the domain
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.UmbracoObjectTypes">
            <summary>
            Enum used to represent the Umbraco Object Types and their associated GUIDs
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Unknown">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.ROOT">
            <summary>
            Root
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Media">
            <summary>
            Media
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.MemberType">
            <summary>
            Member Type
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Template">
            <summary>
            Template
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.MemberGroup">
            <summary>
            Member Group
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.MediaType">
            <summary>
            "Media Type
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.DocumentType">
            <summary>
            Document Type
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.RecycleBin">
            <summary>
            Recycle Bin
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Stylesheet">
            <summary>
            Stylesheet
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Member">
            <summary>
            Member
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.DataType">
            <summary>
            Data Type
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.DocumentTypeContainer">
            <summary>
            Document type container
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.MediaTypeContainer">
            <summary>
            Media type container
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.DataTypeContainer">
            <summary>
            Media type container
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.RelationType">
            <summary>
            Relation type
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.FormsForm">
            <summary>
            Forms Form
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.FormsPreValue">
            <summary>
            Forms PreValue
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.FormsDataSource">
            <summary>
            Forms DataSource
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Language">
            <summary>
            Language
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.DocumentBlueprint">
            <summary>
            Document Blueprint
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.IdReservation">
            <summary>
            Reserved Identifier
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ObjectTypes">
            <summary>
            Provides utilities and extension methods to handle object types.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ObjectTypes.GetUmbracoObjectType(System.String)">
            <summary>
            Gets the Umbraco object type corresponding to a name.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ObjectTypes.GetUmbracoObjectType(System.Guid)">
            <summary>
            Gets the Umbraco object type corresponding to an object type Guid.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ObjectTypes.GetUdiType(System.Guid)">
            <summary>
            Gets the Udi type corresponding to an object type Guid.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ObjectTypes.GetClrType(System.Guid)">
            <summary>
            Gets the CLR type corresponding to an object type Guid.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ObjectTypes.GetGuid(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the object type Guid corresponding to this Umbraco object type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ObjectTypes.GetUdiType(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the Udi type corresponding to this Umbraco object type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ObjectTypes.GetName(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the name corresponding to this Umbraco object type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ObjectTypes.GetFriendlyName(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the friendly name corresponding to this Umbraco object type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ObjectTypes.GetClrType(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the CLR type corresponding to this Umbraco object type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.UserExtensions.IsSuper(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Determines whether this user is the 'super' user.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.UserExtensions.IsAdmin(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Determines whether this user belongs to the administrators group.
            </summary>
            <remarks>The 'super' user does not automatically belongs to the administrators group.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.UserExtensions.GetUserAvatarUrls(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Cache.IAppCache)">
            <summary>
            Tries to lookup the user's Gravatar to see if the endpoint can be reached, if so it returns the valid URL
            </summary>
            <param name="user"></param>
            <param name="cache"></param>
            <returns>
            A list of 5 different sized avatar URLs
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.UserExtensions.GetUserCulture(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Services.ILocalizedTextService,Umbraco.Core.Configuration.IGlobalSettings)">
            <summary>
            Returns the culture info associated with this user, based on the language they're assigned to in the back office
            </summary>
            <param name="user"></param>
            <param name="textService"></param>
            <param name="globalSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.UserExtensions.HasAccessToSensitiveData(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Determines whether this user has access to view sensitive data
            </summary>
            <param name="user"></param>
        </member>
        <member name="T:Umbraco.Core.Models.Validation.RequiredForPersistenceAttribute">
            <summary>
            Specifies that a data field value is required in order to persist an object.
            </summary>
            <remarks>
            <para>There are two levels of validation in Umbraco. (1) value validation is performed by <see cref="T:Umbraco.Core.PropertyEditors.IValueValidator"/>
            instances; it can prevent a content item from being published, but not from being saved. (2) required validation
            of properties marked with <see cref="T:Umbraco.Core.Models.Validation.RequiredForPersistenceAttribute"/>; it does prevent an object from being saved
            and is used for properties that are absolutely mandatory, such as the name of a content item.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Validation.RequiredForPersistenceAttribute.HasRequiredValuesForPersistence(System.Object)">
            <summary>
            Determines whether an object has all required values for persistence.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeCommonRepository">
            <summary>
            Implements <see cref="T:Umbraco.Core.Persistence.Repositories.IContentTypeCommonRepository"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeCommonRepository.#ctor(Umbraco.Core.Scoping.IScopeAccessor,Umbraco.Core.Persistence.Repositories.ITemplateRepository,Umbraco.Core.Cache.AppCaches)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.Repositories.IContentTypeCommonRepository"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeCommonRepository.GetAllTypes">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeCommonRepository.ClearCache">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository">
            <summary>
            Represents the NPoco implementation of <see cref="T:Umbraco.Core.Persistence.Repositories.IAuditEntryRepository"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository.#ctor(Umbraco.Core.Scoping.IScopeAccessor,Umbraco.Core.Cache.AppCaches,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository.NodeObjectTypeId">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository.PerformGet(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository.PerformGetAll(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IAuditEntry})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository.GetBaseQuery(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository.GetBaseWhereClause">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository.GetDeleteClauses">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository.PersistNewItem(Umbraco.Core.Models.IAuditEntry)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository.PersistUpdatedItem(Umbraco.Core.Models.IAuditEntry)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository.GetPage(System.Int64,System.Int32,System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository.IsAvailable">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository">
            <summary>
            Represents the NPoco implementation of <see cref="T:Umbraco.Core.Persistence.Repositories.IConsentRepository"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository.#ctor(Umbraco.Core.Scoping.IScopeAccessor,Umbraco.Core.Cache.AppCaches,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository.NodeObjectTypeId">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository.PerformGet(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository.PerformGetAll(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IConsent})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository.GetBaseQuery(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository.GetBaseWhereClause">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository.GetDeleteClauses">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository.PersistNewItem(Umbraco.Core.Models.IConsent)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository.PersistUpdatedItem(Umbraco.Core.Models.IConsent)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository.ClearCurrent(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.AuditRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IAuditItem},System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,Umbraco.Core.Models.AuditType[],Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IAuditItem})">
            <summary>
            Return the audit items as paged result
            </summary>
            <param name="query">
            The query coming from the service
            </param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderDirection"></param>
            <param name="auditTypeFilter">
            Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query or the custom filter
            so we need to do that here
            </param>
            <param name="customFilter">
            A user supplied custom filter
            </param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.DocumentBlueprintRepository">
             <summary>
             Override the base content repository so we can change the node object type
             </summary>
             <remarks>
             It would be nicer if we could separate most of this down into a smaller version of the ContentRepository class, however to do that
             requires quite a lot of work since we'd need to re-organize the inheritance quite a lot or create a helper class to perform a lot of the underlying logic.
            
             TODO: Create a helper method to contain most of the underlying logic for the ContentRepository
             </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IContent"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository.#ctor(Umbraco.Core.Scoping.IScopeAccessor,Umbraco.Core.Cache.AppCaches,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.Repositories.IContentTypeRepository,Umbraco.Core.Persistence.Repositories.ITemplateRepository,Umbraco.Core.Persistence.Repositories.ITagRepository,Umbraco.Core.Persistence.Repositories.ILanguageRepository,Umbraco.Core.Persistence.Repositories.IRelationRepository,Umbraco.Core.Persistence.Repositories.IRelationTypeRepository,System.Lazy{Umbraco.Core.PropertyEditors.PropertyEditorCollection},Umbraco.Core.PropertyEditors.DataValueReferenceFactoryCollection)">
            <summary>
            Constructor
            </summary>
            <param name="scopeAccessor"></param>
            <param name="appCaches"></param>
            <param name="logger"></param>
            <param name="contentTypeRepository"></param>
            <param name="templateRepository"></param>
            <param name="tagRepository"></param>
            <param name="languageRepository"></param>
            <param name="propertyEditors">
                Lazy property value collection - must be lazy because we have a circular dependency since some property editors require services, yet these services require property editors
            </param>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository.EnsureUniqueNaming">
            <summary>
            Default is to always ensure all documents have unique names
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository.AssignEntityPermission(Umbraco.Core.Models.IContent,System.Char,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Assigns a single permission to the current content item for the specified group ids
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="groupIds"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository.AddOrUpdatePermissions(Umbraco.Core.Models.Membership.ContentPermissionSet)">
            <summary>
            Used to add/update a permission for a content item
            </summary>
            <param name="permission"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository.GetPage(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository.ClearSchedule(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository.ClearSchedule(System.DateTime,Umbraco.Core.Models.ContentScheduleAction)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository.GetContentForRelease(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository.GetContentForExpiration(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepository.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.PropertyType})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepository.GetAllPropertyTypeAliases">
            <summary>
            Gets all property type aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepository.GetAllContentTypeAliases(System.Guid[])">
            <summary>
            Gets all content type aliases
            </summary>
            <param name="objectTypes">
            If this list is empty, it will return all content type aliases for media, members and content, otherwise
            it will only return content type aliases for the object types specified
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepository.PersistDeletedItem(Umbraco.Core.Models.IContentType)">
            <summary>
            Deletes a content type
            </summary>
            <param name="entity"></param>
            <remarks>
            First checks for children and removes those first
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1">
            <summary>
            Represent an abstract Repository for ContentType based repositories
            </summary>
            <remarks>Exposes shared functionality</remarks>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.CorrectPropertyTypeVariations(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Corrects the property type variations for the given entity
            to make sure the property type variation is compatible with the
            variation set on the entity itself.
            </summary>
            <param name="entity">Entity to correct properties for</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.ValidateVariations(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Ensures that no property types are flagged for a variance that is not supported by the content type itself
            </summary>
            <param name="entity">The entity for which the property types will be validated</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.Clear301Redirects(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Clear any redirects associated with content for a content type
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.ClearScheduledPublishing(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Clear any scheduled publishing associated with content for a content type
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.GetDefaultLanguageId">
            <summary>
            Gets the default language identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.MovePropertyTypeVariantData(System.Collections.Generic.IDictionary{System.Int32,System.ValueTuple{Umbraco.Core.Models.ContentVariation,Umbraco.Core.Models.ContentVariation}},System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContentTypeComposition})">
            <summary>
            Moves variant data for property type variation changes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.MoveContentTypeVariantData(Umbraco.Core.Models.IContentTypeComposition,Umbraco.Core.Models.ContentVariation,Umbraco.Core.Models.ContentVariation)">
            <summary>
            Moves variant data for a content type variation change.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.CopyTagData(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IReadOnlyCollection{System.Int32},System.Collections.Generic.IReadOnlyCollection{System.Int32})">
            
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.CopyPropertyData(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IReadOnlyCollection{System.Int32},System.Collections.Generic.IReadOnlyCollection{System.Int32})">
            <summary>
            Copies property data from one language to another.
            </summary>
            <param name="sourceLanguageId">The source language (can be null ie invariant).</param>
            <param name="targetLanguageId">The target language (can be null ie invariant)</param>
            <param name="propertyTypeIds">The property type identifiers.</param>
            <param name="contentTypeIds">The content type identifiers.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.RenormalizeDocumentEditedFlags(System.Collections.Generic.IReadOnlyCollection{System.Int32},System.Collections.Generic.IReadOnlyCollection{System.Int32})">
            <summary>
            Re-normalizes the edited value in the umbracoDocumentCultureVariation and umbracoDocument table when variations are changed
            </summary>
            <param name="propertyTypeIds"></param>
            <param name="contentTypeIds"></param>
            <remarks>
            If this is not done, then in some cases the "edited" value for a particular culture for a document will remain true when it should be false
            if the property was changed to invariant. In order to do this we need to recalculate this value based on the values stored for each
            property, culture and current/published version.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.AssignDataTypeFromPropertyEditor(Umbraco.Core.Models.PropertyType)">
            <summary>
            Try to set the data type id based on its ControlId
            </summary>
            <param name="propertyType"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.Get(System.String)">
            <summary>
            Gets an Entity by alias
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.Get(System.Guid)">
            <summary>
            Gets an Entity by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.Umbraco#Core#Persistence#IReadRepository{System#Guid,TEntity}#GetMany(System.Guid[])">
            <summary>
            Gets all entities of the specified type
            </summary>
            <param name="ids"></param>
            <returns></returns>
            <remarks>
            Ensure explicit implementation, we don't want to have any accidental calls to this since it is essentially the same signature as the main GetAll when there are no parameters
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.Exists(System.Guid)">
            <summary>
            Boolean indicating whether an Entity with the specified Id exists
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.HasContainerInPath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.HasContainerInPath(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.HasContentNodes(System.Int32)">
            <summary>
            Returns true or false depending on whether content nodes have been created based on the provided content type id.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.DataTypeRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.DataType"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.DictionaryRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.DictionaryItem"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.EntityContainerRepository">
            <summary>
            An internal repository for managing entity containers such as doc type, media type, data type containers.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.EntityRepository">
            <summary>
            Represents the EntityRepository used to query entity objects.
            </summary>
            <remarks>
            <para>Limited to objects that have a corresponding node (in umbracoNode table).</para>
            <para>Returns <see cref="T:Umbraco.Core.Models.Entities.IEntitySlim"/> objects, i.e. lightweight representation of entities.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.EntityRepository.GenericContentEntityDto">
            <summary>
            The DTO used to fetch results for a generic content item which could be either a document, media or a member
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.EntityRepository.DocumentEntityDto">
            <summary>
            The DTO used to fetch results for a document item with its variation info
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.EntityRepository.MediaEntityDto">
            <summary>
            The DTO used to fetch results for a media item with its media path info
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.EntityRepository.MemberEntityDto">
            <summary>
            The DTO used to fetch results for a member item
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.EntityRepository.BaseDto">
            <summary>
            the DTO corresponding to fields selected by GetBase
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.FileRepository`2.GetContentStream(System.String)">
            <summary>
            Gets a stream that is used to write to the file
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.FileRepository`2.FindAllFiles(System.String,System.String)">
             <summary>
             Returns all files in the file system
             </summary>
             <param name="path"></param>
             <param name="filter"></param>
             <returns>
             Returns a list of all files with their paths. For example:
            
             \hello.txt
             \folder1\test.txt
             \folder1\blah.csv
             \folder1\folder2\blahhhhh.svg
             </returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.LanguageRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.Language"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.MediaRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IMedia"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.MediaRepository.MediaByGuidReadRepository">
            <summary>
            A reading repository purely for looking up by GUID
            </summary>
            <remarks>
            TODO: This is ugly and to fix we need to decouple the IRepositoryQueryable -> IRepository -> IReadRepository which should all be separate things!
            Then we can do the same thing with repository instances and we wouldn't need to leave all these methods as not implemented because we wouldn't need to implement them
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.MediaRepository.GetPage(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.MediaTypeRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IMediaType"/>
            </summary>
        </member>
        <member name="E:Umbraco.Core.Persistence.Repositories.Implement.MemberGroupRepository.SavingMemberGroup">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Persistence.Repositories.Implement.MemberGroupRepository.SavedMemberGroup">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.MemberRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IMember"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.MemberRepository.GetByMemberGroup(System.String)">
            <summary>
            Get all members in a specific group
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.MemberRepository.SetLastLogin(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.MemberRepository.GetPage(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMember},System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMember},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets paged member results.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.MemberTypeRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IMemberType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.MemberTypeRepository.CreatePropertyType(System.String,Umbraco.Core.Models.ValueStorageType,System.String)">
            <summary>
            Override so we can specify explicit db type's on any property types that are built-in.
            </summary>
            <param name="propertyEditorAlias"></param>
            <param name="storageType"></param>
            <param name="propertyTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.MemberTypeRepository.EnsureExplicitDataTypeForBuiltInProperties(Umbraco.Core.Models.IContentTypeBase)">
            <summary>
            Ensure that all the built-in membership provider properties have their correct data type
            and property editors assigned. This occurs prior to saving so that the correct values are persisted.
            </summary>
            <param name="memberType"></param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.NPocoRepositoryBase`2">
            <summary>
            Represent an abstract Repository for NPoco based repositories
            </summary>
            <typeparam name="TId"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.NPocoRepositoryBase`2.#ctor(Umbraco.Core.Scoping.IScopeAccessor,Umbraco.Core.Cache.AppCaches,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.Repositories.Implement.NPocoRepositoryBase`2"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.NPocoRepositoryBase`2.Database">
            <summary>
            Gets the repository's database.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.NPocoRepositoryBase`2.SqlContext">
            <summary>
            Gets the Sql context.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.PartialViewRepository.GetContentStream(System.String)">
            <summary>
            Gets a stream that is used to write to the file
            </summary>
            <param name="content"></param>
            <returns></returns>
            <remarks>
            This ensures the stream includes a utf8 BOM
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.PermissionRepository`1">
            <summary>
            A (sub) repository that exposes functionality to modify assigned permissions to a node
            </summary>
            <typeparam name="TEntity"></typeparam>
            <remarks>
            This repo implements the base <see cref="T:Umbraco.Core.Persistence.Repositories.Implement.NPocoRepositoryBase`2"/> class so that permissions can be queued to be persisted
            like the normal repository pattern but the standard repository Get commands don't apply and will throw <see cref="T:System.NotImplementedException"/>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.PermissionRepository`1.GetPermissionsForEntities(System.Int32[],System.Int32[])">
            <summary>
            Returns explicitly defined permissions for a user group for any number of nodes
            </summary>
            <param name="groupIds">
            The group ids to lookup permissions for
            </param>
            <param name="entityIds"></param>
            <returns></returns>
            <remarks>
            This method will not support passing in more than 2000 group Ids
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.PermissionRepository`1.GetPermissionsForEntities(System.Int32[])">
            <summary>
            Returns permissions directly assigned to the content items for all user groups
            </summary>
            <param name="entityIds"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.PermissionRepository`1.GetPermissionsForEntity(System.Int32)">
            <summary>
            Returns permissions directly assigned to the content item for all user groups
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.PermissionRepository`1.ReplacePermissions(System.Int32,System.Collections.Generic.IEnumerable{System.Char},System.Int32[])">
            <summary>
            Assigns the same permission set for a single group to any number of entities
            </summary>
            <param name="groupId"></param>
            <param name="permissions"></param>
            <param name="entityIds"></param>
            <remarks>
            This will first clear the permissions for this user and entities and recreate them
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.PermissionRepository`1.AssignPermission(System.Int32,System.Char,System.Int32[])">
            <summary>
            Assigns one permission for a user to many entities
            </summary>
            <param name="groupId"></param>
            <param name="permission"></param>
            <param name="entityIds"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.PermissionRepository`1.AssignEntityPermission(`0,System.Char,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Assigns one permission to an entity for multiple groups
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="groupIds"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.PermissionRepository`1.ReplaceEntityPermissions(Umbraco.Core.Models.Membership.EntityPermissionSet)">
            <summary>
            Assigns permissions to an entity for multiple group/permission entries
            </summary>
            <param name="permissionSet">
            </param>
            <remarks>
            This will first clear the permissions for this entity then re-create them
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.PermissionRepository`1.PersistNewItem(Umbraco.Core.Models.Membership.ContentPermissionSet)">
            <summary>
            Used to add or update entity permissions during a content item being updated
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.PermissionRepository`1.PersistUpdatedItem(Umbraco.Core.Models.Membership.ContentPermissionSet)">
            <summary>
            Used to add or update entity permissions during a content item being updated
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.QueryType">
            <summary>
            Specifies the type of base query.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.Repositories.Implement.QueryType.Single">
            <summary>
            Get one single complete item.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.Repositories.Implement.QueryType.Many">
            <summary>
            Get many complete items.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.Repositories.Implement.QueryType.Ids">
            <summary>
            Get item identifiers only.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.Repositories.Implement.QueryType.Count">
            <summary>
            Count items.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.RelationRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.Relation"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.RelationRepository.SqlJoinRelations(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext})">
            <summary>
            Used for joining the entity query with relations for the paging methods
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.RelationRepository.PopulateObjectTypes(Umbraco.Core.Models.IRelation[])">
            <summary>
            Used to populate the object types after insert/update
            </summary>
            <param name="entities"></param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.RelationTypeRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.RepositoryCacheKeys">
            <summary>
            Provides cache keys for repositories.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.RepositoryBase`2">
            <summary>
            Provides a base class to all repositories.
            </summary>
            <typeparam name="TEntity">The type of the entity managed by this repository.</typeparam>
            <typeparam name="TId">The type of the entity's unique identifier.</typeparam>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.RepositoryBase`2.IsolatedCache">
            <summary>
            Gets the isolated cache.
            </summary>
            <remarks>Depends on the ambient scope cache mode.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.RepositoryBase`2.Save(`1)">
            <summary>
            Adds or Updates an entity of type TEntity
            </summary>
            <remarks>This method is backed by an <see cref="T:Umbraco.Core.Cache.IAppPolicyCache"/> cache</remarks>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.RepositoryBase`2.Delete(`1)">
            <summary>
            Deletes the passed in entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.RepositoryBase`2.Get(`0)">
            <summary>
            Gets an entity by the passed in Id utilizing the repository's cache policy
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.RepositoryBase`2.GetMany(`0[])">
            <summary>
            Gets all entities of type TEntity or a list according to the passed in Ids
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.RepositoryBase`2.Get(Umbraco.Core.Persistence.Querying.IQuery{`1})">
            <summary>
            Gets a list of entities by the passed in query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.RepositoryBase`2.Exists(`0)">
            <summary>
            Returns a boolean indicating whether an entity with the passed Id exists
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.RepositoryBase`2.Count(Umbraco.Core.Persistence.Querying.IQuery{`1})">
            <summary>
            Returns an integer with the count of entities found with the passed in query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.ScriptRepository">
            <summary>
            Represents the Script Repository
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.SimpleGetRepository`3">
            <summary>
            Simple abstract ReadOnly repository used to simply have PerformGet and PeformGetAll with an underlying cache
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.StylesheetRepository">
            <summary>
            Represents the Stylesheet Repository
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.StylesheetRepository.GetStylesheetsAtPath(System.String)">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Stylesheet"/> that exist at the relative path specified.
            </summary>
            <param name="rootPath">
            If null or not specified, will return the stylesheets at the root path relative to the IFileSystem
            </param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.NodeObjectTypeId">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.PerformGet(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.PerformGetAll(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.ITag})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.GetBaseQuery(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.GetBaseWhereClause">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.GetDeleteClauses">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.PersistNewItem(Umbraco.Core.Models.ITag)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.PersistUpdatedItem(Umbraco.Core.Models.ITag)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.Assign(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITag},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.Remove(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITag})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.RemoveAll(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.RemoveAll(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.GetTaggedEntityByKey(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.GetTaggedEntityById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.GetTaggedEntitiesByTagGroup(Umbraco.Core.Models.TaggableObjectTypes,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.GetTaggedEntitiesByTag(Umbraco.Core.Models.TaggableObjectTypes,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.GetTagsForEntityType(Umbraco.Core.Models.TaggableObjectTypes,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.GetTagsForEntity(System.Int32,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.GetTagsForEntity(System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.GetTagsForProperty(System.Int32,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TagRepository.GetTagsForProperty(System.Guid,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.TemplateRepository">
            <summary>
            Represents the Template Repository
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TemplateRepository.MapFromDto(Umbraco.Core.Persistence.Dtos.TemplateDto,Umbraco.Core.Models.Entities.IUmbracoEntity[])">
            <summary>
            Maps from a dto to an ITemplate
            </summary>
            <param name="dto"></param>
            <param name="axisDefinitions">
            This is a collection of template definitions ... either all templates, or the collection of child templates and it's parent template
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TemplateRepository.ValidateTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.TemplateRepository.EnsureValidAlias(Umbraco.Core.Models.ITemplate)">
            <summary>
            Ensures that there are not duplicate aliases and if so, changes it to be a numbered version and also verifies the length
            </summary>
            <param name="template"></param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.UserGroupRepository">
            <summary>
            Represents the UserGroupRepository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.Membership.IUserGroup"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.UserGroupRepository.GetPermissions(System.Int32[],System.Int32[])">
            <summary>
            Gets explicitly defined permissions for the group for specified entities
            </summary>
            <param name="groupIds"></param>
            <param name="entityIds">Array of entity Ids, if empty will return permissions for the group for all entities</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.UserGroupRepository.GetPermissions(Umbraco.Core.Models.Membership.IReadOnlyUserGroup[],System.Boolean,System.Int32[])">
            <summary>
            Gets explicit and default permissions (if requested) permissions for the group for specified entities
            </summary>
            <param name="groups"></param>
            <param name="fallbackToDefaultPermissions">If true will include the group's default permissions if no permissions are explicitly assigned</param>
            <param name="nodeIds">Array of entity Ids, if empty will return permissions for the group for all entities</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.UserGroupRepository.ReplaceGroupPermissions(System.Int32,System.Collections.Generic.IEnumerable{System.Char},System.Int32[])">
            <summary>
            Replaces the same permission set for a single group to any number of entities
            </summary>
            <param name="groupId">Id of group</param>
            <param name="permissions">Permissions as enumerable list of <see cref="T:System.Char"/> If nothing is specified all permissions are removed.</param>
            <param name="entityIds">Specify the nodes to replace permissions for. </param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.UserGroupRepository.AssignGroupPermission(System.Int32,System.Char,System.Int32[])">
            <summary>
            Assigns the same permission set for a single group to any number of entities
            </summary>
            <param name="groupId">Id of group</param>
            <param name="permission">Permissions as enumerable list of <see cref="T:System.Char"/></param>
            <param name="entityIds">Specify the nodes to replace permissions for</param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.UserGroupRepository.UserGroupWithUsers">
            <summary>
            used to persist a user group with associated users at once
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.UserGroupRepository.UserGroupWithUsersRepository">
            <summary>
            used to persist a user group with associated users at once
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.UserGroupRepository.UserGroupWithUsersRepository.RefreshUsersInGroup(System.Int32,System.Int32[])">
            <summary>
            Adds a set of users to a group, first removing any that exist
            </summary>
            <param name="groupId">Id of group</param>
            <param name="userIds">Ids of users</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.UserGroupRepository.UserGroupWithUsersRepository.RemoveAllUsersFromGroup(System.Int32)">
            <summary>
            Removes all users from a group
            </summary>
            <param name="groupId">Id of group</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.UserGroupRepository.UserGroupWithUsersRepository.AddUsersToGroup(System.Int32,System.Int32[])">
            <summary>
            Adds a set of users to a group
            </summary>
            <param name="groupId">Id of group</param>
            <param name="userIds">Ids of users</param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.Implement.UserRepository">
            <summary>
            Represents the UserRepository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.Membership.IUser"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.UserRepository.#ctor(Umbraco.Core.Scoping.IScopeAccessor,Umbraco.Core.Cache.AppCaches,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.Mappers.IMapperCollection,Umbraco.Core.Configuration.IGlobalSettings)">
            <summary>
            Constructor
            </summary>
            <param name="scopeAccessor"></param>
            <param name="appCaches"></param>
            <param name="logger"></param>
            <param name="mapperCollection">
            A dictionary specifying the configuration for user passwords. If this is null then no password configuration will be persisted or read.
            </param>
            <param name="globalSettings"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.Persistence.Repositories.Implement.UserRepository.GetByUsername(System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.Persistence.Repositories.Implement.UserRepository.Get(System.Int32,System.Boolean)" -->
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.UserRepository.GetAllInGroup(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.UserRepository.GetAllNotInGroup(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects not associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.UserRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Membership.IUser},System.Int64,System.Int32,System.Int64@,System.Linq.Expressions.Expression{System.Func{Umbraco.Core.Models.Membership.IUser,System.Object}},Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String[],System.String[],Umbraco.Core.Models.Membership.UserState[],Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Membership.IUser})">
            <summary>
            Gets paged user results
            </summary>
            <param name="query"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="includeUserGroups">
            A filter to only include user that belong to these user groups
            </param>
            <param name="excludeUserGroups">
            A filter to only include users that do not belong to these user groups
            </param>
            <param name="userState">Optional parameter to filter by specified user state</param>
            <param name="filter"></param>
            <returns></returns>
            <remarks>
            The query supplied will ONLY work with data specifically on the umbracoUser table because we are using NPoco paging (SQL paging)
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase.ThrowOnWarning">
             <summary>
            
             This is used for unit tests ONLY
             </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.#ctor(Umbraco.Core.Scoping.IScopeAccessor,Umbraco.Core.Cache.AppCaches,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.Repositories.ILanguageRepository,Umbraco.Core.Persistence.Repositories.IRelationRepository,Umbraco.Core.Persistence.Repositories.IRelationTypeRepository,System.Lazy{Umbraco.Core.PropertyEditors.PropertyEditorCollection},Umbraco.Core.PropertyEditors.DataValueReferenceFactoryCollection)">
             <summary>
            
             </summary>
             <param name="scopeAccessor"></param>
             <param name="cache"></param>
             <param name="logger"></param>
             <param name="languageRepository"></param>
             <param name="propertyEditors">
                 Lazy property value collection - must be lazy because we have a circular dependency since some property editors require services, yet these services require property editors
             </param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.CountDescendants(System.Int32,System.String)">
            <summary>
            Count descendants of an item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.CountChildren(System.Int32,System.String)">
            <summary>
            Count children of an item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.Count(System.String)">
            <summary>
            Count items.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.SetEntityTags(Umbraco.Core.Models.IContentBase,Umbraco.Core.Persistence.Repositories.ITagRepository)">
            <summary>
            Updates tags for an item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.ClearEntityTags(Umbraco.Core.Models.IContentBase,Umbraco.Core.Persistence.Repositories.ITagRepository)">
            <summary>
            Clears tags for an item.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent.Id">
            <summary>
            Gets or sets the identifier of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent.VersionId">
            <summary>
            Gets or sets the version identifier of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent.PublishedVersionId">
            <summary>
            Gets or sets the published version identifier of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent.ContentType">
            <summary>
            Gets or sets the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent.Template1Id">
            <summary>
            Gets or sets the identifier of the template 1 of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent.Template2Id">
            <summary>
            Gets or sets the identifier of the template 2 of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent`1.Content">
            <summary>
            Gets or sets the associated actual content.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.GetBaseQuery(Umbraco.Core.Persistence.Repositories.Implement.QueryType)">
            <summary>
            For Paging, repositories must support returning different query for the query type specified
            </summary>
            <param name="queryType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.InsertPropertyValues(`1,System.Int32,System.Boolean@,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            Inserts property values for the content entity
            </summary>
            <param name="entity"></param>
            <param name="publishedVersionId"></param>
            <param name="edited"></param>
            <param name="editedCultures"></param>
            <remarks>
            Used when creating a new entity
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3.ReplacePropertyValues(`1,System.Int32,System.Int32,System.Boolean@,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            Used to atomically replace the property values for the entity version specified
            </summary>
            <param name="entity"></param>
            <param name="versionId"></param>
            <param name="publishedVersionId"></param>
            <param name="edited"></param>
            <param name="editedCultures"></param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IContentTypeCommonRepository">
            <summary>
            Represents the content types common repository, dealing with document, media and member types.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeCommonRepository.GetAllTypes">
            <summary>
            Gets and cache all types.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeCommonRepository.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IAuditEntryRepository">
            <summary>
            Represents a repository for <see cref="T:Umbraco.Core.Models.IAuditEntry"/> entities.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IAuditEntryRepository.GetPage(System.Int64,System.Int32,System.Int64@)">
            <summary>
            Gets a page of entries.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IAuditEntryRepository.IsAvailable">
            <summary>
            Determines whether the repository is available.
            </summary>
            <remarks>During an upgrade, the repository may not be available, until the table has been created.</remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IConsentRepository">
            <summary>
            Represents a repository for <see cref="T:Umbraco.Core.Models.IConsent"/> entities.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IConsentRepository.ClearCurrent(System.String,System.String,System.String)">
            <summary>
            Clears the current flag.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IAuditRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IAuditItem},System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,Umbraco.Core.Models.AuditType[],Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IAuditItem})">
            <summary>
            Return the audit items as paged result
            </summary>
            <param name="query">
            The query coming from the service
            </param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderDirection"></param>
            <param name="auditTypeFilter">
            Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query or the custom filter
            so we need to do that here
            </param>
            <param name="customFilter">
            A user supplied custom filter
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IDocumentRepository.ClearSchedule(System.DateTime)">
            <summary>
            Clears the publishing schedule for all entries having an a date before (lower than, or equal to) a specified date.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IDocumentRepository.GetContentForExpiration(System.DateTime)">
            <summary>
            Gets <see cref="T:Umbraco.Core.Models.IContent"/> objects having an expiration date before (lower than, or equal to) a specified date.
            </summary>
            <remarks>
            The content returned from this method may be culture variant, in which case the resulting <see cref="P:Umbraco.Core.Models.IContent.ContentSchedule"/> should be queried
            for which culture(s) have been scheduled.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IDocumentRepository.GetContentForRelease(System.DateTime)">
            <summary>
            Gets <see cref="T:Umbraco.Core.Models.IContent"/> objects having a release date before (lower than, or equal to) a specified date.
            </summary>
            <remarks>
            The content returned from this method may be culture variant, in which case the resulting <see cref="P:Umbraco.Core.Models.IContent.ContentSchedule"/> should be queried
            for which culture(s) have been scheduled.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IDocumentRepository.CountPublished(System.String)">
            <summary>
            Get the count of published items
            </summary>
            <returns></returns>
            <remarks>
            We require this on the repo because the IQuery{IContent} cannot supply the 'newest' parameter
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.Persistence.Repositories.IDocumentRepository.ReplaceContentPermissions(Umbraco.Core.Models.Membership.EntityPermissionSet)" -->
        <member name="M:Umbraco.Core.Persistence.Repositories.IDocumentRepository.AssignEntityPermission(Umbraco.Core.Models.IContent,System.Char,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Assigns a single permission to the current content item for the specified user group ids
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="groupIds"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IDocumentRepository.GetPermissionsForEntity(System.Int32)">
            <summary>
            Gets the explicit list of permissions for the content item
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IDocumentRepository.AddOrUpdatePermissions(Umbraco.Core.Models.Membership.ContentPermissionSet)">
            <summary>
            Used to add/update a permission for a content item
            </summary>
            <param name="permission"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeRepository.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.PropertyType})">
            <summary>
            Gets all entities of the specified <see cref="T:Umbraco.Core.Models.PropertyType"/> query
            </summary>
            <param name="query"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeRepository.GetAllPropertyTypeAliases">
            <summary>
            Gets all property type aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeRepository.GetAllContentTypeAliases(System.Guid[])">
            <summary>
            Gets all content type aliases
            </summary>
            <param name="objectTypes">
            If this list is empty, it will return all content type aliases for media, members and content, otherwise
            it will only return content type aliases for the object types specified
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeRepositoryBase`1.GetUniqueAlias(System.String)">
            <summary>
            Derives a unique alias from an existing alias.
            </summary>
            <param name="alias">The original alias.</param>
            <returns>The original alias with a number appended to it, so that it is unique.</returns>
            <remarks>Unique across all content, media and member types.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeRepositoryBase`1.HasContainerInPath(System.String)">
            <summary>
            Gets a value indicating whether there is a list view content item in the path.
            </summary>
            <param name="contentPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeRepositoryBase`1.HasContainerInPath(System.Int32[])">
            <summary>
            Gets a value indicating whether there is a list view content item in the path.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeRepositoryBase`1.HasContentNodes(System.Int32)">
            <summary>
            Returns true or false depending on whether content nodes have been created based on the provided content type id.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IDataTypeRepository.FindUsages(System.Int32)">
            <summary>
            Returns a dictionary of content type <see cref="T:Umbraco.Core.Udi"/>s and the property type aliases that use a <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IEntityRepository.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity})">
            <summary>
            Gets entities for a query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IEntityRepository.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},System.Guid)">
            <summary>
            Gets entities for a query and a specific object type allowing the query to be slightly more optimized
            </summary>
            <param name="query"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IEntityRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},System.Guid[],System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},Umbraco.Core.Services.Ordering,System.Action{NPoco.Sql{Umbraco.Core.Persistence.ISqlContext}})">
            <summary>
            Gets paged entities for a query and a subset of object types
            </summary>
            <param name="query"></param>
            <param name="objectTypes"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="filter"></param>
            <param name="ordering"></param>
            <param name="sqlCustomization">
            A callback providing the ability to customize the generated SQL used to retrieve entities
            </param>
            <returns>
            A collection of mixed entity types which would be of type <see cref="T:Umbraco.Core.Models.Entities.IEntitySlim"/>, <see cref="T:Umbraco.Core.Models.Entities.IDocumentEntitySlim"/>, <see cref="T:Umbraco.Core.Models.Entities.IMediaEntitySlim"/>,
            <see cref="T:Umbraco.Core.Models.Entities.IMemberEntitySlim"/>
            </returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IEntityRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},System.Guid,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets paged entities for a query and a specific object type
            </summary>
            <param name="query"></param>
            <param name="objectType"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="filter"></param>
            <param name="ordering"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ILanguageRepository.GetIdByIsoCode(System.String,System.Boolean)">
            <summary>
            Gets a language identifier from its ISO code.
            </summary>
            <remarks>
            <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ILanguageRepository.GetIsoCodeById(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets a language ISO code from its identifier.
            </summary>
            <remarks>
            <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ILanguageRepository.GetDefaultIsoCode">
            <summary>
            Gets the default language ISO code.
            </summary>
            <remarks>
            <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ILanguageRepository.GetDefaultId">
            <summary>
            Gets the default language identifier.
            </summary>
            <remarks>
            <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberGroupRepository.Get(System.Guid)">
            <summary>
            Gets a member group by it's uniqueId
            </summary>
            <param name="uniqueId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberGroupRepository.GetByName(System.String)">
            <summary>
            Gets a member group by it's name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberGroupRepository.CreateIfNotExists(System.String)">
            <summary>
            Creates the new member group if it doesn't already exist
            </summary>
            <param name="roleName"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberGroupRepository.GetMemberGroupsForMember(System.Int32)">
            <summary>
            Returns the member groups for a given member
            </summary>
            <param name="memberId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberGroupRepository.GetMemberGroupsForMember(System.String)">
            <summary>
            Returns the member groups for a given member
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberRepository.FindMembersInRole(System.String,System.String,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds members in a given role
            </summary>
            <param name="roleName"></param>
            <param name="usernameToMatch"></param>
            <param name="matchType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberRepository.GetByMemberGroup(System.String)">
            <summary>
            Get all members in a specific group
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberRepository.Exists(System.String)">
            <summary>
            Checks if a member with the username exists
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberRepository.GetCountByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMember})">
            <summary>
            Gets the count of items based on a complex query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberRepository.SetLastLogin(System.String,System.DateTime)">
            <summary>
            Sets a members last login date based on their username
            </summary>
            <param name="username"></param>
            <param name="date"></param>
            <remarks>
            This is a specialized method because whenever a member logs in, the membership provider requires us to set the 'online' which requires
            updating their login date. This operation must be fast and cannot use database locks which is fine if we are only executing a single query
            for this data since there won't be any other data contention issues.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IRedirectUrlRepository">
            <summary>
            Defines the <see cref="T:Umbraco.Core.Models.IRedirectUrl"/> repository.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRedirectUrlRepository.Get(System.String,System.Guid,System.String)">
            <summary>
            Gets a redirect URL.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <param name="contentKey">The content unique key.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRedirectUrlRepository.Delete(System.Guid)">
            <summary>
            Deletes a redirect URL.
            </summary>
            <param name="id">The redirect URL identifier.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRedirectUrlRepository.DeleteAll">
            <summary>
            Deletes all redirect URLs.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRedirectUrlRepository.DeleteContentUrls(System.Guid)">
            <summary>
            Deletes all redirect URLs for a given content.
            </summary>
            <param name="contentKey">The content unique key.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRedirectUrlRepository.GetMostRecentUrl(System.String)">
            <summary>
            Gets the most recent redirect URL corresponding to an Umbraco redirect URL route.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <returns>The most recent redirect URL corresponding to the route.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRedirectUrlRepository.GetMostRecentUrl(System.String,System.String)">
            <summary>
            Gets the most recent redirect URL corresponding to an Umbraco redirect URL route.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <param name="culture">The culture the domain is associated with</param>
            <returns>The most recent redirect URL corresponding to the route.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRedirectUrlRepository.GetContentUrls(System.Guid)">
            <summary>
            Gets all redirect URLs for a content item.
            </summary>
            <param name="contentKey">The content unique key.</param>
            <returns>All redirect URLs for the content item.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRedirectUrlRepository.GetAllUrls(System.Int64,System.Int32,System.Int64@)">
            <summary>
            Gets all redirect URLs.
            </summary>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRedirectUrlRepository.GetAllUrls(System.Int32,System.Int64,System.Int32,System.Int64@)">
            <summary>
            Gets all redirect URLs below a given content item.
            </summary>
            <param name="rootContentId">The content unique identifier.</param>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRedirectUrlRepository.SearchUrls(System.String,System.Int64,System.Int32,System.Int64@)">
            <summary>
            Searches for all redirect URLs that contain a given search term in their URL property.
            </summary>
            <param name="searchTerm">The term to search for.</param>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRelationRepository.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation})">
            <summary>
            Persist multiple <see cref="T:Umbraco.Core.Models.IRelation"/> at once
            </summary>
            <param name="relations"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRelationRepository.DeleteByParent(System.Int32,System.String[])">
            <summary>
            Deletes all relations for a parent for any specified relation type alias
            </summary>
            <param name="parentId"></param>
            <param name="relationTypeAliases">
            A list of relation types to match for deletion, if none are specified then all relations for this parent id are deleted
            </param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IContentRepository`2">
            <summary>
            Defines the base implementation of a repository for content items.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository`2.GetAllVersions(System.Int32)">
            <summary>
            Gets versions.
            </summary>
            <remarks>Current version is first, and then versions are ordered with most recent first.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository`2.GetAllVersionsSlim(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets versions.
            </summary>
            <remarks>Current version is first, and then versions are ordered with most recent first.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository`2.GetVersionIds(System.Int32,System.Int32)">
            <summary>
            Gets version identifiers.
            </summary>
            <remarks>Current version is first, and then versions are ordered with most recent first.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository`2.GetVersion(System.Int32)">
            <summary>
            Gets a version.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository`2.DeleteVersion(System.Int32)">
            <summary>
            Deletes a version.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository`2.DeleteVersions(System.Int32,System.DateTime)">
            <summary>
            Deletes all versions older than a date.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.IContentRepository`2.RecycleBinId">
            <summary>
            Gets the recycle bin identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository`2.GetRecycleBin">
            <summary>
            Gets the recycle bin content.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository`2.Count(System.String)">
            <summary>
            Gets the count of content items of a given content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository`2.CountChildren(System.Int32,System.String)">
            <summary>
            Gets the count of child content items of a given parent content, of a given content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository`2.CountDescendants(System.Int32,System.String)">
            <summary>
            Gets the count of descendant content items of a given parent content, of a given content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository`2.GetPage(Umbraco.Core.Persistence.Querying.IQuery{`1},System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{`1},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets paged content items.
            </summary>
            <remarks>Here, <paramref name="filter"/> can be null but <paramref name="ordering"/> cannot.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.Assign(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITag},System.Boolean)">
            <summary>
            Assign tags to a content property.
            </summary>
            <param name="contentId">The identifier of the content item.</param>
            <param name="propertyTypeId">The identifier of the property type.</param>
            <param name="tags">The tags to assign.</param>
            <param name="replaceTags">A value indicating whether to replace already assigned tags.</param>
            <remarks>
            <para>When <paramref name="replaceTags"/> is false, the tags specified in <paramref name="tags"/> are added to those already assigned.</para>
            <para>When <paramref name="tags"/> is empty and <paramref name="replaceTags"/> is true, all assigned tags are removed.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.Remove(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITag})">
            <summary>
            Removes assigned tags from a content property.
            </summary>
            <param name="contentId">The identifier of the content item.</param>
            <param name="propertyTypeId">The identifier of the property type.</param>
            <param name="tags">The tags to remove.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.RemoveAll(System.Int32)">
            <summary>
            Removes all assigned tags from a content item.
            </summary>
            <param name="contentId">The identifier of the content item.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.RemoveAll(System.Int32,System.Int32)">
            <summary>
            Removes all assigned tags from a content property.
            </summary>
            <param name="contentId">The identifier of the content item.</param>
            <param name="propertyTypeId">The identifier of the property type.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTaggedEntityByKey(System.Guid)">
            <summary>
            Gets a tagged entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTaggedEntityById(System.Int32)">
            <summary>
            Gets a tagged entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTaggedEntitiesByTagGroup(Umbraco.Core.Models.TaggableObjectTypes,System.String,System.String)">
            Gets all entities of a type, tagged with any tag in the specified group.
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTaggedEntitiesByTag(Umbraco.Core.Models.TaggableObjectTypes,System.String,System.String,System.String)">
            <summary>
            Gets all entities of a type, tagged with the specified tag.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTagsForEntityType(Umbraco.Core.Models.TaggableObjectTypes,System.String,System.String)">
            <summary>
            Gets all tags for an entity type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTagsForEntity(System.Int32,System.String,System.String)">
            <summary>
            Gets all tags attached to an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTagsForEntity(System.Guid,System.String,System.String)">
            <summary>
            Gets all tags attached to an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTagsForProperty(System.Int32,System.String,System.String,System.String)">
            <summary>
            Gets all tags attached to an entity via a property.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTagsForProperty(System.Guid,System.String,System.String,System.String)">
            <summary>
            Gets all tags attached to an entity via a property.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITemplateRepository.ValidateTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITemplateRepository.GetFileContentStream(System.String)">
            <summary>
            Gets the content of a template as a stream.
            </summary>
            <param name="filepath">The filesystem path to the template.</param>
            <returns>The content of the template.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITemplateRepository.SetFileContent(System.String,System.IO.Stream)">
            <summary>
            Sets the content of a template.
            </summary>
            <param name="filepath">The filesystem path to the template.</param>
            <param name="content">The content of the template.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserGroupRepository.Get(System.String)">
            <summary>
            Gets a group by it's alias
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserGroupRepository.GetGroupsAssignedToSection(System.String)">
            <summary>
            This is useful when an entire section is removed from config
            </summary>
            <param name="sectionAlias"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserGroupRepository.AddOrUpdateGroupWithUsers(Umbraco.Core.Models.Membership.IUserGroup,System.Int32[])">
            <summary>
            Used to add or update a user group and assign users to it
            </summary>
            <param name="userGroup"></param>
            <param name="userIds"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserGroupRepository.GetPermissions(System.Int32[],System.Int32[])">
            <summary>
            Gets explicitly defined permissions for the group for specified entities
            </summary>
            <param name="groupIds"></param>
            <param name="entityIds">Array of entity Ids, if empty will return permissions for the group for all entities</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserGroupRepository.GetPermissions(Umbraco.Core.Models.Membership.IReadOnlyUserGroup[],System.Boolean,System.Int32[])">
            <summary>
            Gets explicit and default permissions (if requested) permissions for the group for specified entities
            </summary>
            <param name="groups"></param>
            <param name="fallbackToDefaultPermissions">If true will include the group's default permissions if no permissions are explicitly assigned</param>
            <param name="nodeIds">Array of entity Ids, if empty will return permissions for the group for all entities</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserGroupRepository.ReplaceGroupPermissions(System.Int32,System.Collections.Generic.IEnumerable{System.Char},System.Int32[])">
            <summary>
            Replaces the same permission set for a single group to any number of entities
            </summary>
            <param name="groupId">Id of group</param>
            <param name="permissions">Permissions as enumerable list of <see cref="T:System.Char"/></param>
            <param name="entityIds">Specify the nodes to replace permissions for. If nothing is specified all permissions are removed.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserGroupRepository.AssignGroupPermission(System.Int32,System.Char,System.Int32[])">
            <summary>
            Assigns the same permission set for a single group to any number of entities
            </summary>
            <param name="groupId">Id of group</param>
            <param name="permission">Permissions as enumerable list of <see cref="T:System.Char"/></param>
            <param name="entityIds">Specify the nodes to replace permissions for</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.GetCountByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Membership.IUser})">
            <summary>
            Gets the count of items based on a complex query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.Exists(System.String)">
            <summary>
            Checks if a user with the username exists
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.GetAllInGroup(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.GetAllNotInGroup(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects not associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Membership.IUser},System.Int64,System.Int32,System.Int64@,System.Linq.Expressions.Expression{System.Func{Umbraco.Core.Models.Membership.IUser,System.Object}},Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String[],System.String[],Umbraco.Core.Models.Membership.UserState[],Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Membership.IUser})">
            <summary>
            Gets paged user results
            </summary>
            <param name="query"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderBy"></param>
            <param name="customFilter"></param>
            <param name="orderDirection"></param>
            <param name="includeUserGroups">
            A filter to only include user that belong to these user groups
            </param>
            <param name="excludeUserGroups">
            A filter to only include users that do not belong to these user groups
            </param>
            <param name="userState">Optional parameter to filter by specified user state</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.GetByUsername(System.String,System.Boolean)">
            <summary>
            Returns a user by username
            </summary>
            <param name="username"></param>
            <param name="includeSecurityData">
            This is only used for a shim in order to upgrade to 7.7
            </param>
            <returns>
            A non cached <see cref="T:Umbraco.Core.Models.Membership.IUser"/> instance
            </returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.Get(System.Int32,System.Boolean)">
            <summary>
            Returns a user by id
            </summary>
            <param name="id"></param>
            <param name="includeSecurityData">
            This is only used for a shim in order to upgrade to 7.7
            </param>
            <returns>
            A non cached <see cref="T:Umbraco.Core.Models.Membership.IUser"/> instance
            </returns>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.UserLoginDto.LoggedInUtc">
            <summary>
            Tracks when the session is created
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.UserLoginDto.LastValidatedUtc">
            <summary>
            Updated every time a user's session is validated
            </summary>
            <remarks>
            <para>This allows us to guess if a session is timed out if a user doesn't actively
            log out and also allows us to trim the data in the table.</para>
            <para>The index is IMPORTANT as it prevents deadlocks during deletion of
            old sessions (DELETE ... WHERE lastValidatedUtc &lt; date).</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.UserLoginDto.LoggedOutUtc">
            <summary>
            Tracks when the session is removed when the user's account is logged out
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.UserLoginDto.IpAddress">
            <summary>
            Logs the IP address of the session if available
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.ContentNuDto.Data">
            <summary>
            Stores serialized JSON representing the content item's property and culture name values
            </summary>
            <remarks>
            Pretty much anything that would require a 1:M lookup is serialized here
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.DomainDto.IsoCode">
            <summary>
            Used for a result on the query to get the associated language for a domain if there is one
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.ExternalLoginDto.UserData">
            <summary>
            Used to store any arbitrary data for the user and external provider - like user tokens returned from the provider
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.LanguageDto.Id">
            <summary>
            Gets or sets the identifier of the language.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.LanguageDto.IsoCode">
            <summary>
            Gets or sets the ISO code of the language.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.LanguageDto.CultureName">
            <summary>
            Gets or sets the culture name of the language.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.LanguageDto.IsDefault">
            <summary>
            Gets or sets a value indicating whether the language is the default language.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.LanguageDto.IsMandatory">
            <summary>
            Gets or sets a value indicating whether the language is mandatory.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.LanguageDto.FallbackLanguageId">
            <summary>
            Gets or sets the identifier of a fallback language.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.LogDto.EntityType">
            <summary>
            This is the entity type associated with the log
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.LogDto.Parameters">
            <summary>
            Used to store additional data parameters for the log
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.UserDto.PasswordConfig">
            <summary>
            This will represent a JSON structure of how the password has been created (i.e hash algorithm, iterations)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.UserDto.Avatar">
            <summary>
            Will hold the media file system relative path of the users custom avatar if they uploaded one
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.UserDto.TourData">
            <summary>
            A Json blob stored for recording tour data for a user
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Dtos.UserGroupDto.UserCount">
            <summary>
            This is only relevant when this column is included in the results (i.e. GetUserGroupsWithUserCounts)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Factories.ContentBaseFactory.BuildEntity(Umbraco.Core.Persistence.Dtos.DocumentDto,Umbraco.Core.Models.IContentType)">
            <summary>
            Builds an IContent item from a dto and content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Factories.ContentBaseFactory.BuildEntity(Umbraco.Core.Persistence.Dtos.ContentDto,Umbraco.Core.Models.IMediaType)">
            <summary>
            Builds an IMedia item from a dto and content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Factories.ContentBaseFactory.BuildEntity(Umbraco.Core.Persistence.Dtos.MemberDto,Umbraco.Core.Models.IMemberType)">
            <summary>
            Builds an IMedia item from a dto and content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Factories.ContentBaseFactory.BuildDto(Umbraco.Core.Models.IContent,System.Guid)">
            <summary>
            Builds a dto from an IContent item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Factories.ContentBaseFactory.BuildDto(Umbraco.Core.PropertyEditors.PropertyEditorCollection,Umbraco.Core.Models.IMedia)">
            <summary>
            Builds a dto from an IMedia item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Factories.ContentBaseFactory.BuildDto(Umbraco.Core.Models.IMember)">
            <summary>
            Builds a dto from an IMember item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Factories.PropertyFactory.BuildDtos(Umbraco.Core.Models.ContentVariation,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Property},Umbraco.Core.Persistence.Repositories.ILanguageRepository,System.Boolean@,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            Creates a collection of <see cref="T:Umbraco.Core.Persistence.Dtos.PropertyDataDto"/> from a collection of <see cref="T:Umbraco.Core.Models.Property"/>
            </summary>
            <param name="contentVariation">
            The <see cref="T:Umbraco.Core.Models.ContentVariation"/> of the entity containing the collection of <see cref="T:Umbraco.Core.Models.Property"/>
            </param>
            <param name="currentVersionId"></param>
            <param name="publishedVersionId"></param>
            <param name="properties">The properties to map</param>
            <param name="languageRepository"></param>
            <param name="edited">out parameter indicating that one or more properties have been edited</param>
            <param name="editedCultures">
            Out parameter containing a collection of edited cultures when the contentVariation varies by culture.
            The value of this will be used to populate the edited cultures in the umbracoDocumentCultureVariation table.
            </param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.AuditEntryMapper">
            <summary>
            Represents a mapper for audit entry entities.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.ConsentMapper">
            <summary>
            Represents a mapper for consent entities.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.ContentMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Content"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.ContentTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.ContentType"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.DataTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.DataType"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.DictionaryMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.DictionaryItem"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.DictionaryTranslationMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.DictionaryTranslation"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.LanguageMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Language"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.MapperForAttribute">
            <summary>
            An attribute used to decorate mappers to be associated with entities
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.MediaMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Media"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.MediaTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.MediaType"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.MemberMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Member"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.MemberTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.MemberType"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.PocoMapper">
            <summary>
            Extends NPoco default mapper and ensures that nullable dates are not saved to the database.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.PropertyGroupMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.PropertyGroup"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.PropertyTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.PropertyType"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.RelationMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Relation"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.RelationTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.RelationType"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.TagMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Tag"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.TemplateMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Template"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.UserGroupMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Membership.UserGroup"/> to DTO mapper used to translate the properties of the public api
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlContextExtensions">
            <summary>
            Provides extension methods to <see cref="T:Umbraco.Core.Persistence.ISqlContext"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlContextExtensions.VisitDto``1(Umbraco.Core.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Visit an expression.
            </summary>
            <typeparam name="TDto">The type of the DTO.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Core.Persistence.ISqlContext"/>.</param>
            <param name="expression">An expression to visit.</param>
            <param name="alias">An optional table alias.</param>
            <returns>A SQL statement, and arguments, corresponding to the expression.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlContextExtensions.VisitDto``2(Umbraco.Core.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Visit an expression.
            </summary>
            <typeparam name="TDto">The type of the DTO.</typeparam>
            <typeparam name="TOut">The type returned by the expression.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Core.Persistence.ISqlContext"/>.</param>
            <param name="expression">An expression to visit.</param>
            <param name="alias">An optional table alias.</param>
            <returns>A SQL statement, and arguments, corresponding to the expression.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlContextExtensions.VisitDto``2(Umbraco.Core.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}},System.String,System.String)">
            <summary>
            Visit an expression.
            </summary>
            <typeparam name="TDto1">The type of the first DTO.</typeparam>
            <typeparam name="TDto2">The type of the second DTO.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Core.Persistence.ISqlContext"/>.</param>
            <param name="expression">An expression to visit.</param>
            <param name="alias1">An optional table alias for the first DTO.</param>
            <param name="alias2">An optional table alias for the second DTO.</param>
            <returns>A SQL statement, and arguments, corresponding to the expression.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlContextExtensions.VisitDto``3(Umbraco.Core.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.String,System.String)">
            <summary>
            Visit an expression.
            </summary>
            <typeparam name="TDto1">The type of the first DTO.</typeparam>
            <typeparam name="TDto2">The type of the second DTO.</typeparam>
            <typeparam name="TOut">The type returned by the expression.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Core.Persistence.ISqlContext"/>.</param>
            <param name="expression">An expression to visit.</param>
            <param name="alias1">An optional table alias for the first DTO.</param>
            <param name="alias2">An optional table alias for the second DTO.</param>
            <returns>A SQL statement, and arguments, corresponding to the expression.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlContextExtensions.VisitModel``1(Umbraco.Core.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Visit a model expression.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Core.Persistence.ISqlContext"/>.</param>
            <param name="expression">An expression to visit.</param>
            <returns>A SQL statement, and arguments, corresponding to the expression.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlContextExtensions.VisitModelField``1(Umbraco.Core.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Visit a model expression representing a field.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Core.Persistence.ISqlContext"/>.</param>
            <param name="field">An expression to visit, representing a field.</param>
            <returns>The name of the field.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntaxExtensions">
            <summary>
            Provides extension methods to <see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntaxExtensions.GetFieldName``1(Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Gets a quoted table and field name.
            </summary>
            <typeparam name="TDto">The type of the DTO.</typeparam>
            <param name="sqlSyntax">An <see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/>.</param>
            <param name="fieldSelector">An expression specifying the field.</param>
            <param name="tableAlias">An optional table alias.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.UmbracoPocoDataBuilder">
            <summary>
            Umbraco's implementation of NPoco <see cref="T:NPoco.PocoDataBuilder"/>.
            </summary>
            <remarks>
            <para>NPoco PocoDataBuilder analyzes DTO classes and returns infos about the tables and
            their columns.</para>
            <para>In some very special occasions, a class may expose a column that we do not want to
            use. This is essentially when adding a column to the User table: if the code wants the
            column to exist, and it does not exist yet in the database, because a given migration has
            not run, then the user cannot log into the site, and cannot upgrade = catch 22.</para>
            <para>So far, this is very manual. We don't try to be clever and figure out whether the
            columns exist already. We just ignore it.</para>
            <para>Beware, the application MUST restart when this class behavior changes.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.BulkDataReader">
             <summary>
             A base implementation of <see cref="T:System.Data.IDataReader"/> that is suitable for <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)"/>.
             </summary>
             <remarks>
            
             Borrowed from Microsoft:
             See: https://blogs.msdn.microsoft.com/anthonybloesch/2013/01/23/bulk-loading-data-with-idatareader-and-sqlbulkcopy/
            
             This implementation is designed to be very memory efficient requiring few memory resources and to support
             rapid transfer of data to SQL Server.
            
             Subclasses should implement <see cref="P:Umbraco.Core.Persistence.BulkDataReader.SchemaName"/>, <see cref="P:Umbraco.Core.Persistence.BulkDataReader.TableName"/>,
             <see cref="M:Umbraco.Core.Persistence.BulkDataReader.AddSchemaTableRows"/>, <see cref="M:Umbraco.Core.Persistence.BulkDataReader.Read"/>, <see cref="M:Umbraco.Core.Persistence.BulkDataReader.GetValue(System.Int32)"/>.
             If they contain disposable resources they should override <see cref="M:Umbraco.Core.Persistence.BulkDataReader.Dispose(System.Boolean)"/>.
            
             SD: Alternatively, we could have used a LinqEntityDataReader which is nicer to use but it uses quite a lot of reflection and
             I thought this would just be quicker.
             Simple example of that: https://github.com/gridsum/DataflowEx/blob/master/Gridsum.DataflowEx/Databases/BulkDataReader.cs
             Full example of that: https://github.com/matthewschrager/Repository/blob/master/Repository.EntityFramework/EntityDataReader.cs
              So we know where to find that if we ever need it, these would convert any Linq data source to an IDataReader
            
             </remarks>
        </member>
        <member name="F:Umbraco.Core.Persistence.BulkDataReader._schemaTable">
            <summary>
            The <see cref="T:System.Data.DataTable"/> containing the input row set's schema information <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)"/>
            requires to function correctly.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.BulkDataReader._columnMappings">
            <summary>
            The mapping from the row set input to the target table's columns.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.BulkDataReader.ColumnMappings">
            <summary>
            The mapping from the row set input to the target table's columns.
            </summary>
            <remarks>
            If necessary, <see cref="M:Umbraco.Core.Persistence.BulkDataReader.AddSchemaTableRows"/> will be called to initialize the mapping.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.BulkDataReader.SchemaName">
            <summary>
            The name of the input row set's schema.
            </summary>
            <remarks>
            This may be different from the target schema but usually they are identical.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.BulkDataReader.TableName">
            <summary>
            The name of the input row set's table.
            </summary>
            <remarks>
            This may be different from the target table but usually they are identical.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.AddSchemaTableRows">
            <summary>
            Adds the input row set's schema to the object.
            </summary>
            <remarks>
            Call <see cref="M:Umbraco.Core.Persistence.BulkDataReader.AddSchemaTableRow(System.String,System.Nullable{System.Int32},System.Nullable{System.Int16},System.Nullable{System.Int16},System.Boolean,System.Boolean,System.Boolean,System.Data.SqlDbType,System.String,System.String,System.String,System.String,System.String)"/>
            to do this for each row.
            </remarks>
            <seealso cref="M:Umbraco.Core.Persistence.BulkDataReader.AddSchemaTableRow(System.String,System.Nullable{System.Int32},System.Nullable{System.Int16},System.Nullable{System.Int16},System.Boolean,System.Boolean,System.Boolean,System.Data.SqlDbType,System.String,System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="F:Umbraco.Core.Persistence.BulkDataReader.AllowedOptionalColumnCombinations">
            <summary>
            For each <see cref="T:System.Data.SqlDbType"/>, the optional columns that may have values.
            </summary>
            <remarks>
            This is used for checking the parameters of <see cref="M:Umbraco.Core.Persistence.BulkDataReader.AddSchemaTableRow(System.String,System.Nullable{System.Int32},System.Nullable{System.Int16},System.Nullable{System.Int16},System.Boolean,System.Boolean,System.Boolean,System.Data.SqlDbType,System.String,System.String,System.String,System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:Umbraco.Core.Persistence.BulkDataReader.AddSchemaTableRow(System.String,System.Nullable{System.Int32},System.Nullable{System.Int16},System.Nullable{System.Int16},System.Boolean,System.Boolean,System.Boolean,System.Data.SqlDbType,System.String,System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.AddSchemaTableRow(System.String,System.Nullable{System.Int32},System.Nullable{System.Int16},System.Nullable{System.Int16},System.Boolean,System.Boolean,System.Boolean,System.Data.SqlDbType,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            A helper method to support <see cref="M:Umbraco.Core.Persistence.BulkDataReader.AddSchemaTableRows"/>.
            </summary>
            <remarks>
            This methods does extensive argument checks. These errors will cause hard to diagnose exceptions in latter
            processing so it is important to detect them when they can be easily associated with the code defect.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The combination of values for the parameters is not supported.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A null value for the parameter is not supported.
            </exception>
            <param name="columnName">
            The name of the column.
            </param>
            <param name="columnSize">
            The size of the column which may be null if not applicable.
            </param>
            <param name="numericPrecision">
            The precision of the column which may be null if not applicable.
            </param>
            <param name="numericScale">
            The scale of the column which may be null if not applicable.
            </param>
            <param name="isUnique">
            Are the column values unique (i.e. never duplicated)?
            </param>
            <param name="isKey">
            Is the column part of the primary key?
            </param>
            <param name="allowDbNull">
            Is the column nullable (i.e. optional)?
            </param>
            <param name="providerType">
            The corresponding <see cref="T:System.Data.SqlDbType"/>.
            </param>
            <param name="udtSchema">
            The schema name of the UDT.
            </param>
            <param name="udtType">
            The type name of the UDT.
            </param>
            <param name="xmlSchemaCollectionDatabase">
            For XML columns the schema collection's database name. Otherwise, null.
            </param>
            <param name="xmlSchemaCollectionOwningSchema">
            For XML columns the schema collection's schema name. Otherwise, null.
            </param>
            <param name="xmlSchemaCollectionName">
            For XML columns the schema collection's name. Otherwise, null.
            </param>
            <seealso cref="M:Umbraco.Core.Persistence.BulkDataReader.AddSchemaTableRows"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.BulkDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <remarks>
            <see cref="T:System.Data.SqlClient.SqlBulkCopy"/> does not support nested result sets so this method always returns 0.
            </remarks>
            <seealso cref="P:System.Data.IDataReader.Depth"/>
        </member>
        <member name="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <seealso cref="P:System.Data.IDataRecord.FieldCount"/>
        </member>
        <member name="F:Umbraco.Core.Persistence.BulkDataReader._isOpen">
            <summary>
            Is the bulk copy process open?
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.BulkDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <seealso cref="P:System.Data.IDataReader.IsClosed"/>
        </member>
        <member name="P:Umbraco.Core.Persistence.BulkDataReader.Item(System.Int32)">
            <summary>
            Gets the column located at the specified index. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            No column with the specified index was found.
            </exception>
            <param name="i">
            The zero-based index of the column to get.
            </param>
            <returns>
            The column located at the specified index as an <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="P:IDataRecord.Item(Int32)"/>
        </member>
        <member name="P:Umbraco.Core.Persistence.BulkDataReader.Item(System.String)">
            <summary>
            Gets the column with the specified name. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            No column with the specified name was found.
            </exception>
            <param name="name">
            The name of the column to find.
            </param>
            <returns>
            The column located at the specified name as an <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="P:IDataRecord.Item(String)"/>
        </member>
        <member name="P:Umbraco.Core.Persistence.BulkDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <remarks>
            Always returns -1 which is the expected behaviour for statements.
            </remarks>
            <seealso cref="P:System.Data.IDataReader.RecordsAffected"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.Close">
            <summary>
            Closes the <see cref="T:System.Data.IDataReader"/>. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <seealso cref="M:System.Data.IDataReader.Close"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.  (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetBoolean(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/>.  (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetByte(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.
            (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <remarks>
            If you pass a buffer that is null, <see cref="M:Umbraco.Core.Persistence.BulkDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)"/> returns the length of the row in bytes.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <param name="fieldOffset">
            The index within the field from which to start the read operation.
            </param>
            <param name="buffer">
            The buffer into which to read the stream of bytes.
            </param>
            <param name="bufferoffset">
            The index for buffer to start the read operation.
            </param>
            <param name="length">
            The number of bytes to read.
            </param>
            <returns>
            The actual number of bytes read.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/>.  (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetChar(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
            (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <remarks>
            If you pass a buffer that is null, <see cref="M:Umbraco.Core.Persistence.BulkDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)"/> returns the length of the row in bytes.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <param name="fieldoffset">
            The index within the field from which to start the read operation.
            </param>
            <param name="buffer">
            The buffer into which to read the stream of characters.
            </param>
            <param name="bufferoffset">
            The index for buffer to start the read operation.
            </param>
            <param name="length">
            The number of characters to read.
            </param>
            <returns>
            The actual number of characters read.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetData(System.Int32)">
            <summary>
            Returns an IDataReader for the specified column ordinal. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <remarks>
            <see cref="T:System.Data.SqlClient.SqlBulkCopy"/> does not support nested result sets so this method always returns null.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The <see cref="T:System.Data.IDataReader"/> for the specified column ordinal (null).
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetData(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetDataTypeName(System.Int32)">
            <summary>
            The data type information for the specified field. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The data type information for the specified field.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetDataTypeName(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/>.  (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetDateTime(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetDateTimeOffset(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/>.  (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetDecimal(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/>.  (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetDouble(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type"/> information corresponding to the type of <see cref="T:System.Object"/> that would be returned from <see cref="M:Umbraco.Core.Persistence.BulkDataReader.GetValue(System.Int32)"/>.
            (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The <see cref="T:System.Type"/> information corresponding to the type of <see cref="T:System.Object"/> that would be returned from <see cref="M:Umbraco.Core.Persistence.BulkDataReader.GetValue(System.Int32)"/>.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/>.  (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetFloat(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/>.  (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetGuid(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/>.  (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetInt16(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/>.  (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetInt32(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/>.  (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetInt64(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The name of the field or the empty string (""), if there is no value to return.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetName(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetOrdinal(System.String)">
            <summary>
            Return the index of the named field. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index of the named field was not found.
            </exception>
            <param name="name">
            The name of the field to find.
            </param>
            <returns>
            The index of the named field.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetOrdinal(System.String)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"/> that describes the column metadata of the <see cref="T:System.Data.IDataReader"/>. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Data.IDataReader"/> is closed.
            </exception>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that describes the column metadata.
            </returns>
            <seealso cref="M:System.Data.IDataReader.GetSchemaTable"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/>. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetString(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetTimeSpan(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Object"/>. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            The value of the column.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetValue(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current record. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> was null.
            </exception>
            <param name="values">
            An array of <see cref="T:System.Object"/> to copy the attribute fields into.
            </param>
            <returns>
            The number of instances of <see cref="T:System.Object"/> in the array.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.GetValues(System.Object[])"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:Umbraco.Core.Persistence.BulkDataReader.FieldCount"/>.
            </exception>
            <param name="i">
            The zero-based column ordinal.
            </param>
            <returns>
            True if the specified field is set to null; otherwise, false.
            </returns>
            <seealso cref="M:System.Data.IDataRecord.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch SQL statements. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <remarks>
            <see cref="T:System.Data.IDataReader"/> for <see cref="T:System.Data.SqlClient.SqlBulkCopy"/> returns a single result set so false is always returned.
            </remarks>
            <returns>
            True if there are more rows; otherwise, false. <see cref="T:System.Data.IDataReader"/> for <see cref="T:System.Data.SqlClient.SqlBulkCopy"/> returns a single result set so false is always returned.
            </returns>
            <seealso cref="M:System.Data.IDataReader.NextResult"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.Read">
            <summary>
            Advances the <see cref="T:System.Data.IDataReader"/> to the next record. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <returns>
            True if there are more rows; otherwise, false.
            </returns>
            <seealso cref="M:System.Data.IDataReader.Read"/>
        </member>
        <member name="F:Umbraco.Core.Persistence.BulkDataReader._disposed">
            <summary>
            Has the object been disposed?
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.Dispose(System.Boolean)">
            <summary>
            Dispose of any disposable and expensive resources.
            </summary>
            <param name="disposing">
            Is this call the result of a <see cref="M:System.IDisposable.Dispose"/> call?
            </param>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Inherited from <see cref="T:System.Data.IDataReader"/>.)
            </summary>
            <seealso cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:Umbraco.Core.Persistence.BulkDataReader.Finalize">
            <summary>
            Finalizer
            </summary>
            <remarks>
            <see cref="T:Umbraco.Core.Persistence.BulkDataReader"/> has no unmanaged resources but a subclass may thus a finalizer is required.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.ConstraintAttribute">
            <summary>
            Attribute that represents a db constraint
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ConstraintAttribute.Name">
            <summary>
            Gets or sets the name of the constraint
            </summary>
            <remarks>
            Overrides the default naming of a property constraint:
            DF_tableName_propertyName
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ConstraintAttribute.Default">
            <summary>
            Gets or sets the Default value
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.ForeignKeyAttribute">
            <summary>
            Attribute that represents a Foreign Key reference
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ForeignKeyAttribute.OnDelete">
            <summary>
            Gets or sets the cascade rule for deletions.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ForeignKeyAttribute.OnUpdate">
            <summary>
            Gets or sets the cascade rule for updates.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ForeignKeyAttribute.Name">
            <summary>
            Gets or sets the name of the foreign key reference
            </summary>
            <remarks>
            Overrides the default naming of a foreign key reference:
            FK_thisTableName_refTableName
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ForeignKeyAttribute.Column">
            <summary>
            Gets or sets the name of the Column that this foreign key should reference.
            </summary>
            <remarks>PrimaryKey column is used by default</remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute">
            <summary>
            Attribute that represents an Index
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute.Name">
            <summary>
            Gets or sets the name of the Index
            </summary>
            <remarks>
            Overrides default naming of indexes:
            IX_tableName
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute.IndexType">
            <summary>
            Gets or sets the type of index to create
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute.ForColumns">
            <summary>
            Gets or sets the column name(s) for the current index
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.IndexTypes">
            <summary>
            Enum for the 3 types of indexes that can be created
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.LengthAttribute">
            <summary>
            Attribute that represents the length of a column
            </summary>
            <remarks>Used to define the length of fixed sized columns - typically used for nvarchar</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.LengthAttribute.Length">
            <summary>
            Gets or sets the length of a column
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.NullSettingAttribute">
            <summary>
            Attribute that represents the Null-setting of a column
            </summary>
            <remarks>
            This should only be used for Columns that can be Null.
            By convention the Columns will be "NOT NULL".
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.NullSettingAttribute.NullSetting">
            <summary>
            Gets or sets the <see cref="T:Umbraco.Core.Persistence.DatabaseAnnotations.NullSettings"/> for a column
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.NullSettings">
            <summary>
            Enum with the 2 possible Null settings: Null or Not Null
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute">
            <summary>
            Attribute that represents a Primary Key
            </summary>
            <remarks>
            By default, Clustered and AutoIncrement is set to true.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.Clustered">
            <summary>
            Gets or sets a boolean indicating whether the primary key is clustered.
            </summary>
            <remarks>Defaults to true</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.AutoIncrement">
            <summary>
            Gets or sets a boolean indicating whether the primary key is auto incremented.
            </summary>
            <remarks>Defaults to true</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.Name">
            <summary>
            Gets or sets the name of the PrimaryKey.
            </summary>
            <remarks>
            Overrides the default naming of a PrimaryKey constraint:
            PK_tableName
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.OnColumns">
            <summary>
            Gets or sets the names of the columns for this PrimaryKey.
            </summary>
            <remarks>
            Should only be used if the PrimaryKey spans over multiple columns.
            Usage: [nodeId], [otherColumn]
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.IdentitySeed">
            <summary>
            Gets or sets the Identity Seed, which is used for Sql Ce databases.
            </summary>
            <remarks>
            We'll only look for changes to seeding and apply them if the configured database
            is an Sql Ce database.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.ReferencesAttribute">
            <summary>
            Attribute that represents a reference between two tables/DTOs
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ReferencesAttribute.Type">
            <summary>
            Gets or sets the Type of the referenced DTO/table
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypeAttribute">
            <summary>
            Attribute that represents the usage of a special type
            </summary>
            <remarks>
            Should only be used when the .NET type can't be directly translated to a DbType.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypeAttribute.DatabaseType">
            <summary>
            Gets or sets the <see cref="T:Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypes"/> for this column
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypes">
            <summary>
            Enum with the two special types that has to be supported because
            of the current umbraco db schema.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseModelDefinitions.DbIndexDefinition">
            <summary>
            Represents a database index definition retrieved by querying the database
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.DbCommandExtensions.UnwrapUmbraco(System.Data.IDbCommand)">
            <summary>
            Unwraps a database command.
            </summary>
            <remarks>UmbracoDatabase wraps the original database connection in various layers (see
            OnConnectionOpened); this unwraps and returns the original database command.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.DbConnectionExtensions.UnwrapUmbraco(System.Data.IDbConnection)">
            <summary>
            Unwraps a database connection.
            </summary>
            <remarks>UmbracoDatabase wraps the original database connection in various layers (see
            OnConnectionOpened); this unwraps and returns the original database connection.</remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.EntityNotFoundException">
            <summary>
            An exception used to indicate that an Umbraco entity could not be found.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="P:Umbraco.Core.Persistence.EntityNotFoundException.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
            <remarks>
            This object should be serializable to prevent a <see cref="T:System.Runtime.Serialization.SerializationException" /> to be thrown.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.EntityNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.EntityNotFoundException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.EntityNotFoundException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.EntityNotFoundException" /> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.EntityNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.EntityNotFoundException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.EntityNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.EntityNotFoundException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.EntityNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.EntityNotFoundException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.EntityNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
        </member>
        <member name="M:Umbraco.Core.Persistence.EntityNotFoundException.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy">
            <summary>
            Defines an interface which must be implemented by custom components responsible for detecting specific transient conditions.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy.IsTransient(System.Exception)">
            <summary>
            Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
            <param name="ex">The exception object to be verified.</param>
            <returns>True if the specified exception is considered as transient, otherwise false.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs">
            <summary>
            Contains information required for the <see cref="E:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.Retrying"/> event.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs.#ctor(System.Int32,System.TimeSpan,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs"/> class.
            </summary>
            <param name="currentRetryCount">The current retry attempt count.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
            <param name="lastException">The exception which caused the retry conditions to occur.</param>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs.CurrentRetryCount">
            <summary>
            Gets the current retry count.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs.Delay">
            <summary>
            Gets the delay indicating how long the current thread will be suspended for before the next iteration will be invoked.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs.LastException">
            <summary>
            Gets the exception which caused the retry conditions to occur.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException">
            <summary>
            The special type of exception that provides managed exit from a retry loop. The user code can use this exception to notify the retry policy that no further retry attempts are required.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException" /> class with a default error message.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException" /> class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryPolicy">
            <summary>
            Provides the base implementation of the retry mechanism for unreliable actions and transient conditions.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.NoRetry">
            <summary>
            Returns a default policy that does no retries, it just invokes action exactly once.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.DefaultFixed">
            <summary>
            Returns a default policy that implements a fixed retry interval configured with the default <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> retry strategy.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.DefaultProgressive">
            <summary>
            Returns a default policy that implements a progressive retry interval configured with the default <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental"/> retry strategy.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.DefaultExponential">
            <summary>
            Returns a default policy that implements a random exponential retry interval configured with the default <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> retry strategy.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy,Umbraco.Core.Persistence.FaultHandling.RetryStrategy)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryStrategy">The retry strategy to use for this retry policy.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy,System.Int32)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and default fixed time interval between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and fixed time interval between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The interval between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and back-off parameters for calculating the exponential delay between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time.</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The time value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="E:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.Retrying">
            <summary>
            An instance of a callback delegate that will be invoked whenever a retry condition is encountered.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.RetryStrategy">
            <summary>
            Gets the retry strategy.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.ErrorDetectionStrategy">
            <summary>
            Gets the instance of the error detection strategy.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.ExecuteAction(System.Action)">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <param name="action">A delegate representing the executable action which doesn't return any results.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <typeparam name="TResult">The type of result expected from the executable action.</typeparam>
            <param name="func">A delegate representing the executable action which returns the result of type R.</param>
            <returns>The result from the action.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)">
            <summary>
            Notifies the subscribers whenever a retry condition is encountered.
            </summary>
            <param name="retryCount">The current retry attempt count.</param>
            <param name="lastError">The exception which caused the retry conditions to occur.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.TransientErrorIgnoreStrategy">
            <summary>
            Implements a strategy that ignores any transient errors.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.TransientErrorIgnoreStrategy.IsTransient(System.Exception)">
            <summary>
            Always return false.
            </summary>
            <param name="ex">The exception.</param>
            <returns>Returns false.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.TransientErrorCatchAllStrategy">
            <summary>
            Implements a strategy that treats all exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.TransientErrorCatchAllStrategy.IsTransient(System.Exception)">
            <summary>
            Always return true.
            </summary>
            <param name="ex">The exception.</param>
            <returns>Returns true.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryPolicyFactory">
            <summary>
            Provides a factory class for instantiating application-specific retry policies.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.ShouldRetry">
            <summary>
            Defines a callback delegate that will be invoked whenever a retry condition is encountered.
            </summary>
            <param name="retryCount">The current retry attempt count.</param>
            <param name="lastException">The exception which caused the retry conditions to occur.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
            <returns>Returns a callback delegate that will be invoked whenever to retry should be attempt.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryStrategy">
            <summary>
            Represents a retry strategy that determines how many times should be retried and the interval between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultClientRetryCount">
            <summary>
            The default number of retry attempts.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultClientBackoff">
            <summary>
            The default amount of time used when calculating a random delta in the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultMaxBackoff">
            <summary>
            The default maximum amount of time used when calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultMinBackoff">
            <summary>
            The default minimum amount of time used when calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultRetryInterval">
            <summary>
            The default amount of time defining an interval between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultRetryIncrement">
            <summary>
            The default amount of time defining a time increment between retry attempts in the progressive delay policy.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultFirstFastRetry">
            <summary>
            The default flag indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.NoRetry">
            <summary>
            Returns a default policy that does no retries, it just invokes action exactly once.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultFixed">
            <summary>
            Returns a default policy that implements a fixed retry interval configured with <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultClientRetryCount"/> and <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultRetryInterval"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultProgressive">
            <summary>
            Returns a default policy that implements a progressive retry interval configured with <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultClientRetryCount"/>, <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultRetryInterval"/> and <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultRetryIncrement"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultExponential">
            <summary>
            Returns a default policy that implements a random exponential retry interval configured with <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultClientRetryCount"/>, <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultMinBackoff"/>, <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultMaxBackoff"/> and <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultClientBackoff"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryStrategy"/> class.
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.FastFirstRetry">
            <summary>
            Gets or sets a value indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.Name">
            <summary>
            Gets the name of the retry strategy.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff">
            <summary>
            A retry strategy with back-off parameters for calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff"/> class.
            </summary>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff"/> class.
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff"/> class.
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value that will be used for calculating a random delta in the exponential delay between retries.</param>
            <param name="firstFastRetry">
            Indicates whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.
            </param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval">
            <summary>
            A retry strategy with a specified number of retry attempts and a default fixed time interval between retries.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> class.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> class.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval.#ctor(System.String,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> class.
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval.#ctor(System.String,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> class.
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental">
            <summary>
            A retry strategy with a specified number of retry attempts and an incremental time interval between retries.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental.#ctor(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental"/> class.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental"/> class.
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental"/> class.
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.Strategies.NetworkConnectivityErrorDetectionStrategy">
            <summary>
            Implements a strategy that detects network connectivity errors such as host not found.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.Strategies.SqlAzureTransientErrorDetectionStrategy">
            <summary>
            Provides the transient error detection logic for transient faults that are specific to SQL Azure.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.Strategies.SqlAzureTransientErrorDetectionStrategy.ProcessNetLibErrorCode">
            <summary>
            Error codes reported by the DBNETLIB module.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.SqlAzureTransientErrorDetectionStrategy.IsTransient(System.Exception)">
            <summary>
            Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
            <param name="ex">The exception object to be verified.</param>
            <returns>true if the specified exception is considered as transient; otherwise, false.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.ThrottlingMode">
            <summary>
            Defines the possible throttling modes in SQL Azure.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingMode.NoThrottling">
            <summary>
            Corresponds to "No Throttling" throttling mode whereby all SQL statements can be processed.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingMode.RejectUpdateInsert">
            <summary>
            Corresponds to "Reject Update / Insert" throttling mode whereby SQL statements such as INSERT, UPDATE, CREATE TABLE and CREATE INDEX are rejected.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingMode.RejectAllWrites">
            <summary>
            Corresponds to "Reject All Writes" throttling mode whereby SQL statements such as INSERT, UPDATE, DELETE, CREATE, DROP are rejected.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingMode.RejectAll">
            <summary>
            Corresponds to "Reject All" throttling mode whereby all SQL statements are rejected.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingMode.Unknown">
            <summary>
            Corresponds to an unknown throttling mode whereby throttling mode cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.ThrottlingType">
            <summary>
            Defines the possible throttling types in SQL Azure.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingType.None">
            <summary>
            Indicates that no throttling was applied to a given resource.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingType.Soft">
            <summary>
            Corresponds to a Soft throttling type. Soft throttling is applied when machine resources such as, CPU, IO, storage, and worker threads exceed
            predefined safety thresholds despite the load balancer’s best efforts.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingType.Hard">
            <summary>
            Corresponds to a Hard throttling type. Hard throttling is applied when the machine is out of resources, for example storage space.
            With hard throttling, no new connections are allowed to the databases hosted on the machine until resources are freed up.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingType.Unknown">
            <summary>
            Corresponds to an unknown throttling type in the event when the throttling type cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType">
            <summary>
            Defines the types of resources in SQL Azure which may be subject to throttling conditions.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.PhysicalDatabaseSpace">
            <summary>
            Corresponds to "Physical Database Space" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.PhysicalLogSpace">
            <summary>
            Corresponds to "Physical Log File Space" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.LogWriteIoDelay">
            <summary>
            Corresponds to "Transaction Log Write IO Delay" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.DataReadIoDelay">
            <summary>
            Corresponds to "Database Read IO Delay" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.Cpu">
            <summary>
            Corresponds to "CPU" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.DatabaseSize">
            <summary>
            Corresponds to "Database Size" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.WorkerThreads">
            <summary>
            Corresponds to "SQL Worker Thread Pool" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.Internal">
            <summary>
            Corresponds to an internal resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.Unknown">
            <summary>
            Corresponds to an unknown resource type in the event when the actual resource cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition">
            <summary>
            Implements an object holding the decoded reason code returned from SQL Azure when encountering throttling conditions.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.ThrottlingErrorNumber">
            <summary>
            Gets the error number that corresponds to throttling conditions reported by SQL Azure.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.throttledResources">
            <summary>
            Maintains a collection of key-value pairs where a key is resource type and a value is the type of throttling applied to the given resource type.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.sqlErrorCodeRegEx">
            <summary>
            Provides a compiled regular expression used for extracting the reason code from the error message.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.Unknown">
            <summary>
            Gets an unknown throttling condition in the event the actual throttling condition cannot be determined.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.ThrottlingMode">
            <summary>
            Gets the value that reflects the throttling mode in SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.ThrottledResources">
            <summary>
            Gets a list of resources in SQL Azure that were subject to throttling conditions.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnDataSpace">
            <summary>
            Gets a value indicating whether physical data file space throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnLogSpace">
            <summary>
            Gets a value indicating whether physical log space throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnLogWrite">
            <summary>
            Gets a value indicating whether transaction activity throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnDataRead">
            <summary>
            Gets a value indicating whether data read activity throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnCpu">
            <summary>
            Gets a value indicating whether CPU throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnDatabaseSize">
            <summary>
            Gets a value indicating whether database size throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnWorkerThreads">
            <summary>
            Gets a value indicating whether concurrent requests throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsUnknown">
            <summary>
            Gets a value indicating whether throttling conditions were not determined with certainty.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.FromException(System.Data.SqlClient.SqlException)">
            <summary>
            Determines throttling conditions from the specified SQL exception.
            </summary>
            <param name="ex">The <see cref="T:System.Data.SqlClient.SqlException"/> object containing information relevant to an error returned by SQL Server when encountering throttling conditions.</param>
            <returns>An instance of the object holding the decoded reason codes returned from SQL Azure upon encountering throttling conditions.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.FromError(System.Data.SqlClient.SqlError)">
            <summary>
            Determines the throttling conditions from the specified SQL error.
            </summary>
            <param name="error">The <see cref="T:System.Data.SqlClient.SqlError"/> object containing information relevant to a warning or error returned by SQL Server.</param>
            <returns>An instance of the object holding the decoded reason codes returned from SQL Azure when encountering throttling conditions.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.FromReasonCode(System.Int32)">
            <summary>
            Determines the throttling conditions from the specified reason code.
            </summary>
            <param name="reasonCode">The reason code returned by SQL Azure which contains the throttling mode and the exceeded resource types.</param>
            <returns>An instance of the object holding the decoded reason codes returned from SQL Azure when encountering throttling conditions.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.ToString">
            <summary>
             Returns a textual representation the current ThrottlingCondition object including the information held with respect to throttled resources.
            </summary>
            <returns>A string that represents the current ThrottlingCondition object.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.IReadWriteQueryRepository`2">
            <summary>
            Defines the base implementation of a reading, writing and querying repository.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.ISqlContext">
            <summary>
            Specifies the Sql context.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.ISqlContext.SqlSyntax">
            <summary>
            Gets the Sql syntax provider.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.ISqlContext.DatabaseType">
            <summary>
            Gets the database type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.ISqlContext.Sql">
            <summary>
            Creates a new Sql expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.ISqlContext.Sql(System.String,System.Object[])">
            <summary>
            Creates a new Sql expression.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.ISqlContext.Query``1">
            <summary>
            Creates a new query expression.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.ISqlContext.Templates">
            <summary>
            Gets the Sql templates.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.ISqlContext.PocoDataFactory">
            <summary>
            Gets the Poco data factory.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.ISqlContext.Mappers">
            <summary>
            Gets the mappers.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.IUmbracoDatabase.SqlContext">
            <summary>
            Gets the Sql context.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.IUmbracoDatabase.InstanceId">
            <summary>
            Gets the database instance unique identifier as a string.
            </summary>
            <remarks>UmbracoDatabase returns the first eight digits of its unique Guid and, in some
            debug mode, the underlying database connection identifier (if any).</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.IUmbracoDatabase.InTransaction">
            <summary>
            Gets a value indicating whether the database is currently in a transaction.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.IUmbracoDatabaseFactory">
            <summary>
            Creates and manages the "ambient" database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.IUmbracoDatabaseFactory.CreateDatabase">
            <summary>
            Creates a new database.
            </summary>
            <remarks>
            <para>The new database must be disposed after being used.</para>
            <para>Creating a database causes the factory to initialize if it is not already initialized.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.IUmbracoDatabaseFactory.Configured">
            <summary>
            Gets a value indicating whether the database factory is configured, i.e. whether
            its connection string and provider name have been set. The factory may however not
            be initialized (see <see cref="P:Umbraco.Core.Persistence.IUmbracoDatabaseFactory.Initialized"/>).
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.IUmbracoDatabaseFactory.Initialized">
            <summary>
            Gets a value indicating whether the database factory is initialized, i.e. whether
            its internal state is ready and it has been possible to connect to the database.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.IUmbracoDatabaseFactory.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <remarks>May return <c>null</c> if the database factory is not configured.</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.IUmbracoDatabaseFactory.CanConnect">
            <summary>
            Gets a value indicating whether the database factory is configured (see <see cref="P:Umbraco.Core.Persistence.IUmbracoDatabaseFactory.Configured"/>),
            and it is possible to connect to the database. The factory may however not be initialized (see
            <see cref="P:Umbraco.Core.Persistence.IUmbracoDatabaseFactory.Initialized"/>).
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.IUmbracoDatabaseFactory.Configure(System.String,System.String)">
            <summary>
            Configures the database factory.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.IUmbracoDatabaseFactory.SqlContext">
            <summary>
            Gets the Sql context.
            </summary>
            <remarks>
            <para>Getting the Sql context causes the factory to initialize if it is not already initialized.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.IUmbracoDatabaseFactory.ConfigureForUpgrade">
            <summary>
            Configures the database factory for upgrades.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.LocalDb">
            <summary>
            Manages LocalDB databases.
            </summary>
            <remarks>
            <para>Latest version is SQL Server 2016 Express LocalDB,
            see https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/sql-server-2016-express-localdb
            which can be installed by downloading the Express installer from https://www.microsoft.com/en-us/sql-server/sql-server-downloads
            (about 5MB) then select 'download media' to download SqlLocalDB.msi (about 44MB), which you can execute. This installs
            LocalDB only. Though you probably want to install the full Express. You may also want to install SQL Server Management
            Studio which can be used to connect to LocalDB databases.</para>
            <para>See also https://github.com/ritterim/automation-sql which is a somewhat simpler version of this.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.LocalDb.Version">
            <summary>
            Gets the LocalDb installed version.
            </summary>
            <remarks>If more than one version is installed, returns the highest available. Returns
            the major version as an integer e.g. 11, 12...</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when LocalDb is not available.</exception>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.EnsureVersion">
            <summary>
            Ensures that the LocalDb version is detected.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.LocalDb.IsAvailable">
            <summary>
            Gets a value indicating whether LocalDb is available.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.EnsureAvailable">
            <summary>
            Ensures that LocalDb is available.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when LocalDb is not available.</exception>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.DetectVersion">
            <summary>
            Detects LocalDb installed version.
            </summary>
            <remarks>If more than one version is installed, the highest available is detected.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.GetInstances">
            <summary>
            Gets the name of existing LocalDb instances.
            </summary>
            <returns>The name of existing LocalDb instances.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when LocalDb is not available.</exception>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.InstanceExists(System.String)">
            <summary>
            Gets a value indicating whether a LocalDb instance exists.
            </summary>
            <param name="instanceName">The name of the instance.</param>
            <returns>A value indicating whether a LocalDb instance with the specified name exists.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when LocalDb is not available.</exception>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.CreateInstance(System.String)">
            <summary>
            Creates a LocalDb instance.
            </summary>
            <param name="instanceName">The name of the instance.</param>
            <returns>A value indicating whether the instance was created without errors.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when LocalDb is not available.</exception>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.DropInstance(System.String)">
            <summary>
            Drops a LocalDb instance.
            </summary>
            <param name="instanceName">The name of the instance.</param>
            <returns>A value indicating whether the instance was dropped without errors.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when LocalDb is not available.</exception>
            <remarks>
            When an instance is dropped all the attached database files are deleted.
            Successful if the instance does not exist.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.StopInstance(System.String)">
            <summary>
            Stops a LocalDb instance.
            </summary>
            <param name="instanceName">The name of the instance.</param>
            <returns>A value indicating whether the instance was stopped without errors.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when LocalDb is not available.</exception>
            <remarks>
            Successful if the instance does not exist.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.StartInstance(System.String)">
            <summary>
            Stops a LocalDb instance.
            </summary>
            <param name="instanceName">The name of the instance.</param>
            <returns>A value indicating whether the instance was started without errors.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when LocalDb is not available.</exception>
            <remarks>
            Failed if the instance does not exist.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.GetInstance(System.String)">
            <summary>
            Gets a LocalDb instance.
            </summary>
            <param name="instanceName">The name of the instance.</param>
            <returns>The instance with the specified name if it exists, otherwise null.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when LocalDb is not available.</exception>
        </member>
        <member name="T:Umbraco.Core.Persistence.LocalDb.Instance">
            <summary>
            Represents a LocalDb instance.
            </summary>
            <remarks>
            LocalDb is assumed to be available, and the instance is assumed to exist.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.LocalDb.Instance.InstanceName">
            <summary>
            Gets the name of the instance.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.LocalDb.Instance"/> class.
            </summary>
            <param name="instanceName"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.GetConnectionString(System.String)">
            <summary>
            Gets a LocalDb connection string.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>The connection string for the specified database.</returns>
            <remarks>
            The database should exist in the LocalDb instance.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.GetAttachedConnectionString(System.String,System.String)">
            <summary>
            Gets a LocalDb connection string for an attached database.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <param name="filesPath">The directory containing database files.</param>
            <returns>The connection string for the specified database.</returns>
            <remarks>
            The database should not exist in the LocalDb instance.
            It will be attached with its name being its MDF filename (full path), uppercased, when
            the first connection is opened, and remain attached until explicitly detached.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.GetDatabases">
            <summary>
            Gets the name of existing databases.
            </summary>
            <returns>The name of existing databases.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.DatabaseExists(System.String)">
            <summary>
            Gets a value indicating whether a database exists.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>A value indicating whether a database with the specified name exists.</returns>
            <remarks>
            A database exists if it is registered in the instance, and its files exist. If the database
            is registered but some of its files are missing, the database is dropped.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.CreateDatabase(System.String,System.String)">
            <summary>
            Creates a new database.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <param name="filesPath">The directory containing database files.</param>
            <returns>A value indicating whether the database was created without errors.</returns>
            <remarks>
            Failed if a database with the specified name already exists in the instance,
            or if the database files already exist in the specified directory.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.DropDatabase(System.String)">
            <summary>
            Drops a database.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>A value indicating whether the database was dropped without errors.</returns>
            <remarks>
            Successful if the database does not exist.
            Deletes the database files.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.DropStaleDatabases">
            <summary>
            Drops stale databases.
            </summary>
            <returns>The number of databases that were dropped.</returns>
            <remarks>
            A database is considered stale when its files cannot be found.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.DropDatabases(System.Boolean)">
            <summary>
            Drops databases.
            </summary>
            <param name="staleOnly">A value indicating whether to delete only stale database.</param>
            <returns>The number of databases that were dropped.</returns>
            <remarks>
            A database is considered stale when its files cannot be found.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.DetachDatabase(System.String)">
            <summary>
            Detaches a database.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>The directory containing the database files.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when a database with the specified name does not exist.</exception>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.AttachDatabase(System.String,System.String)">
            <summary>
            Attaches a database.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <param name="filesPath">The directory containing database files.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when a database with the specified name already exists.</exception>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.GetFilenames(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Gets the file names of a database.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <param name="mdfName">The MDF logical name.</param>
            <param name="ldfName">The LDF logical name.</param>
            <param name="mdfFilename">The MDF filename.</param>
            <param name="ldfFilename">The LDF filename.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.KillConnections(System.String)">
            <summary>
            Kills all existing connections.
            </summary>
            <param name="databaseName">The name of the database.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.GetDatabase(System.Data.SqlClient.SqlCommand,System.String)">
            <summary>
            Gets a database.
            </summary>
            <param name="cmd">The Sql Command.</param>
            <param name="databaseName">The name of the database.</param>
            <returns>The full filename of the MDF file, if the database exists, otherwise null.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.ExecuteDropDatabase(System.Data.SqlClient.SqlCommand,System.String,System.String,System.String)">
            <summary>
            Drops a database and its files.
            </summary>
            <param name="cmd">The Sql command.</param>
            <param name="databaseName">The name of the database.</param>
            <param name="mdf">The name of the database (MDF) file.</param>
            <param name="ldf">The name of the log (LDF) file.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.GetLogFilename(System.String)">
            <summary>
            Gets the log (LDF) filename corresponding to a database (MDF) filename.
            </summary>
            <param name="mdfFilename">The MDF filename.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.DetachDatabase(System.Data.SqlClient.SqlCommand,System.String)">
            <summary>
            Detaches a database.
            </summary>
            <param name="cmd">The Sql command.</param>
            <param name="databaseName">The name of the database.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.AttachDatabase(System.Data.SqlClient.SqlCommand,System.String,System.String)">
            <summary>
            Attaches a database.
            </summary>
            <param name="cmd">The Sql command.</param>
            <param name="databaseName">The name of the database.</param>
            <param name="filesPath">The directory containing database files.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.SetCommand(System.Data.SqlClient.SqlCommand,System.String,System.Object[])">
            <summary>
            Sets a database command.
            </summary>
            <param name="cmd">The command.</param>
            <param name="sql">The command text.</param>
            <param name="args">The command arguments.</param>
            <remarks>
            The command text must refer to arguments as @0, @1... each referring
            to the corresponding position in <paramref name="args"/>.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.Instance.GetFilenames(System.Data.SqlClient.SqlCommand,System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Gets the file names of a database.
            </summary>
            <param name="cmd">The Sql command.</param>
            <param name="databaseName">The name of the database.</param>
            <param name="mdfName">The MDF logical name.</param>
            <param name="ldfName">The LDF logical name.</param>
            <param name="mdfFilename">The MDF filename.</param>
            <param name="ldfFilename">The LDF filename.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.CopyDatabaseFiles(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copy database files.
            </summary>
            <param name="databaseName">The name of the source database.</param>
            <param name="filesPath">The directory containing source database files.</param>
            <param name="targetDatabaseName">The name of the target database.</param>
            <param name="targetFilesPath">The directory containing target database files.</param>
            <param name="sourceExtension">The source database files extension.</param>
            <param name="targetExtension">The target database files extension.</param>
            <param name="overwrite">A value indicating whether to overwrite the target files.</param>
            <param name="delete">A value indicating whether to delete the source files.</param>
            <remarks>
            The <paramref name="targetDatabaseName"/>, <paramref name="targetFilesPath"/>, <paramref name="sourceExtension"/>
            and <paramref name="targetExtension"/> parameters are optional. If they result in target being identical
            to source, no copy is performed. If <paramref name="delete"/> is false, nothing happens, otherwise the source
            files are deleted.
            If target is not identical to source, files are copied or moved, depending on the value of <paramref name="delete"/>.
            Extensions are used eg to copy MyDatabase.mdf to MyDatabase.mdf.temp.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.DatabaseFilesExist(System.String,System.String,System.String)">
            <summary>
            Gets a value indicating whether database files exist.
            </summary>
            <param name="databaseName">The name of the source database.</param>
            <param name="filesPath">The directory containing source database files.</param>
            <param name="extension">The database files extension.</param>
            <returns>A value indicating whether the database files exist.</returns>
            <remarks>
            Extensions are used eg to copy MyDatabase.mdf to MyDatabase.mdf.temp.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.GetDatabaseFiles(System.String,System.String,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Gets the name of the database files.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <param name="filesPath">The directory containing database files.</param>
            <param name="logName">The name of the log.</param>
            <param name="baseFilename">The base filename (the MDF filename without the .mdf extension).</param>
            <param name="baseLogFilename">The base log filename (the LDF filename without the .ldf extension).</param>
            <param name="mdfFilename">The MDF filename.</param>
            <param name="ldfFilename">The LDF filename.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.ExecuteSqlLocalDb(System.String,System.String@,System.String@)">
            <summary>
            Executes the SqlLocalDB command.
            </summary>
            <param name="args">The arguments.</param>
            <param name="output">The command standard output.</param>
            <param name="error">The command error output.</param>
            <returns>The process exit code.</returns>
            <remarks>
            Execution is successful if the exit code is zero, and error is empty.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.LocalDb.QuotedName(System.String,System.Char)">
            <summary>
            Returns a Unicode string with the delimiters added to make the input string a valid SQL Server delimited identifier.
            </summary>
            <param name="name">The name to quote.</param>
            <param name="quote">A quote character.</param>
            <returns></returns>
            <remarks>
            This is a C# implementation of T-SQL QUOTEDNAME.
            <paramref name="quote"/> is optional, it can be '[' (default), ']', '\'' or '"'.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.NPocoDatabaseExtensions">
            <summary>
            Provides extension methods to NPoco Database class.
            </summary>
            <summary>
            Provides extension methods to NPoco Database class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.ConfigureNPocoBulkExtensions">
            <summary>
            Configures NPoco's SqlBulkCopyHelper to use the correct SqlConnection and SqlTransaction instances from the underlying RetryDbConnection and ProfiledDbTransaction
            </summary>
            <remarks>
            This is required to use NPoco's own <see cref="M:NPoco.Database.InsertBulk``1(System.Collections.Generic.IEnumerable{``0})" /> method because we use wrapped DbConnection and DbTransaction instances.
            NPoco's InsertBulk method only caters for efficient bulk inserting records for Sql Server, it does not cater for bulk inserting of records for
            any other database type and in which case will just insert records one at a time.
            NPoco's InsertBulk method also deals with updating the passed in entity's PK/ID once it's inserted whereas our own BulkInsertRecords methods
            do not handle this scenario.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.BulkInsertRecordsWithTransaction``1(Umbraco.Core.Persistence.IUmbracoDatabase,System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Bulk-inserts records within a transaction.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
            <param name="database">The database.</param>
            <param name="records">The records.</param>
            <param name="useNativeBulkInsert">Whether to use native bulk insert when available.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.BulkInsertRecords``1(Umbraco.Core.Persistence.IUmbracoDatabase,System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Bulk-inserts records.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
            <param name="database">The database.</param>
            <param name="records">The records.</param>
            <param name="useNativeBulkInsert">Whether to use native bulk insert when available.</param>
            <returns>The number of records that were inserted.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.BulkInsertRecordsWithCommands``1(Umbraco.Core.Persistence.IUmbracoDatabase,``0[])">
            <summary>
            Bulk-insert records using commands.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
            <param name="database">The database.</param>
            <param name="records">The records.</param>
            <returns>The number of records that were inserted.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.GenerateBulkInsertCommands``1(Umbraco.Core.Persistence.IUmbracoDatabase,``0[])">
            <summary>
            Creates bulk-insert commands.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
            <param name="database">The database.</param>
            <param name="records">The records.</param>
            <returns>The sql commands to execute.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.IncludeColumn(NPoco.PocoData,System.Collections.Generic.KeyValuePair{System.String,NPoco.PocoColumn})">
            <summary>
            Determines whether a column should be part of a bulk-insert.
            </summary>
            <param name="pocoData">The PocoData object corresponding to the record's type.</param>
            <param name="column">The column.</param>
            <returns>A value indicating whether the column should be part of the bulk-insert.</returns>
            <remarks>Columns that are primary keys and auto-incremental, or result columns, are excluded from bulk-inserts.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.BulkInsertRecordsSqlCe``1(Umbraco.Core.Persistence.IUmbracoDatabase,NPoco.PocoData,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Bulk-insert records using SqlCE TableDirect method.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
            <param name="database">The database.</param>
            <param name="pocoData">The PocoData object corresponding to the record's type.</param>
            <param name="records">The records.</param>
            <returns>The number of records that were inserted.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.BulkInsertRecordsSqlServer``1(Umbraco.Core.Persistence.IUmbracoDatabase,NPoco.PocoData,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Bulk-insert records using SqlServer BulkCopy method.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
            <param name="database">The database.</param>
            <param name="pocoData">The PocoData object corresponding to the record's type.</param>
            <param name="records">The records.</param>
            <returns>The number of records that were inserted.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.QueryPaged``1(NPoco.IDatabase,System.Int64,NPoco.Sql)">
            <summary>
            Iterates over the result of a paged data set with a db reader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="database"></param>
            <param name="pageSize">
            The number of rows to load per page
            </param>
            <param name="sql"></param>
            <returns></returns>
            <remarks>
            NPoco's normal Page returns a List{T} but sometimes we don't want all that in memory and instead want to
            iterate over each row with a reader using Query vs Fetch.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.InsertOrUpdate``1(Umbraco.Core.Persistence.IUmbracoDatabase,``0)">
            <summary>
            Safely inserts a record, or updates if it exists, based on a unique constraint.
            </summary>
            <param name="db"></param>
            <param name="poco"></param>
            <returns>The action that executed, either an insert or an update. If an insert occurred and a PK value got generated, the poco object
            passed in will contain the updated value.</returns>
            <remarks>
            <para>We cannot rely on database-specific options because SQLCE
            does not support any of them. Ideally this should be achieved with proper transaction isolation levels but that would mean revisiting
            isolation levels globally. We want to keep it simple for the time being and manage it manually.</para>
            <para>We handle it by trying to update, then insert, etc. until something works, or we get bored.</para>
            <para>Note that with proper transactions, if T2 begins after T1 then we are sure that the database will contain T2's value
            once T1 and T2 have completed. Whereas here, it could contain T1's value.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.InsertOrUpdate``1(Umbraco.Core.Persistence.IUmbracoDatabase,``0,System.String,System.Object)">
            <summary>
            Safely inserts a record, or updates if it exists, based on a unique constraint.
            </summary>
            <param name="db"></param>
            <param name="poco"></param>
            <param name="updateArgs"></param>
            <param name="updateCommand">If the entity has a composite key they you need to specify the update command explicitly</param>
            <returns>The action that executed, either an insert or an update. If an insert occurred and a PK value got generated, the poco object
            passed in will contain the updated value.</returns>
            <remarks>
            <para>We cannot rely on database-specific options because SQLCE
            does not support any of them. Ideally this should be achieved with proper transaction isolation levels but that would mean revisiting
            isolation levels globally. We want to keep it simple for the time being and manage it manually.</para>
            <para>We handle it by trying to update, then insert, etc. until something works, or we get bored.</para>
            <para>Note that with proper transactions, if T2 begins after T1 then we are sure that the database will contain T2's value
            once T1 and T2 have completed. Whereas here, it could contain T1's value.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.EscapeAtSymbols(System.String)">
            <summary>
            This will escape single @ symbols for npoco values so it doesn't think it's a parameter
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.GetTypedConnection``1(System.Data.IDbConnection)">
            <summary>
            Returns the underlying connection as a typed connection - this is used to unwrap the profiled mini profiler stuff
            </summary>
            <typeparam name="TConnection"></typeparam>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.GetTypedTransaction``1(System.Data.IDbTransaction)">
            <summary>
            Returns the underlying transaction as a typed transaction - this is used to unwrap the profiled mini profiler stuff
            </summary>
            <typeparam name="TTransaction"></typeparam>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoDatabaseExtensions.GetTypedCommand``1(System.Data.IDbCommand)">
            <summary>
            Returns the underlying command as a typed command - this is used to unwrap the profiled mini profiler stuff
            </summary>
            <typeparam name="TCommand"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.NPocoSqlExtensions.Statics">
            <summary>
            Provides a mean to express aliases in SELECT Sql statements.
            </summary>
            <remarks>
            <para>First register with <c>using static Umbraco.Core.Persistence.NPocoSqlExtensions.Aliaser</c>,
            then use eg <c>Sql{Foo}(x => Alias(x.Id, "id"))</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.Statics.Alias(System.Object,System.String)">
            <summary>
            Aliases a field.
            </summary>
            <param name="field">The field to alias.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.Statics.SqlText``1(System.String,System.Func{System.String,System.String})">
            <summary>
            Produces Sql text.
            </summary>
            <param name="field">The name of the field.</param>
            <param name="expr">A function producing Sql text.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.Statics.SqlText``1(System.String,System.String,System.Func{System.String,System.String,System.String})">
            <summary>
            Produces Sql text.
            </summary>
            <param name="field1">The name of the first field.</param>
            <param name="field2">The name of the second field.</param>
            <param name="expr">A function producing Sql text.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.Statics.SqlText``1(System.String,System.String,System.String,System.Func{System.String,System.String,System.String,System.String})">
            <summary>
            Produces Sql text.
            </summary>
            <param name="field1">The name of the first field.</param>
            <param name="field2">The name of the second field.</param>
            <param name="field3">The name of the third field.</param>
            <param name="expr">A function producing Sql text.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.Where``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Appends a WHERE clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="predicate">A predicate to transform and append to the Sql statement.</param>
            <param name="alias">An optional alias for the table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.Where``2(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.String,System.String)">
            <summary>
            Appends a WHERE clause to the Sql statement.
            </summary>
            <typeparam name="TDto1">The type of Dto 1.</typeparam>
            <typeparam name="TDto2">The type of Dto 2.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="predicate">A predicate to transform and append to the Sql statement.</param>
            <param name="alias1">An optional alias for Dto 1 table.</param>
            <param name="alias2">An optional alias for Dto 2 table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.WhereIn``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.IEnumerable)">
            <summary>
            Appends a WHERE IN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <param name="values">The values.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.WhereIn``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},NPoco.Sql{Umbraco.Core.Persistence.ISqlContext})">
            <summary>
            Appends a WHERE IN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <param name="values">A subquery returning the value.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.WhereNotIn``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.IEnumerable)">
            <summary>
            Appends a WHERE NOT IN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <param name="values">The values.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.WhereNotIn``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},NPoco.Sql{Umbraco.Core.Persistence.ISqlContext})">
            <summary>
            Appends a WHERE NOT IN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <param name="values">A subquery returning the value.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.WhereAnyIn``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Collections.IEnumerable)">
            <summary>
            Appends multiple OR WHERE IN clauses to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Expressions specifying the fields.</param>
            <param name="values">The values.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.WhereAny(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Func{NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},NPoco.Sql{Umbraco.Core.Persistence.ISqlContext}}[])">
            <summary>
            Appends multiple OR WHERE clauses to the Sql statement.
            </summary>
            <param name="sql">The Sql statement.</param>
            <param name="predicates">The WHERE predicates.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.WhereNotNull``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Appends a WHERE NOT NULL clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">Expression specifying the field.</param>
            <param name="tableAlias">An optional alias for the table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.WhereNull``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Boolean)">
            <summary>
            Appends a WHERE [NOT] NULL clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">Expression specifying the field.</param>
            <param name="tableAlias">An optional alias for the table.</param>
            <param name="not">A value indicating whether to NOT NULL.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.From``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String)">
            <summary>
            Appends a FROM clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="alias">An optional table alias</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.OrderBy``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Appends an ORDER BY clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.OrderBy``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends an ORDER BY clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Expression specifying the fields.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.OrderByDescending``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Appends an ORDER BY DESC clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.OrderByDescending``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends an ORDER BY DESC clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Expression specifying the fields.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.OrderByDescending(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String[])">
            <summary>
            Appends an ORDER BY DESC clause to the Sql statement.
            </summary>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Fields.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.GroupBy``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Appends a GROUP BY clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.GroupBy``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends a GROUP BY clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Expression specifying the fields.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.AndBy``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends more ORDER BY or GROUP BY fields to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Expressions specifying the fields.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.AndByDescending``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends more ORDER BY DESC fields to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Expressions specifying the fields.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.CrossJoin``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String)">
            <summary>
            Appends a CROSS JOIN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="alias">An optional alias for the joined table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.InnerJoin``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String)">
            <summary>
            Appends an INNER JOIN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="alias">An optional alias for the joined table.</param>
            <returns>A SqlJoin statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.LeftJoin``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String)">
            <summary>
            Appends a LEFT JOIN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="alias">An optional alias for the joined table.</param>
            <returns>A SqlJoin statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.LeftJoin``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Func{NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},NPoco.Sql{Umbraco.Core.Persistence.ISqlContext}},System.String)">
            <summary>
            Appends a LEFT JOIN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="nestedJoin">A nested join statement.</param>
            <param name="alias">An optional alias for the joined table.</param>
            <returns>A SqlJoin statement.</returns>
            <remarks>Nested statement produces LEFT JOIN xxx JOIN yyy ON ... ON ...</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.RightJoin``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String)">
            <summary>
            Appends a RIGHT JOIN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="alias">An optional alias for the joined table.</param>
            <returns>A SqlJoin statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.On``2(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext}.SqlJoinClause{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            Appends an ON clause to a SqlJoin statement.
            </summary>
            <typeparam name="TLeft">The type of the left Dto.</typeparam>
            <typeparam name="TRight">The type of the right Dto.</typeparam>
            <param name="sqlJoin">The Sql join statement.</param>
            <param name="leftField">An expression specifying the left field.</param>
            <param name="rightField">An expression specifying the right field.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.On(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext}.SqlJoinClause{Umbraco.Core.Persistence.ISqlContext},System.Func{NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},NPoco.Sql{Umbraco.Core.Persistence.ISqlContext}})">
            <summary>
            Appends an ON clause to a SqlJoin statement.
            </summary>
            <param name="sqlJoin">The Sql join statement.</param>
            <param name="on">A Sql fragment to use as the ON clause body.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.On``2(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext}.SqlJoinClause{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.String,System.String)">
            <summary>
            Appends an ON clause to a SqlJoin statement.
            </summary>
            <typeparam name="TDto1">The type of Dto 1.</typeparam>
            <typeparam name="TDto2">The type of Dto 2.</typeparam>
            <param name="sqlJoin">The SqlJoin statement.</param>
            <param name="predicate">A predicate to transform and use as the ON clause body.</param>
            <param name="aliasLeft">An optional alias for Dto 1 table.</param>
            <param name="aliasRight">An optional alias for Dto 2 table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.On``3(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext}.SqlJoinClause{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}},System.String,System.String,System.String)">
            <summary>
            Appends an ON clause to a SqlJoin statement.
            </summary>
            <typeparam name="TDto1">The type of Dto 1.</typeparam>
            <typeparam name="TDto2">The type of Dto 2.</typeparam>
            <typeparam name="TDto3">The type of Dto 3.</typeparam>
            <param name="sqlJoin">The SqlJoin statement.</param>
            <param name="predicate">A predicate to transform and use as the ON clause body.</param>
            <param name="aliasLeft">An optional alias for Dto 1 table.</param>
            <param name="aliasRight">An optional alias for Dto 2 table.</param>
            <param name="aliasOther">An optional alias for Dto 3 table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.SelectTop(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Int32)">
            <summary>
            Alters a Sql statement to return a maximum amount of rows.
            </summary>
            <param name="sql">The Sql statement.</param>
            <param name="count">The maximum number of rows to return.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.SelectCount(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String)">
            <summary>
            Creates a SELECT COUNT(*) Sql statement.
            </summary>
            <param name="sql">The origin sql.</param>
            <param name="alias">An optional alias.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.SelectCount``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Creates a SELECT COUNT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to count.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="fields">Expressions indicating the columns to count.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are counted.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.SelectCount``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Creates a SELECT COUNT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to count.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="alias">An alias.</param>
            <param name="fields">Expressions indicating the columns to count.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are counted.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.SelectAll(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext})">
            <summary>
            Creates a SELECT * Sql statement.
            </summary>
            <param name="sql">The origin sql.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.Select``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Creates a SELECT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to select.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="fields">Expressions indicating the columns to select.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.SelectDistinct``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Creates a SELECT DISTINCT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to select.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="fields">Expressions indicating the columns to select.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.Select``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Creates a SELECT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to select.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="tableAlias">A table alias.</param>
            <param name="fields">Expressions indicating the columns to select.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.AndSelect(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String[])">
            <summary>
            Adds columns to a SELECT Sql statement.
            </summary>
            <param name="sql">The origin sql.</param>
            <param name="fields">Columns to select.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.AndSelect``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Adds columns to a SELECT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to select.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="fields">Expressions indicating the columns to select.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.AndSelect``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Adds columns to a SELECT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to select.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="tableAlias">A table alias.</param>
            <param name="fields">Expressions indicating the columns to select.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.AndSelectCount(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String)">
            <summary>
            Adds a COUNT(*) to a SELECT Sql statement.
            </summary>
            <param name="sql">The origin sql.</param>
            <param name="alias">An optional alias.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.AndSelectCount``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Adds a COUNT to a SELECT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to count.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="fields">Expressions indicating the columns to count.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are counted.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.AndSelectCount``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Adds a COUNT to a SELECT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to count.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="alias">An alias.</param>
            <param name="fields">Expressions indicating the columns to count.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are counted.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.Select``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Func{Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef{``0},Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef{``0}})">
            <summary>
            Creates a SELECT Sql statement with a referenced Dto.
            </summary>
            <typeparam name="TDto">The type of the Dto to select.</typeparam>
            <param name="sql">The origin Sql.</param>
            <param name="reference">An expression specifying the reference.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.Select``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Func{Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef{``0},Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef{``0}},System.Func{NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},NPoco.Sql{Umbraco.Core.Persistence.ISqlContext}})">
            <summary>
            Creates a SELECT Sql statement with a referenced Dto.
            </summary>
            <typeparam name="TDto">The type of the Dto to select.</typeparam>
            <param name="sql">The origin Sql.</param>
            <param name="reference">An expression specifying the reference.</param>
            <param name="sqlexpr">An expression to apply to the Sql statement before adding the reference selection.</param>
            <returns>The Sql statement.</returns>
            <remarks>The <paramref name="sqlexpr"/> expression applies to the Sql statement before the reference selection
            is added, so that it is possible to add (e.g. calculated) columns to the referencing Dto.</remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef`1">
            <summary>
            Represents a Dto reference expression.
            </summary>
            <typeparam name="TDto">The type of the referencing Dto.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef`1.#ctor(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String)">
            <summary>
            Initializes a new Dto reference expression.
            </summary>
            <param name="sql">The original Sql expression.</param>
            <param name="prefix">The current Dtos prefix.</param>
        </member>
        <member name="P:Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef`1.Sql">
            <summary>
            Gets the original Sql expression.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef`1.Prefix">
            <summary>
            Gets the current Dtos prefix.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef{``0},Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef{``0}})">
            <summary>
            Appends fields for a referenced Dto.
            </summary>
            <typeparam name="TRefDto">The type of the referenced Dto.</typeparam>
            <param name="field">An expression specifying the referencing field.</param>
            <param name="reference">An optional expression representing a nested reference selection.</param>
            <returns>A SqlRef statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Func{Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef{``0},Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef{``0}})">
            <summary>
            Appends fields for a referenced Dto.
            </summary>
            <typeparam name="TRefDto">The type of the referenced Dto.</typeparam>
            <param name="field">An expression specifying the referencing field.</param>
            <param name="tableAlias">The referenced Dto table alias.</param>
            <param name="reference">An optional expression representing a nested reference selection.</param>
            <returns>A SqlRef statement.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}},System.Func{Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef{``0},Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef{``0}})">
            <summary>
            Selects referenced DTOs.
            </summary>
            <typeparam name="TRefDto">The type of the referenced DTOs.</typeparam>
            <param name="field">An expression specifying the referencing field.</param>
            <param name="reference">An optional expression representing a nested reference selection.</param>
            <returns>A referenced DTO expression.</returns>
            <remarks>
            <para>The referencing property has to be a <c>List{<typeparamref name="TRefDto"/>}</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}},System.String,System.Func{Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef{``0},Umbraco.Core.Persistence.NPocoSqlExtensions.SqlRef{``0}})">
            <summary>
            Selects referenced DTOs.
            </summary>
            <typeparam name="TRefDto">The type of the referenced DTOs.</typeparam>
            <param name="field">An expression specifying the referencing field.</param>
            <param name="tableAlias">The DTO table alias.</param>
            <param name="reference">An optional expression representing a nested reference selection.</param>
            <returns>A referenced DTO expression.</returns>
            <remarks>
            <para>The referencing property has to be a <c>List{<typeparamref name="TRefDto"/>}</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.Columns``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Gets fields for a Dto.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="fields">Expressions specifying the fields.</param>
            <returns>The comma-separated list of fields.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all fields are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.Columns``1(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Gets fields for a Dto.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="alias">The Dto table alias.</param>
            <param name="fields">Expressions specifying the fields.</param>
            <returns>The comma-separated list of fields.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all fields are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.NPocoSqlExtensions.ForUpdate(NPoco.Sql{Umbraco.Core.Persistence.ISqlContext})">
            <summary>
            Appends the relevant ForUpdate hint.
            </summary>
            <param name="sql">The Sql statement.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.PocoDataDataReader`2">
            <summary>
            A data reader used for reading collections of PocoData entity types
            </summary>
            <remarks>
            We are using a custom data reader so that tons of memory is not consumed when rebuilding this table, previously
            we'd generate SQL insert statements, but we'd have to put all of the XML structures into memory first. Alternatively
            we can use .net's DataTable, but this also requires putting everything into memory. By using a DataReader we don't have to
            store every content item and it's XML structure in memory to get it into the DB, we can stream it into the db with this
            reader.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.PocoDataDataReader`2.AddSchemaTableRows">
            <summary>
            This will automatically add the schema rows based on the Poco table definition and the columns passed in
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.PocoDataDataReader`2.GetValue(System.Int32)">
            <summary>
            Get the value from the column index for the current object
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PocoDataDataReader`2.Read">
            <summary>
            Advance the cursor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PocoDataDataReader`2.Dispose(System.Boolean)">
            <summary>
            Ensure the enumerator is disposed
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.CachedExpression">
            <summary>
            Represents an expression which caches the visitor's result.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Querying.CachedExpression.InnerExpression">
            <summary>
            Gets or sets the inner Expression.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Querying.CachedExpression.VisitResult">
            <summary>
            Gets or sets the compiled SQL statement output.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Querying.CachedExpression.Visited">
            <summary>
            Gets or sets a value indicating whether the cache Expression has been compiled already.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.CachedExpression.Wrap(System.Linq.Expressions.Expression)">
            <summary>
            Replaces the inner expression.
            </summary>
            <param name="expression">expression.</param>
            <remarks>The new expression is assumed to have different parameter but produce the same SQL statement.</remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.ExpressionVisitorBase">
            <summary>
            An expression tree parser to create SQL statements and SQL parameters based on a strongly typed expression.
            </summary>
            <remarks>This object is stateful and cannot be re-used to parse an expression.</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.Querying.ExpressionVisitorBase.Visited">
            <summary>
            Gets or sets a value indicating whether the visited expression has been visited already,
            in which case visiting will just populate the SQL parameters.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Querying.ExpressionVisitorBase.SqlSyntax">
            <summary>
            Gets or sets the SQL syntax provider for the current database.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.Querying.ExpressionVisitorBase.SqlParameters">
            <summary>
            Gets the list of SQL parameters.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.ExpressionVisitorBase.GetSqlParameters">
            <summary>
            Gets the SQL parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.ExpressionVisitorBase.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the expression and produces the corresponding SQL statement.
            </summary>
            <param name="expression">The expression</param>
            <returns>The SQL statement corresponding to the expression.</returns>
            <remarks>Also populates the SQL parameters.</remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.IQuery`1">
            <summary>
            Represents a query for building Linq translatable SQL queries
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.IQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds a where clause to the query
            </summary>
            <param name="predicate"></param>
            <returns>This instance so calls to this method are chainable</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.IQuery`1.GetWhereClauses">
            <summary>
            Returns all translated where clauses and their sql parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.IQuery`1.WhereIn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.IEnumerable)">
            <summary>
            Adds a where-in clause to the query
            </summary>
            <param name="fieldSelector"></param>
            <param name="values"></param>
            <returns>This instance so calls to this method are chainable</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.IQuery`1.WhereAny(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})">
            <summary>
            Adds a set of OR-ed where clauses to the query.
            </summary>
            <param name="predicates"></param>
            <returns>This instance so calls to this method are chainable.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.ModelToSqlExpressionVisitor`1">
            <summary>
            An expression tree parser to create SQL statements and SQL parameters based on a strongly typed expression,
            based on Umbraco's business logic models.
            </summary>
            <remarks>This object is stateful and cannot be re-used to parse an expression.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.ModelToSqlExpressionVisitor`1.EndsWithConstant(System.Linq.Expressions.MemberExpression)">
            <summary>
            Determines if the MemberExpression ends in a Constant value
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.PocoToSqlExpressionVisitor`1">
            <summary>
            Represents an expression tree parser used to turn strongly typed expressions into SQL statements.
            </summary>
            <typeparam name="TDto">The type of the DTO.</typeparam>
            <remarks>This visitor is stateful and cannot be reused.</remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.PocoToSqlExpressionVisitor`2">
            <summary>
            Represents an expression tree parser used to turn strongly typed expressions into SQL statements.
            </summary>
            <typeparam name="TDto1">The type of DTO 1.</typeparam>
            <typeparam name="TDto2">The type of DTO 2.</typeparam>
            <remarks>This visitor is stateful and cannot be reused.</remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.PocoToSqlExpressionVisitor`3">
            <summary>
            Represents an expression tree parser used to turn strongly typed expressions into SQL statements.
            </summary>
            <typeparam name="TDto1">The type of DTO 1.</typeparam>
            <typeparam name="TDto2">The type of DTO 2.</typeparam>
            <typeparam name="TDto3">The type of DTO 3.</typeparam>
            <remarks>This visitor is stateful and cannot be reused.</remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.Query`1">
            <summary>
            Represents a query builder.
            </summary>
            <remarks>A query builder translates Linq queries into Sql queries.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.Query`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds a where clause to the query.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.Query`1.WhereIn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.IEnumerable)">
            <summary>
            Adds a where-in clause to the query.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.Query`1.WhereAny(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})">
            <summary>
            Adds a set of OR-ed where clauses to the query.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.Query`1.GetWhereClauses">
            <summary>
            Returns all translated where clauses and their sql parameters
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.QueryExtensions">
            <summary>
            SD: This is a horrible hack but unless we break compatibility with anyone who's actually implemented IQuery{T} there's not much we can do.
            The IQuery{T} interface is useless without having a GetWhereClauses method and cannot be used for tests.
            We have to wait till v8 to make this change I suppose.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.QueryExtensions.GetWhereClauses``1(Umbraco.Core.Persistence.Querying.IQuery{``0})">
            <summary>
            Returns all translated where clauses and their sql parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.SqlExpressionExtensions">
            <summary>
            String extension methods used specifically to translate into SQL
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.SqlExpressionExtensions.SqlNullableEquals``1(System.Nullable{``0},System.Nullable{``0},``0)">
            <summary>
            Indicates whether two nullable values are equal, substituting a fallback value for nulls.
            </summary>
            <typeparam name="T">The nullable type.</typeparam>
            <param name="value">The value to compare.</param>
            <param name="other">The value to compare to.</param>
            <param name="fallbackValue">The value to use when any value is null.</param>
            <remarks>Do not use outside of Sql expressions.</remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.SqlTranslator`1">
            <summary>
            Represents the Sql Translator for translating a IQuery object to Sql
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType">
            <summary>
            Determines how to match a string property value
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.ValuePropertyMatchType">
            <summary>
            Determine how to match a number or data value
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.IQueryRepository`1">
            <summary>
            Defines the base implementation of a querying repository.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.IQueryRepository`1.Get(Umbraco.Core.Persistence.Querying.IQuery{`0})">
            <summary>
            Gets entities.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.IQueryRepository`1.Count(Umbraco.Core.Persistence.Querying.IQuery{`0})">
            <summary>
            Counts entities.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.IReadRepository`2">
            <summary>
            Defines the base implementation of a reading repository.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.IReadRepository`2.Get(`0)">
            <summary>
            Gets an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.IReadRepository`2.GetMany(`0[])">
            <summary>
            Gets entities.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.IReadRepository`2.Exists(`0)">
            <summary>
            Gets a value indicating whether an entity exists.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.IRepository">
            <summary>
            Defines the base implementation of a repository.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.IWriteRepository`1">
            <summary>
            Defines the base implementation of a writing repository.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.IWriteRepository`1.Save(`0)">
            <summary>
            Saves an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.IWriteRepository`1.Delete(`0)">
            <summary>
            Deletes an entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlContext">
            <summary>
            Implements <see cref="T:Umbraco.Core.Persistence.ISqlContext"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlContext.#ctor(Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,NPoco.DatabaseType,NPoco.IPocoDataFactory,Umbraco.Core.Persistence.Mappers.IMapperCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.SqlContext"/> class.
            </summary>
            <param name="sqlSyntax">The sql syntax provider.</param>
            <param name="pocoDataFactory">The Poco data factory.</param>
            <param name="databaseType">The database type.</param>
            <param name="mappers">The mappers.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlContext.#ctor(Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,NPoco.DatabaseType,NPoco.IPocoDataFactory,System.Lazy{Umbraco.Core.Persistence.Mappers.IMapperCollection})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.SqlContext"/> class.
            </summary>
            <param name="sqlSyntax">The sql syntax provider.</param>
            <param name="pocoDataFactory">The Poco data factory.</param>
            <param name="databaseType">The database type.</param>
            <param name="mappers">The mappers.</param>
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlContext.SqlSyntax">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlContext.DatabaseType">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlContext.Sql">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlContext.Sql(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlContext.Query``1">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlContext.Templates">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlContext.PocoDataFactory">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlContext.Mappers">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider">
            <summary>
            Defines an SqlSyntaxProvider
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider.AliasRegex">
            <summary>
            Gets a regex matching aliased fields.
            </summary>
            <remarks>
            <para>Matches "(table.column) AS (alias)" where table, column and alias are properly escaped.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider.DefaultIsolationLevel">
            <summary>
            Returns the default isolation level for the database
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider.GetConstraintsPerTable(NPoco.IDatabase)">
            <summary>
            Returns all constraints defined in the database (Primary keys, foreign keys, unique constraints...) (does not include indexes)
            </summary>
            <param name="db"></param>
            <returns>
            A Tuple containing: TableName, ConstraintName
            </returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider.GetConstraintsPerColumn(NPoco.IDatabase)">
            <summary>
            Returns all constraints defined in the database (Primary keys, foreign keys, unique constraints...) (does not include indexes)
            </summary>
            <param name="db"></param>
            <returns>
            A Tuple containing: TableName, ColumnName, ConstraintName
            </returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider.GetDefinedIndexes(NPoco.IDatabase)">
            <summary>
            Returns all defined Indexes in the database excluding primary keys
            </summary>
            <param name="db"></param>
            <returns>
            A Tuple containing: TableName, IndexName, ColumnName, IsUnique
            </returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider.TryGetDefaultConstraint(NPoco.IDatabase,System.String,System.String,System.String@)">
            <summary>
            Tries to gets the name of the default constraint on a column.
            </summary>
            <param name="db">The database.</param>
            <param name="tableName">The table name.</param>
            <param name="columnName">The column name.</param>
            <param name="constraintName">The constraint name.</param>
            <returns>A value indicating whether a default constraint was found.</returns>
            <remarks>
            <para>Some database engines (e.g. SqlCe) may not have names for default constraints,
            in which case the function may return true, but <paramref name="constraintName"/> is
            unspecified.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.MicrosoftSqlSyntaxProviderBase`1">
            <summary>
            Abstract class for defining MS sql implementations
            </summary>
            <typeparam name="TSyntax"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.MicrosoftSqlSyntaxProviderBase`1.GetSqlDbType(System.Type)">
            <summary>
            This uses a the DbTypeMap created and custom mapping to resolve the SqlDbType
            </summary>
            <param name="clrType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.MicrosoftSqlSyntaxProviderBase`1.GetSqlDbType(System.Data.DbType)">
            <summary>
            Returns the mapped SqlDbType for the DbType specified
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlCeSyntaxProvider">
            <summary>
            Represents an SqlSyntaxProvider for Sql Ce
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlSyntax.SqlCeSyntaxProvider.TruncateTable">
            <summary>
            SqlCe doesn't support the Truncate Table syntax, so we just have to do a DELETE FROM which is slower but we have no choice.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlCeSyntaxProvider.GetConstraintsPerTable(NPoco.IDatabase)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlCeSyntaxProvider.GetConstraintsPerColumn(NPoco.IDatabase)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlCeSyntaxProvider.GetDefinedIndexes(NPoco.IDatabase)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlCeSyntaxProvider.TryGetDefaultConstraint(NPoco.IDatabase,System.String,System.String,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlServerSyntaxProvider">
            <summary>
            Represents an SqlSyntaxProvider for Sql Server.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlServerSyntaxProvider.GetDefaultConstraintsPerColumn(NPoco.IDatabase)">
            <summary>
            SQL Server stores default values assigned to columns as constraints, it also stores them with named values, this is the only
            server type that does this, therefore this method doesn't exist on any other syntax provider
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlServerSyntaxProvider.GetConstraintsPerTable(NPoco.IDatabase)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlServerSyntaxProvider.GetConstraintsPerColumn(NPoco.IDatabase)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlServerSyntaxProvider.GetDefinedIndexes(NPoco.IDatabase)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlServerSyntaxProvider.TryGetDefaultConstraint(NPoco.IDatabase,System.String,System.String,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlServerVersionName">
            <summary>
            Represents the version name of SQL server (i.e. the year 2008, 2005, etc...)
            </summary>
            <remarks>
            see: https://support.microsoft.com/en-us/kb/321185
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderBase`1">
            <summary>
            Represents the Base Sql Syntax provider implementation.
            </summary>
            <remarks>
            All Sql Syntax provider implementations should derive from this abstract class.
            </remarks>
            <typeparam name="TSyntax"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderBase`1.FormatDateTime(System.DateTime,System.Boolean)">
            <summary>
            This is used ONLY if we need to format datetime without using SQL parameters (i.e. during migrations)
            </summary>
            <param name="date"></param>
            <param name="includeTime"></param>
            <returns></returns>
            <remarks>
            MSSQL has a DateTime standard that is unambiguous and works on all servers:
            YYYYMMDD HH:mm:ss
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderExtensions.GetQuotedColumn(Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,System.String,System.String)">
            <summary>
            Returns the quotes tableName.columnName combo
            </summary>
            <param name="sql"></param>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderExtensions.GetDeleteSubquery(Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,System.String,System.String,NPoco.Sql,Umbraco.Core.Persistence.SqlSyntax.WhereInType)">
            <summary>
            This is used to generate a delete query that uses a sub-query to select the data, it is required because there's a very particular syntax that
            needs to be used to work for all servers: SQLCE and MSSQL
            </summary>
            <returns></returns>
            <remarks>
            See: http://issues.umbraco.org/issue/U4-3876
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlTemplate.Arg(System.String)">
            <summary>
            Gets a named argument.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlTemplate.Arg``1(System.String)">
            <summary>
            Gets a WHERE expression argument.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlTemplate.ArgIn``1(System.String)">
            <summary>
            Gets a WHERE IN expression argument.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UmbracoDatabase">
            <summary>
            Extends NPoco Database for Umbraco.
            </summary>
            <remarks>
            <para>Is used everywhere in place of the original NPoco Database object, and provides additional features
            such as profiling, retry policies, logging, etc.</para>
            <para>Is never created directly but obtained from the <see cref="T:Umbraco.Core.Persistence.UmbracoDatabaseFactory"/>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.UmbracoDatabase.#ctor(System.String,Umbraco.Core.Persistence.ISqlContext,System.Data.Common.DbProviderFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.FaultHandling.RetryPolicy,Umbraco.Core.Persistence.FaultHandling.RetryPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.UmbracoDatabase"/> class.
            </summary>
            <remarks>
            <para>Used by UmbracoDatabaseFactory to create databases.</para>
            <para>Also used by DatabaseBuilder for creating databases and installing/upgrading.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.UmbracoDatabase.#ctor(System.Data.Common.DbConnection,Umbraco.Core.Persistence.ISqlContext,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.UmbracoDatabase"/> class.
            </summary>
            <remarks>Internal for unit tests only.</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabase.SqlContext">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabase.InstanceId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabase.InTransaction">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabase.EnableSqlTrace">
            <summary>
            Gets or sets a value indicating whether to log all executed Sql statements.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabase.EnableSqlCount">
            <summary>
            Gets or sets a value indicating whether to count all executed Sql statements.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabase.SqlCount">
            <summary>
            Gets the count of all executed Sql statements.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UmbracoDatabaseFactory">
            <summary>
            Default implementation of <see cref="T:Umbraco.Core.Persistence.IUmbracoDatabaseFactory"/>.
            </summary>
            <remarks>
            <para>This factory implementation creates and manages an "ambient" database connection. When running
            within an Http context, "ambient" means "associated with that context". Otherwise, it means "static to
            the current thread". In this latter case, note that the database connection object is not thread safe.</para>
            <para>It wraps an NPoco UmbracoDatabaseFactory which is initializes with a proper IPocoDataFactory to ensure
            that NPoco's plumbing is cached appropriately for the whole application.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.UmbracoDatabaseFactory.#ctor(Umbraco.Core.Logging.ILogger,System.Lazy{Umbraco.Core.Persistence.Mappers.IMapperCollection})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.UmbracoDatabaseFactory"/>.
            </summary>
            <remarks>Used by core runtime.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.UmbracoDatabaseFactory.#ctor(System.String,Umbraco.Core.Logging.ILogger,System.Lazy{Umbraco.Core.Persistence.Mappers.IMapperCollection})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.UmbracoDatabaseFactory"/>.
            </summary>
            <remarks>Used by the other ctor and in tests.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.UmbracoDatabaseFactory.#ctor(System.String,System.String,Umbraco.Core.Logging.ILogger,System.Lazy{Umbraco.Core.Persistence.Mappers.IMapperCollection})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.UmbracoDatabaseFactory"/>.
            </summary>
            <remarks>Used in tests.</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabaseFactory.Configured">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabaseFactory.Initialized">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabaseFactory.ConnectionString">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabaseFactory.CanConnect">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabaseFactory.SqlContext">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.UmbracoDatabaseFactory.ConfigureForUpgrade">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.UmbracoDatabaseFactory.Configure(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Persistence.UmbracoDatabaseFactory.CreateDatabase">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ComplexPropertyEditorContentEventHandler">
            <summary>
            Utility class for dealing with <see cref="T:Umbraco.Core.Services.Implement.ContentService"/> Copying/Saving events for complex editors
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ComplexPropertyEditorContentEventHandler.ContentService_Copying(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.CopyEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            <see cref="T:Umbraco.Core.Services.Implement.ContentService"/> Copying event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ComplexPropertyEditorContentEventHandler.ContentService_Saving(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.ContentSavingEventArgs)">
            <summary>
            <see cref="T:Umbraco.Core.Services.Implement.ContentService"/> Saving event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ComplexPropertyEditorContentEventHandler.Dispose(System.Boolean)">
            <summary>
            Unbinds from events
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ComplexPropertyEditorContentEventHandler.Dispose">
            <summary>
            Unbinds from events
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationFieldsExtensions.Add(System.Collections.Generic.List{Umbraco.Core.PropertyEditors.ConfigurationField},System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds a configuration field.
            </summary>
            <param name="fields">The list of configuration fields.</param>
            <param name="key">The key (alias) of the field.</param>
            <param name="name">The name (label) of the field.</param>
            <param name="description">The description for the field.</param>
            <param name="view">The path to the editor view to be used for the field.</param>
            <param name="config">Optional configuration used for field's editor.</param>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IDataValueReference">
            <summary>
            Resolve references from <see cref="T:Umbraco.Core.PropertyEditors.IDataValueEditor"/> values
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IDataValueReference.GetReferences(System.Object)">
            <summary>
            Returns any references contained in the value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IDataValueReferenceFactory.IsForEditor(Umbraco.Core.PropertyEditors.IDataEditor)">
            <summary>
            Gets a value indicating whether the DataValueReference lookup supports a datatype (data editor).
            </summary>
            <param name="dataType">The datatype.</param>
            <returns>A value indicating whether the converter supports a datatype.</returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IDataValueReferenceFactory.GetDataValueReference">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IDataEditorWithMediaPath">
            <summary>
            Must be implemented by property editors that store media and return media paths
            </summary>
            <remarks>
            Currently there are only 2x core editors that do this: upload and image cropper.
            It would be possible for developers to know implement their own media property editors whereas previously this was not possible.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IDataEditorWithMediaPath.GetMediaPath(System.Object)">
            <summary>
            Returns the media path for the value stored for a property
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IIgnoreUserStartNodesConfig">
            <summary>
            Marker interface for any editor configuration that supports Ignoring user start nodes
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.DateTimeConfiguration">
            <summary>
            Represents the configuration for the datetime value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ColorPickerConfiguration">
            <summary>
            Represents the configuration for the color picker value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ConfigurationEditor`1">
            <summary>
            Represents a data type configuration editor with a typed configuration.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationEditor`1"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor`1.DiscoverFields">
            <summary>
            Discovers fields from configuration properties marked with the field attribute.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationEditor`1.DefaultConfiguration">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationEditor`1.DefaultConfigurationObject">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor`1.IsConfiguration(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor`1.FromDatabase(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor`1.FromConfigurationEditor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor`1.FromConfigurationEditor(System.Collections.Generic.IDictionary{System.String,System.Object},`0)">
            <summary>
            Converts the configuration posted by the editor.
            </summary>
            <param name="editorValues">The configuration object posted by the editor.</param>
            <param name="configuration">The current configuration object.</param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor`1.ToConfigurationEditor(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor`1.ToConfigurationEditor(`0)">
            <summary>
            Converts configuration values to values for the editor.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.DataEditorAttribute">
            <summary>
            Marks a class that represents a data editor.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataEditorAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.DataEditorAttribute"/> class for a property editor.
            </summary>
            <param name="alias">The unique identifier of the editor.</param>
            <param name="name">The friendly name of the editor.</param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataEditorAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.DataEditorAttribute"/> class for a property editor.
            </summary>
            <param name="alias">The unique identifier of the editor.</param>
            <param name="name">The friendly name of the editor.</param>
            <param name="view">The view to use to render the editor.</param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataEditorAttribute.#ctor(System.String,Umbraco.Core.PropertyEditors.EditorType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.DataEditorAttribute"/> class.
            </summary>
            <param name="alias">The unique identifier of the editor.</param>
            <param name="type">The type of the editor.</param>
            <param name="name">The friendly name of the editor.</param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataEditorAttribute.#ctor(System.String,Umbraco.Core.PropertyEditors.EditorType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.DataEditorAttribute"/> class.
            </summary>
            <param name="alias">The unique identifier of the editor.</param>
            <param name="type">The type of the editor.</param>
            <param name="name">The friendly name of the editor.</param>
            <param name="view">The view to use to render the editor.</param>
            <remarks>
            <para>Set <paramref name="view"/> to <see cref="F:Umbraco.Core.PropertyEditors.DataEditorAttribute.NullView"/> to explicitly set the view to null.</para>
            <para>Otherwise, <paramref name="view"/> cannot be null nor empty.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.DataEditorAttribute.NullView">
            <summary>
            Gets a special value indicating that the view should be null.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditorAttribute.Alias">
            <summary>
            Gets the unique alias of the editor.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditorAttribute.Type">
            <summary>
            Gets the type of the editor.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditorAttribute.Name">
            <summary>
            Gets the friendly name of the editor.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditorAttribute.View">
            <summary>
            Gets the view to use to render the editor.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditorAttribute.ValueType">
            <summary>
            Gets or sets the type of the edited value.
            </summary>
            <remarks>Must be a valid <see cref="T:Umbraco.Core.PropertyEditors.ValueTypes"/> value.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditorAttribute.HideLabel">
            <summary>
            Gets or sets a value indicating whether the editor should be displayed without its label.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditorAttribute.Icon">
            <summary>
            Gets or sets an optional icon.
            </summary>
            <remarks>The icon can be used for example when presenting datatypes based upon the editor.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditorAttribute.Group">
            <summary>
            Gets or sets an optional group.
            </summary>
            <remarks>The group can be used for example to group the editors by category.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditorAttribute.IsDeprecated">
            <summary>
            Gets or sets a value indicating whether the value editor is deprecated.
            </summary>
            <remarks>A deprecated editor is still supported but not proposed in the UI.</remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ConfigurationEditor">
            <summary>
            Represents a data type configuration editor.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor.#ctor(System.Collections.Generic.List{Umbraco.Core.PropertyEditors.ConfigurationField})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationEditor"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationEditor.Fields">
            <summary>
            Gets the fields.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor.Field(System.String)">
            <summary>
            Gets a field by its property name.
            </summary>
            <remarks>Can be used in constructors to add infos to a field that has been defined
            by a property marked with the <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute"/>.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor.ConfigurationAs``1(System.Object)">
            <summary>
            Gets the configuration as a typed object.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor.ToDatabase(System.Object)">
            <summary>
            Converts a configuration object into a serialized database value.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationEditor.DefaultConfiguration">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationEditor.DefaultConfigurationObject">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor.IsConfiguration(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor.FromDatabase(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor.FromConfigurationEditor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor.ToConfigurationEditor(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationEditor.ToValueEditor(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationEditor.ConfigurationJsonSettings">
            <summary>
            Gets the custom json serializer settings for configurations.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.PropertyEditors.DefaultPropertyIndexValueFactory" -->
        <member name="M:Umbraco.Core.PropertyEditors.DefaultPropertyIndexValueFactory.GetIndexValues(Umbraco.Core.Models.Property,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.EditorType">
            <summary>
            Represents the type of an editor.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.EditorType.Nothing">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.EditorType.PropertyValue">
            <summary>
            Property value editor.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.EditorType.MacroParameter">
            <summary>
            Macro parameter editor.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IConfigurationEditor">
            <summary>
            Represents an editor for editing the configuration of editors.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IConfigurationEditor.Fields">
            <summary>
            Gets the fields.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IConfigurationEditor.DefaultConfiguration">
            <summary>
            Gets the default configuration.
            </summary>
            <remarks>
            <para>For basic configuration editors, this will be a dictionary of key/values. For advanced editors
            which inherit from <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationEditor`1"/>, this will be the dictionary
            equivalent of an actual configuration object (ie an instance of <c>TConfiguration</c>, obtained
            via <see cref="M:Umbraco.Core.PropertyEditors.IConfigurationEditor.ToConfigurationEditor(System.Object)"/>.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IConfigurationEditor.DefaultConfigurationObject">
            <summary>
            Gets the default configuration object.
            </summary>
            <remarks>
            <para>For basic configuration editors, this will be <see cref="P:Umbraco.Core.PropertyEditors.IConfigurationEditor.DefaultConfiguration"/>, ie a
            dictionary of key/values. For advanced editors which inherit from <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationEditor`1"/>,
            this will be an actual configuration object (ie an instance of <c>TConfiguration</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IConfigurationEditor.IsConfiguration(System.Object)">
            <summary>
            Determines whether a configuration object is of the type expected by the configuration editor.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IConfigurationEditor.FromDatabase(System.String)">
            <summary>
            Converts the serialized database value into the actual configuration object.
            </summary>
            <remarks>Converting the configuration object to the serialized database value is
            achieved by simply serializing the configuration. See <see cref="M:Umbraco.Core.PropertyEditors.ConfigurationEditor.ToDatabase(System.Object)"/>.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IConfigurationEditor.FromConfigurationEditor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <summary>
            Converts the values posted by the configuration editor into the actual configuration object.
            </summary>
            <param name="editorValues">The values posted by the configuration editor.</param>
            <param name="configuration">The current configuration object.</param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IConfigurationEditor.ToConfigurationEditor(System.Object)">
            <summary>
            Converts the configuration object to values for the configuration editor.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IConfigurationEditor.ToValueEditor(System.Object)">
            <summary>
            Converts the configuration object to values for the value editor.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IConfigureValueType">
            <summary>
            Represents a configuration that configures the value type.
            </summary>
            <remarks>
            <para>This is used in <see cref="T:Umbraco.Core.Models.DataType" /> to get the value type from the configuration.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IConfigureValueType.ValueType">
            <summary>
            Gets the value type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IDataEditor">
            <summary>
            Represents a data editor.
            </summary>
            <remarks>This is the base interface for parameter and property editors.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataEditor.Alias">
            <summary>
            Gets the alias of the editor.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataEditor.Type">
            <summary>
            Gets the type of the editor.
            </summary>
            <remarks>An editor can be a property value editor, or a parameter editor.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataEditor.Name">
            <summary>
            Gets the name of the editor.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataEditor.Icon">
            <summary>
            Gets the icon of the editor.
            </summary>
            <remarks>Can be used to display editors when presenting them.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataEditor.Group">
            <summary>
            Gets the group of the editor.
            </summary>
            <remarks>Can be used to organize editors when presenting them.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataEditor.IsDeprecated">
            <summary>
            Gets a value indicating whether the editor is deprecated.
            </summary>
            <remarks>Deprecated editors are supported but not proposed in the UI.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IDataEditor.GetValueEditor">
            <summary>
            Gets a value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IDataEditor.GetValueEditor(System.Object)">
            <summary>
            Gets a configured value editor.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataEditor.DefaultConfiguration">
            <summary>
            Gets the configuration for the value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IDataEditor.GetConfigurationEditor">
            <summary>
            Gets an editor to edit the value editor configuration.
            </summary>
            <remarks>
            <para>Is expected to throw if the editor does not support being configured, e.g. for most parameter editors.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataEditor.PropertyIndexValueFactory">
            <summary>
            Gets the index value factory for the editor.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ImageCropperConfiguration">
            <summary>
            Represents the configuration for the image cropper value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IManifestValueValidator">
            <summary>
            Defines a value validator that can be referenced in a manifest.
            </summary>
            <remarks>If the manifest can be configured, then it should expose a Configuration property.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IManifestValueValidator.ValidationName">
            <summary>
            Gets the name of the validator.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IValueFormatValidator">
            <summary>
            Defines a value format validator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IValueFormatValidator.ValidateFormat(System.Object,System.String,System.String)">
            <summary>
            Validates a value.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="valueType">The value type.</param>
            <param name="format">A format definition.</param>
            <returns>Validation results.</returns>
            <remarks>
            <para>The <paramref name="format" /> is expected to be a valid regular expression.</para>
            <para>This is used to validate values against the property type validation regular expression.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IPropertyIndexValueFactory">
            <summary>
            Represents a property index value factory.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyIndexValueFactory.GetIndexValues(Umbraco.Core.Models.Property,System.String,System.String,System.Boolean)">
            <summary>
            Gets the index values for a property.
            </summary>
            <remarks>
            <para>Returns key-value pairs, where keys are indexed field names. By default, that would be the property alias,
            and there would be only one pair, but some implementations (see for instance the grid one) may return more than
            one pair, with different indexed field names.</para>
            <para>And then, values are an enumerable of objects, because each indexed field can in turn have multiple
            values. By default, there would be only one object: the property value. But some implementations may return
            more than one value for a given field.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IValueRequiredValidator">
            <summary>
            Defines a required value validator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IValueRequiredValidator.ValidateRequired(System.Object,System.String)">
            <summary>
            Validates a value.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="valueType">The value type.</param>
            <returns>Validation results.</returns>
            <remarks>
            <para>This is used to validate values when the property type specifies that a value is required.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.LabelConfiguration">
            <summary>
            Represents the configuration for the label value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.LabelConfigurationEditor">
            <summary>
            Represents the configuration for the label value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.LabelConfigurationEditor.FromConfigurationEditor(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.PropertyEditors.LabelConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.LabelPropertyEditor">
            <summary>
            Represents a property editor for label properties.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.LabelPropertyEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.LabelPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.LabelPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.LabelPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.LabelPropertyEditor.LabelPropertyValueEditor.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyEditorTagsExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Umbraco.Core.PropertyEditors.IDataEditor"/> interface to manage tags.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyEditorTagsExtensions.IsTagsEditor(Umbraco.Core.PropertyEditors.IDataEditor)">
            <summary>
            Determines whether an editor supports tags.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyEditorTagsExtensions.GetTagAttribute(Umbraco.Core.PropertyEditors.IDataEditor)">
            <summary>
            Gets the tags configuration attribute of an editor.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyValueLevel">
            <summary>
            Indicates the level of a value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyValueLevel.Source">
            <summary>
            The source value, i.e. what is in the database.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyValueLevel.Inter">
            <summary>
            The conversion intermediate value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyValueLevel.Object">
            <summary>
            The converted value.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.SliderConfiguration">
            <summary>
            Represents the configuration for the slider value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.TagConfiguration">
            <summary>
            Represents the configuration for the tag value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue">
            <summary>
            Represents a value of the image cropper value editor.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.Src">
            <summary>
            Gets or sets the value source image.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.FocalPoint">
            <summary>
            Gets or sets the value focal point.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.Crops">
            <summary>
            Gets or sets the value crops.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.ToString">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.ToHtmlString">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.GetCrop(System.String)">
            <summary>
            Gets a crop.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.GetCropUrl(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Gets the value image URL for a specified crop.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.GetCropUrl(System.String,Umbraco.Core.Models.IImageUrlGenerator,System.Boolean,System.Boolean,System.String)">
            <summary>
            Gets the value image URL for a specified crop.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.GetCropUrl(System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Gets the value image URL for a specific width and height.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.GetCropUrl(System.Int32,System.Int32,Umbraco.Core.Models.IImageUrlGenerator,System.Boolean,System.String)">
            <summary>
            Gets the value image URL for a specific width and height.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.HasFocalPoint">
            <summary>
            Determines whether the value has a focal point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.HasCrop(System.String)">
            <summary>
            Determines whether the value has a specified crop.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.HasImage">
            <summary>
            Determines whether the value has a source image.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.ApplyConfiguration(Umbraco.Core.PropertyEditors.ImageCropperConfiguration)">
            <summary>
            Applies a configuration.
            </summary>
            <remarks>Ensures that all crops defined in the configuration exists in the value.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.Equals(Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperFocalPoint.Equals(Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperFocalPoint)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperFocalPoint.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperCrop.Equals(Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperCrop)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperCrop.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperCropCoordinates.Equals(Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperCropCoordinates)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperCropCoordinates.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValueTypeConverter">
            <summary>
            Converts <see cref="T:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue"/> to string or JObject (why?).
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.GridValueConverter">
            <summary>
            This ensures that the grid config is merged in with the front-end value
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValueConverter">
            <summary>
            Represents a value converter for the image cropper value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValueConverter.IsConverter(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValueConverter.GetPropertyValueType(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValueConverter.GetPropertyCacheLevel(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValueConverter.ConvertSourceToIntermediate(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.JsonValueConverter">
            <summary>
            The default converter for all property editors that expose a JSON value type
            </summary>
            <remarks>
            Since this is a default (umbraco) converter it will be ignored if another converter found conflicts with this one.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.JsonValueConverter.#ctor(Umbraco.Core.PropertyEditors.PropertyEditorCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.ValueConverters.JsonValueConverter"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.JsonValueConverter.IsConverter(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
            It is a converter for any value type that is "JSON"
            </summary>
            <param name="propertyType"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.LabelValueConverter">
            <summary>
            We need this property converter so that we always force the value of a label to be a string
            </summary>
            <remarks>
            Without a property converter defined for the label type, the value will be converted with
            the `ConvertUsingDarkMagic` method which will try to parse the value into it's correct type, but this
            can cause issues if the string is detected as a number and then strips leading zeros.
            Example: http://issues.umbraco.org/issue/U4-7929
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.MustBeStringValueConverter">
            <summary>
            Ensures that no matter what is selected in (editor), the value results in a string.
            </summary>
            <remarks>
            <para>For more details see issues http://issues.umbraco.org/issue/U4-3776 (MNTP)
            and http://issues.umbraco.org/issue/U4-4160 (media picker).</para>
            <para>The cache level is set to .Content because the string is supposed to depend
            on the source value only, and not on any other content. It is NOT appropriate
            to use that converter for values whose .ToString() would depend on other content.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.SliderValueConverter.IsRangeDataType(System.Int32)">
            <summary>
            Discovers if the slider is set to range mode.
            </summary>
            <param name="dataTypeId">
            The data type id.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.TagsValueConverter.JsonStorageType(System.Int32)">
            <summary>
            Discovers if the tags data type is storing its data in a Json format
            </summary>
            <param name="dataTypeId">
            The data type id.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.TinyMceValueConverter">
            <summary>
            Value converter for the RTE so that it always returns IHtmlString so that Html.Raw doesn't have to be used.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.UploadPropertyConverter">
            <summary>
            The upload property value converter.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueListConfiguration">
            <summary>
            Represents the ValueList editor configuration.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.VoidEditor">
            <summary>
            Represents a void editor.
            </summary>
            <remarks>Can be used in some places where an editor is needed but no actual
            editor is available. Not to be used otherwise. Not discovered, and therefore
            not part of the editors collection.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.VoidEditor.#ctor(System.String,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.VoidEditor"/> class.
            </summary>
            <param name="aliasSuffix">An optional alias suffix.</param>
            <param name="logger">A logger.</param>
            <remarks>The default alias of the editor is "Umbraco.Void". When a suffix is provided,
            it is appended to the alias. Eg if the suffix is "Foo" the alias is "Umbraco.Void.Foo".</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.VoidEditor.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.VoidEditor"/> class.
            </summary>
            <param name="logger">A logger.</param>
            <remarks>The alias of the editor is "Umbraco.Void".</remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.Validators.DecimalValidator">
            <summary>
            A validator that validates that the value is a valid decimal
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.Validators.DecimalValidator.ValidationName">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.Validators.DecimalValidator.Validate(System.Object,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.Validators.DelimitedValueValidator">
            <summary>
            A validator that validates a delimited set of values against a common regex
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.Validators.DelimitedValueValidator.ValidationName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.Validators.DelimitedValueValidator.Configuration">
            <summary>
            Gets or sets the configuration, when parsed as <see cref="T:Umbraco.Core.PropertyEditors.IManifestValueValidator"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.Validators.DelimitedValueValidator.Validate(System.Object,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.Validators.EmailValidator">
            <summary>
            A validator that validates an email address
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.Validators.EmailValidator.ValidationName">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.Validators.EmailValidator.Validate(System.Object,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.Validators.IntegerValidator">
            <summary>
            A validator that validates that the value is a valid integer
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.Validators.IntegerValidator.ValidationName">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.Validators.IntegerValidator.Validate(System.Object,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.Validators.RegexValidator">
            <summary>
            A validator that validates that the value against a regular expression.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.Validators.RegexValidator.ValidationName">
            <inheritdoc cref="P:Umbraco.Core.PropertyEditors.IManifestValueValidator.ValidationName"/>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.Validators.RegexValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.Validators.RegexValidator"/> class.
            </summary>
            <remarks>Use this constructor when the validator is used as an <see cref="T:Umbraco.Core.PropertyEditors.IValueFormatValidator"/>,
            and the regular expression is supplied at validation time. This constructor is also used when
            the validator is used as an <see cref="T:Umbraco.Core.PropertyEditors.IManifestValueValidator"/> and the regular expression
            is supplied via the <see cref="P:Umbraco.Core.PropertyEditors.Validators.RegexValidator.Configuration"/> method.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.Validators.RegexValidator.#ctor(Umbraco.Core.Services.ILocalizedTextService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.Validators.RegexValidator"/> class.
            </summary>
            <remarks>Use this constructor when the validator is used as an <see cref="T:Umbraco.Core.PropertyEditors.IValueValidator"/>,
            and the regular expression must be supplied when the validator is created.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.Validators.RegexValidator.Configuration">
            <summary>
            Gets or sets the configuration, when parsed as <see cref="T:Umbraco.Core.PropertyEditors.IManifestValueValidator"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.Validators.RegexValidator.Validate(System.Object,System.String,System.Object)">
            <inheritdoc cref="M:Umbraco.Core.PropertyEditors.IValueValidator.Validate(System.Object,System.String,System.Object)"/>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.Validators.RegexValidator.ValidateFormat(System.Object,System.String,System.String)">
            <inheritdoc cref="M:Umbraco.Core.PropertyEditors.IValueFormatValidator.ValidateFormat(System.Object,System.String,System.String)"/>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.Validators.RequiredValidator">
            <summary>
            A validator that validates that the value is not null or empty (if it is a string)
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.Validators.RequiredValidator.ValidationName">
            <inheritdoc cref="P:Umbraco.Core.PropertyEditors.IManifestValueValidator.ValidationName"/>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.Validators.RequiredValidator.Validate(System.Object,System.String,System.Object)">
            <inheritdoc cref="M:Umbraco.Core.PropertyEditors.IValueValidator.Validate(System.Object,System.String,System.Object)"/>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.Validators.RequiredValidator.ValidateRequired(System.Object,System.String)">
            <inheritdoc cref="M:Umbraco.Core.PropertyEditors.IValueRequiredValidator.ValidateRequired(System.Object,System.String)"/>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.DefaultPropertyValueConverterAttribute">
            <summary>
            Indicates that this is a default property value converter (shipped with Umbraco)
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DefaultPropertyValueConverterAttribute.DefaultConvertersToShadow">
            <summary>
            A DefaultPropertyValueConverter can 'shadow' other default property value converters so that
            a DefaultPropertyValueConverter can be more specific than another one.
            </summary>
            <remarks>
            An example where this is useful is that both the RelatedLiksEditorValueConverter and the JsonValueConverter
            will be returned as value converters for the Related Links Property editor, however the JsonValueConverter
            is a very generic converter and the RelatedLiksEditorValueConverter is more specific than it, so the RelatedLiksEditorValueConverter
            can specify that it 'shadows' the JsonValueConverter.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.GridEditor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.GridEditor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IValueValidator">
            <summary>
            Defines a value validator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IValueValidator.Validate(System.Object,System.String,System.Object)">
            <summary>
            Validates a value.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="valueType">The value type.</param>
            <param name="dataTypeConfiguration">A datatype configuration.</param>
            <returns>Validation results.</returns>
            <remarks>
            <para>The value can be a string, a Json structure (JObject, JArray...)... corresponding to what was posted by an editor.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IPropertyValueConverter">
            <summary>
            Provides published content properties conversion service.
            </summary>
            <remarks>This is not a simple "value converter" because it really works only for properties.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverter.IsConverter(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
            Gets a value indicating whether the converter supports a property type.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>A value indicating whether the converter supports a property type.</returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverter.IsValue(System.Object,Umbraco.Core.PropertyEditors.PropertyValueLevel)">
            <summary>
            Determines whether a value is an actual value, or not a value.
            </summary>
            <remarks>
            <para>Called for Source, Inter and Object levels, until one does not return null.</para>
            <para>Can return true (is a value), false (is not a value), or null to indicate that it
            cannot be determined at the specified level. For instance, if source is a string that
            could contain JSON, the decision could be made on the intermediate value. Or, if it is
            a picker, it could be made on the object value (the actual picked object).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverter.GetPropertyValueType(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
            Gets the type of values returned by the converter.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>The CLR type of values returned by the converter.</returns>
            <remarks>Some of the CLR types may be generated, therefore this method cannot directly return
            a Type object (which may not exist yet). In which case it needs to return a ModelType instance.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverter.GetPropertyCacheLevel(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
            Gets the property cache level.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>The property cache level.</returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverter.ConvertSourceToIntermediate(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,System.Object,System.Boolean)">
            <summary>
            Converts a property source value to an intermediate value.
            </summary>
            <param name="owner">The property set owning the property.</param>
            <param name="propertyType">The property type.</param>
            <param name="source">The source value.</param>
            <param name="preview">A value indicating whether conversion should take place in preview mode.</param>
            <returns>The result of the conversion.</returns>
            <remarks>
            <para>The converter should know how to convert a <c>null</c> source value, meaning that no
            value has been assigned to the property. The intermediate value can be <c>null</c>.</para>
            <para>With the XML cache, source values come from the XML cache and therefore are strings.</para>
            <para>With objects caches, source values would come from the database and therefore be either
            ints, DateTimes, decimals, or strings.</para>
            <para>The converter should be prepared to handle both situations.</para>
            <para>When source values are strings, the converter must handle empty strings, whitespace
            strings, and xml-whitespace strings appropriately, ie it should know whether to preserve
            white spaces.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverter.ConvertIntermediateToObject(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <summary>
            Converts a property intermediate value to an Object value.
            </summary>
            <param name="owner">The property set owning the property.</param>
            <param name="propertyType">The property type.</param>
            <param name="referenceCacheLevel">The reference cache level.</param>
            <param name="inter">The intermediate value.</param>
            <param name="preview">A value indicating whether conversion should take place in preview mode.</param>
            <returns>The result of the conversion.</returns>
            <remarks>
            <para>The converter should know how to convert a <c>null</c> intermediate value, or any intermediate value
            indicating that no value has been assigned to the property. It is up to the converter to determine
            what to return in that case: either <c>null</c>, or the default value...</para>
            <para>The <paramref name="referenceCacheLevel"/> is passed to the converter so that it can be, in turn,
            passed to eg a PublishedFragment constructor. It is used by the fragment and the properties to manage
            the cache levels of property values. It is not meant to be used by the converter.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverter.ConvertIntermediateToXPath(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <summary>
            Converts a property intermediate value to an XPath value.
            </summary>
            <param name="owner">The property set owning the property.</param>
            <param name="propertyType">The property type.</param>
            <param name="referenceCacheLevel">The reference cache level.</param>
            <param name="inter">The intermediate value.</param>
            <param name="preview">A value indicating whether conversion should take place in preview mode.</param>
            <returns>The result of the conversion.</returns>
            <remarks>
            <para>The converter should know how to convert a <c>null</c> intermediate value, or any intermediate value
            indicating that no value has been assigned to the property. It is up to the converter to determine
            what to return in that case: either <c>null</c>, or the default value...</para>
            <para>If successful, the result should be either <c>null</c>, a string, or an <c>XPathNavigator</c>
            instance. Whether an xml-whitespace string should be returned as <c>null</c> or literally, is
            up to the converter.</para>
            <para>The converter may want to return an XML fragment that represent a part of the content tree,
            but should pay attention not to create infinite loops that would kill XPath and XSLT.</para>
            <para>The <paramref name="referenceCacheLevel"/> is passed to the converter so that it can be, in turn,
            passed to eg a PublishedFragment constructor. It is used by the fragment and the properties to manage
            the cache levels of property values. It is not meant to be used by the converter.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IDataValueEditor">
            <summary>
            Represents an editor for editing data values.
            </summary>
            <remarks>This is the base interface for parameter and property value editors.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataValueEditor.View">
            <summary>
            Gets the editor view.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataValueEditor.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <remarks>The value has to be a valid <see cref="T:Umbraco.Core.PropertyEditors.ValueTypes"/> value.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataValueEditor.IsReadOnly">
            <summary>
            Gets a value indicating whether the edited value is read-only.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataValueEditor.HideLabel">
            <summary>
            Gets a value indicating whether to display the associated label.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IDataValueEditor.Validate(System.Object,System.Boolean,System.String)">
            <summary>
            Validates a property value.
            </summary>
            <param name="value">The property value.</param>
            <param name="required">A value indicating whether the property value is required.</param>
            <param name="format">A specific format (regex) that the property value must respect.</param>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IDataValueEditor.Validators">
            <summary>
            Gets the validators to use to validate the edited value.
            </summary>
            <remarks>
            <para>Use this property to add validators, not to validate. Use <see cref="M:Umbraco.Core.PropertyEditors.IDataValueEditor.Validate(System.Object,System.Boolean,System.String)"/> instead.</para>
            TODO: replace with AddValidator? WithValidator?
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IDataValueEditor.FromEditor(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            Converts a value posted by the editor to a property value.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IDataValueEditor.ToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Services.IDataTypeService,System.String,System.String)">
            <summary>
            Converts a property value to a value for the editor.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IDataValueEditor.ConvertDbToXml(Umbraco.Core.Models.Property,Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Services.ILocalizationService,System.Boolean)">
            <summary>
            Used for serializing an <see cref="T:Umbraco.Core.Models.IContent"/> item for packaging
            </summary>
            <param name="property"></param>
            <param name="dataTypeService"></param>
            <param name="localizationService"></param>
            <param name="published"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IDataValueEditor.ConvertDbToXml(Umbraco.Core.Models.PropertyType,System.Object,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            Used for serializing an <see cref="T:Umbraco.Core.Models.IContent"/> item for packaging
            </summary>
            <param name="propertyType"></param>
            <param name="value"></param>
            <param name="dataTypeService"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.DataEditor">
            <summary>
            Represents a data editor.
            </summary>
            <remarks>
            <para>Editors can be deserialized from e.g. manifests, which is. why the class is not abstract,
            the json serialization attributes are required, and the properties have an internal setter.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataEditor.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.PropertyEditors.EditorType)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.DataEditor"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditor.Attribute">
            <summary>
            Gets the editor attribute.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditor.Logger">
            <summary>
            Gets a logger.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditor.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditor.Type">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditor.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditor.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditor.Group">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditor.IsDeprecated">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataEditor.GetValueEditor">
            <inheritdoc />
            <remarks>
            <para>If an explicit value editor has been assigned, then this explicit
            instance is returned. Otherwise, a new instance is created by CreateValueEditor.</para>
            <para>The instance created by CreateValueEditor is not cached, i.e.
            a new instance is created each time the property value is retrieved. The
            property editor is a singleton, and the value editor cannot be a singleton
            since it depends on the datatype configuration.</para>
            <para>Technically, it could be cached by datatype but let's keep things
            simple enough for now.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataEditor.GetValueEditor(System.Object)">
            <inheritdoc />
            <remarks>
            <para>If an explicit value editor has been assigned, then this explicit
            instance is returned. Otherwise, a new instance is created by CreateValueEditor,
            and configured with the configuration.</para>
            <para>The instance created by CreateValueEditor is not cached, i.e.
            a new instance is created each time the property value is retrieved. The
            property editor is a singleton, and the value editor cannot be a singleton
            since it depends on the datatype configuration.</para>
            <para>Technically, it could be cached by datatype but let's keep things
            simple enough for now.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditor.ExplicitValueEditor">
            <summary>
            Gets or sets an explicit value editor.
            </summary>
            <remarks>Used for manifest data editors.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataEditor.GetConfigurationEditor">
            <inheritdoc />
            <remarks>
            <para>If an explicit configuration editor has been assigned, then this explicit
            instance is returned. Otherwise, a new instance is created by CreateConfigurationEditor.</para>
            <para>The instance created by CreateConfigurationEditor is not cached, i.e.
            a new instance is created each time. The property editor is a singleton, and although the
            configuration editor could technically be a singleton too, we'd rather not keep configuration editor
            cached.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditor.ExplicitConfigurationEditor">
            <summary>
            Gets or sets an explicit configuration editor.
            </summary>
            <remarks>Used for manifest data editors.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditor.DefaultConfiguration">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataEditor.PropertyIndexValueFactory">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataEditor.CreateValueEditor">
            <summary>
            Creates a value editor instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataEditor.CreateConfigurationEditor">
            <summary>
            Creates a configuration editor instance.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataEditor.DebuggerDisplay">
            <summary>
            Provides a summary of the PropertyEditor for use with the <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ConfigurationField">
            <summary>
            Represents a datatype configuration field for editing.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationField"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationField.#ctor(Umbraco.Core.PropertyEditors.IValueValidator[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationField"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationField.#ctor(System.Collections.Generic.List{Umbraco.Core.PropertyEditors.IValueValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationField"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationField.Key">
            <summary>
            Gets or sets the key of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationField.Name">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationField.PropertyName">
            <summary>
            Gets or sets the property name of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationField.PropertyType">
            <summary>
            Gets or sets the property CLR type of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationField.Description">
            <summary>
            Gets or sets the description of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationField.HideLabel">
            <summary>
            Gets or sets a value indicating whether to hide the label of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationField.View">
            <summary>
            Gets or sets the view to used in the editor.
            </summary>
            <remarks>
            <para>Can be the full virtual path, or the relative path to the Umbraco folder,
            or a simple view name which will map to ~/Views/PreValueEditors/{view}.html.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationField.Validators">
            <summary>
            Gets the validators of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationField.Config">
            <summary>
            Gets or sets extra configuration properties for the editor.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute">
            <summary>
            Marks a ConfigurationEditor property as a configuration field, and a class as a configuration field type.
            </summary>
            <remarks>Properties marked with this attribute are discovered as fields.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationField"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationField"/> class.
            </summary>
            <param name="key">The unique identifier of the field.</param>
            <param name="name">The friendly name of the field.</param>
            <param name="view">The view to use to render the field editor.</param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationField"/> class.
            </summary>
            <param name="name">The friendly name of the field.</param>
            <param name="view">The view to use to render the field editor.</param>
            <remarks>When no key is specified, the <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationEditor"/> will derive a key
            from the name of the property marked with this attribute.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute.Key">
            <summary>
            Gets or sets the key of the field.
            </summary>
            <remarks>When null or empty, the <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationEditor"/> should derive a key
            from the name of the property marked with this attribute.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute.Name">
            <summary>
            Gets the friendly name of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute.View">
            <summary>
            Gets or sets the view to use to render the field editor.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute.Description">
            <summary>
            Gets or sets the description of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute.HideLabel">
            <summary>
            Gets or sets a value indicating whether the field editor should be displayed without its label.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute.HideLabelSettable">
            <summary>
            Gets the settable underlying <see cref="P:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute.HideLabel"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute.Type">
            <summary>
            Gets or sets the type of the field.
            </summary>
            <remarks>
            <para>By default, fields are created as <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationField"/> instances,
            unless specified otherwise through this property.</para>
            <para>The specified type must inherit from <see cref="T:Umbraco.Core.PropertyEditors.ConfigurationField"/>.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyCacheLevel">
            <summary>
            Specifies the level of cache for a property value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheLevel.Unknown">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheLevel.Element">
            <summary>
            Indicates that the property value can be cached at the element level, i.e. it can be
            cached until the element itself is modified.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheLevel.Elements">
            <summary>
            Indicates that the property value can be cached at the elements level, i.e. it can
            be cached until any element is modified.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheLevel.Snapshot">
            <summary>
            Indicates that the property value can be cached at the snapshot level, i.e. it can be
            cached for the duration of the current snapshot.
            </summary>
            <remarks>In most cases, a snapshot is created per request, and therefore this is
            equivalent to cache the value for the duration of the request.</remarks>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheLevel.None">
            <summary>
            Indicates that the property value cannot be cached and has to be converted each time
            it is requested.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueTypes">
            <summary>
            Represents the types of the edited values.
            </summary>
            <remarks>
            <para>These types are used to determine the storage type, but also for
            validation. Therefore, they are more detailed than the storage types.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.ValueTypes.Date">
            <summary>
            Date value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.ValueTypes.DateTime">
            <summary>
            DateTime value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.ValueTypes.Decimal">
            <summary>
            Decimal value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.ValueTypes.Integer">
            <summary>
            Integer value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.ValueTypes.Bigint">
            <summary>
            Integer value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.ValueTypes.Json">
            <summary>
            Json value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.ValueTypes.Text">
            <summary>
            Text value (maps to text database type).
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.ValueTypes.Time">
            <summary>
            Time value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.ValueTypes.String">
            <summary>
            Text value (maps to varchar database type).
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.ValueTypes.Xml">
            <summary>
            Xml value.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueTypes.IsValue(System.String)">
            <summary>
            Determines whether a string value is a valid ValueTypes value.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueTypes.ToStorageType(System.String)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.ValueStorageType"/> value corresponding to a ValueTypes value.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyValueConverterBase">
            <summary>
            Provides a default implementation for <see cref="T:Umbraco.Core.PropertyEditors.IPropertyValueConverter" />.
            </summary>
            <seealso cref="T:Umbraco.Core.PropertyEditors.IPropertyValueConverter" />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueConverterBase.IsConverter(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueConverterBase.IsValue(System.Object,Umbraco.Core.PropertyEditors.PropertyValueLevel)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueConverterBase.GetPropertyValueType(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueConverterBase.GetPropertyCacheLevel(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueConverterBase.ConvertSourceToIntermediate(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueConverterBase.ConvertIntermediateToObject(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueConverterBase.ConvertIntermediateToXPath(Umbraco.Core.Models.PublishedContent.IPublishedElement,Umbraco.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.DataValueEditor">
            <summary>
            Represents a value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.DataValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataValueEditor.#ctor(System.String,Umbraco.Core.PropertyEditors.IValueValidator[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.DataValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataValueEditor.#ctor(Umbraco.Core.PropertyEditors.DataEditorAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.DataValueEditor"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataValueEditor.Configuration">
            <summary>
            Gets or sets the value editor configuration.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataValueEditor.View">
            <summary>
            Gets or sets the editor view.
            </summary>
            <remarks>
            <para>The view can be three things: (1) the full virtual path, or (2) the relative path to the current Umbraco
            folder, or (3) a view name which maps to views/propertyeditors/{view}/{view}.html.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataValueEditor.ValueType">
            <summary>
            The value type which reflects how it is validated and stored in the database
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataValueEditor.Validate(System.Object,System.Boolean,System.String)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataValueEditor.Validators">
            <summary>
            A collection of validators for the pre value editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataValueEditor.RequiredValidator">
            <summary>
            Gets the validator used to validate the special property type -level "required".
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataValueEditor.FormatValidator">
            <summary>
            Gets the validator used to validate the special property type -level "format".
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataValueEditor.HideLabel">
            <summary>
            If this is true than the editor will be displayed full width without a label
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DataValueEditor.IsReadOnly">
            <summary>
            Set this to true if the property editor is for display purposes only
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataValueEditor.TryConvertValueToCrlType(System.Object)">
            <summary>
            Used to try to convert the string value to the correct CLR type based on the DatabaseDataType specified for this value editor
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataValueEditor.FromEditor(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
              <summary>
              A method to deserialize the string value that has been saved in the content editor
              to an object to be stored in the database.
              </summary>
              <param name="editorValue"></param>
              <param name="currentValue">
              The current value that has been persisted to the database for this editor. This value may be useful for
              how the value then get's deserialized again to be re-persisted. In most cases it will probably not be used.
              </param>
             <param name="languageId"></param>
             <param name="segment"></param>
             <returns></returns>
              <remarks>
              By default this will attempt to automatically convert the string value to the value type supplied by ValueType.
            
              If overridden then the object returned must match the type supplied in the ValueType, otherwise persisting the
              value to the DB will fail when it tries to validate the value type.
              </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataValueEditor.ToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Services.IDataTypeService,System.String,System.String)">
            <summary>
            A method used to format the database value to a value that can be used by the editor
            </summary>
            <param name="property"></param>
            <param name="dataTypeService"></param>
            <param name="culture"></param>
            <param name="segment"></param>
            <returns></returns>
            <remarks>
            The object returned will automatically be serialized into json notation. For most property editors
            the value returned is probably just a string but in some cases a json structure will be returned.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataValueEditor.ConvertDbToXml(Umbraco.Core.Models.Property,Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Services.ILocalizationService,System.Boolean)">
            <summary>
            Converts a property to Xml fragments.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataValueEditor.ConvertDbToXml(Umbraco.Core.Models.PropertyType,System.Object,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            Converts a property value to an Xml fragment.
            </summary>
            <remarks>
            <para>By default, this returns the value of ConvertDbToString but ensures that if the db value type is
            NVarchar or NText, the value is returned as a CDATA fragment - else it's a Text fragment.</para>
            <para>Returns an XText or XCData instance which must be wrapped in a element.</para>
            <para>If the value is empty we will not return as CDATA since that will just take up more space in the file.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DataValueEditor.ConvertDbToString(Umbraco.Core.Models.PropertyType,System.Object,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            Converts a property value to a string.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.TagsPropertyEditorAttribute">
            <summary>
            Marks property editors that support tags.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.TagsPropertyEditorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.TagsPropertyEditorAttribute"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.TagsPropertyEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.TagsPropertyEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.TagsPropertyEditorAttribute.StorageType">
            <summary>
            Gets or sets a value indicating how tags are stored.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.TagsPropertyEditorAttribute.Delimiter">
            <summary>
            Gets or sets the delimited for delimited strings.
            </summary>
            <remarks>Default is a comma. Has no meaning when tags are stored as Json.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.TagsPropertyEditorAttribute.ReplaceTags">
            <summary>
            Gets or sets a value indicating whether to replace the tags entirely.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.TagsPropertyEditorAttribute.TagGroup">
            <summary>
            Gets or sets the tags group.
            </summary>
            <remarks>Default is "default".</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.TagsPropertyEditorAttribute.TagsConfigurationProviderType">
            <summary>
            Gets the type of the dynamic configuration provider.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IIconService.GetIcon(System.String)">
            <summary>
            Gets an IconModel containing the icon name and SvgString according to an icon name found at the global icons path
            </summary>
            <param name="iconName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IIconService.GetAllIcons">
            <summary>
            Gets a list of all svg icons found at at the global icons path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.AuditService.GetPagedItemsByEntity(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,Umbraco.Core.Models.AuditType[],Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IAuditItem})">
            <summary>
            Returns paged items in the audit trail for a given entity
            </summary>
            <param name="entityId"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderDirection">
            By default this will always be ordered descending (newest first)
            </param>
            <param name="auditTypeFilter">
            Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query or the custom filter
            so we need to do that here
            </param>
            <param name="customFilter">
            Optional filter to be applied
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.AuditService.GetPagedItemsByUser(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,Umbraco.Core.Models.AuditType[],Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IAuditItem})">
            <summary>
            Returns paged items in the audit trail for a given user
            </summary>
            <param name="userId"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderDirection">
            By default this will always be ordered descending (newest first)
            </param>
            <param name="auditTypeFilter">
            Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query or the custom filter
            so we need to do that here
            </param>
            <param name="customFilter">
            Optional filter to be applied
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.AuditService.Write(System.Int32,System.String,System.String,System.DateTime,System.Int32,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.AuditService.DetermineIsAvailable">
            <summary>
            Determines whether the repository is available.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.Implement.ConsentService">
            <summary>
            Implements <see cref="T:Umbraco.Core.Services.IConsentService"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ConsentService.#ctor(Umbraco.Core.Scoping.IScopeProvider,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory,Umbraco.Core.Persistence.Repositories.IConsentRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Services.Implement.ContentService"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ConsentService.RegisterConsent(System.String,System.String,System.String,Umbraco.Core.Models.ConsentState,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ConsentService.LookupConsent(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Services.Implement.ContentService">
            <summary>
            Implements the content service.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.Services.Implement.ContentService.SetPermissions(Umbraco.Core.Models.Membership.EntityPermissionSet)" -->
        <member name="M:Umbraco.Core.Services.Implement.ContentService.SetPermission(Umbraco.Core.Models.IContent,System.Char,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Assigns a single permission to the current content item for the specified group ids
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="groupIds"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetPermissions(Umbraco.Core.Models.IContent)">
            <summary>
            Returns implicit/inherited permissions assigned to the content item for all user groups
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.Create(System.String,System.Guid,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IContent without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new content objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Content object</param>
            <param name="parentId">Id of Parent for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.Create(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object of a specified content type.
            </summary>
            <remarks>This method simply returns a new, non-persisted, IContent without any identity. It
            is intended as a shortcut to creating new content objects that does not invoke a save
            operation against the database.
            </remarks>
            <param name="name">The name of the content object.</param>
            <param name="parentId">The identifier of the parent, or -1.</param>
            <param name="contentTypeAlias">The alias of the content type.</param>
            <param name="userId">The optional id of the user creating the content.</param>
            <returns>The content object.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.Create(System.String,Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object of a specified content type, under a parent.
            </summary>
            <remarks>This method simply returns a new, non-persisted, IContent without any identity. It
            is intended as a shortcut to creating new content objects that does not invoke a save
            operation against the database.
            </remarks>
            <param name="name">The name of the content object.</param>
            <param name="parent">The parent content object.</param>
            <param name="contentTypeAlias">The alias of the content type.</param>
            <param name="userId">The optional id of the user creating the content.</param>
            <returns>The content object.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.CreateAndSave(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object of a specified content type.
            </summary>
            <remarks>This method returns a new, persisted, IContent with an identity.</remarks>
            <param name="name">The name of the content object.</param>
            <param name="parentId">The identifier of the parent, or -1.</param>
            <param name="contentTypeAlias">The alias of the content type.</param>
            <param name="userId">The optional id of the user creating the content.</param>
            <returns>The content object.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.CreateAndSave(System.String,Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object of a specified content type, under a parent.
            </summary>
            <remarks>This method returns a new, persisted, IContent with an identity.</remarks>
            <param name="name">The name of the content object.</param>
            <param name="parent">The parent content object.</param>
            <param name="contentTypeAlias">The alias of the content type.</param>
            <param name="userId">The optional id of the user creating the content.</param>
            <returns>The content object.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetById(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContent"/> object by Id
            </summary>
            <param name="id">Id of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContent"/> object by Id
            </summary>
            <param name="ids">Ids of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetById(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContent"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetByIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets <see cref="T:Umbraco.Core.Models.IContent"/> objects by Ids
            </summary>
            <param name="ids">Ids of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetPagedOfType(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetPagedOfTypes(System.Int32[],System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetByLevel(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Level
            </summary>
            <param name="level">The level to retrieve Content from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
            <remarks>Contrary to most methods, this method filters out trashed content items.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetVersion(System.Int32)">
            <summary>
            Gets a specific version of an <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IContent"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetVersions(System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IContent"/> objects versions by Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetVersionsSlim(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IContent"/> objects versions by Id
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetVersionIds(System.Int32,System.Int32)">
            <summary>
            Gets a list of all version Ids for the given content item ordered so latest is first
            </summary>
            <param name="id"></param>
            <param name="maxRows">The maximum number of rows to return</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetAncestors(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which are ancestors of the current content.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetAncestors(Umbraco.Core.Models.IContent)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which are ancestors of the current content.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetPublishedChildren(System.Int32)">
            <summary>
            Gets a collection of published <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <returns>An Enumerable list of published <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetPagedChildren(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetPagedDescendants(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetParent(System.Int32)">
            <summary>
            Gets the parent of the current content as an <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetParent(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the parent of the current content as an <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetRootContent">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetAllPublished">
            <summary>
            Gets all published content items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetContentForExpiration(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetContentForRelease(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetPagedContentInRecycleBin(System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IContent"/> objects, which resides in the Recycle Bin
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContent"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <returns>True if the content has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.IsPathPublishable(Umbraco.Core.Models.IContent)">
            <summary>
            Checks if the passed in <see cref="T:Umbraco.Core.Models.IContent"/> can be published based on the ancestors publish state.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to check if ancestors are published</param>
            <returns>True if the Content can be published, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.Save(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.SaveAndPublish(Umbraco.Core.Models.IContent,System.String,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.SaveAndPublish(Umbraco.Core.Models.IContent,System.String[],System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.Unpublish(Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.CommitDocumentChanges(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
             <summary>
             Saves a document and publishes/unpublishes any pending publishing changes made to the document.
             </summary>
             <remarks>
             <para>
             This MUST NOT be called from within this service, this used to be a public API and must only be used outside of this service.
             Internally in this service, calls must be made to CommitDocumentChangesInternal
             </para>
            
             <para>This is the underlying logic for both publishing and unpublishing any document</para>
             <para>Pending publishing/unpublishing changes on a document are made with calls to <see cref="M:Umbraco.Core.Models.ContentRepositoryExtensions.PublishCulture(Umbraco.Core.Models.IContent,Umbraco.Core.Models.CultureImpact)"/> and
             <see cref="M:Umbraco.Core.Models.ContentRepositoryExtensions.UnpublishCulture(Umbraco.Core.Models.IContent,System.String)"/>.</para>
             <para>When publishing or unpublishing a single culture, or all cultures, use <see cref="M:Umbraco.Core.Services.Implement.ContentService.SaveAndPublish(Umbraco.Core.Models.IContent,System.String,System.Int32,System.Boolean)"/>
             and <see cref="M:Umbraco.Core.Services.Implement.ContentService.Unpublish(Umbraco.Core.Models.IContent,System.String,System.Int32)"/>. But if the flexibility to both publish and unpublish in a single operation is required
             then this method needs to be used in combination with <see cref="M:Umbraco.Core.Models.ContentRepositoryExtensions.PublishCulture(Umbraco.Core.Models.IContent,Umbraco.Core.Models.CultureImpact)"/> and <see cref="M:Umbraco.Core.Models.ContentRepositoryExtensions.UnpublishCulture(Umbraco.Core.Models.IContent,System.String)"/>
             on the content itself - this prepares the content, but does not commit anything - and then, invoke
             <see cref="M:Umbraco.Core.Services.Implement.ContentService.CommitDocumentChanges(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)"/> to actually commit the changes to the database.</para>
             <para>The document is *always* saved, even when publishing fails.</para>
             </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.CommitDocumentChangesInternal(Umbraco.Core.Scoping.IScope,Umbraco.Core.Models.IContent,Umbraco.Core.Events.ContentSavingEventArgs,System.Collections.Generic.IReadOnlyCollection{Umbraco.Core.Models.ILanguage},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Handles a lot of business logic cases for how the document should be persisted
            </summary>
            <param name="scope"></param>
            <param name="content"></param>
            <param name="saveEventArgs"></param>
            <param name="userId"></param>
            <param name="raiseEvents"></param>
            <param name="branchOne"></param>
            <param name="branchRoot"></param>
            <returns></returns>
            <remarks>
            <para>
            Business logic cases such: as unpublishing a mandatory culture, or unpublishing the last culture, checking for pending scheduled publishing, etc... is dealt with in this method.
            There is quite a lot of cases to take into account along with logic that needs to deal with scheduled saving/publishing, branch saving/publishing, etc...       
            </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.PerformScheduledPublish(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.SaveAndPublishBranch(Umbraco.Core.Models.IContent,System.Boolean,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.SaveAndPublishBranch(Umbraco.Core.Models.IContent,System.Boolean,System.String[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.Delete(Umbraco.Core.Models.IContent,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Permanently deletes versions from an <see cref="T:Umbraco.Core.Models.IContent"/> object prior to a specific date.
            This method will never delete the latest version of a content item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.DeleteVersion(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Permanently deletes specific version(s) from an <see cref="T:Umbraco.Core.Models.IContent"/> object.
            This method will never delete the latest version of a content item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.MoveToRecycleBin(Umbraco.Core.Models.IContent,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.Move(Umbraco.Core.Models.IContent,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Umbraco.Core.Models.IContent"/> object to a new location by changing its parent id.
            </summary>
            <remarks>
            If the <see cref="T:Umbraco.Core.Models.IContent"/> object is already published it will be
            published after being moved to its new location. Otherwise it'll just
            be saved with a new parent id.
            </remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to move</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="userId">Optional Id of the User moving the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.EmptyRecycleBin">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IContent"/> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.EmptyRecycleBin(System.Int32)">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IContent"/> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.Copy(Umbraco.Core.Models.IContent,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Copies an <see cref="T:Umbraco.Core.Models.IContent"/> object by creating a new Content object of the same type and copies all data from the current
            to the new copy which is returned. Recursively copies all children.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to copy</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="relateToOriginal">Boolean indicating whether the copy should be related to the original</param>
            <param name="userId">Optional Id of the User copying the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.Copy(Umbraco.Core.Models.IContent,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Copies an <see cref="T:Umbraco.Core.Models.IContent"/> object by creating a new Content object of the same type and copies all data from the current
            to the new copy which is returned.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to copy</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="relateToOriginal">Boolean indicating whether the copy should be related to the original</param>
            <param name="recursive">A value indicating whether to recursively copy children.</param>
            <param name="userId">Optional Id of the User copying the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.SendToPublication(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Sends an <see cref="T:Umbraco.Core.Models.IContent"/> to Publication, which executes handlers and events for the 'Send to Publication' action.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to send to publication</param>
            <param name="userId">Optional Id of the User issuing the send to publication</param>
            <returns>True if sending publication was successful otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.Sort(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <summary>
            Sorts a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by updating the SortOrder according
            to the ordering of items in the passed in <paramref name="items"/>.
            </summary>
            <remarks>
            Using this method will ensure that the Published-state is maintained upon sorting
            so the cache is updated accordingly - as needed.
            </remarks>
            <param name="items"></param>
            <param name="userId"></param>
            <param name="raiseEvents"></param>
            <returns>Result indicating what action was taken when handling the command.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.Sort(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Sorts a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by updating the SortOrder according
            to the ordering of items identified by the <paramref name="ids"/>.
            </summary>
            <remarks>
            Using this method will ensure that the Published-state is maintained upon sorting
            so the cache is updated accordingly - as needed.
            </remarks>
            <param name="ids"></param>
            <param name="userId"></param>
            <param name="raiseEvents"></param>
            <returns>Result indicating what action was taken when handling the command.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.GetPublishedDescendants(Umbraco.Core.Models.IContent)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> descendants by the first Parent.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> item to retrieve Descendants from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.DeletingVersions">
            <summary>
            Occurs before Delete Versions
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.DeletedVersions">
            <summary>
            Occurs after Delete Versions
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Sorting">
            <summary>
            Occurs before Sorting
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Sorted">
            <summary>
            Occurs after Sorting
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Copying">
            <summary>
            Occurs before Copy
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Copied">
            <summary>
            Occurs after Copy
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Trashing">
            <summary>
            Occurs before Content is moved to Recycle Bin
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Trashed">
            <summary>
            Occurs after Content is moved to Recycle Bin
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Moving">
            <summary>
            Occurs before Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Moved">
            <summary>
            Occurs after Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.RollingBack">
            <summary>
            Occurs before Rollback
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.RolledBack">
            <summary>
            Occurs after Rollback
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.SendingToPublish">
            <summary>
            Occurs before Send to Publish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.SentToPublish">
            <summary>
            Occurs after Send to Publish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.EmptyingRecycleBin">
            <summary>
            Occurs before the Recycle Bin is emptied
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.EmptiedRecycleBin">
            <summary>
            Occurs after the Recycle Bin has been Emptied
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Publishing">
            <summary>
            Occurs before publish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Published">
            <summary>
            Occurs after publish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Unpublishing">
            <summary>
            Occurs before unpublish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.Unpublished">
            <summary>
            Occurs after unpublish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.TreeChanged">
            <summary>
            Occurs after change.
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.SavedBlueprint">
            <summary>
            Occurs after a blueprint has been saved.
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.ContentService.DeletedBlueprint">
            <summary>
            Occurs after a blueprint has been deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.StrategyCanPublish(Umbraco.Core.Scoping.IScope,Umbraco.Core.Models.IContent,System.Boolean,System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyCollection{System.String},Umbraco.Core.Events.EventMessages,Umbraco.Core.Events.ContentSavingEventArgs,System.Collections.Generic.IReadOnlyCollection{Umbraco.Core.Models.ILanguage})">
            <summary>
            Ensures that a document can be published
            </summary>
            <param name="scope"></param>
            <param name="content"></param>
            <param name="checkPath"></param>
            <param name="culturesUnpublishing"></param>
            <param name="evtMsgs"></param>
            <param name="culturesPublishing"></param>
            <param name="savingEventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.StrategyPublish(Umbraco.Core.Models.IContent,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.String},Umbraco.Core.Events.EventMessages)">
            <summary>
            Publishes a document
            </summary>
            <param name="content"></param>
            <param name="culturesUnpublishing"></param>
            <param name="evtMsgs"></param>
            <param name="culturesPublishing"></param>
            <returns></returns>
            <remarks>
            It is assumed that all publishing checks have passed before calling this method like <see cref="M:Umbraco.Core.Services.Implement.ContentService.StrategyCanPublish(Umbraco.Core.Scoping.IScope,Umbraco.Core.Models.IContent,System.Boolean,System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyCollection{System.String},Umbraco.Core.Events.EventMessages,Umbraco.Core.Events.ContentSavingEventArgs,System.Collections.Generic.IReadOnlyCollection{Umbraco.Core.Models.ILanguage})"/>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.StrategyCanUnpublish(Umbraco.Core.Scoping.IScope,Umbraco.Core.Models.IContent,Umbraco.Core.Events.EventMessages)">
            <summary>
            Ensures that a document can be unpublished
            </summary>
            <param name="scope"></param>
            <param name="content"></param>
            <param name="evtMsgs"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.StrategyUnpublish(Umbraco.Core.Models.IContent,Umbraco.Core.Events.EventMessages)">
            <summary>
            Unpublishes a document
            </summary>
            <param name="content"></param>
            <param name="evtMsgs"></param>
            <returns></returns>
            <remarks>
            It is assumed that all unpublishing checks have passed before calling this method like <see cref="M:Umbraco.Core.Services.Implement.ContentService.StrategyCanUnpublish(Umbraco.Core.Scoping.IScope,Umbraco.Core.Models.IContent,Umbraco.Core.Events.EventMessages)"/>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.DeleteOfTypes(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Deletes all content of specified type. All children of deleted content is moved to Recycle Bin.
            </summary>
            <remarks>
            <para>This needs extra care and attention as its potentially a dangerous and extensive operation.</para>
            <para>Deletes content items of the specified type, and only that type. Does *not* handle content types
            inheritance and compositions, which need to be managed outside of this method.</para>
            </remarks>
            <param name="contentTypeIds">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional Id of the user issuing the delete operation</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentService.DeleteOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all content items of specified type. All children of deleted content item is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="contentTypeId">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user deleting the media</param>
        </member>
        <member name="T:Umbraco.Core.Services.Implement.ContentTypeService">
            <summary>
            Represents the ContentType Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentTypeService.GetAllPropertyTypeAliases">
            <summary>
            Gets all property type aliases across content, media and member types.
            </summary>
            <returns>All property type aliases.</returns>
            <remarks>Beware! Works across content, media and member types.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentTypeService.GetAllContentTypeAliases(System.Guid[])">
            <summary>
            Gets all content type aliases across content, media and member types.
            </summary>
            <param name="guids">Optional object types guid to restrict to content, and/or media, and/or member types.</param>
            <returns>All content type aliases.</returns>
            <remarks>Beware! Works across content, media and member types.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentTypeService.GetAllContentTypeIds(System.String[])">
            <summary>
            Gets all content type id for aliases across content, media and member types.
            </summary>
            <param name="aliases">Aliases to look for.</param>
            <returns>All content type ids.</returns>
            <remarks>Beware! Works across content, media and member types.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ContentTypeServiceBase`3.HasContainerInPath(System.String)">
            <summary>
            Given the path of a content item, this will return true if the content item exists underneath a list view content item
            </summary>
            <param name="contentPath"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Services.Implement.DataTypeService">
            <summary>
            Represents the DataType Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.DataTypeService.GetDataType(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataType"/> by its Name
            </summary>
            <param name="name">Name of the <see cref="T:Umbraco.Core.Models.IDataType"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDataType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.DataTypeService.GetDataType(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataType"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDataType"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDataType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.DataTypeService.GetDataType(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataType"/> by its unique guid Id
            </summary>
            <param name="id">Unique guid Id of the DataType</param>
            <returns><see cref="T:Umbraco.Core.Models.IDataType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.DataTypeService.GetByEditorAlias(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataType"/> by its control Id
            </summary>
            <param name="propertyEditorAlias">Alias of the property editor</param>
            <returns>Collection of <see cref="T:Umbraco.Core.Models.IDataType"/> objects with a matching control id</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.DataTypeService.GetAll(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.IDataType"/> objects or those with the ids passed in
            </summary>
            <param name="ids">Optional array of Ids</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDataType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.DataTypeService.Save(Umbraco.Core.Models.IDataType,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
            <param name="dataType"><see cref="T:Umbraco.Core.Models.IDataType"/> to save</param>
            <param name="userId">Id of the user issuing the save</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.DataTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataType},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
            <param name="dataTypeDefinitions"><see cref="T:Umbraco.Core.Models.IDataType"/> to save</param>
            <param name="userId">Id of the user issuing the save</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.DataTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataType},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
            <param name="dataTypeDefinitions"><see cref="T:Umbraco.Core.Models.IDataType"/> to save</param>
            <param name="userId">Id of the user issuing the save</param>
            <param name="raiseEvents">Boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.DataTypeService.Delete(Umbraco.Core.Models.IDataType,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
            <remarks>
            Please note that deleting a <see cref="T:Umbraco.Core.Models.IDataType"/> will remove
            all the <see cref="T:Umbraco.Core.Models.PropertyType"/> data that references this <see cref="T:Umbraco.Core.Models.IDataType"/>.
            </remarks>
            <param name="dataType"><see cref="T:Umbraco.Core.Models.IDataType"/> to delete</param>
            <param name="userId">Optional Id of the user issuing the deletion</param>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.DataTypeService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.DataTypeService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.DataTypeService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.DataTypeService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.DataTypeService.Moving">
            <summary>
            Occurs before Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.DataTypeService.Moved">
            <summary>
            Occurs after Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.DomainService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.DomainService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.DomainService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.DomainService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.Get(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.Get(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.Get(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.Get(System.Guid,Umbraco.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.Get``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.Get``1(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.Exists(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.Exists(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetAll``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetAll``1(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetAll(Umbraco.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetAll(Umbraco.Core.Models.UmbracoObjectTypes,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetAll(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetAll(System.Guid,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetAll``1(System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetAll(Umbraco.Core.Models.UmbracoObjectTypes,System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetAll(System.Guid,System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetRootEntities(Umbraco.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetParent(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetParent(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetChildren(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetChildren(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetDescendants(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetDescendants(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetPagedChildren(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetPagedDescendants(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetPagedDescendants(System.Collections.Generic.IEnumerable{System.Int32},Umbraco.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetPagedDescendants(Umbraco.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},Umbraco.Core.Services.Ordering,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetObjectType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetObjectType(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetObjectType(Umbraco.Core.Models.Entities.IUmbracoEntity)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetEntityType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetId(System.Guid,Umbraco.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetId(Umbraco.Core.Udi)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetKey(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetAllPaths(Umbraco.Core.Models.UmbracoObjectTypes,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.GetAllPaths(Umbraco.Core.Models.UmbracoObjectTypes,System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityService.ReserveId(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Services.Implement.EntityXmlSerializer">
            <summary>
            Serializes entities to XML
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityXmlSerializer.Serialize(Umbraco.Core.Models.IContent,System.Boolean,System.Boolean)">
            <summary>
            Exports an IContent item as an XElement.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityXmlSerializer.Serialize(Umbraco.Core.Models.IMedia,System.Boolean)">
            <summary>
            Exports an IMedia item as an XElement.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityXmlSerializer.Serialize(Umbraco.Core.Models.IMember)">
            <summary>
            Exports an IMember item as an XElement.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataType})">
            <summary>
            Exports a list of Data Types
            </summary>
            <param name="dataTypeDefinitions">List of data types to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDataTypeDefinition objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDictionaryItem},System.Boolean)">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="dictionaryItem">List of dictionary items to export</param>
            <param name="includeChildren">Optional boolean indicating whether or not to include children</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDictionaryItem objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityXmlSerializer.Serialize(Umbraco.Core.Models.IDictionaryItem,System.Boolean)">
            <summary>
            Exports a single <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="dictionaryItem">Dictionary Item to export</param>
            <param name="includeChildren">Optional boolean indicating whether or not to include children</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDictionaryItem object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ILanguage})">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.ILanguage"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="languages">List of Languages to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the ILanguage objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITemplate})">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.ITemplate"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="templates"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.EntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMacro})">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.IMacro"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="macros">Macros to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IMacro objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ExternalLoginService.GetAll(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ExternalLoginService.Find(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ExternalLoginService.Save(System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Identity.IExternalLogin})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ExternalLoginService.Save(Umbraco.Core.Models.Identity.IIdentityUserLoginExtended)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ExternalLoginService.DeleteUserLogins(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Services.Implement.FileService">
            <summary>
            Represents the File Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IFile"/> objects like Scripts, Stylesheets and Templates
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.GetStylesheets(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Stylesheet"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Stylesheet"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.GetStylesheetByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Stylesheet"/> object by its name
            </summary>
            <param name="name">Name of the stylesheet incl. extension</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Stylesheet"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.SaveStylesheet(Umbraco.Core.Models.Stylesheet,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Stylesheet"/>
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Core.Models.Stylesheet"/> to save</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.DeleteStylesheet(System.String,System.Int32)">
            <summary>
            Deletes a stylesheet by its name
            </summary>
            <param name="path">Name incl. extension of the Stylesheet to delete</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.ValidateStylesheet(Umbraco.Core.Models.Stylesheet)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.Stylesheet"/>
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Core.Models.Stylesheet"/> to validate</param>
            <returns>True if Stylesheet is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.GetScripts(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Script"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Script"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.GetScriptByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Script"/> object by its name
            </summary>
            <param name="name">Name of the script incl. extension</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Script"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.SaveScript(Umbraco.Core.Models.Script,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Script"/>
            </summary>
            <param name="script"><see cref="T:Umbraco.Core.Models.Script"/> to save</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.DeleteScript(System.String,System.Int32)">
            <summary>
            Deletes a script by its name
            </summary>
            <param name="path">Name incl. extension of the Script to delete</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.ValidateScript(Umbraco.Core.Models.Script)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.Script"/>
            </summary>
            <param name="script"><see cref="T:Umbraco.Core.Models.Script"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.CreateTemplateForContentType(System.String,System.String,System.Int32)">
            <summary>
            Creates a template for a content type
            </summary>
            <param name="contentTypeAlias"></param>
            <param name="contentTypeName"></param>
            <param name="userId"></param>
            <returns>
            The template created
            </returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.CreateTemplateWithIdentity(System.String,System.String,System.String,Umbraco.Core.Models.ITemplate,System.Int32)">
            <summary>
            Create a new template, setting the content if a view exists in the filesystem
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
            <param name="content"></param>
            <param name="masterTemplate"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.GetTemplates(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.ITemplate"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITemplate"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.GetTemplates(System.Int32)">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.ITemplate"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITemplate"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.GetTemplate(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its alias.
            </summary>
            <param name="alias">The alias of the template.</param>
            <returns>The <see cref="T:Umbraco.Core.Models.ITemplate"/> object matching the alias, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.GetTemplate(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its identifier.
            </summary>
            <param name="id">The identifier of the template.</param>
            <returns>The <see cref="T:Umbraco.Core.Models.ITemplate"/> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.GetTemplate(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its guid identifier.
            </summary>
            <param name="id">The guid identifier of the template.</param>
            <returns>The <see cref="T:Umbraco.Core.Models.ITemplate"/> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.GetTemplateDescendants(System.Int32)">
            <summary>
            Gets the template descendants
            </summary>
            <param name="masterTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.GetTemplateChildren(System.String)">
            <summary>
            Gets the template children
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.GetTemplateChildren(System.Int32)">
            <summary>
            Gets the template children
            </summary>
            <param name="masterTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.SaveTemplate(Umbraco.Core.Models.ITemplate,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Template"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.Template"/> to save</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.SaveTemplate(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITemplate},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.Template"/> objects
            </summary>
            <param name="templates">List of <see cref="T:Umbraco.Core.Models.Template"/> to save</param>
            <param name="userId">Optional id of the user</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.DeleteTemplate(System.String,System.Int32)">
            <summary>
            Deletes a template by its alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.ITemplate"/> to delete</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.FileService.ValidateTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.DeletingTemplate">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.DeletedTemplate">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.DeletingScript">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.DeletedScript">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.DeletingStylesheet">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.DeletedStylesheet">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.SavingTemplate">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.SavedTemplate">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.SavingScript">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.SavedScript">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.SavingStylesheet">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.SavedStylesheet">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.SavingPartialView">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.SavedPartialView">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.CreatingPartialView">
            <summary>
            Occurs before Create
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.CreatedPartialView">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.DeletingPartialView">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.FileService.DeletedPartialView">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.Implement.KeyValueService.InitializeMigration">
            <summary>
            A custom migration that executes standalone during the Initialize phase of this service.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.KeyValueService.GetValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.KeyValueService.SetValue(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.KeyValueService.SetValue(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.KeyValueService.TrySetValue(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.KeyValueService.GetValue(Umbraco.Core.Persistence.IUmbracoDatabase,System.String)">
            <summary>
            Gets a value directly from the database, no scope, nothing.
            </summary>
            <remarks>Used by <see cref="T:Umbraco.Core.Runtime.CoreRuntime"/> to determine the runtime state.</remarks>
        </member>
        <member name="T:Umbraco.Core.Services.Implement.LocalizationService">
            <summary>
            Represents the Localization Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.Language"/> and <see cref="T:Umbraco.Core.Models.DictionaryItem"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.AddOrUpdateDictionaryValue(Umbraco.Core.Models.IDictionaryItem,Umbraco.Core.Models.ILanguage,System.String)">
            <summary>
            Adds or updates a translation for a dictionary item and language
            </summary>
            <param name="item"></param>
            <param name="language"></param>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            This does not save the item, that needs to be done explicitly
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.CreateDictionaryItemWithIdentity(System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Creates and saves a new dictionary item and assigns a value to all languages if defaultValue is specified.
            </summary>
            <param name="key"></param>
            <param name="parentId"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetDictionaryItemById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its <see cref="T:System.Int32"/> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetDictionaryItemById(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its <see cref="T:System.Guid"/> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.DictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetDictionaryItemByKey(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its key
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetDictionaryItemChildren(System.Guid)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="parentId">Id of the parent</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetDictionaryItemDescendants(System.Nullable{System.Guid})">
            <summary>
            Gets a list of descendants for a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="parentId">Id of the parent, null will return all dictionary items</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetRootDictionaryItems">
            <summary>
            Gets the root/top <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.DictionaryItemExists(System.String)">
            <summary>
            Checks if a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> with given key exists
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns>True if a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> exists, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.Save(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> object
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Core.Models.IDictionaryItem"/> to save</param>
            <param name="userId">Optional id of the user saving the dictionary item</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.Delete(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> object and its related translations
            as well as its children.
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Core.Models.IDictionaryItem"/> to delete</param>
            <param name="userId">Optional id of the user deleting the dictionary item</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetLanguageById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Language"/> by its id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.Language"/></param>
            <returns><see cref="T:Umbraco.Core.Models.Language"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetLanguageByIsoCode(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Language"/> by its iso code
            </summary>
            <param name="isoCode">Iso Code of the language (ie. en-US)</param>
            <returns><see cref="T:Umbraco.Core.Models.Language"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetLanguageIdByIsoCode(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetLanguageIsoCodeById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetDefaultLanguageIsoCode">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetDefaultLanguageId">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.GetAllLanguages">
            <summary>
            Gets all available languages
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ILanguage"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.Save(Umbraco.Core.Models.ILanguage,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.ILanguage"/> object
            </summary>
            <param name="language"><see cref="T:Umbraco.Core.Models.ILanguage"/> to save</param>
            <param name="userId">Optional id of the user saving the language</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.Delete(Umbraco.Core.Models.ILanguage,System.Int32)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.ILanguage"/> by removing it (but not its usages) from the db
            </summary>
            <param name="language"><see cref="T:Umbraco.Core.Models.ILanguage"/> to delete</param>
            <param name="userId">Optional id of the user deleting the language</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizationService.EnsureDictionaryItemLanguageCallback(Umbraco.Core.Models.IDictionaryItem)">
            <summary>
            This is here to take care of a hack - the DictionaryTranslation model contains an ILanguage reference which we don't want but
            we cannot remove it because it would be a large breaking change, so we need to make sure it's resolved lazily. This is because
            if developers have a lot of dictionary items and translations, the caching and cloning size gets much larger because of
            the large object graphs. So now we don't cache or clone the attached ILanguage
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.LocalizationService.DeletingLanguage">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.LocalizationService.DeletedLanguage">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.LocalizationService.DeletingDictionaryItem">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.LocalizationService.DeletedDictionaryItem">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.LocalizationService.SavingDictionaryItem">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.LocalizationService.SavedDictionaryItem">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.LocalizationService.SavingLanguage">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.LocalizationService.SavedLanguage">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizedTextService.#ctor(System.Lazy{Umbraco.Core.Services.Implement.LocalizedTextServiceFileSources},Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes with a file sources instance
            </summary>
            <param name="fileSources"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizedTextService.#ctor(System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.Lazy{System.Xml.Linq.XDocument}},Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes with an XML source
            </summary>
            <param name="source"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizedTextService.#ctor(System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}}},Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes with a source of a dictionary of culture -> areas -> sub dictionary of keys/values
            </summary>
            <param name="source"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizedTextService.GetAllStoredValues(System.Globalization.CultureInfo)">
            <summary>
            Returns all key/values in storage for the given culture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizedTextService.GetSupportedCultures">
            <summary>
            Returns a list of all currently supported cultures
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizedTextService.ConvertToSupportedCultureWithRegionCode(System.Globalization.CultureInfo)">
             <summary>
             Tries to resolve a full 4 letter culture from a 2 letter culture name
             </summary>
             <param name="currentCulture">
             The culture to determine if it is only a 2 letter culture, if so we'll try to convert it, otherwise it will just be returned
             </param>
             <returns></returns>
             <remarks>
             TODO: This is just a hack due to the way we store the language files, they should be stored with 4 letters since that
             is what they reference but they are stored with 2, further more our user's languages are stored with 2. So this attempts
             to resolve the full culture if possible.
            
             This only works when this service is constructed with the LocalizedTextServiceFileSources
             </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizedTextService.ParseTokens(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
             <summary>
             Parses the tokens in the value
             </summary>
             <param name="value"></param>
             <param name="tokens"></param>
             <returns></returns>
             <remarks>
             This is based on how the legacy ui localized text worked, each token was just a sequential value delimited with a % symbol.
             For example: hello %0%, you are %1% !
            
             Since we're going to continue using the same language files for now, the token system needs to remain the same. With our new service
             we support a dictionary which means in the future we can really have any sort of token system.
             Currently though, the token key's will need to be an integer and sequential - though we aren't going to throw exceptions if that is not the case.
             </remarks>
        </member>
        <member name="T:Umbraco.Core.Services.Implement.LocalizedTextServiceFileSources">
            <summary>
            Exposes the XDocument sources from files for the default localization text service and ensure caching is taken care of
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizedTextServiceFileSources.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Cache.AppCaches,System.IO.DirectoryInfo,System.Collections.Generic.IEnumerable{Umbraco.Core.Services.Implement.LocalizedTextServiceSupplementaryFileSource})">
            <summary>
            This is used to configure the file sources with the main file sources shipped with Umbraco and also including supplemental/plugin based
            localization files. The supplemental files will be loaded in and merged in after the primary files.
            The supplemental files must be named with the 4 letter culture name with a hyphen such as : en-AU.xml
            </summary>
            <param name="logger"></param>
            <param name="cache"></param>
            <param name="fileSourceFolder"></param>
            <param name="supplementFileSources"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizedTextServiceFileSources.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Cache.AppCaches,System.IO.DirectoryInfo)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.LocalizedTextServiceFileSources.GetXmlSources">
            <summary>
            returns all xml sources for all culture files found in the folder
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Services.Implement.MacroService">
            <summary>
            Represents the Macro Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MacroService.GetByAlias(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMacro"/> object by its alias
            </summary>
            <param name="alias">Alias to retrieve an <see cref="T:Umbraco.Core.Models.IMacro"/> for</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMacro"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MacroService.Delete(Umbraco.Core.Models.IMacro,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macro"><see cref="T:Umbraco.Core.Models.IMacro"/> to delete</param>
            <param name="userId">Optional id of the user deleting the macro</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MacroService.Save(Umbraco.Core.Models.IMacro,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macro"><see cref="T:Umbraco.Core.Models.IMacro"/> to save</param>
            <param name="userId">Optional Id of the user deleting the macro</param>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MacroService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MacroService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MacroService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MacroService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.Implement.MediaService">
            <summary>
            Represents the Media Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IMedia"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.CreateMedia(System.String,System.Guid,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IMedia without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new media objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.CreateMedia(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object of a specified media type.
            </summary>
            <remarks>This method simply returns a new, non-persisted, IMedia without any identity. It
            is intended as a shortcut to creating new media objects that does not invoke a save
            operation against the database.
            </remarks>
            <param name="name">The name of the media object.</param>
            <param name="parentId">The identifier of the parent, or -1.</param>
            <param name="mediaTypeAlias">The alias of the media type.</param>
            <param name="userId">The optional id of the user creating the media.</param>
            <returns>The media object.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.CreateMedia(System.String,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object of a specified media type, at root.
            </summary>
            <remarks>This method simply returns a new, non-persisted, IMedia without any identity. It
            is intended as a shortcut to creating new media objects that does not invoke a save
            operation against the database.
            </remarks>
            <param name="name">The name of the media object.</param>
            <param name="mediaTypeAlias">The alias of the media type.</param>
            <param name="userId">The optional id of the user creating the media.</param>
            <returns>The media object.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.CreateMedia(System.String,Umbraco.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object of a specified media type, under a parent.
            </summary>
            <remarks>This method simply returns a new, non-persisted, IMedia without any identity. It
            is intended as a shortcut to creating new media objects that does not invoke a save
            operation against the database.
            </remarks>
            <param name="name">The name of the media object.</param>
            <param name="parent">The parent media object.</param>
            <param name="mediaTypeAlias">The alias of the media type.</param>
            <param name="userId">The optional id of the user creating the media.</param>
            <returns>The media object.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.CreateMediaWithIdentity(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object of a specified media type.
            </summary>
            <remarks>This method returns a new, persisted, IMedia with an identity.</remarks>
            <param name="name">The name of the media object.</param>
            <param name="parentId">The identifier of the parent, or -1.</param>
            <param name="mediaTypeAlias">The alias of the media type.</param>
            <param name="userId">The optional id of the user creating the media.</param>
            <returns>The media object.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.CreateMediaWithIdentity(System.String,Umbraco.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object of a specified media type, under a parent.
            </summary>
            <remarks>This method returns a new, persisted, IMedia with an identity.</remarks>
            <param name="name">The name of the media object.</param>
            <param name="parent">The parent media object.</param>
            <param name="mediaTypeAlias">The alias of the media type.</param>
            <param name="userId">The optional id of the user creating the media.</param>
            <returns>The media object.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetById(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by Id
            </summary>
            <param name="id">Id of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by Id
            </summary>
            <param name="ids">Ids of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetById(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetByIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by Id
            </summary>
            <param name="ids">Ids of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetPagedOfType(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetPagedOfTypes(System.Int32[],System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetByLevel(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Level
            </summary>
            <param name="level">The level to retrieve Media from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
            <remarks>Contrary to most methods, this method filters out trashed media items.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetVersion(System.Int32)">
            <summary>
            Gets a specific version of an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMedia"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetVersions(System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IMedia"/> objects versions by Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetAncestors(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which are ancestors of the current media.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetAncestors(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which are ancestors of the current media.
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetPagedChildren(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetPagedDescendants(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetParent(System.Int32)">
            <summary>
            Gets the parent of the current media as an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetParent(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets the parent of the current media as an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetRootMedia">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetPagedMediaInRecycleBin(System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IMedia"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/></param>
            <returns>True if the media has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.GetMediaByPath(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object from the path stored in the 'umbracoFile' property.
            </summary>
            <param name="mediaPath">Path of the media item to retrieve (for example: /media/1024/koala_403x328.jpg)</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.Save(Umbraco.Core.Models.IMedia,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects
            </summary>
            <param name="medias">Collection of <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.Delete(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Permanently deletes versions from an <see cref="T:Umbraco.Core.Models.IMedia"/> object prior to a specific date.
            This method will never delete the latest version of a media item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Media object</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.DeleteVersion(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Permanently deletes specific version(s) from an <see cref="T:Umbraco.Core.Models.IMedia"/> object.
            This method will never delete the latest version of a media item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Media object</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.MoveToRecycleBin(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object by moving it to the Recycle Bin
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.Move(Umbraco.Core.Models.IMedia,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Umbraco.Core.Models.IMedia"/> object to a new location
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to move</param>
            <param name="parentId">Id of the Media's new Parent</param>
            <param name="userId">Id of the User moving the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.EmptyRecycleBin">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IMedia"/> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.EmptyRecycleBin(System.Int32)">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IMedia"/> that resides in the bin
            </summary>
            <param name="userId">Optional Id of the User emptying the Recycle Bin</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.Sort(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Int32,System.Boolean)">
            <summary>
            Sorts a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by updating the SortOrder according
            to the ordering of items in the passed in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="items"></param>
            <param name="userId"></param>
            <param name="raiseEvents"></param>
            <returns>True if sorting succeeded, otherwise False</returns>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.DeletingVersions">
            <summary>
            Occurs before Delete Versions
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.DeletedVersions">
            <summary>
            Occurs after Delete Versions
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.Trashing">
            <summary>
            Occurs before Media is moved to Recycle Bin
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.Trashed">
            <summary>
            Occurs after Media is moved to Recycle Bin
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.Moving">
            <summary>
            Occurs before Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.Moved">
            <summary>
            Occurs after Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.EmptyingRecycleBin">
            <summary>
            Occurs before the Recycle Bin is emptied
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.EmptiedRecycleBin">
            <summary>
            Occurs after the Recycle Bin has been Emptied
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MediaService.TreeChanged">
            <summary>
            Occurs after change.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.DeleteMediaOfTypes(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Deletes all media of specified type. All children of deleted media is moved to Recycle Bin.
            </summary>
            <remarks>
            <para>This needs extra care and attention as its potentially a dangerous and extensive operation.</para>
            <para>Deletes media items of the specified type, and only that type. Does *not* handle content types
            inheritance and compositions, which need to be managed outside of this method.</para>
            </remarks>
            <param name="mediaTypeIds">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user deleting the media</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MediaService.DeleteMediaOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all media of specified type. All children of deleted media is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="mediaTypeId">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user deleting the media</param>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MemberGroupService.Deleting">
            <summary>
            Occurs before Delete of a member group
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MemberGroupService.Deleted">
            <summary>
            Occurs after Delete of a member group
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MemberGroupService.Saving">
            <summary>
            Occurs before Save of a member group
            </summary>
            <remarks>
            We need to proxy these events because the events need to take place at the repo level
            </remarks>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MemberGroupService.Saved">
            <summary>
            Occurs after Save of a member group
            </summary>
            <remarks>
            We need to proxy these events because the events need to take place at the repo level
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Services.Implement.MemberService">
            <summary>
            Represents the MemberService.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetCount(Umbraco.Core.Models.Membership.MemberCountType)">
            <summary>
            Gets the total number of Members based on the count type
            </summary>
            <remarks>
            The way the Online count is done is the same way that it is done in the MS SqlMembershipProvider - We query for any members
            that have their last active date within the Membership.UserIsOnlineTimeWindow (which is in minutes). It isn't exact science
            but that is how MS have made theirs so we'll follow that principal.
            </remarks>
            <param name="countType"><see cref="T:Umbraco.Core.Models.Membership.MemberCountType"/> to count by</param>
            <returns><see cref="!:System.int"/> with number of Members for passed in type</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.Count(System.String)">
            <summary>
            Gets the count of Members by an optional MemberType alias
            </summary>
            <remarks>If no alias is supplied then the count for all Member will be returned</remarks>
            <param name="memberTypeAlias">Optional alias for the MemberType when counting number of Members</param>
            <returns><see cref="!:System.int"/> with number of Members</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.CreateMember(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMember"/> object without persisting it
            </summary>
            <remarks>This method is convenient for when you need to add properties to a new Member
            before persisting it in order to limit the amount of times its saved.
            Also note that the returned <see cref="T:Umbraco.Core.Models.IMember"/> will not have an Id until its saved.</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.CreateMember(System.String,System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMember"/> object without persisting it
            </summary>
            <remarks>This method is convenient for when you need to add properties to a new Member
            before persisting it in order to limit the amount of times its saved.
            Also note that the returned <see cref="T:Umbraco.Core.Models.IMember"/> will not have an Id until its saved.</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.Umbraco#Core#Services#IMembershipMemberService{Umbraco#Core#Models#IMember}#CreateWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
            Creates and persists a new <see cref="T:Umbraco.Core.Models.IMember"/>
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="username">Username of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <param name="isApproved">Is the member approved</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.Umbraco#Core#Services#IMembershipMemberService{Umbraco#Core#Models#IMember}#CreateWithIdentity(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates and persists a new <see cref="T:Umbraco.Core.Models.IMember"/>
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="username">Username of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <param name="isApproved"></param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.CreateMemberWithIdentity(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <param name="isApproved">Optional IsApproved of the Member to create</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.CreateMemberWithIdentity(System.String,System.String,Umbraco.Core.Models.IMemberType,System.Boolean)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.CreateMemberWithIdentity(System.String,System.String,System.String,Umbraco.Core.Models.IMemberType,System.Boolean)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.CreateMemberWithIdentity(System.String,System.String,System.String,System.String,Umbraco.Core.Models.IMemberType,System.Boolean)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetById(System.Int32)">
            <summary>
            Gets a Member by its integer id
            </summary>
            <param name="id"><see cref="!:System.int"/> Id</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetByKey(System.Guid)">
            <summary>
            Gets a Member by the unique key
            </summary>
            <remarks>The guid key corresponds to the unique id in the database
            and the user id in the membership provider.</remarks>
            <param name="id"><see cref="T:System.Guid"/> Id</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetAll(System.Int64,System.Int32,System.Int64@)">
            <summary>
            Gets a list of paged <see cref="T:Umbraco.Core.Models.IMember"/> objects
            </summary>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetByProviderKey(System.Object)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMember"/> by its provider key
            </summary>
            <param name="id">Id to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetByEmail(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Core.Models.IMember"/> by email
            </summary>
            <param name="email">Email to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetByUsername(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Core.Models.IMember"/> by username
            </summary>
            <param name="username">Username to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetMembersByMemberType(System.String)">
            <summary>
            Gets all Members for the specified MemberType alias
            </summary>
            <param name="memberTypeAlias">Alias of the MemberType</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetMembersByMemberType(System.Int32)">
            <summary>
            Gets all Members for the MemberType id
            </summary>
            <param name="memberTypeId">Id of the MemberType</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetMembersByGroup(System.String)">
            <summary>
            Gets all Members within the specified MemberGroup name
            </summary>
            <param name="memberGroupName">Name of the MemberGroup</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetAllMembers(System.Int32[])">
            <summary>
            Gets all Members with the ids specified
            </summary>
            <remarks>If no Ids are specified all Members will be retrieved</remarks>
            <param name="ids">Optional list of Member Ids</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.FindMembersByDisplayName(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds Members based on their display name
            </summary>
            <param name="displayNameToMatch">Display name to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.FindByEmail(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Core.Models.IMember"/> objects by a partial email string
            </summary>
            <param name="emailStringToMatch">Partial email string to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.FindByUsername(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Core.Models.IMember"/> objects by a partial username
            </summary>
            <param name="login">Partial username to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetMembersByPropertyValue(System.String,System.String,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="!:System.string"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetMembersByPropertyValue(System.String,System.Int32,Umbraco.Core.Persistence.Querying.ValuePropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="!:System.int"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetMembersByPropertyValue(System.String,System.Boolean)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="!:System.bool"/> Value to match</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.GetMembersByPropertyValue(System.String,System.DateTime,Umbraco.Core.Persistence.Querying.ValuePropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="T:System.DateTime"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.Exists(System.Int32)">
            <summary>
            Checks if a Member with the id exists
            </summary>
            <param name="id">Id of the Member</param>
            <returns><c>True</c> if the Member exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.Exists(System.String)">
            <summary>
            Checks if a Member with the username exists
            </summary>
            <param name="username">Username to check</param>
            <returns><c>True</c> if the Member exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.SetLastLogin(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.Save(Umbraco.Core.Models.IMember,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMember},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.Delete(Umbraco.Core.Models.IMember)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMember"/>
            </summary>
            <param name="member"><see cref="T:Umbraco.Core.Models.IMember"/> to Delete</param>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MemberService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MemberService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MemberService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MemberService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MemberService.AssignedRoles">
            <summary>
            Occurs after roles have been assigned.
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MemberService.RemovedRoles">
            <summary>
            Occurs after roles have been removed.
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.MemberService.Exported">
            <summary>
            Occurs after members have been exported.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.SavePassword(Umbraco.Core.Models.IMember,System.String)">
            <summary>
            This is simply a helper method which essentially just wraps the MembershipProvider's ChangePassword method
            </summary>
            <remarks>This method exists so that Umbraco developers can use one entry point to create/update
            Members if they choose to. </remarks>
            <param name="member">The Member to save the password for</param>
            <param name="password">The password to encrypt and save</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.CreateGenericMembershipProviderMember(System.String,System.String,System.String,System.String)">
            <summary>
            A helper method that will create a basic/generic member for use with a generic membership provider
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.ExportMember(System.Guid)">
            <summary>
            Exports a member.
            </summary>
            <remarks>
            This is internal for now and is used to export a member in the member editor,
            it will raise an event so that auditing logs can be created.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.MemberService.DeleteMembersOfType(System.Int32)">
            <summary>
            Delete Members of the specified MemberType id
            </summary>
            <param name="memberTypeId">Id of the MemberType</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.GetPreviousVersion(System.Int32)">
            <summary>
            Gets the previous version to the latest version of the content item if there is one
            </summary>
            <param name="contentId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.SendNotifications(Umbraco.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.String,System.String,System.Uri,System.Func{System.ValueTuple{Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.NotificationEmailSubjectParams},System.String},System.Func{System.ValueTuple{Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.NotificationEmailBodyParams,System.Boolean},System.String})">
            <summary>
            Sends the notifications for the specified user regarding the specified node and action.
            </summary>
            <param name="entities"></param>
            <param name="operatingUser"></param>
            <param name="action"></param>
            <param name="actionName"></param>
            <param name="siteUri"></param>
            <param name="createSubject"></param>
            <param name="createBody"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.GetUserNotifications(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Gets the notifications for the user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.GetUserNotifications(Umbraco.Core.Models.Membership.IUser,System.String)">
            <summary>
            Gets the notifications for the user based on the specified node path
            </summary>
            <param name="user"></param>
            <param name="path"></param>
            <returns></returns>
            <remarks>
            Notifications are inherited from the parent so any child node will also have notifications assigned based on it's parent (ancestors)
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.FilterUserNotificationsByPath(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Notification},System.String)">
            <summary>
            Filters a userNotifications collection by a path
            </summary>
            <param name="userNotifications"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.GetEntityNotifications(Umbraco.Core.Models.Entities.IEntity)">
            <summary>
            Deletes notifications by entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.DeleteNotifications(Umbraco.Core.Models.Entities.IEntity)">
            <summary>
            Deletes notifications by entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.DeleteNotifications(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Deletes notifications by user
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.DeleteNotifications(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.Entities.IEntity)">
            <summary>
            Delete notifications by user and entity
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.SetNotifications(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.Entities.IEntity,System.String[])">
            <summary>
            Sets the specific notifications for the user and entity
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
            <param name="actions"></param>
            <remarks>
            This performs a full replace
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.CreateNotification(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.Entities.IEntity,System.String)">
            <summary>
            Creates a new notification
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
            <param name="action">The action letter - note: this is a string for future compatibility</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.CreateNotificationRequest(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.IContent,Umbraco.Core.Models.IContentBase,System.String,System.Uri,System.Func{System.ValueTuple{Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.NotificationEmailSubjectParams},System.String},System.Func{System.ValueTuple{Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.NotificationEmailBodyParams,System.Boolean},System.String})">
            <summary>
            Sends the notification
            </summary>
            <param name="performingUser"></param>
            <param name="mailingUser"></param>
            <param name="content"></param>
            <param name="oldDoc"></param>
            <param name="actionName">The action readable name - currently an action is just a single letter, this is the name associated with the letter </param>
            <param name="siteUri"></param>
            <param name="createSubject">Callback to create the mail subject</param>
            <param name="createBody">Callback to create the mail body</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.NotificationService.ReplaceHtmlSymbols(System.String@)">
            <summary>
            Replaces the HTML symbols with the character equivalent.
            </summary>
            <param name="oldString">The old string.</param>
        </member>
        <member name="T:Umbraco.Core.Services.Implement.PackagingService">
            <summary>
            Represents the Packaging Service, which provides import/export functionality for the Core models of the API
            using xml representation. This is primarily used by the Package functionality.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.PackagingService.FetchPackageFileAsync(System.Guid,System.Version,System.Int32)">
            <inheritdoc />
        </member>
        <member name="E:Umbraco.Core.Services.Implement.PackagingService.ImportingPackage">
            <summary>
            Occurs before Importing umbraco package
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.PackagingService.ImportedPackage">
            <summary>
            Occurs after a package is imported
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.PackagingService.UninstalledPackage">
            <summary>
            Occurs after a package is uninstalled
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.PublicAccessService.GetAll">
            <summary>
            Gets all defined entries and associated rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.PublicAccessService.GetEntryForContent(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the entry defined for the content item's path
            </summary>
            <param name="content"></param>
            <returns>Returns null if no entry is found</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.PublicAccessService.GetEntryForContent(System.String)">
            <summary>
            Gets the entry defined for the content item based on a content path
            </summary>
            <param name="contentPath"></param>
            <returns>Returns null if no entry is found</returns>
            <remarks>
            NOTE: This method get's called *very* often! This will return the results from cache
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.PublicAccessService.IsProtected(Umbraco.Core.Models.IContent)">
            <summary>
            Returns true if the content has an entry for it's path
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.PublicAccessService.IsProtected(System.String)">
            <summary>
            Returns true if the content has an entry based on a content path
            </summary>
            <param name="contentPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.PublicAccessService.AddRule(Umbraco.Core.Models.IContent,System.String,System.String)">
            <summary>
            Adds a rule
            </summary>
            <param name="content"></param>
            <param name="ruleType"></param>
            <param name="ruleValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.PublicAccessService.RemoveRule(Umbraco.Core.Models.IContent,System.String,System.String)">
            <summary>
            Removes a rule
            </summary>
            <param name="content"></param>
            <param name="ruleType"></param>
            <param name="ruleValue"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.PublicAccessService.Save(Umbraco.Core.Models.PublicAccessEntry)">
            <summary>
            Saves the entry
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.PublicAccessService.Delete(Umbraco.Core.Models.PublicAccessEntry)">
            <summary>
            Deletes the entry and all associated rules
            </summary>
            <param name="entry"></param>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.PublicAccessService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.PublicAccessService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.PublicAccessService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.PublicAccessService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetRelationTypeById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetRelationTypeById(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetRelationTypeByAlias(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetAllRelations(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetAllRelationsByRelationType(Umbraco.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetAllRelationsByRelationType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetAllRelationTypes(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetByParentId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetByParentId(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetByParent(Umbraco.Core.Models.Entities.IUmbracoEntity)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetByParent(Umbraco.Core.Models.Entities.IUmbracoEntity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetByChildId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetByChildId(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetByChild(Umbraco.Core.Models.Entities.IUmbracoEntity)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetByChild(Umbraco.Core.Models.Entities.IUmbracoEntity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetByParentOrChildId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetByRelationTypeName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetByRelationTypeAlias(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetByRelationTypeId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetPagedByRelationTypeId(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetChildEntityFromRelation(Umbraco.Core.Models.IRelation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetParentEntityFromRelation(Umbraco.Core.Models.IRelation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetEntitiesFromRelation(Umbraco.Core.Models.IRelation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetChildEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetParentEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetPagedParentEntitiesByChildId(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Models.UmbracoObjectTypes[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetPagedChildEntitiesByParentId(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Models.UmbracoObjectTypes[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.GetEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.Relate(System.Int32,System.Int32,Umbraco.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.Relate(Umbraco.Core.Models.Entities.IUmbracoEntity,Umbraco.Core.Models.Entities.IUmbracoEntity,Umbraco.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.Relate(System.Int32,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.Relate(Umbraco.Core.Models.Entities.IUmbracoEntity,Umbraco.Core.Models.Entities.IUmbracoEntity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.HasRelations(Umbraco.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.IsRelated(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.AreRelated(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.AreRelated(System.Int32,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.AreRelated(System.Int32,System.Int32,Umbraco.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.AreRelated(Umbraco.Core.Models.Entities.IUmbracoEntity,Umbraco.Core.Models.Entities.IUmbracoEntity)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.AreRelated(Umbraco.Core.Models.Entities.IUmbracoEntity,Umbraco.Core.Models.Entities.IUmbracoEntity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.Save(Umbraco.Core.Models.IRelation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.Save(Umbraco.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.Delete(Umbraco.Core.Models.IRelation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.Delete(Umbraco.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.RelationService.DeleteRelationsOfType(Umbraco.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="E:Umbraco.Core.Services.Implement.RelationService.DeletingRelation">
            <summary>
            Occurs before Deleting a Relation
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.RelationService.DeletedRelation">
            <summary>
            Occurs after a Relation is Deleted
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.RelationService.SavingRelation">
            <summary>
            Occurs before Saving a Relation
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.RelationService.SavedRelation">
            <summary>
            Occurs after a Relation is Saved
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.RelationService.DeletingRelationType">
            <summary>
            Occurs before Deleting a RelationType
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.RelationService.DeletedRelationType">
            <summary>
            Occurs after a RelationType is Deleted
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.RelationService.SavingRelationType">
            <summary>
            Occurs before Saving a RelationType
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.RelationService.SavedRelationType">
            <summary>
            Occurs after a RelationType is Saved
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.Implement.RepositoryService">
            <summary>
            Represents a service that works on top of repositories.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.Implement.ServerRegistrationService">
            <summary>
            Manages server registrations in the database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ServerRegistrationService.#ctor(Umbraco.Core.Scoping.IScopeProvider,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory,Umbraco.Core.Persistence.Repositories.IServerRegistrationRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Services.Implement.ServerRegistrationService"/> class.
            </summary>
            <param name="scopeProvider">A UnitOfWork provider.</param>
            <param name="logger">A logger.</param>
            <param name="eventMessagesFactory"></param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ServerRegistrationService.TouchServer(System.String,System.String,System.TimeSpan)">
            <summary>
            Touches a server to mark it as active; deactivate stale servers.
            </summary>
            <param name="serverAddress">The server URL.</param>
            <param name="serverIdentity">The server unique identity.</param>
            <param name="staleTimeout">The time after which a server is considered stale.</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ServerRegistrationService.DeactiveServer(System.String)">
            <summary>
            Deactivates a server.
            </summary>
            <param name="serverIdentity">The server unique identity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ServerRegistrationService.DeactiveStaleServers(System.TimeSpan)">
            <summary>
            Deactivates stale servers.
            </summary>
            <param name="staleTimeout">The time after which a server is considered stale.</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ServerRegistrationService.GetActiveServers(System.Boolean)">
            <summary>
            Return all active servers.
            </summary>
            <param name="refresh">A value indicating whether to force-refresh the cache.</param>
            <returns>All active servers.</returns>
            <remarks>By default this method will rely on the repository's cache, which is updated each
            time the current server is touched, and the period depends on the configuration. Use the
            <paramref name="refresh"/> parameter to force a cache refresh and reload active servers
            from the database.</remarks>
        </member>
        <member name="P:Umbraco.Core.Services.Implement.ServerRegistrationService.CurrentServerIdentity">
            <summary>
            Gets the local server identity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.ServerRegistrationService.GetCurrentServerRole">
            <summary>
            Gets the role of the current server.
            </summary>
            <returns>The role of the current server.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.Services.Implement.TagService" -->
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetTaggedEntityById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetTaggedEntityByKey(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetTaggedContentByTagGroup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetTaggedContentByTag(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetTaggedMediaByTagGroup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetTaggedMediaByTag(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetTaggedMembersByTagGroup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetTaggedMembersByTag(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetAllTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetAllContentTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetAllMediaTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetAllMemberTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetTagsForProperty(System.Int32,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetTagsForEntity(System.Int32,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetTagsForProperty(System.Guid,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Services.Implement.TagService.GetTagsForEntity(System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Services.Implement.UserService">
            <summary>
            Represents the UserService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.Membership.IProfile"/>, <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> and eventually Backoffice Users.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.Exists(System.String)">
            <summary>
            Checks if a User with the username exists
            </summary>
            <param name="username">Username to check</param>
            <returns><c>True</c> if the User exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.CreateUserWithIdentity(System.String,System.String)">
            <summary>
            Creates a new User
            </summary>
            <remarks>The user will be saved in the database and returned with an Id</remarks>
            <param name="username">Username of the user to create</param>
            <param name="email">Email of the user to create</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.Umbraco#Core#Services#IMembershipMemberService{Umbraco#Core#Models#Membership#IUser}#CreateWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
            Creates and persists a new <see cref="T:Umbraco.Core.Models.Membership.IUser"/>
            </summary>
            <param name="username">Username of the <see cref="T:Umbraco.Core.Models.Membership.IUser"/> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Core.Models.Membership.IUser"/> to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberTypeAlias">Not used for users</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.Umbraco#Core#Services#IMembershipMemberService{Umbraco#Core#Models#Membership#IUser}#CreateWithIdentity(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates and persists a new <see cref="T:Umbraco.Core.Models.Membership.IUser"/>
            </summary>
            <param name="username">Username of the <see cref="T:Umbraco.Core.Models.Membership.IUser"/> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Core.Models.Membership.IUser"/> to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <param name="isApproved">Is the member approved</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.CreateUserWithIdentity(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="isApproved">Is the user approved</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetById(System.Int32)">
            <summary>
            Gets a User by its integer id
            </summary>
            <param name="id"><see cref="!:System.int"/> Id</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetByProviderKey(System.Object)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.Membership.IUser"/> by its provider key
            </summary>
            <param name="id">Id to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetByEmail(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Core.Models.Membership.IUser"/> by email
            </summary>
            <param name="email">Email to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetByUsername(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Core.Models.Membership.IUser"/> by username
            </summary>
            <param name="username">Username to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.Delete(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Disables an <see cref="T:Umbraco.Core.Models.Membership.IUser"/>
            </summary>
            <param name="membershipUser"><see cref="T:Umbraco.Core.Models.Membership.IUser"/> to disable</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.Delete(Umbraco.Core.Models.Membership.IUser,System.Boolean)">
            <summary>
            Deletes or disables a User
            </summary>
            <param name="user"><see cref="T:Umbraco.Core.Models.Membership.IUser"/> to delete</param>
            <param name="deletePermanently"><c>True</c> to permanently delete the user, <c>False</c> to disable the user</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.Save(Umbraco.Core.Models.Membership.IUser,System.Boolean)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.Membership.IUser"/>
            </summary>
            <param name="entity"><see cref="T:Umbraco.Core.Models.Membership.IUser"/> to Save</param>
            <param name="raiseEvents">Optional parameter to raise events.
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Membership.IUser},System.Boolean)">
            <summary>
            Saves a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects
            </summary>
            <param name="entities"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to save</param>
            <param name="raiseEvents">Optional parameter to raise events.
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetDefaultMemberType">
            <summary>
            This is just the default user group that the membership provider will use
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.FindByEmail(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects by a partial email string
            </summary>
            <param name="emailStringToMatch">Partial email string to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.FindByUsername(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects by a partial username
            </summary>
            <param name="login">Partial username to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetCount(Umbraco.Core.Models.Membership.MemberCountType)">
            <summary>
            Gets the total number of Users based on the count type
            </summary>
            <remarks>
            The way the Online count is done is the same way that it is done in the MS SqlMembershipProvider - We query for any members
            that have their last active date within the Membership.UserIsOnlineTimeWindow (which is in minutes). It isn't exact science
            but that is how MS have made theirs so we'll follow that principal.
            </remarks>
            <param name="countType"><see cref="T:Umbraco.Core.Models.Membership.MemberCountType"/> to count by</param>
            <returns><see cref="!:System.int"/> with number of Users for passed in type</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetAll(System.Int64,System.Int32,System.Int64@)">
            <summary>
            Gets a list of paged <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects
            </summary>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetAllInGroup(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetAllNotInGroup(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects not associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetProfileById(System.Int32)">
            <summary>
            Gets an IProfile by User Id.
            </summary>
            <param name="id">Id of the User to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetProfileByUserName(System.String)">
            <summary>
            Gets a profile by username
            </summary>
            <param name="username">Username</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetUserById(System.Int32)">
            <summary>
            Gets a user by Id
            </summary>
            <param name="id">Id of the user to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.ReplaceUserGroupPermissions(System.Int32,System.Collections.Generic.IEnumerable{System.Char},System.Int32[])">
            <summary>
            Replaces the same permission set for a single group to any number of entities
            </summary>
            <remarks>If no 'entityIds' are specified all permissions will be removed for the specified group.</remarks>
            <param name="groupId">Id of the group</param>
            <param name="permissions">Permissions as enumerable list of <see cref="T:System.Char"/> If nothing is specified all permissions are removed.</param>
            <param name="entityIds">Specify the nodes to replace permissions for. </param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.AssignUserGroupPermission(System.Int32,System.Char,System.Int32[])">
            <summary>
            Assigns the same permission set for a single user group to any number of entities
            </summary>
            <param name="groupId">Id of the user group</param>
            <param name="permission"></param>
            <param name="entityIds">Specify the nodes to replace permissions for</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetAllUserGroups(System.Int32[])">
            <summary>
            Gets all UserGroups or those specified as parameters
            </summary>
            <param name="ids">Optional Ids of UserGroups to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Membership.IUserGroup"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetUserGroupByAlias(System.String)">
            <summary>
            Gets a UserGroup by its Alias
            </summary>
            <param name="alias">Alias of the UserGroup to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUserGroup"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetUserGroupById(System.Int32)">
            <summary>
            Gets a UserGroup by its Id
            </summary>
            <param name="id">Id of the UserGroup to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUserGroup"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.Save(Umbraco.Core.Models.Membership.IUserGroup,System.Int32[],System.Boolean)">
            <summary>
            Saves a UserGroup
            </summary>
            <param name="userGroup">UserGroup to save</param>
            <param name="userIds">
            If null than no changes are made to the users who are assigned to this group, however if a value is passed in
            than all users will be removed from this group and only these users will be added
            </param>
            <param name="raiseEvents">Optional parameter to raise events.
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.DeleteUserGroup(Umbraco.Core.Models.Membership.IUserGroup)">
            <summary>
            Deletes a UserGroup
            </summary>
            <param name="userGroup">UserGroup to delete</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.DeleteSectionFromAllUserGroups(System.String)">
            <summary>
            Removes a specific section from all users
            </summary>
            <remarks>This is useful when an entire section is removed from config</remarks>
            <param name="sectionAlias">Alias of the section to remove</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetPermissions(Umbraco.Core.Models.Membership.IUser,System.Int32[])">
            <summary>
            Get explicitly assigned permissions for a user and optional node ids
            </summary>
            <param name="user">User to retrieve permissions for</param>
            <param name="nodeIds">Specifying nothing will return all permissions for all nodes</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Membership.EntityPermission"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetPermissions(Umbraco.Core.Models.Membership.IReadOnlyUserGroup[],System.Boolean,System.Int32[])">
            <summary>
            Get explicitly assigned permissions for a group and optional node Ids
            </summary>
            <param name="groups">Groups to retrieve permissions for</param>
            <param name="fallbackToDefaultPermissions">
            Flag indicating if we want to include the default group permissions for each result if there are not explicit permissions set
            </param>
            <param name="nodeIds">Specifying nothing will return all permissions for all nodes</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Membership.EntityPermission"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetPermissions(Umbraco.Core.Models.Membership.IUserGroup[],System.Boolean,System.Int32[])">
            <summary>
            Get explicitly assigned permissions for a group and optional node Ids
            </summary>
            <param name="groups"></param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit permissions set
            </param>
            <param name="nodeIds">Specifying nothing will return all permissions for all nodes</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Membership.EntityPermission"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetPermissionsForPath(Umbraco.Core.Models.Membership.IUser,System.String)">
            <summary>
            Gets the implicit/inherited permissions for the user for the given path
            </summary>
            <param name="user">User to check permissions for</param>
            <param name="path">Path to check permissions for</param>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetPermissionsForPath(Umbraco.Core.Models.Membership.IUserGroup[],System.String,System.Boolean)">
            <summary>
            Gets the permissions for the provided group and path
            </summary>
            <param name="groups"></param>
            <param name="path">Path to check permissions for</param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit permissions set
            </param>
            <returns>String indicating permissions for provided user and path</returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.CalculatePermissionsForPathForUser(Umbraco.Core.Models.Membership.EntityPermission[],System.Int32[])">
            <summary>
            This performs the calculations for inherited nodes based on this http://issues.umbraco.org/issue/U4-10075#comment=67-40085
            </summary>
            <param name="groupPermissions"></param>
            <param name="pathIds"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.GetPermissionsForPathForGroup(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Membership.EntityPermission},System.Int32[],System.Boolean)">
            <summary>
            Returns the resulting permission set for a group for the path based on all permissions provided for the branch
            </summary>
            <param name="pathPermissions">
            The collective set of permissions provided to calculate the resulting permissions set for the path
            based on a single group
            </param>
            <param name="pathIds">Must be ordered deepest to shallowest (right to left)</param>
            <param name="fallbackToDefaultPermissions">
            Flag indicating if we want to include the default group permissions for each result if there are not explicit permissions set
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.Implement.UserService.TryGetAssignedPermissionsForNode(System.Collections.Generic.IList{Umbraco.Core.Models.Membership.EntityPermission},System.Int32,System.String@)">
            <summary>
            Checks in a set of permissions associated with a user for those related to a given nodeId
            </summary>
            <param name="permissions">The set of permissions</param>
            <param name="nodeId">The node Id</param>
            <param name="assignedPermissions">The permissions to return</param>
            <returns>True if permissions for the given path are found</returns>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.UserService.SavingUser">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.UserService.SavedUser">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.UserService.DeletingUser">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.UserService.DeletedUser">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.UserService.SavingUserGroup">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.UserService.SavedUserGroup">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.UserService.DeletingUserGroup">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.Implement.UserService.DeletedUserGroup">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.PropertyValidationService.IsPropertyDataValid(Umbraco.Core.Models.IContent,Umbraco.Core.Models.Property[]@,Umbraco.Core.Models.CultureImpact)">
            <summary>
            Validates the content item's properties pass validation rules
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.PropertyValidationService.IsPropertyValid(Umbraco.Core.Models.Property,System.String,System.String)">
            <summary>
            Gets a value indicating whether the property has valid values.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.PropertyValidationService.IsValidPropertyValue(Umbraco.Core.Models.Property,System.Object)">
            <summary>
            Boolean indicating whether the passed in value is valid
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns>True is property value is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PropertyValidationService.IsPropertyValueValid(Umbraco.Core.Models.PropertyType,System.Object)">
            <summary>
            Determines whether a value is valid for this property type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IConsentService">
            <summary>
            A service for handling lawful data processing requirements
            </summary>
            <remarks>
            <para>Consent can be given or revoked or changed via the <see cref="M:Umbraco.Core.Services.IConsentService.RegisterConsent(System.String,System.String,System.String,Umbraco.Core.Models.ConsentState,System.String)"/> method, which
            creates a new <see cref="T:Umbraco.Core.Models.IConsent"/> entity to track the consent. Revoking a consent is performed by
            registering a revoked consent.</para>
            <para>A consent can be revoked, by registering a revoked consent, but cannot be deleted.</para>
            <para>Getter methods return the current state of a consent, i.e. the latest <see cref="T:Umbraco.Core.Models.IConsent"/>
            entity that was created.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IConsentService.RegisterConsent(System.String,System.String,System.String,Umbraco.Core.Models.ConsentState,System.String)">
            <summary>
            Registers consent.
            </summary>
            <param name="source">The source, i.e. whoever is consenting.</param>
            <param name="context"></param>
            <param name="action"></param>
            <param name="state">The state of the consent.</param>
            <param name="comment">Additional free text.</param>
            <returns>The corresponding consent entity.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IConsentService.LookupConsent(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieves consents.
            </summary>
            <param name="source">The optional source.</param>
            <param name="context">The optional context.</param>
            <param name="action">The optional action.</param>
            <param name="sourceStartsWith">Determines whether <paramref name="source"/> is a start pattern.</param>
            <param name="contextStartsWith">Determines whether <paramref name="context"/> is a start pattern.</param>
            <param name="actionStartsWith">Determines whether <paramref name="action"/> is a start pattern.</param>
            <param name="includeHistory">Determines whether to include the history of consents.</param>
            <returns>Consents matching the parameters.</returns>
        </member>
        <member name="T:Umbraco.Core.Services.IContentTypeBaseServiceProvider">
            <summary>
            Provides the <see cref="T:Umbraco.Core.Services.IContentTypeBaseService"/> corresponding to an <see cref="T:Umbraco.Core.Models.IContentBase"/> object.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeBaseServiceProvider.For(Umbraco.Core.Models.IContentBase)">
            <summary>
            Gets the content type service base managing types for the specified content base.
            </summary>
            <remarks>
            <para>If <paramref name="contentBase"/> is an <see cref="T:Umbraco.Core.Models.IContent"/>, this returns the
            <see cref="T:Umbraco.Core.Services.IContentTypeService"/>, and if it's an <see cref="T:Umbraco.Core.Models.IMedia"/>, this returns
            the <see cref="T:Umbraco.Core.Services.IMediaTypeService"/>, etc.</para>
            <para>Services are returned as <see cref="T:Umbraco.Core.Services.IContentTypeBaseService"/> and can be used
            to retrieve the content / media / whatever type as <see cref="T:Umbraco.Core.Models.IContentTypeComposition"/>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeBaseServiceProvider.GetContentTypeOf(Umbraco.Core.Models.IContentBase)">
            <summary>
            Gets the content type of an <see cref="T:Umbraco.Core.Models.IContentBase"/> object.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IEntityXmlSerializer">
            <summary>
            Serializes entities to XML
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityXmlSerializer.Serialize(Umbraco.Core.Models.IContent,System.Boolean,System.Boolean)">
            <summary>
            Exports an IContent item as an XElement.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityXmlSerializer.Serialize(Umbraco.Core.Models.IMedia,System.Boolean)">
            <summary>
            Exports an IMedia item as an XElement.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityXmlSerializer.Serialize(Umbraco.Core.Models.IMember)">
            <summary>
            Exports an IMember item as an XElement.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataType})">
            <summary>
            Exports a list of Data Types
            </summary>
            <param name="dataTypeDefinitions">List of data types to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDataTypeDefinition objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDictionaryItem},System.Boolean)">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="dictionaryItem">List of dictionary items to export</param>
            <param name="includeChildren">Optional boolean indicating whether or not to include children</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDictionaryItem objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityXmlSerializer.Serialize(Umbraco.Core.Models.IDictionaryItem,System.Boolean)">
            <summary>
            Exports a single <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="dictionaryItem">Dictionary Item to export</param>
            <param name="includeChildren">Optional boolean indicating whether or not to include children</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDictionaryItem object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ILanguage})">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.ILanguage"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="languages">List of Languages to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the ILanguage objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITemplate})">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.ITemplate"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="templates"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMacro})">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.IMacro"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="macros">Macros to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IMacro objects</returns>
        </member>
        <member name="F:Umbraco.Core.Services.Changes.ContentTypeChangeTypes.Create">
            <summary>
            Item type has been created, no impact
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.Changes.ContentTypeChangeTypes.RefreshMain">
            <summary>
            Content type changes impact only the Content type being saved
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.Changes.ContentTypeChangeTypes.RefreshOther">
            <summary>
            Content type changes impacts the content type being saved and others used that are composed of it
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.Changes.ContentTypeChangeTypes.Remove">
            <summary>
            Content type was removed
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.ContentServiceExtensions">
            <summary>
            Content service extension methods
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ContentServiceExtensions.CreateContent(Umbraco.Core.Services.IContentService,System.String,Umbraco.Core.Udi,System.String,System.Int32)">
            <summary>
            Method to create an IContent object based on the Udi of a parent
            </summary>
            <param name="contentService"></param>
            <param name="name"></param>
            <param name="parentId"></param>
            <param name="contentTypeAlias"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentServiceExtensions.RemoveContentPermissions(Umbraco.Core.Services.IContentService,System.Int32)">
            <summary>
            Remove all permissions for this user for all nodes
            </summary>
            <param name="contentService"></param>
            <param name="contentId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentServiceExtensions.RecycleBinSmells(Umbraco.Core.Services.IContentService)">
            <summary>
            Returns true if there is any content in the recycle bin
            </summary>
            <param name="contentService"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentServiceExtensions.RecycleBinSmells(Umbraco.Core.Services.IMediaService)">
            <summary>
            Returns true if there is any media in the recycle bin
            </summary>
            <param name="mediaService"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeServiceExtensions.GetAllElementTypes(Umbraco.Core.Services.IContentTypeService)">
            <summary>
            Gets all of the element types (e.g. content types that have been marked as an element type).
            </summary>
            <param name="contentTypeService">The content type service.</param>
            <returns>Returns all the element types.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeServiceExtensions.GetAvailableCompositeContentTypes(Umbraco.Core.Services.IContentTypeService,Umbraco.Core.Models.IContentTypeComposition,Umbraco.Core.Models.IContentTypeComposition[],System.String[],System.String[],System.Boolean)">
            <summary>
            Returns the available composite content types for a given content type
            </summary>
            <param name="allContentTypes"></param>
            <param name="filterContentTypes">
            This is normally an empty list but if additional content type aliases are passed in, any content types containing those aliases will be filtered out
            along with any content types that have matching property types that are included in the filtered content types
            </param>
            <param name="ctService"></param>
            <param name="source"></param>
            <param name="filterPropertyTypes">
            This is normally an empty list but if additional property type aliases are passed in, any content types that have these aliases will be filtered out.
            This is required because in the case of creating/modifying a content type because new property types being added to it are not yet persisted so cannot
            be looked up via the db, they need to be passed in.
            </param>
            <param name="isElement">Wether the composite content types should be applicable for an element type</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeServiceExtensions.GetDirectOrIndirect(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Get those that we use directly
            </summary>
            <param name="ctype"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Services.IAuditService">
            <summary>
            Represents a service for handling audit.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IAuditService.GetPagedItemsByEntity(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,Umbraco.Core.Models.AuditType[],Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IAuditItem})">
            <summary>
            Returns paged items in the audit trail for a given entity
            </summary>
            <param name="entityId"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderDirection">
            By default this will always be ordered descending (newest first)
            </param>
            <param name="auditTypeFilter">
            Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query or the custom filter
            so we need to do that here
            </param>
            <param name="customFilter">
            Optional filter to be applied
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IAuditService.GetPagedItemsByUser(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,Umbraco.Core.Models.AuditType[],Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IAuditItem})">
            <summary>
            Returns paged items in the audit trail for a given user
            </summary>
            <param name="userId"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderDirection">
            By default this will always be ordered descending (newest first)
            </param>
            <param name="auditTypeFilter">
            Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query or the custom filter
            so we need to do that here
            </param>
            <param name="customFilter">
            Optional filter to be applied
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IAuditService.Write(System.Int32,System.String,System.String,System.DateTime,System.Int32,System.String,System.String,System.String)">
            <summary>
            Writes an audit entry for an audited event.
            </summary>
            <param name="performingUserId">The identifier of the user triggering the audited event.</param>
            <param name="perfomingDetails">Free-form details about the user triggering the audited event.</param>
            <param name="performingIp">The IP address or the request triggering the audited event.</param>
            <param name="eventDateUtc">The date and time of the audited event.</param>
            <param name="affectedUserId">The identifier of the user affected by the audited event.</param>
            <param name="affectedDetails">Free-form details about the entity affected by the audited event.</param>
            <param name="eventType">
            The type of the audited event - must contain only alphanumeric chars and hyphens with forward slashes separating categories.
            <example>
            The eventType will generally be formatted like: {application}/{entity-type}/{category}/{sub-category}
            Example: umbraco/user/sign-in/failed
            </example>
            </param>
            <param name="eventDetails">Free-form details about the audited event.</param>
        </member>
        <member name="T:Umbraco.Core.Services.IContentService">
            <summary>
            Defines the ContentService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IContent"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetBlueprintById(System.Int32)">
            <summary>
            Gets a blueprint.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetBlueprintById(System.Guid)">
            <summary>
            Gets a blueprint.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetBlueprintsForContentTypes(System.Int32[])">
            <summary>
            Gets blueprints for a content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.SaveBlueprint(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Saves a blueprint.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteBlueprint(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Deletes a blueprint.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.CreateContentFromBlueprint(Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <summary>
            Creates a new content item from a blueprint.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteBlueprintsOfType(System.Int32,System.Int32)">
            <summary>
            Deletes blueprints for a content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteBlueprintsOfTypes(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Deletes blueprints for content types.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetById(System.Int32)">
            <summary>
            Gets a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetById(System.Guid)">
            <summary>
            Gets a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets documents.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetByIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets documents.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetByLevel(System.Int32)">
            <summary>
            Gets documents at a given level.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetParent(System.Int32)">
            <summary>
            Gets the parent of a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetParent(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the parent of a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetAncestors(System.Int32)">
            <summary>
            Gets ancestor documents of a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetAncestors(Umbraco.Core.Models.IContent)">
            <summary>
            Gets ancestor documents of a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetVersions(System.Int32)">
            <summary>
            Gets all versions of a document.
            </summary>
            <remarks>Versions are ordered with current first, then most recent first.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetVersionsSlim(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets all versions of a document.
            </summary>
            <remarks>Versions are ordered with current first, then most recent first.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetVersionIds(System.Int32,System.Int32)">
            <summary>
            Gets top versions of a document.
            </summary>
            <remarks>Versions are ordered with current first, then most recent first.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetVersion(System.Int32)">
            <summary>
            Gets a version of a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetRootContent">
            <summary>
            Gets root-level documents.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetContentForExpiration(System.DateTime)">
            <summary>
            Gets documents having an expiration date before (lower than, or equal to) a specified date.
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
            <remarks>
            The content returned from this method may be culture variant, in which case the resulting <see cref="P:Umbraco.Core.Models.IContent.ContentSchedule"/> should be queried
            for which culture(s) have been scheduled.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetContentForRelease(System.DateTime)">
            <summary>
            Gets documents having a release date before (lower than, or equal to) a specified date.
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
            <remarks>
            The content returned from this method may be culture variant, in which case the resulting <see cref="P:Umbraco.Core.Models.IContent.ContentSchedule"/> should be queried
            for which culture(s) have been scheduled.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetPagedContentInRecycleBin(System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets documents in the recycle bin.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetPagedChildren(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets child documents of a parent.
            </summary>
            <param name="id">The parent identifier.</param>
            <param name="pageIndex">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalRecords">Total number of documents.</param>
            <param name="filter">Query filter.</param>
            <param name="ordering">Ordering infos.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetPagedDescendants(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets descendant documents of a given parent.
            </summary>
            <param name="id">The parent identifier.</param>
            <param name="pageIndex">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalRecords">Total number of documents.</param>
            <param name="filter">Query filter.</param>
            <param name="ordering">Ordering infos.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetPagedOfType(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets paged documents of a content
            </summary>
            <param name="contentTypeId">The page number.</param>
            <param name="pageIndex">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalRecords">Total number of documents.</param>
            <param name="filter">Search text filter.</param>
            <param name="ordering">Ordering infos.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetPagedOfTypes(System.Int32[],System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets paged documents for specified content types
            </summary>
            <param name="contentTypeIds">The page number.</param>
            <param name="pageIndex">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalRecords">Total number of documents.</param>
            <param name="filter">Search text filter.</param>
            <param name="ordering">Ordering infos.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Count(System.String)">
            <summary>
            Counts documents of a given document type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.CountPublished(System.String)">
            <summary>
            Counts published documents of a given document type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.CountChildren(System.Int32,System.String)">
            <summary>
            Counts child documents of a given parent, of a given document type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.CountDescendants(System.Int32,System.String)">
            <summary>
            Counts descendant documents of a given parent, of a given document type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.HasChildren(System.Int32)">
            <summary>
            Gets a value indicating whether a document has children.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Save(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <summary>
            Saves documents.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Delete(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Deletes a document.
            </summary>
            <remarks>
            <para>This method will also delete associated media files, child content and possibly associated domains.</para>
            <para>This method entirely clears the content from the database.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all documents of a given document type.
            </summary>
            <remarks>
            <para>All non-deleted descendants of the deleted documents are moved to the recycle bin.</para>
            <para>This operation is potentially dangerous and expensive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteOfTypes(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Deletes all documents of given document types.
            </summary>
            <remarks>
            <para>All non-deleted descendants of the deleted documents are moved to the recycle bin.</para>
            <para>This operation is potentially dangerous and expensive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Deletes versions of a document prior to a given date.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteVersion(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Deletes a version of a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Move(Umbraco.Core.Models.IContent,System.Int32,System.Int32)">
            <summary>
            Moves a document under a new parent.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Copy(Umbraco.Core.Models.IContent,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Copies a document.
            </summary>
            <remarks>
            <para>Recursively copies all children.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Copy(Umbraco.Core.Models.IContent,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Copies a document.
            </summary>
            <remarks>
            <para>Optionally recursively copies all children.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.MoveToRecycleBin(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Moves a document to the recycle bin.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.EmptyRecycleBin">
            <summary>
            Empties the recycle bin.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.EmptyRecycleBin(System.Int32)">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IContent"/> that resides in the bin
            </summary>
            <param name="userId">Optional Id of the User emptying the Recycle Bin</param>        
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Sort(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <summary>
            Sorts documents.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Sort(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Sorts documents.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.SaveAndPublish(Umbraco.Core.Models.IContent,System.String,System.Int32,System.Boolean)">
            <summary>
            Saves and publishes a document.
            </summary>
            <remarks>
            <para>By default, publishes all variations of the document, but it is possible to specify a culture to be published.</para>
            <para>When a culture is being published, it includes all varying values along with all invariant values.</para>
            <para>The document is *always* saved, even when publishing fails.</para>
            <para>If the content type is variant, then culture can be either '*' or an actual culture, but neither 'null' nor
            'empty'. If the content type is invariant, then culture can be either '*' or null or empty.</para>
            </remarks>
            <param name="content">The document to publish.</param>
            <param name="culture">The culture to publish.</param>
            <param name="userId">The identifier of the user performing the action.</param>
            <param name="raiseEvents">A value indicating whether to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.SaveAndPublish(Umbraco.Core.Models.IContent,System.String[],System.Int32,System.Boolean)">
            <summary>
            Saves and publishes a document.
            </summary>
            <remarks>
            <para>By default, publishes all variations of the document, but it is possible to specify a culture to be published.</para>
            <para>When a culture is being published, it includes all varying values along with all invariant values.</para>
            <para>The document is *always* saved, even when publishing fails.</para>
            </remarks>
            <param name="content">The document to publish.</param>
            <param name="cultures">The cultures to publish.</param>
            <param name="userId">The identifier of the user performing the action.</param>
            <param name="raiseEvents">A value indicating whether to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.SaveAndPublishBranch(Umbraco.Core.Models.IContent,System.Boolean,System.String,System.Int32)">
            <summary>
            Saves and publishes a document branch.
            </summary>
            <param name="content">The root document.</param>
            <param name="force">A value indicating whether to force-publish documents that are not already published.</param>
            <param name="culture">A culture, or "*" for all cultures.</param>
            <param name="userId">The identifier of the user performing the operation.</param>
            <remarks>
            <para>Unless specified, all cultures are re-published. Otherwise, one culture can be specified. To act on more
            than one culture, see the other overloads of this method.</para>
            <para>The <paramref name="force"/> parameter determines which documents are published. When <c>false</c>,
            only those documents that are already published, are republished. When <c>true</c>, all documents are
            published. The root of the branch is always published, regardless of <paramref name="force"/>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.SaveAndPublishBranch(Umbraco.Core.Models.IContent,System.Boolean,System.String[],System.Int32)">
            <summary>
            Saves and publishes a document branch.
            </summary>
            <param name="content">The root document.</param>
            <param name="force">A value indicating whether to force-publish documents that are not already published.</param>
            <param name="cultures">The cultures to publish.</param>
            <param name="userId">The identifier of the user performing the operation.</param>
            <remarks>
            <para>The <paramref name="force"/> parameter determines which documents are published. When <c>false</c>,
            only those documents that are already published, are republished. When <c>true</c>, all documents are
            published. The root of the branch is always published, regardless of <paramref name="force"/>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Unpublish(Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <summary>
            Unpublishes a document.
            </summary>
            <remarks>
            <para>By default, unpublishes the document as a whole, but it is possible to specify a culture to be
            unpublished. Depending on whether that culture is mandatory, and other cultures remain published,
            the document as a whole may or may not remain published.</para>
            <para>If the content type is variant, then culture can be either '*' or an actual culture, but neither null nor
            empty. If the content type is invariant, then culture can be either '*' or null or empty.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.IsPathPublishable(Umbraco.Core.Models.IContent)">
            <summary>
            Gets a value indicating whether a document is path-publishable.
            </summary>
            <remarks>A document is path-publishable when all its ancestors are published.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.IsPathPublished(Umbraco.Core.Models.IContent)">
            <summary>
            Gets a value indicating whether a document is path-published.
            </summary>
            <remarks>A document is path-published when all its ancestors, and the document itself, are published.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.SendToPublication(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Saves a document and raises the "sent to publication" events.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.PerformScheduledPublish(System.DateTime)">
            <summary>
            Publishes and unpublishes scheduled documents.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetPermissions(Umbraco.Core.Models.IContent)">
            <summary>
            Gets permissions assigned to a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.SetPermissions(Umbraco.Core.Models.Membership.EntityPermissionSet)">
            <summary>
            Sets the permission of a document.
            </summary>
            <remarks>Replaces all permissions with the new set of permissions.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.SetPermission(Umbraco.Core.Models.IContent,System.Char,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Assigns a permission to a document.
            </summary>
            <remarks>Adds the permission to existing permissions.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Create(System.String,System.Guid,System.String,System.Int32)">
            <summary>
            Creates a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Create(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Create(System.String,Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <summary>
            Creates a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.CreateAndSave(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates and saves a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.CreateAndSave(System.String,Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <summary>
            Creates and saves a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Rollback(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Rolls back the content to a specific version.
            </summary>
            <param name="id">The id of the content node.</param>
            <param name="versionId">The version id to roll back to.</param>
            <param name="culture">An optional culture to roll back.</param>
            <param name="userId">The identifier of the user who is performing the roll back.</param>
            <remarks>
            <para>When no culture is specified, all cultures are rolled back.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Services.IContentServiceBase">
            <summary>
            Placeholder for sharing logic between the content, media (and member) services
            TODO: Start sharing the logic!
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentServiceBase.CheckDataIntegrity(Umbraco.Core.Models.ContentDataIntegrityReportOptions)">
            <summary>
            Checks/fixes the data integrity of node paths/levels stored in the database
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IContentTypeService">
            <summary>
            Manages <see cref="T:Umbraco.Core.Models.IContentType"/> objects.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetAllPropertyTypeAliases">
            <summary>
            Gets all property type aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetAllContentTypeAliases(System.Guid[])">
            <summary>
            Gets all content type aliases
            </summary>
            <param name="objectTypes">
            If this list is empty, it will return all content type aliases for media, members and content, otherwise
            it will only return content type aliases for the object types specified
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetAllContentTypeIds(System.String[])">
            <summary>
            Returns all content type Ids for the aliases given
            </summary>
            <param name="aliases"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Services.IContentTypeBaseService">
            <summary>
            Provides a common base interface for <see cref="T:Umbraco.Core.Models.IContentTypeBase"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeBaseService.Get(System.Int32)">
            <summary>
            Gets a content type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IContentTypeBaseService`1">
            <summary>
            Provides a common base interface for <see cref="T:Umbraco.Core.Services.IContentTypeService"/>, <see cref="T:Umbraco.Core.Services.IMediaTypeService"/> and <see cref="T:Umbraco.Core.Services.IMemberTypeService"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeBaseService`1.Get(System.Int32)">
            <summary>
            Gets a content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeBaseService`1.Get(System.Guid)">
            <summary>
            Gets a content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeBaseService`1.Get(System.String)">
            <summary>
            Gets a content type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeBaseService`1.HasContentNodes(System.Int32)">
            <summary>
            Returns true or false depending on whether content nodes have been created based on the provided content type id.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeBaseService`1.HasContainerInPath(System.String)">
            <summary>
            Given the path of a content item, this will return true if the content item exists underneath a list view content item
            </summary>
            <param name="contentPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeBaseService`1.HasContainerInPath(System.Int32[])">
            <summary>
            Gets a value indicating whether there is a list view content item in the path.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Services.IDataTypeService">
            <summary>
            Defines the DataType Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetReferences(System.Int32)">
            <summary>
            Returns a dictionary of content type <see cref="T:Umbraco.Core.Udi"/>s and the property type aliases that use a <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataType(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataType"/> by its Name
            </summary>
            <param name="name">Name of the <see cref="T:Umbraco.Core.Models.IDataType"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDataType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataType(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataType"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDataType"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDataType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataType(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataType"/> by its unique guid Id
            </summary>
            <param name="id">Unique guid Id of the DataType</param>
            <returns><see cref="T:Umbraco.Core.Models.IDataType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetAll(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.IDataType"/> objects or those with the ids passed in
            </summary>
            <param name="ids">Optional array of Ids</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDataType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.Save(Umbraco.Core.Models.IDataType,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
            <param name="dataType"><see cref="T:Umbraco.Core.Models.IDataType"/> to save</param>
            <param name="userId">Id of the user issuing the save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataType},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
            <param name="dataTypeDefinitions"><see cref="T:Umbraco.Core.Models.IDataType"/> to save</param>
            <param name="userId">Id of the user issuing the save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataType},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
            <param name="dataTypeDefinitions"><see cref="T:Umbraco.Core.Models.IDataType"/> to save</param>
            <param name="userId">Id of the user issuing the save</param>
            <param name="raiseEvents">Boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.Delete(Umbraco.Core.Models.IDataType,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
            <remarks>
            Please note that deleting a <see cref="T:Umbraco.Core.Models.IDataType"/> will remove
            all the <see cref="T:Umbraco.Core.Models.PropertyType"/> data that references this <see cref="T:Umbraco.Core.Models.IDataType"/>.
            </remarks>
            <param name="dataType"><see cref="T:Umbraco.Core.Models.IDataType"/> to delete</param>
            <param name="userId">Id of the user issuing the deletion</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetByEditorAlias(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataType"/> by its control Id
            </summary>
            <param name="propertyEditorAlias">Alias of the property editor</param>
            <returns>Collection of <see cref="T:Umbraco.Core.Models.IDataType"/> objects with a matching control id</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.Get(System.Int32)">
            <summary>
            Gets an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.Get(System.Guid)">
            <summary>
            Gets an entity.
            </summary>
            <param name="key">The unique key of the entity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.Get(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
            <param name="objectType">The object type of the entity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.Get(System.Guid,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets an entity.
            </summary>
            <param name="key">The unique key of the entity.</param>
            <param name="objectType">The object type of the entity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.Get``1(System.Int32)">
            <summary>
            Gets an entity.
            </summary>
            <typeparam name="T">The type used to determine the object type of the entity.</typeparam>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.Get``1(System.Guid)">
            <summary>
            Gets an entity.
            </summary>
            <typeparam name="T">The type used to determine the object type of the entity.</typeparam>
            <param name="key">The unique key of the entity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.Exists(System.Int32)">
            <summary>
            Determines whether an entity exists.
            </summary>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.Exists(System.Guid)">
            <summary>
            Determines whether an entity exists.
            </summary>
            <param name="key">The unique key of the entity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll``1">
            <summary>
            Gets entities of a given object type.
            </summary>
            <typeparam name="T">The type used to determine the object type of the entities.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll``1(System.Int32[])">
            <summary>
            Gets entities of a given object type.
            </summary>
            <typeparam name="T">The type used to determine the object type of the entities.</typeparam>
            <param name="ids">The identifiers of the entities.</param>
            <remarks>If <paramref name="ids"/> is empty, returns all entities.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets entities of a given object type.
            </summary>
            <param name="objectType">The object type of the entities.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll(Umbraco.Core.Models.UmbracoObjectTypes,System.Int32[])">
            <summary>
            Gets entities of a given object type.
            </summary>
            <param name="objectType">The object type of the entities.</param>
            <param name="ids">The identifiers of the entities.</param>
            <remarks>If <paramref name="ids"/> is empty, returns all entities.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll(System.Guid)">
            <summary>
            Gets entities of a given object type.
            </summary>
            <param name="objectType">The object type of the entities.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll(System.Guid,System.Int32[])">
            <summary>
            Gets entities of a given object type.
            </summary>
            <param name="objectType">The object type of the entities.</param>
            <param name="ids">The identifiers of the entities.</param>
            <remarks>If <paramref name="ids"/> is empty, returns all entities.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll``1(System.Guid[])">
            <summary>
            Gets entities of a given object type.
            </summary>
            <typeparam name="T">The type used to determine the object type of the entities.</typeparam>
            <param name="keys">The unique identifiers of the entities.</param>
            <remarks>If <paramref name="keys"/> is empty, returns all entities.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll(Umbraco.Core.Models.UmbracoObjectTypes,System.Guid[])">
            <summary>
            Gets entities of a given object type.
            </summary>
            <param name="objectType">The object type of the entities.</param>
            <param name="keys">The unique identifiers of the entities.</param>
            <remarks>If <paramref name="keys"/> is empty, returns all entities.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll(System.Guid,System.Guid[])">
            <summary>
            Gets entities of a given object type.
            </summary>
            <param name="objectType">The object type of the entities.</param>
            <param name="keys">The unique identifiers of the entities.</param>
            <remarks>If <paramref name="keys"/> is empty, returns all entities.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetRootEntities(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets entities at root.
            </summary>
            <param name="objectType">The object type of the entities.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetParent(System.Int32)">
            <summary>
            Gets the parent of an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetParent(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the parent of an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
            <param name="objectType">The object type of the parent.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetChildren(System.Int32)">
            <summary>
            Gets the children of an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetChildren(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the children of an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
            <param name="objectType">The object type of the children.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetDescendants(System.Int32)">
            <summary>
            Gets the descendants of an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetDescendants(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the descendants of an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
            <param name="objectType">The object type of the descendants.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetPagedChildren(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets children of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetPagedDescendants(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets descendants of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetPagedDescendants(System.Collections.Generic.IEnumerable{System.Int32},Umbraco.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets descendants of entities.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetPagedDescendants(Umbraco.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Entities.IUmbracoEntity},Umbraco.Core.Services.Ordering,System.Boolean)">
            <summary>
            Gets descendants of root.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetObjectType(System.Int32)">
            <summary>
            Gets the object type of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetObjectType(System.Guid)">
            <summary>
            Gets the object type of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetObjectType(Umbraco.Core.Models.Entities.IUmbracoEntity)">
            <summary>
            Gets the object type of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetEntityType(System.Int32)">
            <summary>
            Gets the CLR type of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetId(System.Guid,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the integer identifier corresponding to a unique Guid identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetId(Umbraco.Core.Udi)">
            <summary>
            Gets the integer identifier corresponding to a Udi.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetKey(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the unique Guid identifier corresponding to an integer identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAllPaths(Umbraco.Core.Models.UmbracoObjectTypes,System.Int32[])">
            <summary>
            Gets paths for entities.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAllPaths(Umbraco.Core.Models.UmbracoObjectTypes,System.Guid[])">
            <summary>
            Gets paths for entities.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.ReserveId(System.Guid)">
            <summary>
            Reserves an identifier for a key.
            </summary>
            <param name="key">They key.</param>
            <returns>The identifier.</returns>
            <remarks>When a new content or a media is saved with the key, it will have the reserved identifier.</remarks>
        </member>
        <member name="T:Umbraco.Core.Services.IExternalLoginService">
            <summary>
            Used to store the external login info, this can be replaced with your own implementation
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IExternalLoginService.GetAll(System.Int32)">
            <summary>
            Returns all user logins assigned
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IExternalLoginService.Find(System.String,System.String)">
            <summary>
            Returns all logins matching the login info - generally there should only be one but in some cases
            there might be more than one depending on if an administrator has been editing/removing members
            </summary>
            <param name="loginProvider"></param>
            <param name="providerKey"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IExternalLoginService.Save(System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Identity.IExternalLogin})">
            <summary>
            Saves the external logins associated with the user
            </summary>
            <param name="userId">
            The user associated with the logins
            </param>
            <param name="logins"></param>
            <remarks>
            This will replace all external login provider information for the user
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IExternalLoginService.Save(Umbraco.Core.Models.Identity.IIdentityUserLoginExtended)">
            <summary>
            Save a single external login record
            </summary>
            <param name="login"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IExternalLoginService.DeleteUserLogins(System.Int32)">
            <summary>
            Deletes all user logins - normally used when a member is deleted
            </summary>
            <param name="userId"></param>
        </member>
        <member name="T:Umbraco.Core.Services.IFileService">
            <summary>
            Defines the File Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IFile"/> objects like Scripts, Stylesheets and Templates
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetStylesheets(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Stylesheet"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Stylesheet"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetStylesheetByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Stylesheet"/> object by its name
            </summary>
            <param name="name">Name of the stylesheet incl. extension</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Stylesheet"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SaveStylesheet(Umbraco.Core.Models.Stylesheet,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Stylesheet"/>
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Core.Models.Stylesheet"/> to save</param>
            <param name="userId">Optional id of the user saving the stylesheet</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DeleteStylesheet(System.String,System.Int32)">
            <summary>
            Deletes a stylesheet by its name
            </summary>
            <param name="path">Name incl. extension of the Stylesheet to delete</param>
            <param name="userId">Optional id of the user deleting the stylesheet</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.ValidateStylesheet(Umbraco.Core.Models.Stylesheet)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.Stylesheet"/>
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Core.Models.Stylesheet"/> to validate</param>
            <returns>True if Stylesheet is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetScripts(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Script"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Script"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetScriptByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Script"/> object by its name
            </summary>
            <param name="name">Name of the script incl. extension</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Script"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SaveScript(Umbraco.Core.Models.Script,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Script"/>
            </summary>
            <param name="script"><see cref="T:Umbraco.Core.Models.Script"/> to save</param>
            <param name="userId">Optional id of the user saving the script</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DeleteScript(System.String,System.Int32)">
            <summary>
            Deletes a script by its name
            </summary>
            <param name="path">Name incl. extension of the Script to delete</param>
            <param name="userId">Optional id of the user deleting the script</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.ValidateScript(Umbraco.Core.Models.Script)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.Script"/>
            </summary>
            <param name="script"><see cref="T:Umbraco.Core.Models.Script"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.CreateScriptFolder(System.String)">
            <summary>
            Creates a folder for scripts
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DeleteScriptFolder(System.String)">
            <summary>
            Deletes a folder for scripts
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.CreateStyleSheetFolder(System.String)">
            <summary>
            Creates a folder for style sheets
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DeleteStyleSheetFolder(System.String)">
            <summary>
            Deletes a folder for style sheets
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplates(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.ITemplate"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITemplate"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplates(System.Int32)">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.ITemplate"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITemplate"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplate(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its alias.
            </summary>
            <param name="alias">The alias of the template.</param>
            <returns>The <see cref="T:Umbraco.Core.Models.ITemplate"/> object matching the alias, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplate(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its identifier.
            </summary>
            <param name="id">The identifier of the template.</param>
            <returns>The <see cref="T:Umbraco.Core.Models.ITemplate"/> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplate(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its guid identifier.
            </summary>
            <param name="id">The guid identifier of the template.</param>
            <returns>The <see cref="T:Umbraco.Core.Models.ITemplate"/> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplateDescendants(System.String)">
            <summary>
            Gets the template descendants
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplateDescendants(System.Int32)">
            <summary>
            Gets the template descendants
            </summary>
            <param name="masterTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplateChildren(System.String)">
            <summary>
            Gets the template children
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplateChildren(System.Int32)">
            <summary>
            Gets the template children
            </summary>
            <param name="masterTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SaveTemplate(Umbraco.Core.Models.ITemplate,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to save</param>
            <param name="userId">Optional id of the user saving the template</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.CreateTemplateForContentType(System.String,System.String,System.Int32)">
            <summary>
            Creates a template for a content type
            </summary>
            <param name="contentTypeAlias"></param>
            <param name="contentTypeName"></param>
            <param name="userId"></param>
            <returns>
            The template created
            </returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DeleteTemplate(System.String,System.Int32)">
            <summary>
            Deletes a template by its alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.ITemplate"/> to delete</param>
            <param name="userId">Optional id of the user deleting the template</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.ValidateTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SaveTemplate(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITemplate},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.Template"/> objects
            </summary>
            <param name="templates">List of <see cref="T:Umbraco.Core.Models.Template"/> to save</param>
            <param name="userId">Optional id of the user</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplateFileContentStream(System.String)">
            <summary>
            Gets the content of a template as a stream.
            </summary>
            <param name="filepath">The filesystem path to the template.</param>
            <returns>The content of the template.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SetTemplateFileContent(System.String,System.IO.Stream)">
            <summary>
            Sets the content of a template.
            </summary>
            <param name="filepath">The filesystem path to the template.</param>
            <param name="content">The content of the template.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplateFileSize(System.String)">
            <summary>
            Gets the size of a template.
            </summary>
            <param name="filepath">The filesystem path to the template.</param>
            <returns>The size of the template.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetStylesheetFileContentStream(System.String)">
            <summary>
            Gets the content of a stylesheet as a stream.
            </summary>
            <param name="filepath">The filesystem path to the stylesheet.</param>
            <returns>The content of the stylesheet.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SetStylesheetFileContent(System.String,System.IO.Stream)">
            <summary>
            Sets the content of a stylesheet.
            </summary>
            <param name="filepath">The filesystem path to the stylesheet.</param>
            <param name="content">The content of the stylesheet.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetStylesheetFileSize(System.String)">
            <summary>
            Gets the size of a stylesheet.
            </summary>
            <param name="filepath">The filesystem path to the stylesheet.</param>
            <returns>The size of the stylesheet.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetScriptFileContentStream(System.String)">
            <summary>
            Gets the content of a script file as a stream.
            </summary>
            <param name="filepath">The filesystem path to the script.</param>
            <returns>The content of the script file.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SetScriptFileContent(System.String,System.IO.Stream)">
            <summary>
            Sets the content of a script file.
            </summary>
            <param name="filepath">The filesystem path to the script.</param>
            <param name="content">The content of the script file.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetScriptFileSize(System.String)">
            <summary>
            Gets the size of a script file.
            </summary>
            <param name="filepath">The filesystem path to the script file.</param>
            <returns>The size of the script file.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetPartialViewMacroFileContentStream(System.String)">
            <summary>
            Gets the content of a macro partial view as a stream.
            </summary>
            <param name="filepath">The filesystem path to the macro partial view.</param>
            <returns>The content of the macro partial view.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SetPartialViewMacroFileContent(System.String,System.IO.Stream)">
            <summary>
            Sets the content of a macro partial view.
            </summary>
            <param name="filepath">The filesystem path to the macro partial view.</param>
            <param name="content">The content of the macro partial view.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetPartialViewMacroFileSize(System.String)">
            <summary>
            Gets the size of a macro partial view.
            </summary>
            <param name="filepath">The filesystem path to the macro partial view.</param>
            <returns>The size of the macro partial view.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetPartialViewFileContentStream(System.String)">
            <summary>
            Gets the content of a partial view as a stream.
            </summary>
            <param name="filepath">The filesystem path to the partial view.</param>
            <returns>The content of the partial view.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SetPartialViewFileContent(System.String,System.IO.Stream)">
            <summary>
            Sets the content of a partial view.
            </summary>
            <param name="filepath">The filesystem path to the partial view.</param>
            <param name="content">The content of the partial view.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetPartialViewFileSize(System.String)">
            <summary>
            Gets the size of a partial view.
            </summary>
            <param name="filepath">The filesystem path to the partial view.</param>
            <returns>The size of the partial view.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetPartialViewMacroSnippetContent(System.String)">
            <summary>
            Gets the content of a macro partial view snippet as a string
            </summary>
            <param name="snippetName">The name of the snippet</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetPartialViewSnippetContent(System.String)">
            <summary>
            Gets the content of a partial view snippet as a string.
            </summary>
            <param name="snippetName">The name of the snippet</param>
            <returns>The content of the partial view.</returns>
        </member>
        <member name="T:Umbraco.Core.Services.IKeyValueService">
            <summary>
            Manages the simplified key/value store.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IKeyValueService.GetValue(System.String)">
            <summary>
            Gets a value.
            </summary>
            <remarks>Returns <c>null</c> if no value was found for the key.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IKeyValueService.SetValue(System.String,System.String)">
            <summary>
            Sets a value.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IKeyValueService.SetValue(System.String,System.String,System.String)">
            <summary>
            Sets a value.
            </summary>
            <remarks>Sets the value to <paramref name="newValue"/> if the value is <paramref name="originValue"/>,
            and returns true; otherwise throws an exception. In other words, ensures that the value has not changed
            before setting it.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IKeyValueService.TrySetValue(System.String,System.String,System.String)">
            <summary>
            Tries to set a value.
            </summary>
            <remarks>Sets the value to <paramref name="newValue"/> if the value is <paramref name="originValue"/>,
            and returns true; otherwise returns false. In other words, ensures that the value has not changed
            before setting it.</remarks>
        </member>
        <member name="T:Umbraco.Core.Services.ILocalizationService">
            <summary>
            Defines the Localization Service, which is an easy access to operations involving Languages and Dictionary
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.AddOrUpdateDictionaryValue(Umbraco.Core.Models.IDictionaryItem,Umbraco.Core.Models.ILanguage,System.String)">
            <summary>
            Adds or updates a translation for a dictionary item and language
            </summary>
            <param name="item"></param>
            <param name="language"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.CreateDictionaryItemWithIdentity(System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Creates and saves a new dictionary item and assigns a value to all languages if defaultValue is specified.
            </summary>
            <param name="key"></param>
            <param name="parentId"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its <see cref="T:System.Int32"/> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemById(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its <see cref="T:System.Guid"/> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemByKey(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its key
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemChildren(System.Guid)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="parentId">Id of the parent</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemDescendants(System.Nullable{System.Guid})">
            <summary>
            Gets a list of descendants for a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="parentId">Id of the parent, null will return all dictionary items</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetRootDictionaryItems">
            <summary>
            Gets the root/top <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.DictionaryItemExists(System.String)">
            <summary>
            Checks if a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> with given key exists
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns>True if a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> exists, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.Save(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> object
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Core.Models.IDictionaryItem"/> to save</param>
            <param name="userId">Optional id of the user saving the dictionary item</param>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.Delete(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> object and its related translations
            as well as its children.
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Core.Models.IDictionaryItem"/> to delete</param>
            <param name="userId">Optional id of the user deleting the dictionary item</param>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetLanguageById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ILanguage"/> by its id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.ILanguage"/></param>
            <returns><see cref="T:Umbraco.Core.Models.ILanguage"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetLanguageByIsoCode(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Language"/> by its iso code
            </summary>
            <param name="isoCode">Iso Code of the language (ie. en-US)</param>
            <returns><see cref="T:Umbraco.Core.Models.Language"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetLanguageIdByIsoCode(System.String)">
            <summary>
            Gets a language identifier from its ISO code.
            </summary>
            <remarks>
            <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetLanguageIsoCodeById(System.Int32)">
            <summary>
            Gets a language ISO code from its identifier.
            </summary>
            <remarks>
            <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDefaultLanguageIsoCode">
            <summary>
            Gets the default language ISO code.
            </summary>
            <remarks>
            <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDefaultLanguageId">
            <summary>
            Gets the default language identifier.
            </summary>
            <remarks>
            <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetAllLanguages">
            <summary>
            Gets all available languages
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ILanguage"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.Save(Umbraco.Core.Models.ILanguage,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.ILanguage"/> object
            </summary>
            <param name="language"><see cref="T:Umbraco.Core.Models.ILanguage"/> to save</param>
            <param name="userId">Optional id of the user saving the language</param>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.Delete(Umbraco.Core.Models.ILanguage,System.Int32)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.ILanguage"/> by removing it and its usages from the db
            </summary>
            <param name="language"><see cref="T:Umbraco.Core.Models.ILanguage"/> to delete</param>
            <param name="userId">Optional id of the user deleting the language</param>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemKeyMap">
            <summary>
            Gets the full dictionary key map.
            </summary>
            <returns>The full dictionary key map.</returns>
        </member>
        <member name="T:Umbraco.Core.Services.ILocalizedTextService">
            <summary>
            The entry point to localize any key in the text storage source for a given culture
            </summary>
            <remarks>
            This class is created to be as simple as possible so that it can be replaced very easily,
            all other methods are extension methods that simply call the one underlying method in this class
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizedTextService.Localize(System.String,System.Globalization.CultureInfo,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Localize a key with variables
            </summary>
            <param name="key"></param>
            <param name="culture"></param>
            <param name="tokens">This can be null</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizedTextService.GetAllStoredValues(System.Globalization.CultureInfo)">
            <summary>
            Returns all key/values in storage for the given culture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizedTextService.GetSupportedCultures">
            <summary>
            Returns a list of all currently supported cultures
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizedTextService.ConvertToSupportedCultureWithRegionCode(System.Globalization.CultureInfo)">
            <summary>
            Tries to resolve a full 4 letter culture from a 2 letter culture name
            </summary>
            <param name="currentCulture">
            The culture to determine if it is only a 2 letter culture, if so we'll try to convert it, otherwise it will just be returned
            </param>
            <returns></returns>
            <remarks>
            TODO: This is just a hack due to the way we store the language files, they should be stored with 4 letters since that
            is what they reference but they are stored with 2, further more our user's languages are stored with 2. So this attempts
            to resolve the full culture if possible.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Services.IMacroService">
            <summary>
            Defines the MacroService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IMacroService.GetByAlias(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMacro"/> object by its alias
            </summary>
            <param name="alias">Alias to retrieve an <see cref="T:Umbraco.Core.Models.IMacro"/> for</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMacro"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMacroService.Delete(Umbraco.Core.Models.IMacro,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macro"><see cref="T:Umbraco.Core.Models.IMacro"/> to delete</param>
            <param name="userId">Optional id of the user deleting the macro</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMacroService.Save(Umbraco.Core.Models.IMacro,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macro"><see cref="T:Umbraco.Core.Models.IMacro"/> to save</param>
            <param name="userId">Optional id of the user saving the macro</param>
        </member>
        <member name="T:Umbraco.Core.Services.IMediaService">
            <summary>
            Defines the Media Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IMedia"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.CreateMedia(System.String,System.Guid,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IMedia without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new media objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.CreateMedia(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IMedia without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new media objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.CreateMedia(System.String,Umbraco.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IMedia without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new media objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetById(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by Id
            </summary>
            <param name="id">Id of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetPagedChildren(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="orderBySystemField">Flag to indicate when ordering by system field</param>
            <param name="filter"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetPagedDescendants(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Descendants from</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total records query would return without paging</param>
            <param name="ordering"></param>
            <param name="filter"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetPagedOfType(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets paged documents of a content
            </summary>
            <param name="contentTypeId">The page number.</param>
            <param name="pageIndex">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalRecords">Total number of documents.</param>
            <param name="filter">Search text filter.</param>
            <param name="ordering">Ordering infos.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetPagedOfTypes(System.Int32[],System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets paged documents for specified content types
            </summary>
            <param name="contentTypeIds">The page number.</param>
            <param name="pageIndex">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalRecords">Total number of documents.</param>
            <param name="filter">Search text filter.</param>
            <param name="ordering">Ordering infos.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetRootMedia">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetPagedMediaInRecycleBin(System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},Umbraco.Core.Services.Ordering)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which resides in the Recycle Bin
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Move(Umbraco.Core.Models.IMedia,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Umbraco.Core.Models.IMedia"/> object to a new location
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to move</param>
            <param name="parentId">Id of the Media's new Parent</param>
            <param name="userId">Id of the User moving the Media</param>
            <returns>True if moving succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.MoveToRecycleBin(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object by moving it to the Recycle Bin
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.EmptyRecycleBin">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IMedia"/> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.EmptyRecycleBin(System.Int32)">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IMedia"/> that resides in the bin
            </summary>
            <param name="userId">Optional Id of the User emptying the Recycle Bin</param>        
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.DeleteMediaOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all media of specified type. All children of deleted media is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="mediaTypeId">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional Id of the user deleting Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.DeleteMediaOfTypes(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Deletes all media of the specified types. All Descendants of deleted media that is not of these types is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="mediaTypeIds">Ids of the <see cref="T:Umbraco.Core.Models.IMediaType"/>s</param>
            <param name="userId">Optional Id of the user issuing the delete operation</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Delete(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <remarks>
            Please note that this method will completely remove the Media from the database,
            but current not from the file system.
            </remarks>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Save(Umbraco.Core.Models.IMedia,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects
            </summary>
            <param name="medias">Collection of <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetById(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetByLevel(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Level
            </summary>
            <param name="level">The level to retrieve Media from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetVersion(System.Int32)">
            <summary>
            Gets a specific version of an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMedia"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetVersions(System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IMedia"/> objects versions by Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IMedia"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/></param>
            <returns>True if the media has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Permanently deletes versions from an <see cref="T:Umbraco.Core.Models.IMedia"/> object prior to a specific date.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.DeleteVersion(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Permanently deletes specific version(s) from an <see cref="T:Umbraco.Core.Models.IMedia"/> object.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetMediaByPath(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object from the path stored in the 'umbracoFile' property.
            </summary>
            <param name="mediaPath">Path of the media item to retrieve (for example: /media/1024/koala_403x328.jpg)</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetAncestors(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which are ancestors of the current media.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetAncestors(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which are ancestors of the current media.
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetParent(System.Int32)">
            <summary>
            Gets the parent of the current media as an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetParent(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets the parent of the current media as an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Sort(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Int32,System.Boolean)">
            <summary>
            Sorts a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by updating the SortOrder according
            to the ordering of items in the passed in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="items"></param>
            <param name="userId"></param>
            <param name="raiseEvents"></param>
            <returns>True if sorting succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.CreateMediaWithIdentity(System.String,Umbraco.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            This method returns an <see cref="T:Umbraco.Core.Models.IMedia"/> object that has been persisted to the database
            and therefor has an identity.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.CreateMediaWithIdentity(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            This method returns an <see cref="T:Umbraco.Core.Models.IMedia"/> object that has been persisted to the database
            and therefor has an identity.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetMediaFileContentStream(System.String)">
            <summary>
            Gets the content of a media as a stream.
            </summary>
            <param name="filepath">The filesystem path to the media.</param>
            <returns>The content of the media.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.SetMediaFileContent(System.String,System.IO.Stream)">
            <summary>
            Sets the content of a media.
            </summary>
            <param name="filepath">The filesystem path to the media.</param>
            <param name="content">The content of the media.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.DeleteMediaFile(System.String)">
            <summary>
            Deletes a media file.
            </summary>
            <param name="filepath">The filesystem path to the media.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetMediaFileSize(System.String)">
            <summary>
            Gets the size of a media.
            </summary>
            <param name="filepath">The filesystem path to the media.</param>
            <returns>The size of the media.</returns>
        </member>
        <member name="T:Umbraco.Core.Services.IMediaTypeService">
            <summary>
            Manages <see cref="T:Umbraco.Core.Models.IMediaType"/> objects.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IMemberService">
            <summary>
            Defines the MemberService, which is an easy access to operations involving (umbraco) members.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetAll(System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String,System.String)">
            <summary>
            Gets a list of paged <see cref="T:Umbraco.Core.Models.IMember"/> objects
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.IMember"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> </remarks>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="memberTypeAlias"></param>
            <param name="filter">Search text filter</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetAll(System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.Boolean,System.String,System.String)">
            <summary>
            Gets a list of paged <see cref="T:Umbraco.Core.Models.IMember"/> objects
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.IMember"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> </remarks>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="orderBySystemField">Flag to indicate when ordering by system field</param>
            <param name="memberTypeAlias"></param>
            <param name="filter">Search text filter</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.CreateMember(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMember"/> object without persisting it
            </summary>
            <remarks>This method is convenient for when you need to add properties to a new Member
            before persisting it in order to limit the amount of times its saved.
            Also note that the returned <see cref="T:Umbraco.Core.Models.IMember"/> will not have an Id until its saved.</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.CreateMember(System.String,System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMember"/> object without persisting it
            </summary>
            <remarks>This method is convenient for when you need to add properties to a new Member
            before persisting it in order to limit the amount of times its saved.
            Also note that the returned <see cref="T:Umbraco.Core.Models.IMember"/> will not have an Id until its saved.</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.CreateMemberWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.CreateMemberWithIdentity(System.String,System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.SavePassword(Umbraco.Core.Models.IMember,System.String)">
             <summary>
             This is simply a helper method which essentially just wraps the MembershipProvider's ChangePassword method which can be
             used during Member creation.
             </summary>
             <remarks>This method exists so that Umbraco developers can use one entry point to create/update
             this will not work for updating members in most cases (depends on your membership provider settings)
            
             It is preferred to use the membership APIs for working with passwords, in the near future this method will be obsoleted
             and the ASP.NET Identity APIs should be used instead.
             </remarks>
             <param name="member">The Member to save the password for</param>
             <param name="password">The password to encrypt and save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.Count(System.String)">
            <summary>
            Gets the count of Members by an optional MemberType alias
            </summary>
            <remarks>If no alias is supplied then the count for all Member will be returned</remarks>
            <param name="memberTypeAlias">Optional alias for the MemberType when counting number of Members</param>
            <returns><see cref="!:System.int"/> with number of Members</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.Exists(System.Int32)">
            <summary>
            Checks if a Member with the id exists
            </summary>
            <param name="id">Id of the Member</param>
            <returns><c>True</c> if the Member exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetByKey(System.Guid)">
            <summary>
            Gets a Member by the unique key
            </summary>
            <remarks>The guid key corresponds to the unique id in the database
            and the user id in the membership provider.</remarks>
            <param name="id"><see cref="T:System.Guid"/> Id</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetById(System.Int32)">
            <summary>
            Gets a Member by its integer id
            </summary>
            <param name="id"><see cref="!:System.int"/> Id</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByMemberType(System.String)">
            <summary>
            Gets all Members for the specified MemberType alias
            </summary>
            <param name="memberTypeAlias">Alias of the MemberType</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByMemberType(System.Int32)">
            <summary>
            Gets all Members for the MemberType id
            </summary>
            <param name="memberTypeId">Id of the MemberType</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByGroup(System.String)">
            <summary>
            Gets all Members within the specified MemberGroup name
            </summary>
            <param name="memberGroupName">Name of the MemberGroup</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetAllMembers(System.Int32[])">
            <summary>
            Gets all Members with the ids specified
            </summary>
            <remarks>If no Ids are specified all Members will be retrieved</remarks>
            <param name="ids">Optional list of Member Ids</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.DeleteMembersOfType(System.Int32)">
            <summary>
            Delete Members of the specified MemberType id
            </summary>
            <param name="memberTypeId">Id of the MemberType</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.FindMembersByDisplayName(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds Members based on their display name
            </summary>
            <param name="displayNameToMatch">Display name to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByPropertyValue(System.String,System.String,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="!:System.string"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByPropertyValue(System.String,System.Int32,Umbraco.Core.Persistence.Querying.ValuePropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="!:System.int"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByPropertyValue(System.String,System.Boolean)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="!:System.bool"/> Value to match</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByPropertyValue(System.String,System.DateTime,Umbraco.Core.Persistence.Querying.ValuePropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="T:System.DateTime"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="T:Umbraco.Core.Services.IMembershipMemberService">
            <summary>
            Defines part of the MemberService, which is specific to methods used by the membership provider.
            </summary>
            <remarks>
            Idea is to have this as an isolated interface so that it can be easily 'replaced' in the membership provider implementation.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService.CreateMemberWithIdentity(System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Creates and persists a new Member
            </summary>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="memberType"><see cref="T:Umbraco.Core.Models.IMemberType"/> which the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="T:Umbraco.Core.Services.IMembershipMemberService`1">
            <summary>
            Defines part of the UserService/MemberService, which is specific to methods used by the membership provider.
            The generic type is restricted to <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/>. The implementation of this interface  uses
            either <see cref="T:Umbraco.Core.Models.IMember"/> for the MemberService or <see cref="T:Umbraco.Core.Models.Membership.IUser"/> for the UserService.
            </summary>
            <remarks>
            Idea is to have this as an isolated interface so that it can be easily 'replaced' in the membership provider implementation.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.GetCount(Umbraco.Core.Models.Membership.MemberCountType)">
            <summary>
            Gets the total number of Members or Users based on the count type
            </summary>
            <remarks>
            The way the Online count is done is the same way that it is done in the MS SqlMembershipProvider - We query for any members
            that have their last active date within the Membership.UserIsOnlineTimeWindow (which is in minutes). It isn't exact science
            but that is how MS have made theirs so we'll follow that principal.
            </remarks>
            <param name="countType"><see cref="T:Umbraco.Core.Models.Membership.MemberCountType"/> to count by</param>
            <returns><see cref="!:System.int"/> with number of Members or Users for passed in type</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.Exists(System.String)">
            <summary>
            Checks if a Member with the username exists
            </summary>
            <param name="username">Username to check</param>
            <returns><c>True</c> if the Member exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.CreateWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
            Creates and persists a new <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/>
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="username">Username of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.CreateWithIdentity(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates and persists a new <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/>
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="username">Username of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <param name="isApproved">IsApproved of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.GetByProviderKey(System.Object)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> by its provider key
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="id">Id to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.GetByEmail(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> by email
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="email">Email to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.GetByUsername(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> by username
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="username">Username to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.Delete(`0)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/>
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="membershipUser"><see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/> to Delete</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.SetLastLogin(System.String,System.DateTime)">
            <summary>
            Sets the last login date for the member if they are found by username
            </summary>
            <param name="username"></param>
            <param name="date"></param>
            <remarks>
            This is a specialized method because whenever a member logs in, the membership provider requires us to set the 'online' which requires
            updating their login date. This operation must be fast and cannot use database locks which is fine if we are only executing a single query
            for this data since there won't be any other data contention issues.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.Save(`0,System.Boolean)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/>
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="entity"><see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/> to Save</param>
            <param name="raiseEvents">Optional parameter to raise events.
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.Save(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Saves a list of <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> objects
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="entities"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to save</param>
            <param name="raiseEvents">Optional parameter to raise events.
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.GetDefaultMemberType">
            <summary>
            Gets the default MemberType alias
            </summary>
            <remarks>By default we'll return the 'writer', but we need to check it exists. If it doesn't we'll
            return the first type that is not an admin, otherwise if there's only one we will return that one.</remarks>
            <returns>Alias of the default MemberType</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.FindByEmail(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> objects by a partial email string
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="emailStringToMatch">Partial email string to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.FindByUsername(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> objects by a partial username
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="login">Partial username to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.GetAll(System.Int64,System.Int32,System.Int64@)">
            <summary>
            Gets a list of paged <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> objects
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="T:Umbraco.Core.Services.IMembershipUserService">
            <summary>
            Defines part of the UserService, which is specific to methods used by the membership provider.
            </summary>
            <remarks>
            Idea is to have this is an isolated interface so that it can be easily 'replaced' in the membership provider impl.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipUserService.CreateUserWithIdentity(System.String,System.String)">
            <summary>
            Creates and persists a new User
            </summary>
            <remarks>The user will be saved in the database and returned with an Id.
            This method is convenient when you need to perform operations, which needs the
            Id of the user once its been created.</remarks>
            <param name="username">Username of the User to create</param>
            <param name="email">Email of the User to create</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="T:Umbraco.Core.Services.IMemberTypeService">
            <summary>
            Manages <see cref="T:Umbraco.Core.Models.IMemberType"/> objects.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.SendNotifications(Umbraco.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.String,System.String,System.Uri,System.Func{System.ValueTuple{Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.NotificationEmailSubjectParams},System.String},System.Func{System.ValueTuple{Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.NotificationEmailBodyParams,System.Boolean},System.String})">
            <summary>
            Sends the notifications for the specified user regarding the specified nodes and action.
            </summary>
            <param name="entities"></param>
            <param name="operatingUser"></param>
            <param name="action"></param>
            <param name="actionName"></param>
            <param name="http"></param>
            <param name="createSubject"></param>
            <param name="createBody"></param>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.GetUserNotifications(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Gets the notifications for the user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.GetUserNotifications(Umbraco.Core.Models.Membership.IUser,System.String)">
            <summary>
            Gets the notifications for the user based on the specified node path
            </summary>
            <param name="user"></param>
            <param name="path"></param>
            <returns></returns>
            <remarks>
            Notifications are inherited from the parent so any child node will also have notifications assigned based on it's parent (ancestors)
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.GetEntityNotifications(Umbraco.Core.Models.Entities.IEntity)">
            <summary>
            Returns the notifications for an entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.DeleteNotifications(Umbraco.Core.Models.Entities.IEntity)">
            <summary>
            Deletes notifications by entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.DeleteNotifications(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Deletes notifications by user
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.DeleteNotifications(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.Entities.IEntity)">
            <summary>
            Delete notifications by user and entity
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.SetNotifications(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.Entities.IEntity,System.String[])">
            <summary>
            Sets the specific notifications for the user and entity
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
            <param name="actions"></param>
            <remarks>
            This performs a full replace
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.CreateNotification(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.Entities.IEntity,System.String)">
            <summary>
            Creates a new notification
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
            <param name="action">The action letter - note: this is a string for future compatibility</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.GetCompiledPackageInfo(System.IO.FileInfo)">
            <summary>
            Returns a <see cref="T:Umbraco.Core.Models.Packaging.CompiledPackage"/> result from an umbraco package file (zip)
            </summary>
            <param name="packageFile"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.InstallCompiledPackageFiles(Umbraco.Core.Models.Packaging.PackageDefinition,System.IO.FileInfo,System.Int32)">
            <summary>
            Installs the package files contained in an umbraco package file (zip)
            </summary>
            <param name="packageDefinition"></param>
            <param name="packageFile"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.InstallCompiledPackageData(Umbraco.Core.Models.Packaging.PackageDefinition,System.IO.FileInfo,System.Int32)">
            <summary>
            Installs the data, entities, objects contained in an umbraco package file (zip)
            </summary>
            <param name="packageDefinition"></param>
            <param name="packageFile"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.UninstallPackage(System.String,System.Int32)">
            <summary>
            Uninstalls all versions of the package by name
            </summary>
            <param name="packageName"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.GetInstalledPackageById(System.Int32)">
            <summary>
            Returns the <see cref="T:Umbraco.Core.Models.Packaging.PackageDefinition"/> for the installation id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.GetInstalledPackageByName(System.String)">
            <summary>
            Returns all <see cref="T:Umbraco.Core.Models.Packaging.PackageDefinition"/> for the package by name
            </summary>
            <param name="name"></param>
            <returns>
            A list of all package definitions installed for this package (i.e. original install and any upgrades)
            </returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.GetPackageInstallType(System.String,Semver.SemVersion,Umbraco.Core.Models.Packaging.PackageDefinition@)">
            <summary>
            Returns a <see cref="T:Umbraco.Core.Packaging.PackageInstallType"/> for a given package name and version
            </summary>
            <param name="packageName"></param>
            <param name="packageVersion"></param>
            <param name="alreadyInstalled">If the package is an upgrade, the original/current PackageDefinition is returned</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.SaveInstalledPackage(Umbraco.Core.Models.Packaging.PackageDefinition)">
            <summary>
            Persists a package definition to storage
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.SaveCreatedPackage(Umbraco.Core.Models.Packaging.PackageDefinition)">
            <summary>
            Persists a package definition to storage
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.ExportCreatedPackage(Umbraco.Core.Models.Packaging.PackageDefinition)">
            <summary>
            Creates the package file and returns it's physical path
            </summary>
            <param name="definition"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.FetchPackageFileAsync(System.Guid,System.Version,System.Int32)">
            <summary>
            This will fetch an Umbraco package file from the package repository and return the file name of the downloaded package
            </summary>
            <param name="packageId"></param>
            <param name="umbracoVersion"></param>
            <param name="userId">The current user id performing the operation</param>
            <returns>
            The file name of the downloaded package which will exist in ~/App_Data/packages
            </returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.GetAll">
            <summary>
            Gets all defined entries and associated rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.GetEntryForContent(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the entry defined for the content item's path
            </summary>
            <param name="content"></param>
            <returns>Returns null if no entry is found</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.GetEntryForContent(System.String)">
            <summary>
            Gets the entry defined for the content item based on a content path
            </summary>
            <param name="contentPath"></param>
            <returns>Returns null if no entry is found</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.IsProtected(Umbraco.Core.Models.IContent)">
            <summary>
            Returns true if the content has an entry for it's path
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.IsProtected(System.String)">
            <summary>
            Returns true if the content has an entry based on a content path
            </summary>
            <param name="contentPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.AddRule(Umbraco.Core.Models.IContent,System.String,System.String)">
            <summary>
            Adds a rule if the entry doesn't already exist
            </summary>
            <param name="content"></param>
            <param name="ruleType"></param>
            <param name="ruleValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.RemoveRule(Umbraco.Core.Models.IContent,System.String,System.String)">
            <summary>
            Removes a rule
            </summary>
            <param name="content"></param>
            <param name="ruleType"></param>
            <param name="ruleValue"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.Save(Umbraco.Core.Models.PublicAccessEntry)">
            <summary>
            Saves the entry
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.Delete(Umbraco.Core.Models.PublicAccessEntry)">
            <summary>
            Deletes the entry and all associated rules
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:Umbraco.Core.Services.IRedirectUrlService">
             <summary>
            
             </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IRedirectUrlService.Register(System.String,System.Guid,System.String)">
            <summary>
            Registers a redirect URL.
            </summary>
            <param name="url">The Umbraco URL route.</param>
            <param name="contentKey">The content unique key.</param>
            <param name="culture">The culture.</param>
            <remarks>Is a proper Umbraco route eg /path/to/foo or 123/path/tofoo.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IRedirectUrlService.DeleteContentRedirectUrls(System.Guid)">
            <summary>
            Deletes all redirect URLs for a given content.
            </summary>
            <param name="contentKey">The content unique key.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IRedirectUrlService.Delete(Umbraco.Core.Models.IRedirectUrl)">
            <summary>
            Deletes a redirect URL.
            </summary>
            <param name="redirectUrl">The redirect URL to delete.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IRedirectUrlService.Delete(System.Guid)">
            <summary>
            Deletes a redirect URL.
            </summary>
            <param name="id">The redirect URL identifier.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IRedirectUrlService.DeleteAll">
            <summary>
            Deletes all redirect URLs.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IRedirectUrlService.GetMostRecentRedirectUrl(System.String)">
            <summary>
            Gets the most recent redirect URLs corresponding to an Umbraco redirect URL route.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <returns>The most recent redirect URLs corresponding to the route.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRedirectUrlService.GetMostRecentRedirectUrl(System.String,System.String)">
            <summary>
            Gets the most recent redirect URLs corresponding to an Umbraco redirect URL route.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <param name="culture">The culture of the request.</param>
            <returns>The most recent redirect URLs corresponding to the route.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRedirectUrlService.GetContentRedirectUrls(System.Guid)">
            <summary>
            Gets all redirect URLs for a content item.
            </summary>
            <param name="contentKey">The content unique key.</param>
            <returns>All redirect URLs for the content item.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRedirectUrlService.GetAllRedirectUrls(System.Int64,System.Int32,System.Int64@)">
            <summary>
            Gets all redirect URLs.
            </summary>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRedirectUrlService.GetAllRedirectUrls(System.Int32,System.Int64,System.Int32,System.Int64@)">
            <summary>
            Gets all redirect URLs below a given content item.
            </summary>
            <param name="rootContentId">The content unique identifier.</param>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRedirectUrlService.SearchRedirectUrls(System.String,System.Int64,System.Int32,System.Int64@)">
            <summary>
            Searches for all redirect URLs that contain a given search term in their URL property.
            </summary>
            <param name="searchTerm">The term to search for.</param>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IRelation"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IRelation"/></param>
            <returns>A <see cref="T:Umbraco.Core.Models.IRelation"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetRelationTypeById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IRelationType"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IRelationType"/></param>
            <returns>A <see cref="T:Umbraco.Core.Models.IRelationType"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetRelationTypeById(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IRelationType"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IRelationType"/></param>
            <returns>A <see cref="T:Umbraco.Core.Models.IRelationType"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetRelationTypeByAlias(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IRelationType"/> by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.IRelationType"/></param>
            <returns>A <see cref="T:Umbraco.Core.Models.IRelationType"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetAllRelations(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.IRelation"/> objects
            </summary>
            <param name="ids">Optional array of integer ids to return relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetAllRelationsByRelationType(Umbraco.Core.Models.IRelationType)">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.IRelation"/> objects by their <see cref="T:Umbraco.Core.Models.IRelationType"/>
            </summary>
            <param name="relationType"><see cref="T:Umbraco.Core.Models.IRelation"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetAllRelationsByRelationType(System.Int32)">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.IRelation"/> objects by their <see cref="T:Umbraco.Core.Models.IRelationType"/>'s Id
            </summary>
            <param name="relationTypeId">Id of the <see cref="T:Umbraco.Core.Models.IRelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetAllRelationTypes(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.IRelation"/> objects
            </summary>
            <param name="ids">Optional array of integer ids to return relationtypes for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByParentId(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects by their parent Id
            </summary>
            <param name="id">Id of the parent to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByParentId(System.Int32,System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects by their parent Id
            </summary>
            <param name="id">Id of the parent to retrieve relations for</param>
            <param name="relationTypeAlias">Alias of the type of relation to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByParent(Umbraco.Core.Models.Entities.IUmbracoEntity)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects by their parent entity
            </summary>
            <param name="parent">Parent Entity to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByParent(Umbraco.Core.Models.Entities.IUmbracoEntity,System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects by their parent entity
            </summary>
            <param name="parent">Parent Entity to retrieve relations for</param>
            <param name="relationTypeAlias">Alias of the type of relation to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByChildId(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects by their child Id
            </summary>
            <param name="id">Id of the child to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByChildId(System.Int32,System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects by their child Id
            </summary>
            <param name="id">Id of the child to retrieve relations for</param>
            <param name="relationTypeAlias">Alias of the type of relation to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByChild(Umbraco.Core.Models.Entities.IUmbracoEntity)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects by their child Entity
            </summary>
            <param name="child">Child Entity to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByChild(Umbraco.Core.Models.Entities.IUmbracoEntity,System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects by their child Entity
            </summary>
            <param name="child">Child Entity to retrieve relations for</param>
            <param name="relationTypeAlias">Alias of the type of relation to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByParentOrChildId(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects by their child or parent Id.
            Using this method will get you all relations regards of it being a child or parent relation.
            </summary>
            <param name="id">Id of the child or parent to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByRelationTypeName(System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects by the Name of the <see cref="T:Umbraco.Core.Models.IRelationType"/>
            </summary>
            <param name="relationTypeName">Name of the <see cref="T:Umbraco.Core.Models.IRelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByRelationTypeAlias(System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects by the Alias of the <see cref="T:Umbraco.Core.Models.IRelationType"/>
            </summary>
            <param name="relationTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IRelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByRelationTypeId(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects by the Id of the <see cref="T:Umbraco.Core.Models.IRelationType"/>
            </summary>
            <param name="relationTypeId">Id of the <see cref="T:Umbraco.Core.Models.IRelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IRelation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetPagedByRelationTypeId(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Services.Ordering)">
            <summary>
            Gets a paged result of <see cref="T:Umbraco.Core.Models.IRelation"/>
            </summary>
            <param name="relationTypeId"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalChildren"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetChildEntityFromRelation(Umbraco.Core.Models.IRelation)">
            <summary>
            Gets the Child object from a Relation as an <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/>
            </summary>
            <param name="relation">Relation to retrieve child object from</param>
            <returns>An <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetParentEntityFromRelation(Umbraco.Core.Models.IRelation)">
            <summary>
            Gets the Parent object from a Relation as an <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/>
            </summary>
            <param name="relation">Relation to retrieve parent object from</param>
            <returns>An <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetEntitiesFromRelation(Umbraco.Core.Models.IRelation)">
            <summary>
            Gets the Parent and Child objects from a Relation as a <see cref="T:System.Tuple"/>"/> with <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/>.
            </summary>
            <param name="relation">Relation to retrieve parent and child object from</param>
            <returns>Returns a Tuple with Parent (item1) and Child (item2)</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetChildEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation})">
            <summary>
            Gets the Child objects from a list of Relations as a list of <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/> objects.
            </summary>
            <param name="relations">List of relations to retrieve child objects from</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetParentEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation})">
            <summary>
            Gets the Parent objects from a list of Relations as a list of <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/> objects.
            </summary>
            <param name="relations">List of relations to retrieve parent objects from</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetPagedParentEntitiesByChildId(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Models.UmbracoObjectTypes[])">
            <summary>
            Returns paged parent entities for a related child id
            </summary>
            <param name="id"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalChildren"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetPagedChildEntitiesByParentId(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Models.UmbracoObjectTypes[])">
            <summary>
            Returns paged child entities for a related parent id
            </summary>
            <param name="id"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalChildren"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation})">
            <summary>
            Gets the Parent and Child objects from a list of Relations as a list of <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/> objects.
            </summary>
            <param name="relations">List of relations to retrieve parent and child objects from</param>
            <returns>An enumerable list of <see cref="T:System.Tuple"/> with <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Relate(System.Int32,System.Int32,Umbraco.Core.Models.IRelationType)">
            <summary>
            Relates two objects by their entity Ids.
            </summary>
            <param name="parentId">Id of the parent</param>
            <param name="childId">Id of the child</param>
            <param name="relationType">The type of relation to create</param>
            <returns>The created <see cref="T:Umbraco.Core.Models.IRelation"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Relate(Umbraco.Core.Models.Entities.IUmbracoEntity,Umbraco.Core.Models.Entities.IUmbracoEntity,Umbraco.Core.Models.IRelationType)">
            <summary>
            Relates two objects that are based on the <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/> interface.
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <param name="relationType">The type of relation to create</param>
            <returns>The created <see cref="T:Umbraco.Core.Models.IRelation"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Relate(System.Int32,System.Int32,System.String)">
            <summary>
            Relates two objects by their entity Ids.
            </summary>
            <param name="parentId">Id of the parent</param>
            <param name="childId">Id of the child</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>The created <see cref="T:Umbraco.Core.Models.IRelation"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Relate(Umbraco.Core.Models.Entities.IUmbracoEntity,Umbraco.Core.Models.Entities.IUmbracoEntity,System.String)">
            <summary>
            Relates two objects that are based on the <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/> interface.
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>The created <see cref="T:Umbraco.Core.Models.IRelation"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.HasRelations(Umbraco.Core.Models.IRelationType)">
            <summary>
            Checks whether any relations exists for the passed in <see cref="T:Umbraco.Core.Models.IRelationType"/>.
            </summary>
            <param name="relationType"><see cref="T:Umbraco.Core.Models.IRelationType"/> to check for relations</param>
            <returns>Returns <c>True</c> if any relations exists for the given <see cref="T:Umbraco.Core.Models.IRelationType"/>, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.IsRelated(System.Int32)">
            <summary>
            Checks whether any relations exists for the passed in Id.
            </summary>
            <param name="id">Id of an object to check relations for</param>
            <returns>Returns <c>True</c> if any relations exists with the given Id, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.AreRelated(System.Int32,System.Int32)">
            <summary>
            Checks whether two items are related
            </summary>
            <param name="parentId">Id of the Parent relation</param>
            <param name="childId">Id of the Child relation</param>
            <returns>Returns <c>True</c> if any relations exists with the given Ids, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.AreRelated(Umbraco.Core.Models.Entities.IUmbracoEntity,Umbraco.Core.Models.Entities.IUmbracoEntity)">
            <summary>
            Checks whether two items are related
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <returns>Returns <c>True</c> if any relations exist between the entities, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.AreRelated(Umbraco.Core.Models.Entities.IUmbracoEntity,Umbraco.Core.Models.Entities.IUmbracoEntity,System.String)">
            <summary>
            Checks whether two items are related
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>Returns <c>True</c> if any relations exist between the entities, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.AreRelated(System.Int32,System.Int32,System.String)">
            <summary>
            Checks whether two items are related
            </summary>
            <param name="parentId">Id of the Parent relation</param>
            <param name="childId">Id of the Child relation</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>Returns <c>True</c> if any relations exist between the entities, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Save(Umbraco.Core.Models.IRelation)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.IRelation"/>
            </summary>
            <param name="relation">Relation to save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Save(Umbraco.Core.Models.IRelationType)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.IRelationType"/>
            </summary>
            <param name="relationType">RelationType to Save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Delete(Umbraco.Core.Models.IRelation)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.IRelation"/>
            </summary>
            <param name="relation">Relation to Delete</param>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Delete(Umbraco.Core.Models.IRelationType)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.IRelationType"/>
            </summary>
            <param name="relationType">RelationType to Delete</param>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.DeleteRelationsOfType(Umbraco.Core.Models.IRelationType)">
            <summary>
            Deletes all <see cref="T:Umbraco.Core.Models.IRelation"/> objects based on the passed in <see cref="T:Umbraco.Core.Models.IRelationType"/>
            </summary>
            <param name="relationType"><see cref="T:Umbraco.Core.Models.IRelationType"/> to Delete Relations for</param>
        </member>
        <member name="M:Umbraco.Core.Services.IServerRegistrationService.TouchServer(System.String,System.String,System.TimeSpan)">
            <summary>
            Touches a server to mark it as active; deactivate stale servers.
            </summary>
            <param name="serverAddress">The server URL.</param>
            <param name="serverIdentity">The server unique identity.</param>
            <param name="staleTimeout">The time after which a server is considered stale.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IServerRegistrationService.DeactiveServer(System.String)">
            <summary>
            Deactivates a server.
            </summary>
            <param name="serverIdentity">The server unique identity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IServerRegistrationService.DeactiveStaleServers(System.TimeSpan)">
            <summary>
            Deactivates stale servers.
            </summary>
            <param name="staleTimeout">The time after which a server is considered stale.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IServerRegistrationService.GetActiveServers(System.Boolean)">
            <summary>
            Return all active servers.
            </summary>
            <param name="refresh">A value indicating whether to force-refresh the cache.</param>
            <returns>All active servers.</returns>
            <remarks>By default this method will rely on the repository's cache, which is updated each
            time the current server is touched, and the period depends on the configuration. Use the
            <paramref name="refresh"/> parameter to force a cache refresh and reload active servers
            from the database.</remarks>
        </member>
        <member name="P:Umbraco.Core.Services.IServerRegistrationService.CurrentServerIdentity">
            <summary>
            Gets the current server identity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IServerRegistrationService.GetCurrentServerRole">
            <summary>
            Gets the role of the current server.
            </summary>
            <returns>The role of the current server.</returns>
        </member>
        <member name="T:Umbraco.Core.Services.IService">
            <summary>
            Marker interface for services, which is used to store difference services in a list or dictionary
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.Services.ITagService" -->
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedEntityById(System.Int32)">
            <summary>
            Gets a tagged entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedEntityByKey(System.Guid)">
            <summary>
            Gets a tagged entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedContentByTagGroup(System.String,System.String)">
            <summary>
            Gets all documents tagged with any tag in the specified group.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedContentByTag(System.String,System.String,System.String)">
            <summary>
            Gets all documents tagged with the specified tag.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedMediaByTagGroup(System.String,System.String)">
            <summary>
            Gets all media tagged with any tag in the specified group.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedMediaByTag(System.String,System.String,System.String)">
            <summary>
            Gets all media tagged with the specified tag.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedMembersByTagGroup(System.String,System.String)">
            <summary>
            Gets all members tagged with any tag in the specified group.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedMembersByTag(System.String,System.String,System.String)">
            <summary>
            Gets all members tagged with the specified tag.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetAllTags(System.String,System.String)">
            <summary>
            Gets all tags.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetAllContentTags(System.String,System.String)">
            <summary>
            Gets all document tags.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetAllMediaTags(System.String,System.String)">
            <summary>
            Gets all media tags.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetAllMemberTags(System.String,System.String)">
            <summary>
            Gets all member tags.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTagsForProperty(System.Int32,System.String,System.String,System.String)">
            <summary>
            Gets all tags attached to an entity via a property.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTagsForEntity(System.Int32,System.String,System.String)">
            <summary>
            Gets all tags attached to an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTagsForProperty(System.Guid,System.String,System.String,System.String)">
            <summary>
            Gets all tags attached to an entity via a property.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTagsForEntity(System.Guid,System.String,System.String)">
            <summary>
            Gets all tags attached to an entity.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IUserService">
            <summary>
            Defines the UserService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> and eventually Users.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.CreateLoginSession(System.Int32,System.String)">
            <summary>
            Creates a database entry for starting a new login session for a user
            </summary>
            <param name="userId"></param>
            <param name="requestingIpAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.ValidateLoginSession(System.Int32,System.Guid)">
            <summary>
            Validates that a user login session is valid/current and hasn't been closed
            </summary>
            <param name="userId"></param>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.ClearLoginSession(System.Guid)">
            <summary>
            Removes the session's validity
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.ClearLoginSessions(System.Int32)">
            <summary>
            Removes all valid sessions for the user
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetUserStates">
            <summary>
            This is basically facets of UserStates key = state, value = count
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetAll(System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,Umbraco.Core.Models.Membership.UserState[],System.String[],System.String[],Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Membership.IUser})">
            <summary>
            Get paged users
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="userState"></param>
            <param name="includeUserGroups">
            A filter to only include user that belong to these user groups
            </param>
            <param name="excludeUserGroups">
            A filter to only include users that do not belong to these user groups
            </param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetAll(System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,Umbraco.Core.Models.Membership.UserState[],System.String[],System.String)">
            <summary>
            Get paged users
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="userState"></param>
            <param name="userGroups">
            A filter to only include user that belong to these user groups
            </param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.Delete(Umbraco.Core.Models.Membership.IUser,System.Boolean)">
            <summary>
            Deletes or disables a User
            </summary>
            <param name="user"><see cref="T:Umbraco.Core.Models.Membership.IUser"/> to delete</param>
            <param name="deletePermanently"><c>True</c> to permanently delete the user, <c>False</c> to disable the user</param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetProfileById(System.Int32)">
            <summary>
            Gets an IProfile by User Id.
            </summary>
            <param name="id">Id of the User to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetProfileByUserName(System.String)">
            <summary>
            Gets a profile by username
            </summary>
            <param name="username">Username</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetUserById(System.Int32)">
            <summary>
            Gets a user by Id
            </summary>
            <param name="id">Id of the user to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetUsersById(System.Int32[])">
            <summary>
            Gets a users by Id
            </summary>
            <param name="ids">Ids of the users to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.DeleteSectionFromAllUserGroups(System.String)">
            <summary>
            Removes a specific section from all user groups
            </summary>
            <remarks>This is useful when an entire section is removed from config</remarks>
            <param name="sectionAlias">Alias of the section to remove</param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetPermissions(Umbraco.Core.Models.Membership.IUser,System.Int32[])">
            <summary>
            Get explicitly assigned permissions for a user and optional node ids
            </summary>
            <remarks>If no permissions are found for a particular entity then the user's default permissions will be applied</remarks>
            <param name="user">User to retrieve permissions for</param>
            <param name="nodeIds">Specifying nothing will return all user permissions for all nodes that have explicit permissions defined</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Membership.EntityPermission"/></returns>
            <remarks>
            This will return the default permissions for the user's groups for node ids that don't have explicitly defined permissions
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetPermissions(Umbraco.Core.Models.Membership.IUserGroup[],System.Boolean,System.Int32[])">
            <summary>
            Get explicitly assigned permissions for groups and optional node Ids
            </summary>
            <param name="groups"></param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit permissions set
            </param>
            <param name="nodeIds">Specifying nothing will return all permissions for all nodes</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Membership.EntityPermission"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetPermissionsForPath(Umbraco.Core.Models.Membership.IUser,System.String)">
            <summary>
            Gets the implicit/inherited permissions for the user for the given path
            </summary>
            <param name="user">User to check permissions for</param>
            <param name="path">Path to check permissions for</param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetPermissionsForPath(Umbraco.Core.Models.Membership.IUserGroup[],System.String,System.Boolean)">
            <summary>
            Gets the permissions for the provided groups and path
            </summary>
            <param name="groups"></param>
            <param name="path">Path to check permissions for</param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit permissions set
            </param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.ReplaceUserGroupPermissions(System.Int32,System.Collections.Generic.IEnumerable{System.Char},System.Int32[])">
            <summary>
            Replaces the same permission set for a single group to any number of entities
            </summary>
            <param name="groupId">Id of the group</param>
            <param name="permissions">
            Permissions as enumerable list of <see cref="T:System.Char"/>,
            if no permissions are specified then all permissions for this node are removed for this group
            </param>
            <param name="entityIds">Specify the nodes to replace permissions for. If nothing is specified all permissions are removed.</param>
            <remarks>If no 'entityIds' are specified all permissions will be removed for the specified group.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.AssignUserGroupPermission(System.Int32,System.Char,System.Int32[])">
            <summary>
            Assigns the same permission set for a single user group to any number of entities
            </summary>
            <param name="groupId">Id of the group</param>
            <param name="permission"></param>
            <param name="entityIds">Specify the nodes to replace permissions for</param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetAllInGroup(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetAllNotInGroup(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects not associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetAllUserGroups(System.Int32[])">
            <summary>
            Gets all UserGroups or those specified as parameters
            </summary>
            <param name="ids">Optional Ids of UserGroups to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Membership.IUserGroup"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetUserGroupsByAlias(System.String[])">
            <summary>
            Gets a UserGroup by its Alias
            </summary>
            <param name="alias">Alias of the UserGroup to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUserGroup"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetUserGroupByAlias(System.String)">
            <summary>
            Gets a UserGroup by its Alias
            </summary>
            <param name="name">Name of the UserGroup to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUserGroup"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetUserGroupById(System.Int32)">
            <summary>
            Gets a UserGroup by its Id
            </summary>
            <param name="id">Id of the UserGroup to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUserGroup"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.Save(Umbraco.Core.Models.Membership.IUserGroup,System.Int32[],System.Boolean)">
            <summary>
            Saves a UserGroup
            </summary>
            <param name="userGroup">UserGroup to save</param>
            <param name="userIds">
            If null than no changes are made to the users who are assigned to this group, however if a value is passed in
            than all users will be removed from this group and only these users will be added
            </param>
            <param name="raiseEvents">Optional parameter to raise events.
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.DeleteUserGroup(Umbraco.Core.Models.Membership.IUserGroup)">
            <summary>
            Deletes a UserGroup
            </summary>
            <param name="userGroup">UserGroup to delete</param>
        </member>
        <member name="T:Umbraco.Core.Services.LocalizedTextServiceExtensions">
            <summary>
            Extension methods for ILocalizedTextService
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceExtensions.Localize(Umbraco.Core.Services.ILocalizedTextService,System.String,System.String[])">
            <summary>
            Localize using the current thread culture
            </summary>
            <param name="manager"></param>
            <param name="key"></param>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceExtensions.Localize(Umbraco.Core.Services.ILocalizedTextService,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Localize using the current thread culture
            </summary>
            <param name="manager"></param>
            <param name="key"></param>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceExtensions.Localize(Umbraco.Core.Services.ILocalizedTextService,System.String,System.Globalization.CultureInfo,System.String[])">
            <summary>
            Localize a key without any variables
            </summary>
            <param name="manager"></param>
            <param name="key"></param>
            <param name="culture"></param>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceExtensions.ConvertToDictionaryVars(System.String[])">
            <summary>
            Convert an array of strings to a dictionary of indices -> values
            </summary>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceExtensions.UmbracoDictionaryTranslate(Umbraco.Core.Services.ILocalizedTextService,System.String)">
            <summary>
            TODO: We need to refactor how we work with ICultureDictionary - this is supposed to be the 'fast' way to
            do readonly access to the Dictionary without using the ILocalizationService. See TODO Notes in `DefaultCultureDictionary`
            Also NOTE that the ICultureDictionary is based on the ILocalizationService not the ILocalizedTextService (which is used
            only for the localization files - not the dictionary)
            </summary>
            <param name="manager"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Services.MoveOperationStatusType">
            <summary>
            A status type of the result of moving an item
            </summary>
            <remarks>
            Anything less than 10 = Success!
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Services.MoveOperationStatusType.Success">
            <summary>
            The move was successful.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.MoveOperationStatusType.FailedParentNotFound">
            <summary>
            The parent being moved to doesn't exist
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.MoveOperationStatusType.FailedCancelledByEvent">
            <summary>
            The move action has been cancelled by an event handler
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.MoveOperationStatusType.FailedNotAllowedByPath">
            <summary>
            Trying to move an item to an invalid path (i.e. a child of itself)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.OperationResult`1">
            <summary>
            Represents the result of a service operation.
            </summary>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <remarks>Type <typeparamref name="TResultType"/> must be an enumeration, and its
            underlying type must be byte. Values indicating success should be in the 0-127
            range, while values indicating failure should be in the 128-255 range. See
            <see cref="T:Umbraco.Core.Services.OperationResultType"/> for a base implementation.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.OperationResult`1.#ctor(`0,Umbraco.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Services.OperationResult`1"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.OperationResult`1.Success">
            <summary>
            Gets a value indicating whether the operation was successful.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.OperationResult`1.Result">
            <summary>
            Gets the result of the operation.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.OperationResult`1.EventMessages">
            <summary>
            Gets the event messages produced by the operation.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.OperationResult`2">
            <inheritdoc />
            <summary>
            Represents the result of a service operation for a given entity.
            </summary>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <remarks>Type <typeparamref name="TResultType"/> must be an enumeration, and its
            underlying type must be byte. Values indicating success should be in the 0-127
            range, while values indicating failure should be in the 128-255 range. See
            <see cref="T:Umbraco.Core.Services.OperationResultType"/> for a base implementation.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.OperationResult`2.#ctor(`0,Umbraco.Core.Events.EventMessages)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Services.OperationResult`2"/> class.
            </summary>
            <param name="result">The status of the operation.</param>
            <param name="eventMessages">Event messages produced by the operation.</param>
        </member>
        <member name="M:Umbraco.Core.Services.OperationResult`2.#ctor(`0,Umbraco.Core.Events.EventMessages,`1)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Services.OperationResult`2"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.OperationResult`2.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.OperationResult">
            <inheritdoc />
            <summary>
            Represents the default operation result.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.OperationResult.#ctor(Umbraco.Core.Services.OperationResultType,Umbraco.Core.Events.EventMessages)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Services.OperationResult" /> class with a status and event messages.
            </summary>
            <param name="result">The status of the operation.</param>
            <param name="eventMessages">Event messages produced by the operation.</param>
        </member>
        <member name="M:Umbraco.Core.Services.OperationResult.Attempt.Succeed(Umbraco.Core.Events.EventMessages)">
            <summary>
            Creates a successful operation attempt.
            </summary>
            <param name="eventMessages">The event messages produced by the operation.</param>
            <returns>A new attempt instance.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.OperationResult.Attempt.NoOperation(Umbraco.Core.Events.EventMessages)">
            <summary>
            Creates a successful operation attempt indicating that nothing was done.
            </summary>
            <param name="eventMessages">The event messages produced by the operation.</param>
            <returns>A new attempt instance.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.OperationResult.Attempt.Cancel(Umbraco.Core.Events.EventMessages)">
            <summary>
            Creates a failed operation attempt indicating that the operation has been cancelled.
            </summary>
            <param name="eventMessages">The event messages produced by the operation.</param>
            <returns>A new attempt instance.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.OperationResult.Attempt.Fail(Umbraco.Core.Events.EventMessages,System.Exception)">
            <summary>
            Creates a failed operation attempt indicating that an exception was thrown during the operation.
            </summary>
            <param name="eventMessages">The event messages produced by the operation.</param>
            <param name="exception">The exception that caused the operation to fail.</param>
            <returns>A new attempt instance.</returns>
        </member>
        <member name="T:Umbraco.Core.Services.OperationResultType">
            <summary>
            A value indicating the result of an operation.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.OperationResultType.Success">
            <summary>
            The operation was successful.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.OperationResultType.Failed">
            <summary>
            The operation failed.
            </summary>
            <remarks>All values above this value indicate a failure.</remarks>
        </member>
        <member name="F:Umbraco.Core.Services.OperationResultType.FailedCannot">
            <summary>
            The operation could not complete because of invalid preconditions (eg creating a reference
            to an item that does not exist).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.OperationResultType.FailedCancelledByEvent">
            <summary>
            The operation has been cancelled by an event handler.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.OperationResultType.FailedExceptionThrown">
            <summary>
            The operation could not complete due to an exception.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.OperationResultType.NoOperation">
            <summary>
            No operation has been executed because it was not needed (eg deleting an item that doesn't exist).
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.Ordering">
            <summary>
            Represents ordering information.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.Ordering.#ctor(System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Services.Ordering"/> class.
            </summary>
            <param name="orderBy">The name of the ordering field.</param>
            <param name="direction">The ordering direction.</param>
            <param name="culture">The (ISO) culture to consider when sorting multi-lingual fields.</param>
            <param name="isCustomField">A value indicating whether the ordering field is a custom user property.</param>
            <remarks>
            <para>The <paramref name="orderBy"/> can be null, meaning: not sorting. If it is the empty string, it becomes null.</para>
            <para>The <paramref name="culture"/> can be the empty string, meaning: invariant. If it is null, it becomes the empty string.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Ordering.By(System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Umbraco.Core.Services.Ordering"/> class.
            </summary>
            <param name="orderBy">The name of the ordering field.</param>
            <param name="direction">The ordering direction.</param>
            <param name="culture">The (ISO) culture to consider when sorting multi-lingual fields.</param>
            <param name="isCustomField">A value indicating whether the ordering field is a custom user property.</param>
            <remarks>
            <para>The <paramref name="orderBy"/> can be null, meaning: not sorting. If it is the empty string, it becomes null.</para>
            <para>The <paramref name="culture"/> can be the empty string, meaning: invariant. If it is null, it becomes the empty string.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.Ordering.ByDefault">
            <summary>
            Gets the default <see cref="T:Umbraco.Core.Services.Ordering"/> instance.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.Ordering.OrderBy">
            <summary>
            Gets the name of the ordering field.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.Ordering.Direction">
            <summary>
            Gets the ordering direction.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.Ordering.Culture">
            <summary>
            Gets (ISO) culture to consider when sorting multi-lingual fields.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.Ordering.IsCustomField">
            <summary>
            Gets a value indicating whether the ordering field is a custom user property.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.Ordering.IsEmpty">
            <summary>
            Gets a value indicating whether this ordering is the default ordering.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.Ordering.IsInvariant">
            <summary>
            Gets a value indicating whether the culture of this ordering is invariant.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.PublicAccessServiceExtensions">
            <summary>
            Extension methods for the IPublicAccessService
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.PublicAccessServiceExtensions.HasAccess(Umbraco.Core.Services.IPublicAccessService,System.String,System.String,System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Checks if the member with the specified username has access to the path which is also based on the passed in roles for the member
            </summary>
            <param name="publicAccessService"></param>
            <param name="path"></param>
            <param name="username"></param>
            <param name="rolesCallback">A callback to retrieve the roles for this member</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Services.PublishResult">
            <summary>
            Represents the result of publishing a document.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.PublishResult.#ctor(Umbraco.Core.Services.PublishResultType,Umbraco.Core.Events.EventMessages,Umbraco.Core.Models.IContent)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Services.PublishResult"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.PublishResult.#ctor(Umbraco.Core.Events.EventMessages,Umbraco.Core.Models.IContent)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Services.PublishResult"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.PublishResult.Content">
            <summary>
            Gets the document.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.PublishResult.InvalidProperties">
            <summary>
            Gets or sets the invalid properties, if the status failed due to validation.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.PublishResultType">
            <summary>
            A value indicating the result of publishing or unpublishing a document.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.SuccessPublish">
            <summary>
            The document was successfully published.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.SuccessPublishCulture">
            <summary>
            The specified document culture was successfully published.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.SuccessPublishAlready">
            <summary>
            The document was already published.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.SuccessUnpublish">
            <summary>
            The document was successfully unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.SuccessUnpublishAlready">
            <summary>
            The document was already unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.SuccessUnpublishCulture">
            <summary>
            The specified document culture was unpublished, the document item itself remains published.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.SuccessUnpublishMandatoryCulture">
            <summary>
            The specified document culture was unpublished, and was a mandatory culture, therefore the document itself was unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.SuccessUnpublishLastCulture">
            <summary>
            The specified document culture was unpublished, and was the last published culture in the document, therefore the document itself was unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.SuccessMixedCulture">
            <summary>
            Specified document cultures were successfully published and unpublished (in the same operation).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedPublish">
            <summary>
            The operation failed.
            </summary>
            <remarks>All values above this value indicate a failure.</remarks>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedPublishPathNotPublished">
            <summary>
            The document could not be published because its ancestor path is not published.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedPublishHasExpired">
            <summary>
            The document has expired so we cannot force it to be
            published again as part of a bulk publish operation.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedPublishAwaitingRelease">
            <summary>
            The document is scheduled to be released in the future and therefore we cannot force it to
            be published during a bulk publish operation.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedPublishCultureHasExpired">
            <summary>
            A document culture has expired so we cannot force it to be
            published again as part of a bulk publish operation.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedPublishCultureAwaitingRelease">
            <summary>
            A document culture is scheduled to be released in the future and therefore we cannot force it to
            be published during a bulk publish operation.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedPublishIsTrashed">
            <summary>
            The document could not be published because it is in the trash.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedPublishCancelledByEvent">
            <summary>
            The publish action has been cancelled by an event handler.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedPublishContentInvalid">
            <summary>
            The document could not be published because it contains invalid data (has not passed validation requirements).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedPublishNothingToPublish">
            <summary>
            The document could not be published because it has no publishing flags or values or if its a variant document, no cultures were specified to be published.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedPublishMandatoryCultureMissing">
            <summary>
            The document could not be published because some mandatory cultures are missing.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedPublishConcurrencyViolation">
            <summary>
            The document could not be published because it has been modified by another user. 
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedUnpublish">
            <summary>
            The document could not be unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.PublishResultType.FailedUnpublishCancelledByEvent">
            <summary>
            The unpublish action has been cancelled by an event handler.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.ServiceContext">
            <summary>
            Represents the Umbraco Service context, which provides access to all services.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ServiceContext.#ctor(System.Lazy{Umbraco.Core.Services.IPublicAccessService},System.Lazy{Umbraco.Core.Services.IDomainService},System.Lazy{Umbraco.Core.Services.IAuditService},System.Lazy{Umbraco.Core.Services.ILocalizedTextService},System.Lazy{Umbraco.Core.Services.ITagService},System.Lazy{Umbraco.Core.Services.IContentService},System.Lazy{Umbraco.Core.Services.IUserService},System.Lazy{Umbraco.Core.Services.IMemberService},System.Lazy{Umbraco.Core.Services.IMediaService},System.Lazy{Umbraco.Core.Services.IContentTypeService},System.Lazy{Umbraco.Core.Services.IMediaTypeService},System.Lazy{Umbraco.Core.Services.IDataTypeService},System.Lazy{Umbraco.Core.Services.IFileService},System.Lazy{Umbraco.Core.Services.ILocalizationService},System.Lazy{Umbraco.Core.Services.IPackagingService},System.Lazy{Umbraco.Core.Services.IServerRegistrationService},System.Lazy{Umbraco.Core.Services.IEntityService},System.Lazy{Umbraco.Core.Services.IRelationService},System.Lazy{Umbraco.Core.Services.IMacroService},System.Lazy{Umbraco.Core.Services.IMemberTypeService},System.Lazy{Umbraco.Core.Services.IMemberGroupService},System.Lazy{Umbraco.Core.Services.INotificationService},System.Lazy{Umbraco.Core.Services.IExternalLoginService},System.Lazy{Umbraco.Core.Services.IRedirectUrlService},System.Lazy{Umbraco.Core.Services.IConsentService},System.Lazy{Umbraco.Core.Services.IContentTypeBaseServiceProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Services.ServiceContext"/> class with lazy services.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ServiceContext.CreatePartial(Umbraco.Core.Services.IContentService,Umbraco.Core.Services.IMediaService,Umbraco.Core.Services.IContentTypeService,Umbraco.Core.Services.IMediaTypeService,Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Services.IFileService,Umbraco.Core.Services.ILocalizationService,Umbraco.Core.Services.IPackagingService,Umbraco.Core.Services.IEntityService,Umbraco.Core.Services.IRelationService,Umbraco.Core.Services.IMemberGroupService,Umbraco.Core.Services.IMemberTypeService,Umbraco.Core.Services.IMemberService,Umbraco.Core.Services.IUserService,Umbraco.Core.Services.ITagService,Umbraco.Core.Services.INotificationService,Umbraco.Core.Services.ILocalizedTextService,Umbraco.Core.Services.IAuditService,Umbraco.Core.Services.IDomainService,Umbraco.Core.Services.IMacroService,Umbraco.Core.Services.IPublicAccessService,Umbraco.Core.Services.IExternalLoginService,Umbraco.Core.Services.IServerRegistrationService,Umbraco.Core.Services.IRedirectUrlService,Umbraco.Core.Services.IConsentService,Umbraco.Core.Services.IContentTypeBaseServiceProvider)">
            <summary>
            Creates a partial service context with only some services (for tests).
            </summary>
            <remarks>
            <para>Using a true constructor for this confuses DI containers.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.PublicAccessService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IPublicAccessService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.DomainService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IDomainService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.AuditService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IAuditService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.TextService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.ILocalizedTextService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.NotificationService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.INotificationService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.ServerRegistrationService">
            <summary>
            Gets the <see cref="P:Umbraco.Core.Services.ServiceContext.ServerRegistrationService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.TagService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.ITagService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MacroService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IMacroService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.EntityService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IEntityService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.RelationService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IRelationService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.ContentService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IContentService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.ContentTypeService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IContentTypeService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MediaTypeService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IMediaTypeService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.DataTypeService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IDataTypeService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.FileService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IFileService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.LocalizationService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.ILocalizationService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MediaService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IMediaService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.PackagingService">
            <summary>
            Gets the <see cref="P:Umbraco.Core.Services.ServiceContext.PackagingService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.UserService">
            <summary>
            Gets the <see cref="P:Umbraco.Core.Services.ServiceContext.UserService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MemberService">
            <summary>
            Gets the <see cref="P:Umbraco.Core.Services.ServiceContext.MemberService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MemberTypeService">
            <summary>
            Gets the MemberTypeService
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MemberGroupService">
            <summary>
            Gets the MemberGroupService
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.ExternalLoginService">
            <summary>
            Gets the ExternalLoginService.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.RedirectUrlService">
            <summary>
            Gets the RedirectUrlService.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.ConsentService">
            <summary>
            Gets the ConsentService.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.ContentTypeBaseServices">
            <summary>
            Gets the ContentTypeServiceBaseFactory.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.UserServiceExtensions.GetPermissions(Umbraco.Core.Services.IUserService,Umbraco.Core.Models.Membership.IUserGroup,System.Boolean,System.Int32[])">
            <summary>
            Get explicitly assigned permissions for a group and optional node Ids
            </summary>
            <param name="service"></param>
            <param name="group"></param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit permissions set
            </param>
            <param name="nodeIds">Specifying nothing will return all permissions for all nodes</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Membership.EntityPermission"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserServiceExtensions.GetPermissionsForPath(Umbraco.Core.Services.IUserService,Umbraco.Core.Models.Membership.IUserGroup,System.String,System.Boolean)">
            <summary>
            Gets the permissions for the provided group and path
            </summary>
            <param name="service"></param>
            <param name="group"></param>
            <param name="path">Path to check permissions for</param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit permissions set
            </param>
        </member>
        <member name="M:Umbraco.Core.Services.UserServiceExtensions.RemoveUserGroupPermissions(Umbraco.Core.Services.IUserService,System.Int32,System.Int32[])">
            <summary>
            Remove all permissions for this user group for all nodes specified
            </summary>
            <param name="userService"></param>
            <param name="groupId"></param>
            <param name="entityIds"></param>
        </member>
        <member name="M:Umbraco.Core.Services.UserServiceExtensions.RemoveUserGroupPermissions(Umbraco.Core.Services.IUserService,System.Int32)">
            <summary>
            Remove all permissions for this user group for all nodes
            </summary>
            <param name="userService"></param>
            <param name="groupId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.UserServiceExtensions.CreateUserMappingForCustomProvider(Umbraco.Core.Services.IUserService,System.Web.Security.MembershipUser)">
            <summary>
            Maps a custom provider's information to an umbraco user account
            </summary>
            <param name="userService"></param>
            <param name="member"></param>
            <remarks>
            To maintain compatibility we have to check the login name if the provider key lookup fails but otherwise
            we'll store the provider user key in the login column.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.UserServiceExtensions.GetAssignedPermissions(Umbraco.Core.Services.IUserService,Umbraco.Core.Models.Membership.IUser,System.Int32)">
            <summary>
            Gets the concrete assigned permissions for the provided user and node
            </summary>
            <param name="userService"></param>
            <param name="user"></param>
            <param name="nodeId"></param>
        </member>
        <member name="T:Umbraco.Core.Runtime.IMainDomLock">
            <summary>
            An application-wide distributed lock
            </summary>
            <remarks>
            Disposing releases the lock
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Runtime.IMainDomLock.AcquireLockAsync(System.Int32)">
            <summary>
            Acquires an application-wide distributed lock
            </summary>
            <param name="millisecondsTimeout"></param>
            <returns>
            An awaitable boolean value which will be false if the elapsed millsecondsTimeout value is exceeded
            </returns>
        </member>
        <member name="M:Umbraco.Core.Runtime.IMainDomLock.ListenAsync">
            <summary>
            Wait on a background thread to receive a signal from another AppDomain
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Runtime.MainDomSemaphoreLock">
            <summary>
            Uses a system-wide Semaphore and EventWaitHandle to synchronize the current AppDomain
            </summary>
        </member>
        <member name="P:Umbraco.Core.Runtime.SqlMainDomLock.MainDomKey">
            <summary>
            Returns the keyvalue table key for the current server/app
            </summary>
            <remarks>
            The key is the the normal MainDomId which takes into account the AppDomainAppId and the physical file path of the app and this is
            combined with the current machine name. The machine name is required because the default semaphore lock is machine wide so it implicitly
            takes into account machine name whereas this needs to be explicitly per machine.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Runtime.SqlMainDomLock.WaitForExistingAsync(System.String,System.Int32)">
            <summary>
            Wait for any existing MainDom to release so we can continue booting
            </summary>
            <param name="tempId"></param>
            <param name="millisecondsTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Runtime.SqlMainDomLock.InsertLockRecord(System.String,Umbraco.Core.Persistence.IUmbracoDatabase)">
            <summary>
            Inserts or updates the key/value row 
            </summary>
        </member>
        <member name="M:Umbraco.Core.Runtime.SqlMainDomLock.IsMainDomValue(System.String,Umbraco.Core.Persistence.IUmbracoDatabase)">
            <summary>
            Checks if the DB row value is equals the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Runtime.SqlMainDomLock.IsLockTimeoutException(System.Data.SqlClient.SqlException)">
            <summary>
            Checks if the exception is an SQL timeout
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Runtime.CoreRuntime">
            <summary>
            Represents the Core Umbraco runtime.
            </summary>
            <remarks>Does not handle any of the web-related aspects of Umbraco (startup, etc). It
            should be possible to use this runtime in console apps.</remarks>
        </member>
        <member name="P:Umbraco.Core.Runtime.CoreRuntime.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Runtime.CoreRuntime.Profiler">
            <summary>
            Gets the profiler.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Runtime.CoreRuntime.ProfilingLogger">
            <summary>
            Gets the profiling logger.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Runtime.CoreRuntime.State">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Runtime.CoreRuntime.Boot(Umbraco.Core.Composing.IRegister)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Runtime.CoreRuntime.Boot(Umbraco.Core.Composing.IRegister,Umbraco.Core.Logging.DisposableTimer)">
            <summary>
            Boots the runtime within a timer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Runtime.CoreRuntime.Terminate">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Runtime.CoreRuntime.Compose(Umbraco.Core.Composing.Composition)">
            <summary>
            Composes the runtime.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Runtime.CoreRuntime.GetComposerTypes(Umbraco.Core.Composing.TypeLoader)">
            <summary>
            Gets all composer types.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Runtime.CoreRuntime.GetProfiler">
            <summary>
            Gets a profiler.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Runtime.CoreRuntime.GetAppCaches">
            <summary>
            Gets the application caches.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Runtime.CoreRuntime.GetDatabaseFactory">
            <summary>
            Gets the database factory.
            </summary>
            <remarks>This is strictly internal, for tests only.</remarks>
        </member>
        <member name="M:Umbraco.Core.Runtime.CoreRuntime.GetConfigs">
            <summary>
            Gets the configurations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Runtime.MainDom">
            <summary>
            Provides the full implementation of <see cref="T:Umbraco.Core.IMainDom"/>.
            </summary>
            <remarks>
            <para>When an AppDomain starts, it tries to acquire the main domain status.</para>
            <para>When an AppDomain stops (eg the application is restarting) it should release the main domain status.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Runtime.MainDom.Register(System.Action,System.Int32)">
            <summary>
            Registers a resource that requires the current AppDomain to be the main domain to function.
            </summary>
            <param name="release">An action to execute before the AppDomain releases the main domain status.</param>
            <param name="weight">An optional weight (lower goes first).</param>
            <returns>A value indicating whether it was possible to register.</returns>
        </member>
        <member name="M:Umbraco.Core.Runtime.MainDom.Register(System.Action,System.Action,System.Int32)">
            <summary>
            Registers a resource that requires the current AppDomain to be the main domain to function.
            </summary>
            <param name="install">An action to execute when registering.</param>
            <param name="release">An action to execute before the AppDomain releases the main domain status.</param>
            <param name="weight">An optional weight (lower goes first).</param>
            <returns>A value indicating whether it was possible to register.</returns>
            <remarks>If registering is successful, then the <paramref name="install"/> action
            is guaranteed to execute before the AppDomain releases the main domain status.</remarks>
        </member>
        <member name="P:Umbraco.Core.Runtime.MainDom.IsMainDom">
            <summary>
            Gets a value indicating whether the current domain is the main domain.
            </summary>
            <remarks>
            The lazy initializer call will only call the Acquire callback when it's not been initialized, else it will just return
            the value from _isMainDom which means when we set _isMainDom to false again after being signaled, this will return false;
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Attempt">
            <summary>
            Provides ways to create attempts.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Attempt.Succeed``1(``0)">
            <summary>
            Creates a successful attempt with a result.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <param name="result">The result of the attempt.</param>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt.SucceedWithStatus``2(``1,``0)">
            <summary>
            Creates a successful attempt with a result and a status.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <typeparam name="TStatus">The type of the attempted operation status.</typeparam>
            <param name="status">The status of the attempt.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt.Fail``1">
            <summary>
            Creates a failed attempt.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt.Fail``1(``0)">
            <summary>
            Creates a failed attempt with a result.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <param name="result">The result of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt.FailWithStatus``2(``1,``0)">
            <summary>
            Creates a failed attempt with a result and a status.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <typeparam name="TStatus">The type of the attempted operation status.</typeparam>
            <param name="status">The status of the attempt.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt.Fail``1(``0,System.Exception)">
            <summary>
            Creates a failed attempt with a result and an exception.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <param name="result">The result of the attempt.</param>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt.FailWithStatus``2(``1,``0,System.Exception)">
            <summary>
            Creates a failed attempt with a result, an exception and a status.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <typeparam name="TStatus">The type of the attempted operation status.</typeparam>
            <param name="status">The status of the attempt.</param>
            <param name="result">The result of the attempt.</param>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt.If``1(System.Boolean,``0)">
            <summary>
            Creates a successful or a failed attempt, with a result.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt.IfWithStatus``2(System.Boolean,``1,``1,``0)">
            <summary>
            Creates a successful or a failed attempt, with a result.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <typeparam name="TStatus">The type of the attempted operation status.</typeparam>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <param name="succStatus">The status of the successful attempt.</param>
            <param name="failStatus">The status of the failed attempt.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="T:Umbraco.Core.Attempt`1">
            <summary>
            Represents the result of an operation attempt.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
        </member>
        <member name="P:Umbraco.Core.Attempt`1.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:Umbraco.Core.Attempt`1"/> was successful.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Attempt`1.Exception">
            <summary>
            Gets the exception associated with an unsuccessful attempt.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Attempt`1.Result">
            <summary>
            Gets the attempt result.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.ResultOr(`0)">
            <summary>
            Gets the attempt result, if successful, else a default value.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.Succeed">
            <summary>
            Creates a successful attempt.
            </summary>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.Succeed(`0)">
            <summary>
            Creates a successful attempt with a result.
            </summary>
            <param name="result">The result of the attempt.</param>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.Fail">
            <summary>
            Creates a failed attempt.
            </summary>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.Fail(System.Exception)">
            <summary>
            Creates a failed attempt with an exception.
            </summary>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.Fail(`0)">
            <summary>
            Creates a failed attempt with a result.
            </summary>
            <param name="result">The result of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.Fail(`0,System.Exception)">
            <summary>
            Creates a failed attempt with a result and an exception.
            </summary>
            <param name="result">The result of the attempt.</param>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.If(System.Boolean)">
            <summary>
            Creates a successful or a failed attempt.
            </summary>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.If(System.Boolean,`0)">
            <summary>
            Creates a successful or a failed attempt, with a result.
            </summary>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.op_Implicit(Umbraco.Core.Attempt{`0})~System.Boolean">
            <summary>
            Implicitly operator to check if the attempt was successful without having to access the 'success' property
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Attempt`2">
            <summary>
            Represents the result of an operation attempt.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <typeparam name="TStatus">The type of the attempted operation status.</typeparam>
        </member>
        <member name="P:Umbraco.Core.Attempt`2.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:Umbraco.Core.Attempt`2"/> was successful.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Attempt`2.Exception">
            <summary>
            Gets the exception associated with an unsuccessful attempt.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Attempt`2.Result">
            <summary>
            Gets the attempt result.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Attempt`2.Status">
            <summary>
            Gets the attempt status.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Attempt`2.Succeed(`1)">
            <summary>
            Creates a successful attempt.
            </summary>
            <param name="status">The status of the attempt.</param>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`2.Succeed(`1,`0)">
            <summary>
            Creates a successful attempt with a result.
            </summary>
            <param name="status">The status of the attempt.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`2.Fail(`1)">
            <summary>
            Creates a failed attempt.
            </summary>
            <param name="status">The status of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`2.Fail(`1,System.Exception)">
            <summary>
            Creates a failed attempt with an exception.
            </summary>
            <param name="status">The status of the attempt.</param>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`2.Fail(`1,`0)">
            <summary>
            Creates a failed attempt with a result.
            </summary>
            <param name="status">The status of the attempt.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`2.Fail(`1,`0,System.Exception)">
            <summary>
            Creates a failed attempt with a result and an exception.
            </summary>
            <param name="status">The status of the attempt.</param>
            <param name="result">The result of the attempt.</param>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`2.If(System.Boolean,`1,`1)">
            <summary>
            Creates a successful or a failed attempt.
            </summary>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <param name="succStatus">The status of the successful attempt.</param>
            <param name="failStatus">The status of the failed attempt.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`2.If(System.Boolean,`1,`1,`0)">
            <summary>
            Creates a successful or a failed attempt, with a result.
            </summary>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <param name="succStatus">The status of the successful attempt.</param>
            <param name="failStatus">The status of the failed attempt.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`2.op_Implicit(Umbraco.Core.Attempt{`0,`1})~System.Boolean">
            <summary>
            Implicitly operator to check if the attempt was successful without having to access the 'success' property
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Cache.AppPolicedCacheDictionary`1">
            <summary>
            Provides a base class for implementing a dictionary of <see cref="T:Umbraco.Core.Cache.IAppPolicyCache"/>.
            </summary>
            <typeparam name="TKey">The type of the dictionary key.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Cache.AppPolicedCacheDictionary`1.#ctor(System.Func{`0,Umbraco.Core.Cache.IAppPolicyCache})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.AppPolicedCacheDictionary`1"/> class.
            </summary>
            <param name="cacheFactory"></param>
        </member>
        <member name="F:Umbraco.Core.Cache.AppPolicedCacheDictionary`1.CacheFactory">
            <summary>
            Gets the internal cache factory, for tests only!
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.AppPolicedCacheDictionary`1.GetOrCreate(`0)">
            <summary>
            Gets or creates a cache.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.AppPolicedCacheDictionary`1.Get(`0)">
            <summary>
            Tries to get a cache.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.AppPolicedCacheDictionary`1.Remove(`0)">
            <summary>
            Removes a cache.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.AppPolicedCacheDictionary`1.RemoveAll">
            <summary>
            Removes all caches.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.AppPolicedCacheDictionary`1.ClearCache(`0)">
            <summary>
            Clears a cache.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.AppPolicedCacheDictionary`1.ClearAllCaches">
            <summary>
            Clears all caches.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.AppCaches">
            <summary>
            Represents the application caches.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.AppCaches.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.AppCaches"/> for use in a web application.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.AppCaches.#ctor(System.Web.Caching.Cache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.AppCaches"/> for use in a web application.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.AppCaches.#ctor(Umbraco.Core.Cache.IAppPolicyCache,Umbraco.Core.Cache.IAppCache,Umbraco.Core.Cache.IsolatedCaches)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.AppCaches"/> with cache providers.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Cache.AppCaches.Disabled">
            <summary>
            Gets the special disabled instance.
            </summary>
            <remarks>
            <para>When used by repositories, all cache policies apply, but the underlying caches do not cache anything.</para>
            <para>Used by tests.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Cache.AppCaches.NoCache">
            <summary>
            Gets the special no-cache instance.
            </summary>
            <remarks>
            <para>When used by repositories, all cache policies are bypassed.</para>
            <para>Used by repositories that do no cache.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Cache.AppCaches.RequestCache">
            <summary>
            Gets the per-request cache.
            </summary>
            <remarks>
            <para>The per-request caches works on top of the current HttpContext items.</para>
            <para>Outside a web environment, the behavior of that cache is unspecified.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Cache.AppCaches.RuntimeCache">
            <summary>
            Gets the runtime cache.
            </summary>
            <remarks>
            <para>The runtime cache is the main application cache.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Cache.AppCaches.IsolatedCaches">
            <summary>
            Gets the isolated caches.
            </summary>
            <remarks>
            <para>Isolated caches are used by e.g. repositories, to ensure that each cached entity
            type has its own cache, so that lookups are fast and the repository does not need to
            search through all keys on a global scale.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Cache.CacheKeys">
            <summary>
            Constants storing cache keys used in caching
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.AppCacheExtensions">
            <summary>
            Extensions for strongly typed access
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.CacheRefresherBase`1">
            <summary>
            A base class for cache refreshers that handles events.
            </summary>
            <typeparam name="TInstanceType">The actual cache refresher type.</typeparam>
            <remarks>The actual cache refresher type is used for strongly typed events.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.CacheRefresherBase`1.#ctor(Umbraco.Core.Cache.AppCaches)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.CacheRefresherBase`1"/>.
            </summary>
            <param name="appCaches">A cache helper.</param>
        </member>
        <member name="E:Umbraco.Core.Cache.CacheRefresherBase`1.CacheUpdated">
            <summary>
            Triggers when the cache is updated on the server.
            </summary>
            <remarks>
            Triggers on each server configured for an Umbraco project whenever a cache refresher is updated.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Cache.CacheRefresherBase`1.This">
            <summary>
            Gets the typed 'this' for events.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Cache.CacheRefresherBase`1.RefresherUniqueId">
            <summary>
            Gets the unique identifier of the refresher.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Cache.CacheRefresherBase`1.Name">
            <summary>
            Gets the name of the refresher.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.CacheRefresherBase`1.RefreshAll">
            <summary>
            Refreshes all entities.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.CacheRefresherBase`1.Refresh(System.Int32)">
            <summary>
            Refreshes an entity.
            </summary>
            <param name="id">The entity's identifier.</param>
        </member>
        <member name="M:Umbraco.Core.Cache.CacheRefresherBase`1.Refresh(System.Guid)">
            <summary>
            Refreshes an entity.
            </summary>
            <param name="id">The entity's identifier.</param>
        </member>
        <member name="M:Umbraco.Core.Cache.CacheRefresherBase`1.Remove(System.Int32)">
            <summary>
            Removes an entity.
            </summary>
            <param name="id">The entity's identifier.</param>
        </member>
        <member name="P:Umbraco.Core.Cache.CacheRefresherBase`1.AppCaches">
            <summary>
            Gets the cache helper.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.CacheRefresherBase`1.ClearAllIsolatedCacheByEntityType``1">
            <summary>
            Clears the cache for all repository entities of a specified type.
            </summary>
            <typeparam name="TEntity">The type of the entities.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Cache.CacheRefresherBase`1.OnCacheUpdated(`0,Umbraco.Core.Cache.CacheRefresherEventArgs)">
            <summary>
            Raises the CacheUpdated event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="T:Umbraco.Core.Cache.CacheRefresherEventArgs">
            <summary>
            Event args for cache refresher updates
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.DeepCloneAppCache">
            <summary>
            Implements <see cref="T:Umbraco.Core.Cache.IAppPolicyCache"/> by wrapping an inner other <see cref="T:Umbraco.Core.Cache.IAppPolicyCache"/>
            instance, and ensuring that all inserts and returns are deep cloned copies of the cache item,
            when the item is deep-cloneable.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.#ctor(Umbraco.Core.Cache.IAppPolicyCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.DeepCloneAppCache"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Cache.DeepCloneAppCache.InnerCache">
            <summary>
            Gets the inner cache.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.SearchByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.SearchByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.Get(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.Insert(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.Clear(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.ClearOfType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.ClearOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.ClearByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DeepCloneAppCache.ClearByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2">
            <summary>
            Represents the default cache policy.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TId">The type of the identifier.</typeparam>
            <remarks>
            <para>The default cache policy caches entities with a 5 minutes sliding expiration.</para>
            <para>Each entity is cached individually.</para>
            <para>If options.GetAllCacheAllowZeroCount then a 'zero-count' array is cached when GetAll finds nothing.</para>
            <para>If options.GetAllCacheValidateCount then we check against the db when getting many entities.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2.Create(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2.Update(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2.Delete(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2.Get(`1,System.Func{`1,`0},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2.GetCached(`1)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2.Exists(`1,System.Func{`1,System.Boolean},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2.GetAll(`1[],System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2.ClearAll">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Cache.FastDictionaryAppCache">
            <summary>
            Implements a fast <see cref="T:Umbraco.Core.Cache.IAppCache"/> on top of a concurrent dictionary.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Cache.FastDictionaryAppCache.Items">
            <summary>
            Gets the internal items dictionary, for tests only!
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCache.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCache.SearchByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCache.SearchByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCache.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCache.Clear(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCache.ClearOfType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCache.ClearOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCache.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCache.ClearByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCache.ClearByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Cache.FastDictionaryAppCacheBase">
            <summary>
            Provides a base class to fast, dictionary-based <see cref="T:Umbraco.Core.Cache.IAppCache"/> implementations.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCacheBase.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCacheBase.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCacheBase.SearchByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCacheBase.SearchByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCacheBase.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCacheBase.Clear(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCacheBase.ClearOfType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCacheBase.ClearOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCacheBase.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCacheBase.ClearByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FastDictionaryAppCacheBase.ClearByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2">
            <summary>
            Represents a caching policy that caches the entire entities set as a single collection.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TId">The type of the identifier.</typeparam>
            <remarks>
            <para>Caches the entire set of entities as a single collection.</para>
            <para>Used by Content-, Media- and MemberTypeRepository, DataTypeRepository, DomainRepository,
            LanguageRepository, PublicAccessRepository, TemplateRepository... things that make sense to
            keep as a whole in memory.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2.Create(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2.Update(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2.Delete(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2.Get(`1,System.Func{`1,`0},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2.GetCached(`1)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2.Exists(`1,System.Func{`1,System.Boolean},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2.GetAll(`1[],System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2.ClearAll">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Cache.HttpRequestAppCache">
            <summary>
            Implements a fast <see cref="T:Umbraco.Core.Cache.IAppCache"/> on top of HttpContext.Items.
            </summary>
            <remarks>
            <para>If no current HttpContext items can be found (no current HttpContext,
            or no Items...) then this cache acts as a pass-through and does not cache
            anything.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.HttpRequestAppCache.#ctor(System.Web.HttpContextBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.HttpRequestAppCache"/> class with a context, for unit tests!
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.HttpRequestAppCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.HttpRequestAppCache"/> class.
            </summary>
            <remarks>
            <para>Will use HttpContext.Current.</para>
            TODO: https://github.com/umbraco/Umbraco-CMS/issues/4239 - use IHttpContextAccessor NOT HttpContext.Current
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.HttpRequestAppCache.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Cache.WebCachingAppCache">
            <summary>
            Implements <see cref="T:Umbraco.Core.Cache.IAppPolicyCache"/> on top of a <see cref="T:System.Web.Caching.Cache"/>.
            </summary>
            <remarks>The underlying cache is expected to be HttpRuntime.Cache.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.WebCachingAppCache.#ctor(System.Web.Caching.Cache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.WebCachingAppCache"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.WebCachingAppCache.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.WebCachingAppCache.Get(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.WebCachingAppCache.Insert(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Cache.IAppCache">
            <summary>
            Defines an application cache.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppCache.Get(System.String)">
            <summary>
            Gets an item identified by its key.
            </summary>
            <param name="key">The key of the item.</param>
            <returns>The item, or null if the item was not found.</returns>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppCache.Get(System.String,System.Func{System.Object})">
            <summary>
            Gets or creates an item identified by its key.
            </summary>
            <param name="key">The key of the item.</param>
            <param name="factory">A factory function that can create the item.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppCache.SearchByKey(System.String)">
            <summary>
            Gets items with a key starting with the specified value.
            </summary>
            <param name="keyStartsWith">The StartsWith value to use in the search.</param>
            <returns>Items matching the search.</returns>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppCache.SearchByRegex(System.String)">
            <summary>
            Gets items with a key matching a regular expression.
            </summary>
            <param name="regex">The regular expression.</param>
            <returns>Items matching the search.</returns>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppCache.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppCache.Clear(System.String)">
            <summary>
            Removes an item identified by its key from the cache.
            </summary>
            <param name="key">The key of the item.</param>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppCache.ClearOfType(System.String)">
            <summary>
            Removes items of a specified type from the cache.
            </summary>
            <param name="typeName">The name of the type to remove.</param>
            <remarks>
            <para>If the type is an interface, then all items of a type implementing that interface are
            removed. Otherwise, only items of that exact type are removed (items of type inheriting from
            the specified type are not removed).</para>
            <para>Performs a case-sensitive search.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppCache.ClearOfType``1">
            <summary>
            Removes items of a specified type from the cache.
            </summary>
            <typeparam name="T">The type of the items to remove.</typeparam>
            <remarks>If the type is an interface, then all items of a type implementing that interface are
            removed. Otherwise, only items of that exact type are removed (items of type inheriting from
            the specified type are not removed).</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppCache.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <summary>
            Removes items of a specified type from the cache.
            </summary>
            <typeparam name="T">The type of the items to remove.</typeparam>
            <param name="predicate">The predicate to satisfy.</param>
            <remarks>If the type is an interface, then all items of a type implementing that interface are
            removed. Otherwise, only items of that exact type are removed (items of type inheriting from
            the specified type are not removed).</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppCache.ClearByKey(System.String)">
            <summary>
            Clears items with a key starting with the specified value.
            </summary>
            <param name="keyStartsWith">The StartsWith value to use in the search.</param>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppCache.ClearByRegex(System.String)">
            <summary>
            Clears items with a key matching a regular expression.
            </summary>
            <param name="regex">The regular expression.</param>
        </member>
        <member name="T:Umbraco.Core.Cache.ICacheRefresher">
             <summary>
             The IcacheRefresher Interface is used for load balancing.
            
             </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.ICacheRefresher`1">
            <summary>
            Strongly type cache refresher that is able to refresh cache of real instances of objects as well as IDs
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            This is much better for performance when we're not running in a load balanced environment so we can refresh the cache
            against a already resolved object instead of looking the object back up by id.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Cache.IJsonCacheRefresher">
            <summary>
            A cache refresher that supports refreshing or removing cache based on a custom Json payload
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.IJsonCacheRefresher.Refresh(System.String)">
            <summary>
            Refreshes, clears, etc... any cache based on the information provided in the json
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:Umbraco.Core.Cache.IPayloadCacheRefresher`1">
            <summary>
            A cache refresher that supports refreshing cache based on a custom payload
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.IPayloadCacheRefresher`1.Refresh(`0[])">
            <summary>
            Refreshes, clears, etc... any cache based on the information provided in the payload
            </summary>
            <param name="payloads"></param>
        </member>
        <member name="M:Umbraco.Core.Cache.IRepositoryCachePolicy`2.Get(`1,System.Func{`1,`0},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Gets an entity from the cache, else from the repository.
            </summary>
            <param name="id">The identifier.</param>
            <param name="performGet">The repository PerformGet method.</param>
            <param name="performGetAll">The repository PerformGetAll method.</param>
            <returns>The entity with the specified identifier, if it exits, else null.</returns>
            <remarks>First considers the cache then the repository.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IRepositoryCachePolicy`2.GetCached(`1)">
            <summary>
            Gets an entity from the cache.
            </summary>
            <param name="id">The identifier.</param>
            <returns>The entity with the specified identifier, if it is in the cache already, else null.</returns>
            <remarks>Does not consider the repository at all.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IRepositoryCachePolicy`2.Exists(`1,System.Func{`1,System.Boolean},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Gets a value indicating whether an entity with a specified identifier exists.
            </summary>
            <param name="id">The identifier.</param>
            <param name="performExists">The repository PerformExists method.</param>
            <param name="performGetAll">The repository PerformGetAll method.</param>
            <returns>A value indicating whether an entity with the specified identifier exists.</returns>
            <remarks>First considers the cache then the repository.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IRepositoryCachePolicy`2.Create(`0,System.Action{`0})">
            <summary>
            Creates an entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="persistNew">The repository PersistNewItem method.</param>
            <remarks>Creates the entity in the repository, and updates the cache accordingly.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IRepositoryCachePolicy`2.Update(`0,System.Action{`0})">
            <summary>
            Updates an entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="persistUpdated">The repository PersistUpdatedItem method.</param>
            <remarks>Updates the entity in the repository, and updates the cache accordingly.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IRepositoryCachePolicy`2.Delete(`0,System.Action{`0})">
            <summary>
            Removes an entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="persistDeleted">The repository PersistDeletedItem method.</param>
            <remarks>Removes the entity from the repository and clears the cache.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IRepositoryCachePolicy`2.GetAll(`1[],System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Gets entities.
            </summary>
            <param name="ids">The identifiers.</param>
            <param name="performGetAll">The repository PerformGetAll method.</param>
            <returns>If <paramref name="ids"/> is empty, all entities, else the entities with the specified identifiers.</returns>
            <remarks>Get all the entities. Either from the cache or the repository depending on the implementation.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IRepositoryCachePolicy`2.ClearAll">
            <summary>
            Clears the entire cache.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.IAppPolicyCache">
            <summary>
            Defines an application cache that support cache policies.
            </summary>
            <remarks>A cache policy can be used to cache with timeouts,
            or depending on files, and with a remove callback, etc.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppPolicyCache.Get(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <summary>
            Gets an item identified by its key.
            </summary>
            <param name="key">The key of the item.</param>
            <param name="factory">A factory function that can create the item.</param>
            <param name="timeout">An optional cache timeout.</param>
            <param name="isSliding">An optional value indicating whether the cache timeout is sliding (default is false).</param>
            <param name="priority">An optional cache priority (default is Normal).</param>
            <param name="removedCallback">An optional callback to handle removals.</param>
            <param name="dependentFiles">Files the cache entry depends on.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Umbraco.Core.Cache.IAppPolicyCache.Insert(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <summary>
            Inserts an item.
            </summary>
            <param name="key">The key of the item.</param>
            <param name="factory">A factory function that can create the item.</param>
            <param name="timeout">An optional cache timeout.</param>
            <param name="isSliding">An optional value indicating whether the cache timeout is sliding (default is false).</param>
            <param name="priority">An optional cache priority (default is Normal).</param>
            <param name="removedCallback">An optional callback to handle removals.</param>
            <param name="dependentFiles">Files the cache entry depends on.</param>
        </member>
        <member name="T:Umbraco.Core.Cache.IsolatedCaches">
            <summary>
            Represents a dictionary of <see cref="T:Umbraco.Core.Cache.IAppPolicyCache"/> for types.
            </summary>
            <remarks>
            <para>Isolated caches are used by e.g. repositories, to ensure that each cached entity
            type has its own cache, so that lookups are fast and the repository does not need to
            search through all keys on a global scale.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IsolatedCaches.#ctor(System.Func{System.Type,Umbraco.Core.Cache.IAppPolicyCache})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.IsolatedCaches"/> class.
            </summary>
            <param name="cacheFactory"></param>
        </member>
        <member name="M:Umbraco.Core.Cache.IsolatedCaches.GetOrCreate``1">
            <summary>
            Gets a cache.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.IsolatedCaches.Get``1">
            <summary>
            Tries to get a cache.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.IsolatedCaches.ClearCache``1">
            <summary>
            Clears a cache.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.JsonCacheRefresherBase`1">
            <summary>
            A base class for "json" cache refreshers.
            </summary>
            <typeparam name="TInstanceType">The actual cache refresher type.</typeparam>
            <remarks>The actual cache refresher type is used for strongly typed events.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.JsonCacheRefresherBase`1.#ctor(Umbraco.Core.Cache.AppCaches)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.JsonCacheRefresherBase`1"/>.
            </summary>
            <param name="appCaches">A cache helper.</param>
        </member>
        <member name="M:Umbraco.Core.Cache.JsonCacheRefresherBase`1.Refresh(System.String)">
            <summary>
            Refreshes as specified by a json payload.
            </summary>
            <param name="json">The json payload.</param>
        </member>
        <member name="T:Umbraco.Core.Cache.NoAppCache">
            <summary>
            Implements <see cref="T:Umbraco.Core.Cache.IAppPolicyCache"/> and do not cache.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Cache.NoAppCache.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.SearchByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.SearchByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.Get(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.Insert(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.Clear(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.ClearOfType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.ClearOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.ClearByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.NoAppCache.ClearByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Cache.ObjectCacheAppCache">
            <summary>
            Implements <see cref="T:Umbraco.Core.Cache.IAppPolicyCache"/> on top of a <see cref="T:System.Runtime.Caching.ObjectCache"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.ObjectCacheAppCache"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Cache.ObjectCacheAppCache.MemoryCache">
            <summary>
            Gets the internal memory cache, for tests only!
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.SearchByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.SearchByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.Get(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.Insert(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.Clear(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.ClearOfType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.ClearOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.ClearByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.ObjectCacheAppCache.ClearByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Cache.PayloadCacheRefresherBase`2">
            <summary>
            A base class for "payload" class refreshers.
            </summary>
            <typeparam name="TInstanceType">The actual cache refresher type.</typeparam>
            <typeparam name="TPayload">The payload type.</typeparam>
            <remarks>The actual cache refresher type is used for strongly typed events.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.PayloadCacheRefresherBase`2.#ctor(Umbraco.Core.Cache.AppCaches)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.PayloadCacheRefresherBase`2"/>.
            </summary>
            <param name="appCaches">A cache helper.</param>
        </member>
        <member name="M:Umbraco.Core.Cache.PayloadCacheRefresherBase`2.Deserialize(System.String)">
            <summary>
            Deserializes a json payload into an object payload.
            </summary>
            <param name="json">The json payload.</param>
            <returns>The deserialized object payload.</returns>
        </member>
        <member name="M:Umbraco.Core.Cache.PayloadCacheRefresherBase`2.Refresh(`1[])">
            <summary>
            Refreshes as specified by a payload.
            </summary>
            <param name="payloads">The payload.</param>
        </member>
        <member name="T:Umbraco.Core.Cache.RepositoryCachePolicyBase`2">
            <summary>
            A base class for repository cache policies.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TId">The type of the identifier.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyBase`2.Get(`1,System.Func{`1,`0},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyBase`2.GetCached(`1)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyBase`2.Exists(`1,System.Func{`1,System.Boolean},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyBase`2.Create(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyBase`2.Update(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyBase`2.Delete(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyBase`2.GetAll(`1[],System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyBase`2.ClearAll">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Cache.RepositoryCachePolicyOptions">
            <summary>
            Specifies how a repository cache policy should cache entities.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyOptions.#ctor(System.Func{System.Int32})">
            <summary>
            Ctor - sets GetAllCacheValidateCount = true
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyOptions.#ctor">
            <summary>
            Ctor - sets GetAllCacheValidateCount = false
            </summary>
        </member>
        <member name="P:Umbraco.Core.Cache.RepositoryCachePolicyOptions.PerformCount">
            <summary>
            Callback required to get count for GetAllCacheValidateCount
            </summary>
        </member>
        <member name="P:Umbraco.Core.Cache.RepositoryCachePolicyOptions.GetAllCacheValidateCount">
            <summary>
            True/false as to validate the total item count when all items are returned from cache, the default is true but this
            means that a db lookup will occur - though that lookup will probably be significantly less expensive than the normal
            GetAll method.
            </summary>
            <remarks>
            setting this to return false will improve performance of GetAll cache with no params but should only be used
            for specific circumstances
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Cache.RepositoryCachePolicyOptions.GetAllCacheAllowZeroCount">
            <summary>
            True if the GetAll method will cache that there are zero results so that the db is not hit when there are no results found
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.SingleItemsOnlyRepositoryCachePolicy`2">
            <summary>
            Represents a special policy that does not cache the result of GetAll.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TId">The type of the identifier.</typeparam>
            <remarks>
            <para>Overrides the default repository cache policy and does not writes the result of GetAll
            to cache, but only the result of individual Gets. It does read the cache for GetAll, though.</para>
            <para>Used by DictionaryRepository.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Cache.DictionaryAppCache">
            <summary>
            Implements <see cref="T:Umbraco.Core.Cache.IAppCache"/> on top of a concurrent dictionary.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Cache.DictionaryAppCache.Items">
            <summary>
            Gets the internal items dictionary, for tests only!
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.DictionaryAppCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DictionaryAppCache.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DictionaryAppCache.SearchByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DictionaryAppCache.SearchByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DictionaryAppCache.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DictionaryAppCache.Clear(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DictionaryAppCache.ClearOfType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DictionaryAppCache.ClearOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DictionaryAppCache.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DictionaryAppCache.ClearByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Cache.DictionaryAppCache.ClearByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Cache.TypedCacheRefresherBase`2">
            <summary>
            A base class for "typed" cache refreshers.
            </summary>
            <typeparam name="TInstanceType">The actual cache refresher type.</typeparam>
            <typeparam name="TEntityType">The entity type.</typeparam>
            <remarks>The actual cache refresher type is used for strongly typed events.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.TypedCacheRefresherBase`2.#ctor(Umbraco.Core.Cache.AppCaches)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Cache.TypedCacheRefresherBase`2"/>.
            </summary>
            <param name="appCaches">A cache helper.</param>
        </member>
        <member name="T:Umbraco.Core.BindingRedirects">
            <summary>
            Manages any assembly binding redirects that cannot be done via config (i.e. unsigned --> signed assemblies)
            </summary>
        </member>
        <member name="M:Umbraco.Core.BindingRedirects.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            This is used to do an assembly binding redirect via code - normally required due to signature changes in assemblies
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.CodeAnnotations.FriendlyNameAttribute">
            <summary>
            Attribute to add a Friendly Name string with an UmbracoObjectType enum value
            </summary>
        </member>
        <member name="F:Umbraco.Core.CodeAnnotations.FriendlyNameAttribute._friendlyName">
            <summary>
            friendly name value
            </summary>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.FriendlyNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FriendlyNameAttribute class
            Sets the friendly name value
            </summary>
            <param name="friendlyName">attribute value</param>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.FriendlyNameAttribute.ToString">
            <summary>
            Gets the friendly name
            </summary>
            <returns>string of friendly name</returns>
        </member>
        <member name="T:Umbraco.Core.CodeAnnotations.UmbracoObjectTypeAttribute">
            <summary>
            Attribute to associate a GUID string and Type with an UmbracoObjectType Enum value
            </summary>
        </member>
        <member name="T:Umbraco.Core.Collections.CompositeNStringNStringKey">
            <summary>
            Represents a composite key of (string, string) for fast dictionaries.
            </summary>
            <remarks>
            <para>The string parts of the key are case-insensitive.</para>
            <para>Null is a valid value for both parts.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Collections.CompositeNStringNStringKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Collections.CompositeNStringNStringKey"/> struct.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Collections.CompositeStringStringKey">
            <summary>
            Represents a composite key of (string, string) for fast dictionaries.
            </summary>
            <remarks>
            <para>The string parts of the key are case-insensitive.</para>
            <para>Null is NOT a valid value for neither parts.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Collections.CompositeStringStringKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Collections.CompositeStringStringKey"/> struct.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Collections.CompositeIntStringKey">
            <summary>
            Represents a composite key of (int, string) for fast dictionaries.
            </summary>
            <remarks>
            <para>The integer part of the key must be greater than, or equal to, zero.</para>
            <para>The string part of the key is case-insensitive.</para>
            <para>Null is a valid value for both parts.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Collections.CompositeIntStringKey.#ctor(System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Collections.CompositeIntStringKey"/> struct.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Collections.CompositeTypeTypeKey">
            <summary>
            Represents a composite key of (Type, Type) for fast dictionaries.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Collections.CompositeTypeTypeKey.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Collections.CompositeTypeTypeKey"/> struct.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Collections.CompositeTypeTypeKey.Type1">
            <summary>
            Gets the first type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Collections.CompositeTypeTypeKey.Type2">
            <summary>
            Gets the second type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Collections.CompositeTypeTypeKey.Equals(Umbraco.Core.Collections.CompositeTypeTypeKey)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Collections.CompositeTypeTypeKey.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Collections.CompositeTypeTypeKey.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Core.Collections.ConcurrentHashSet`1">
            <summary>
            A thread-safe representation of a <see cref="T:System.Collections.Generic.HashSet`1"/>.
            Enumerating this collection is thread-safe and will only operate on a clone that is generated before returning the enumerator.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Collections.ConcurrentHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Umbraco.Core.Collections.ConcurrentHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Core.Collections.ConcurrentHashSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:Umbraco.Core.Collections.ConcurrentHashSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Umbraco.Core.Collections.ConcurrentHashSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Collections.ConcurrentHashSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Core.Collections.ConcurrentHashSet`1.TryAdd(`0)">
            <summary>
            Attempts to add an item to the collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Collections.ConcurrentHashSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Umbraco.Core.Collections.ConcurrentHashSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Umbraco.Core.Collections.ConcurrentHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/> to an <see cref="T:System.Array"/>, starting at a specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>. The array must have zero-based indexing.</param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in Visual Basic).</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception><exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the length of the <paramref name="array"/> -or- The number of elements in the source <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Umbraco.Core.Collections.ConcurrentHashSet`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception><exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:Umbraco.Core.Collections.DeepCloneableList`1">
            <summary>
            A List that can be deep cloned with deep cloned elements and can reset the collection's items dirty flags
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Collections.DeepCloneableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Default behavior is CloneOnce
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Umbraco.Core.Collections.DeepCloneableList`1.DeepClone">
            <summary>
            Creates a new list and adds each element as a deep cloned element if it is of type IDeepCloneable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Collections.DeepCloneableList`1.IsPropertyDirty(System.String)">
            <inheritdoc />
            <remarks>Always return false, the list has no properties that can be dirty.</remarks>
        </member>
        <member name="M:Umbraco.Core.Collections.DeepCloneableList`1.WasPropertyDirty(System.String)">
            <inheritdoc />
            <remarks>Always return false, the list has no properties that can be dirty.</remarks>
        </member>
        <member name="M:Umbraco.Core.Collections.DeepCloneableList`1.GetDirtyProperties">
            <inheritdoc />
            <remarks>Always return an empty enumerable, the list has no properties that can be dirty.</remarks>
        </member>
        <member name="M:Umbraco.Core.Collections.DeepCloneableList`1.GetWereDirtyProperties">
            <remarks>Always return an empty enumerable, the list has no properties that can be dirty.</remarks>
        </member>
        <member name="F:Umbraco.Core.Collections.ListCloneBehavior.CloneOnce">
            <summary>
            When set, DeepClone will clone the items one time and the result list behavior will be None
            </summary>
        </member>
        <member name="F:Umbraco.Core.Collections.ListCloneBehavior.None">
            <summary>
            When set, DeepClone will not clone any items
            </summary>
        </member>
        <member name="F:Umbraco.Core.Collections.ListCloneBehavior.Always">
            <summary>
            When set, DeepClone will always clone all items
            </summary>
        </member>
        <member name="T:Umbraco.Core.Collections.ObservableDictionary`2">
            <summary>
            An ObservableDictionary
            </summary>
            <remarks>
            Assumes that the key will not change and is unique for each element in the collection.
            Collection is not thread-safe, so calls should be made single-threaded.
            </remarks>
            <typeparam name="TValue">The type of elements contained in the BindableCollection</typeparam>
            <typeparam name="TKey">The type of the indexing key</typeparam>
        </member>
        <member name="M:Umbraco.Core.Collections.ObservableDictionary`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create new ObservableDictionary
            </summary>
            <param name="keySelector">Selector function to create key from value</param>
            <param name="equalityComparer">The equality comparer to use when comparing keys, or null to use the default comparer.</param>
        </member>
        <member name="P:Umbraco.Core.Collections.ObservableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.  If setting a new value, new value must have same key.
            </summary>
            <param name="key">Key of element to replace</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Collections.ObservableDictionary`2.Replace(`0,`1)">
             <summary>
             Replaces element at given key with new value.  New value must have same key.
             </summary>
             <param name="key">Key of element to replace</param>
             <param name="value">New value</param>
            
             <exception cref="T:System.InvalidOperationException"></exception>
             <returns>False if key not found</returns>
        </member>
        <member name="M:Umbraco.Core.Collections.ObservableDictionary`2.ChangeKey(`0,`0)">
            <summary>
            Allows us to change the key of an item
            </summary>
            <param name="currentKey"></param>
            <param name="newKey"></param>
        </member>
        <member name="P:Umbraco.Core.Collections.ObservableDictionary`2.Keys">
            <summary>
            Returns all keys
            </summary>
        </member>
        <member name="P:Umbraco.Core.Collections.ObservableDictionary`2.Values">
            <summary>
            Returns all values
            </summary>
        </member>
        <member name="T:Umbraco.Core.Collections.TypeList`1">
            <summary>
            Represents a list of types.
            </summary>
            <remarks>Types in the list are, or derive from, or implement, the base type.</remarks>
            <typeparam name="TBase">The base type.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Collections.TypeList`1.Add``1">
            <summary>
            Adds a type to the list.
            </summary>
            <typeparam name="T">The type to add.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Collections.TypeList`1.Contains(System.Type)">
            <summary>
            Determines whether a type is in the list.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Collections.OrderedHashSet`1">
            <summary>
            A custom collection similar to HashSet{T} which only contains unique items, however this collection keeps items in order
            and is customizable to keep the newest or oldest equatable item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Collections.TopoGraph`2">
            <summary>
            Represents a generic DAG that can be topologically sorted.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Collections.TopoGraph`2.#ctor(System.Func{`1,`0},System.Func{`1,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Collections.TopoGraph`2"/> class.
            </summary>
            <param name="getKey">A method that returns the key of an item.</param>
            <param name="getDependencies">A method that returns the dependency keys of an item.</param>
        </member>
        <member name="M:Umbraco.Core.Collections.TopoGraph`2.AddItem(`1)">
            <summary>
            Adds an item to the graph.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Umbraco.Core.Collections.TopoGraph`2.AddItems(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds items to the graph.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Umbraco.Core.Collections.TopoGraph`2.GetSortedItems(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the sorted items.
            </summary>
            <param name="throwOnCycle">A value indicating whether to throw on cycles, or just ignore the branch.</param>
            <param name="throwOnMissing">A value indicating whether to throw on missing dependency, or just ignore the dependency.</param>
            <param name="reverse">A value indicating whether to reverse the order.</param>
            <returns>The (topologically) sorted items.</returns>
        </member>
        <member name="T:Umbraco.Core.Composing.ComponentComposer`1">
            <summary>
            Provides a base class for composers which compose a component.
            </summary>
            <typeparam name="TComponent">The type of the component</typeparam>
        </member>
        <member name="M:Umbraco.Core.Composing.ComponentComposer`1.Compose(Umbraco.Core.Composing.Composition)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Composing.Composers">
            <summary>
            Handles the composers.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.Composers.#ctor(Umbraco.Core.Composing.Composition,System.Collections.Generic.IEnumerable{System.Type},Umbraco.Core.Logging.IProfilingLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.Composers" /> class.
            </summary>
            <param name="composition">The composition.</param>
            <param name="composerTypes">The <see cref="T:Umbraco.Core.Composing.IComposer" /> types.</param>
            <param name="logger">The profiling logger.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.Composers.#ctor(Umbraco.Core.Composing.Composition,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Attribute},Umbraco.Core.Logging.IProfilingLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.Composers" /> class.
            </summary>
            <param name="composition">The composition.</param>
            <param name="composerTypes">The <see cref="T:Umbraco.Core.Composing.IComposer" /> types.</param>
            <param name="enableDisableAttributes">The <see cref="T:Umbraco.Core.Composing.EnableComposerAttribute" /> and/or <see cref="T:Umbraco.Core.Composing.DisableComposerAttribute" /> attributes.</param>
            <param name="logger">The profiling logger.</param>
            <exception cref="T:System.ArgumentNullException">composition
            or
            composerTypes
            or
            enableDisableAttributes
            or
            logger</exception>
        </member>
        <member name="M:Umbraco.Core.Composing.Composers.Compose">
            <summary>
            Instantiates and composes the composers.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.Composition">
            <summary>
            Represents a composition.
            </summary>
            <remarks>Although a composition exposes the application's service container, people should use the
            extension methods (such as <c>PropertyEditors()</c> or <c>SetPublishedContentModelFactory()</c>) and
            avoid accessing the container. This is because everything needs to be properly registered and with
            the proper lifecycle. These methods will take care of it. Directly registering into the container
            may cause issues.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.#ctor(Umbraco.Core.Composing.IRegister,Umbraco.Core.Composing.TypeLoader,Umbraco.Core.Logging.IProfilingLogger,Umbraco.Core.IRuntimeState,Umbraco.Core.Configuration.Configs)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.Composition"/> class.
            </summary>
            <param name="register">A register.</param>
            <param name="typeLoader">A type loader.</param>
            <param name="logger">A logger.</param>
            <param name="runtimeState">The runtime state.</param>
            <param name="configs">Optional configs.</param>
        </member>
        <member name="P:Umbraco.Core.Composing.Composition.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.Composition.TypeLoader">
            <summary>
            Gets the type loader.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.Composition.RuntimeState">
            <summary>
            Gets the runtime state.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.Composition.Configs">
            <summary>
            Gets the configurations.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.Composition.Concrete">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.Register(System.Type,Umbraco.Core.Composing.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.Register(System.Type,System.Type,Umbraco.Core.Composing.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.Register``1(System.Func{Umbraco.Core.Composing.IFactory,``0},Umbraco.Core.Composing.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.Register(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterFor``2(Umbraco.Core.Composing.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterFor``2(System.Type,Umbraco.Core.Composing.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterFor``2(System.Func{Umbraco.Core.Composing.IFactory,``0},Umbraco.Core.Composing.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterFor``2(``0)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterAuto(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.ConfigureForWeb">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.CreateFactory">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Composing.Composition.OnCreatingFactory">
            <summary>
            Gets a dictionary of action to execute when creating the factory.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterUnique(System.Type)">
            <summary>
            Registers a unique service as its own implementation.
            </summary>
            <remarks>Unique services have one single implementation, and a Singleton lifetime.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterUnique(System.Type,System.Type)">
            <summary>
            Registers a unique service with an implementation type.
            </summary>
            <remarks>Unique services have one single implementation, and a Singleton lifetime.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterUnique``1(System.Func{Umbraco.Core.Composing.IFactory,``0})">
            <summary>
            Registers a unique service with an implementation factory.
            </summary>
            <remarks>Unique services have one single implementation, and a Singleton lifetime.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterUnique(System.Type,System.Object)">
            <summary>
            Registers a unique service with an implementing instance.
            </summary>
            <remarks>Unique services have one single implementation, and a Singleton lifetime.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterUniqueFor``2">
            <summary>
            Registers a unique service for a target, as its own implementation.
            </summary>
            <remarks>Unique services have one single implementation, and a Singleton lifetime.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterUniqueFor``2(System.Type)">
            <summary>
            Registers a unique service for a target, with an implementing type.
            </summary>
            <remarks>Unique services have one single implementation, and a Singleton lifetime.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterUniqueFor``2(System.Func{Umbraco.Core.Composing.IFactory,``0})">
            <summary>
            Registers a unique service for a target, with an implementation factory.
            </summary>
            <remarks>Unique services have one single implementation, and a Singleton lifetime.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.RegisterUniqueFor``2(``0)">
            <summary>
            Registers a unique service for a target, with an implementing instance.
            </summary>
            <remarks>Unique services have one single implementation, and a Singleton lifetime.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.Composition.WithCollectionBuilder``1">
            <summary>
            Gets a collection builder (and registers the collection).
            </summary>
            <typeparam name="TBuilder">The type of the collection builder.</typeparam>
            <returns>The collection builder.</returns>
        </member>
        <member name="T:Umbraco.Core.Composing.SetCollectionBuilderBase`3">
            <summary>
            Implements an un-ordered collection builder.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
            <remarks>
            <para>A set collection builder is the most basic collection builder,
            where items are not ordered.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.SetCollectionBuilderBase`3.Clear">
            <summary>
            Clears all types in the collection.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.SetCollectionBuilderBase`3.Add``1">
            <summary>
            Adds a type to the collection.
            </summary>
            <typeparam name="T">The type to append.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.SetCollectionBuilderBase`3.Add(System.Type)">
            <summary>
            Adds a type to the collection.
            </summary>
            <param name="type">The type to append.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.SetCollectionBuilderBase`3.Add(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
             Adds types to the collections.
            </summary>
            <param name="types">The types to append.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.SetCollectionBuilderBase`3.Remove``1">
            <summary>
            Removes a type from the collection.
            </summary>
            <typeparam name="T">The type to remove.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.SetCollectionBuilderBase`3.Remove(System.Type)">
            <summary>
            Removes a type from the collection.
            </summary>
            <param name="type">The type to remove.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.SetCollectionBuilderBase`3.Replace``2">
            <summary>
            Replaces a type in the collection.
            </summary>
            <typeparam name="TReplaced">The type to replace.</typeparam>
            <typeparam name="T">The type to insert.</typeparam>
            <returns>The builder.</returns>
            <remarks>Throws if the type to replace does not already belong to the collection.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.SetCollectionBuilderBase`3.Replace(System.Type,System.Type)">
            <summary>
            Replaces a type in the collection.
            </summary>
            <param name="typeReplaced">The type to replace.</param>
            <param name="type">The type to insert.</param>
            <returns>The builder.</returns>
            <remarks>Throws if the type to replace does not already belong to the collection.</remarks>
        </member>
        <member name="T:Umbraco.Core.Composing.DisableAttribute">
            <summary>
            Indicates that a composer should be disabled.
            </summary>
            <remarks>
            <para>If a type is specified, disables the composer of that type, else disables the composer marked with the attribute.</para>
            <para>This attribute is *not* inherited.</para>
            <para>This attribute applies to classes only, it is not possible to enable/disable interfaces.</para>
            <para>Assembly-level <see cref="T:Umbraco.Core.Composing.DisableComposerAttribute"/> has greater priority than <see cref="T:Umbraco.Core.Composing.DisableAttribute"/>
            attribute when it is marking the composer itself, but lower priority that when it is referencing another composer.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.DisableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.DisableAttribute"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.DisableAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.DisableAttribute"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.DisableAttribute.DisabledType">
            <summary>
            Gets the disabled type, or null if it is the composer marked with the attribute.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.DisableComposerAttribute">
            <summary>
            Indicates that a composer should be disabled.
            </summary>
            <remarks>
            <para>Assembly-level <see cref="T:Umbraco.Core.Composing.DisableComposerAttribute"/> has greater priority than <see cref="T:Umbraco.Core.Composing.DisableAttribute"/>
            attribute when it is marking the composer itself, but lower priority that when it is referencing another composer.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.DisableComposerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.DisableComposerAttribute"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.DisableComposerAttribute.DisabledType">
            <summary>
            Gets the disabled type, or null if it is the composer marked with the attribute.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.EnableAttribute">
            <summary>
            Indicates that a composer should be enabled.
            </summary>
            <remarks>
            <para>If a type is specified, enables the composer of that type, else enables the composer marked with the attribute.</para>
            <para>This attribute is *not* inherited.</para>
            <para>This attribute applies to classes only, it is not possible to enable/disable interfaces.</para>
            <para>Assembly-level <see cref="T:Umbraco.Core.Composing.DisableComposerAttribute"/> has greater priority than <see cref="T:Umbraco.Core.Composing.DisableAttribute"/>
            attribute when it is marking the composer itself, but lower priority that when it is referencing another composer.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.EnableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.EnableAttribute"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.EnableAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.EnableAttribute"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.EnableAttribute.EnabledType">
            <summary>
            Gets the enabled type, or null if it is the composer marked with the attribute.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.EnableComposerAttribute">
            <summary>
            Indicates that a composer should be enabled.
            </summary>
            <remarks>
            <para>If a type is specified, enables the composer of that type, else enables the composer marked with the attribute.</para>
            <para>This attribute is *not* inherited.</para>
            <para>This attribute applies to classes only, it is not possible to enable/disable interfaces.</para>
            <para>Assembly-level <see cref="T:Umbraco.Core.Composing.DisableComposerAttribute"/> has greater priority than <see cref="T:Umbraco.Core.Composing.DisableAttribute"/>
            attribute when it is marking the composer itself, but lower priority that when it is referencing another composer.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.EnableComposerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.EnableComposerAttribute"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.EnableComposerAttribute.EnabledType">
            <summary>
            Gets the enabled type, or null if it is the composer marked with the attribute.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.IComposer">
            <summary>
            Represents a composer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.IComposer.Compose(Umbraco.Core.Composing.Composition)">
            <summary>
            Compose.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.ICoreComposer">
            <summary>
            Represents a core <see cref="T:Umbraco.Core.Composing.IComposer"/>.
            </summary>
            <remarks>
            <para>Core composers compose after the initial composer, and before user composers.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Composing.IComponent">
            <summary>
            Represents a component.
            </summary>
            <remarks>
            <para>Components are created by DI and therefore must have a public constructor.</para>
            <para>All components are terminated in reverse order when Umbraco terminates, and
            disposable components are disposed.</para>
            <para>The Dispose method may be invoked more than once, and components
            should ensure they support this.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.IComponent.Initialize">
            <summary>
            Initializes the component.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.IComponent.Terminate">
            <summary>
            Terminates the component.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.IUserComposer">
            <summary>
            Represents a user <see cref="T:Umbraco.Core.Composing.IComposer"/>.
            </summary>
            <remarks>
            <para>User composers compose after core composers, and before the final composer.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Composing.ComposeAfterAttribute">
            <summary>
            Indicates that a composer requires another composer.
            </summary>
            <remarks>
            <para>This attribute is *not* inherited. This means that a composer class inheriting from
            another composer class does *not* inherit its requirements. However, the runtime checks
            the *interfaces* of every composer for their requirements, so requirements declared on
            interfaces are inherited by every composer class implementing the interface.</para>
            <para>When targeting a class, indicates a dependency on the composer which must be enabled,
            unless the requirement has explicitly been declared as weak (and then, only if the composer
            is enabled).</para>
            <para>When targeting an interface, indicates a dependency on enabled composers implementing
            the interface. It could be no composer at all, unless the requirement has explicitly been
            declared as strong (and at least one composer must be enabled).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.ComposeAfterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.ComposeAfterAttribute"/> class.
            </summary>
            <param name="requiredType">The type of the required composer.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.ComposeAfterAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.ComposeAfterAttribute"/> class.
            </summary>
            <param name="requiredType">The type of the required composer.</param>
            <param name="weak">A value indicating whether the requirement is weak.</param>
        </member>
        <member name="P:Umbraco.Core.Composing.ComposeAfterAttribute.RequiredType">
            <summary>
            Gets the required type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.ComposeAfterAttribute.Weak">
            <summary>
            Gets a value indicating whether the requirement is weak.
            </summary>
            <remarks>Returns <c>true</c> if the requirement is weak (requires the other composer if it
            is enabled), <c>false</c> if the requirement is strong (requires the other composer to be
            enabled), and <c>null</c> if unspecified, in which case it is strong for classes and weak for
            interfaces.</remarks>
        </member>
        <member name="T:Umbraco.Core.Composing.ComposeBeforeAttribute">
            <summary>
            Indicates that a component is required by another composer.
            </summary>
            <remarks>
            <para>This attribute is *not* inherited. This means that a composer class inheriting from
            another composer class does *not* inherit its requirements. However, the runtime checks
            the *interfaces* of every composer for their requirements, so requirements declared on
            interfaces are inherited by every composer class implementing the interface.</para>
            <para>When targeting a class, indicates a dependency on the composer which must be enabled,
            unless the requirement has explicitly been declared as weak (and then, only if the composer
            is enabled).</para>
            <para>When targeting an interface, indicates a dependency on enabled composers implementing
            the interface. It could be no composer at all, unless the requirement has explicitly been
            declared as strong (and at least one composer must be enabled).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.ComposeBeforeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.ComposeBeforeAttribute"/> class.
            </summary>
            <param name="requiringType">The type of the required composer.</param>
        </member>
        <member name="P:Umbraco.Core.Composing.ComposeBeforeAttribute.RequiringType">
            <summary>
            Gets the required type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.RuntimeLevelAttribute">
            <summary>
            Marks a composer to indicate a minimum and/or maximum runtime level for which the composer would compose.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.RuntimeLevelAttribute.MinLevel">
            <summary>
            Gets or sets the minimum runtime level for which the composer would compose.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.RuntimeLevelAttribute.MaxLevel">
            <summary>
            Gets or sets the maximum runtime level for which the composer would compose.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.ComponentCollection">
            <summary>
            Represents the collection of <see cref="T:Umbraco.Core.Composing.IComponent"/> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.ComponentCollectionBuilder">
            <summary>
            Builds a <see cref="T:Umbraco.Core.Composing.ComponentCollection"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.BuilderCollectionBase`1">
            <summary>
            Provides a base class for builder collections.
            </summary>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Composing.BuilderCollectionBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.BuilderCollectionBase`1"/> with items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="P:Umbraco.Core.Composing.BuilderCollectionBase`1.Count">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.BuilderCollectionBase`1.GetEnumerator">
            <summary>
            Gets an enumerator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.BuilderCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.CollectionBuilderBase`3">
            <summary>
            Provides a base class for collection builders.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Composing.CollectionBuilderBase`3.GetTypes">
            <summary>
            Gets the internal list of types as an IEnumerable (immutable).
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.CollectionBuilderBase`3.RegisterWith(Umbraco.Core.Composing.IRegister)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Composing.CollectionBuilderBase`3.CollectionLifetime">
            <summary>
            Gets the collection lifetime.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.CollectionBuilderBase`3.Configure(System.Action{System.Collections.Generic.List{System.Type}})">
            <summary>
            Configures the internal list of types.
            </summary>
            <param name="action">The action to execute.</param>
            <remarks>Throws if the types have already been registered.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.CollectionBuilderBase`3.GetRegisteringTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets the types.
            </summary>
            <param name="types">The internal list of types.</param>
            <returns>The list of types to register.</returns>
            <remarks>Used by implementations to add types to the internal list, sort the list, etc.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.CollectionBuilderBase`3.CreateItems(Umbraco.Core.Composing.IFactory)">
            <summary>
            Creates the collection items.
            </summary>
            <returns>The collection items.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.CollectionBuilderBase`3.CreateItem(Umbraco.Core.Composing.IFactory,System.Type)">
            <summary>
            Creates a collection item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.CollectionBuilderBase`3.CreateCollection(Umbraco.Core.Composing.IFactory)">
            <summary>
            Creates a collection.
            </summary>
            <returns>A collection.</returns>
            <remarks>Creates a new collection each time it is invoked.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.CollectionBuilderBase`3.Has``1">
            <summary>
            Gets a value indicating whether the collection contains a type.
            </summary>
            <typeparam name="T">The type to look for.</typeparam>
            <returns>A value indicating whether the collection contains the type.</returns>
            <remarks>Some builder implementations may use this to expose a public Has{T}() method,
            when it makes sense. Probably does not make sense for lazy builders, for example.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.CollectionBuilderBase`3.Has(System.Type)">
            <summary>
            Gets a value indicating whether the collection contains a type.
            </summary>
            <param name="type">The type to look for.</param>
            <returns>A value indicating whether the collection contains the type.</returns>
            <remarks>Some builder implementations may use this to expose a public Has{T}() method,
            when it makes sense. Probably does not make sense for lazy builders, for example.</remarks>
        </member>
        <member name="T:Umbraco.Core.Composing.CompositionExtensions.Configuration">
            <summary>
            Compose configurations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.CompositionExtensions.Repositories">
            <summary>
            Composes repositories.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.CompositionExtensions.Services.CreatePackageRepository(Umbraco.Core.Composing.IFactory,System.String)">
            <summary>
            Creates an instance of PackagesRepository for either the ICreatedPackagesRepository or the IInstalledPackagesRepository
            </summary>
            <param name="factory"></param>
            <param name="packageRepoFileName"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Composing.RegisterFactory">
            <summary>
            Creates the container.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.RegisterFactory.Create">
            <summary>
            Creates a new instance of the configured container.
            </summary>
            <remarks>
            To override the default LightInjectContainer, add an appSetting named 'Umbraco.Core.RegisterType' with
            a fully qualified type name to a class with a static method "Create" returning an IRegister.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Composing.Current">
            <summary>
            Provides a static service locator for most singletons.
            </summary>
            <remarks>
            <para>This class is initialized with the container in UmbracoApplicationBase,
            right after the container is created in UmbracoApplicationBase.HandleApplicationStart.</para>
            <para>Obviously, this is a service locator, which some may consider an anti-pattern. And yet,
            practically, it works.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Composing.Current.Factory">
            <summary>
            Gets or sets the factory.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.Current.Reset">
            <summary>
            Resets <see cref="T:Umbraco.Core.Composing.Current"/>. Indented for testing only, and not supported in production code.
            </summary>
            <remarks>
            <para>For UNIT TESTS exclusively.</para>
            <para>Resets everything that is 'current'.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.Current.UnlockConfigs">
            <summary>
            Unlocks <see cref="P:Umbraco.Core.Composing.Current.Configs"/>. Intended for testing only, and not supported in production code.
            </summary>
            <remarks>
            <para>For UNIT TESTS exclusively.</para>
            <para>Unlocks <see cref="P:Umbraco.Core.Composing.Current.Configs"/> so that it is possible to add configurations
            directly to <see cref="T:Umbraco.Core.Composing.Current"/> without having to wire composition.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Composing.HideFromTypeFinderAttribute">
            <summary>
            Notifies the TypeFinder that it should ignore the class marked with this attribute.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.IBuilderCollection`1">
            <summary>
            Represents a builder collection, ie an immutable enumeration of items.
            </summary>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="P:Umbraco.Core.Composing.IBuilderCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.ICollectionBuilder">
            <summary>
            Represents a collection builder.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.ICollectionBuilder.RegisterWith(Umbraco.Core.Composing.IRegister)">
            <summary>
            Registers the builder so it can build the collection, by
            registering the collection and the types.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.ICollectionBuilder`2">
            <summary>
            Represents a collection builder.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Composing.ICollectionBuilder`2.CreateCollection(Umbraco.Core.Composing.IFactory)">
            <summary>
            Creates a collection.
            </summary>
            <returns>A collection.</returns>
            <remarks>Creates a new collection each time it is invoked.</remarks>
        </member>
        <member name="T:Umbraco.Core.Composing.IFactory">
            <summary>
            Defines a service factory for Umbraco.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.IFactory.Concrete">
            <summary>
            Gets the concrete factory.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.IFactory.GetInstance(System.Type)">
            <summary>
            Gets an instance of a service.
            </summary>
            <param name="type">The type of the service.</param>
            <returns>An instance of the specified type.</returns>
            <remarks>Throws an exception if the container failed to get an instance of the specified type.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.IFactory.GetInstanceFor``2">
            <summary>
            Gets a targeted instance of a service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>The instance of the specified type for the specified target.</returns>
            <remarks>Throws an exception if the container failed to get an instance of the specified type.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.IFactory.TryGetInstance(System.Type)">
            <summary>
            Tries to get an instance of a service.
            </summary>
            <param name="type">The type of the service.</param>
            <returns>An instance of the specified type, or null.</returns>
            <remarks>Returns null if the container does not know how to get an instance
            of the specified type. Throws an exception if the container does know how
            to get an instance of the specified type, but failed to do so.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.IFactory.GetAllInstances(System.Type)">
            <summary>
            Gets all instances of a service.
            </summary>
            <param name="serviceType">The type of the service.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.IFactory.GetAllInstances``1">
            <summary>
            Gets all instances of a service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Composing.IFactory.Release(System.Object)">
            <summary>
            Releases an instance.
            </summary>
            <param name="instance">The instance.</param>
            <remarks>
            See https://stackoverflow.com/questions/14072208 and http://kozmic.net/2010/08/27/must-i-release-everything-when-using-windsor/,
            you only need to release instances you specifically resolved, and even then, if done right, that might never be needed. For
            instance, LightInject does not require this and does not support it - should work with scopes.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.IFactory.BeginScope">
            <summary>
            Begins a scope.
            </summary>
            <remarks>
            <para>When the scope is disposed, scoped instances that have been created during the scope are disposed.</para>
            <para>Scopes can be nested. Each instance is disposed individually.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.IFactory.EnablePerWebRequestScope">
            <summary>
            Enables per-request scope.
            </summary>
            <remarks>
            <para>Ties scopes to web requests.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Composing.IRegister">
            <summary>
            Defines a service register for Umbraco.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.IRegister.Concrete">
            <summary>
            Gets the concrete container.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.IRegister.Register(System.Type,Umbraco.Core.Composing.Lifetime)">
            <summary>
            Registers a service as its own implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.IRegister.Register(System.Type,System.Type,Umbraco.Core.Composing.Lifetime)">
            <summary>
            Registers a service with an implementation type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.IRegister.Register``1(System.Func{Umbraco.Core.Composing.IFactory,``0},Umbraco.Core.Composing.Lifetime)">
            <summary>
            Registers a service with an implementation factory.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.IRegister.Register(System.Type,System.Object)">
            <summary>
            Registers a service with an implementing instance.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.IRegister.RegisterFor``2(Umbraco.Core.Composing.Lifetime)">
            <summary>
            Registers a service for a target, as its own implementation.
            </summary>
            <remarks>
            There can only be one implementation or instanced registered for a service and target;
            what happens if many are registered is not specified.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.IRegister.RegisterFor``2(System.Type,Umbraco.Core.Composing.Lifetime)">
            <summary>
            Registers a service for a target, with an implementation type.
            </summary>
            <remarks>
            There can only be one implementation or instanced registered for a service and target;
            what happens if many are registered is not specified.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.IRegister.RegisterFor``2(System.Func{Umbraco.Core.Composing.IFactory,``0},Umbraco.Core.Composing.Lifetime)">
            <summary>
            Registers a service for a target, with an implementation factory.
            </summary>
            <remarks>
            There can only be one implementation or instanced registered for a service and target;
            what happens if many are registered is not specified.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.IRegister.RegisterFor``2(``0)">
            <summary>
            Registers a service for a target, with an implementing instance.
            </summary>
            <remarks>
            There can only be one implementation or instanced registered for a service and target;
            what happens if many are registered is not specified.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.IRegister.RegisterAuto(System.Type)">
            <summary>
            Registers a base type for auto-registration.
            </summary>
            <remarks>
            <para>Auto-registration means that anytime the container is asked to create an instance
            of a type deriving from <paramref name="serviceBaseType"/>, it will first register that
            type automatically.</para>
            <para>This can be used for instance for views or controllers. Then, one just needs to
            register a common base class or interface, and the container knows how to create instances.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.IRegister.ConfigureForWeb">
            <summary>
            Configures the container for web support.
            </summary>
            <remarks>
            <para>Enables support for MVC, WebAPI, but *not* per-request scope. This is used early in the boot
            process, where anything "scoped" should not be linked to a web request.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.IRegister.CreateFactory">
            <summary>
            Creates the factory.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.LazyCollectionBuilderBase`3">
            <summary>
            Implements a lazy collection builder.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Composing.LazyCollectionBuilderBase`3.Clear">
            <summary>
            Clears all types in the collection.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.LazyCollectionBuilderBase`3.Add``1">
            <summary>
            Adds a type to the collection.
            </summary>
            <typeparam name="T">The type to add.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.LazyCollectionBuilderBase`3.Add(System.Type)">
            <summary>
            Adds a type to the collection.
            </summary>
            <param name="type">The type to add.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.LazyCollectionBuilderBase`3.Add(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Adds a types producer to the collection.
            </summary>
            <param name="producer">The types producer.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.LazyCollectionBuilderBase`3.Exclude``1">
            <summary>
            Excludes a type from the collection.
            </summary>
            <typeparam name="T">The type to exclude.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.LazyCollectionBuilderBase`3.Exclude(System.Type)">
            <summary>
            Excludes a type from the collection.
            </summary>
            <param name="type">The type to exclude.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:Umbraco.Core.Composing.Lifetime">
            <summary>
            Specifies the lifetime of a registered instance.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Composing.Lifetime.Transient">
            <summary>
            Always get a new instance.
            </summary>
            <remarks>Corresponds to Transient in LightInject, Castle Windsor
            or MS.DI, PerDependency in Autofac.</remarks>
        </member>
        <member name="F:Umbraco.Core.Composing.Lifetime.Request">
            <summary>
            One unique instance per request.
            </summary>
            <remarks>
            <para>
            Any instance created with this lifetime will be disposed at the end of a request.
            </para>
            Corresponds to
            <para>
            PerRequestLifeTime in LightInject - means transient but disposed at the end of the current web request.
            see: https://github.com/seesharper/LightInject/issues/494#issuecomment-518493262
            </para>
            <para>
            Scoped in MS.DI - means one per web request.
            see https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.2#service-lifetimes</para>
            <para>
            InstancePerRequest in Autofac - means one per web request.
            see https://autofaccn.readthedocs.io/en/latest/lifetime/instance-scope.html#instance-per-request
            But "Behind the scenes, though, it’s still just instance per matching lifetime scope."
            </para>
            <para>
            LifestylePerWebRequest in Castle Windsor - means one per web request.
            see https://github.com/castleproject/Windsor/blob/master/docs/mvc-tutorial-part-7-lifestyles.md#the-perwebrequest-lifestyle
            </para>
            </remarks>        
        </member>
        <member name="F:Umbraco.Core.Composing.Lifetime.Scope">
            <summary>
            One unique instance per scope.
            </summary>
            <remarks>
            <para>
            Any instance created with this lifetime will be disposed at the end of the current scope.
            </para>
            Corresponds to
            <para>PerScopeLifetime in LightInject (when in a request, means one per web request)</para>
            <para>
            Scoped in MS.DI (when in a request, means one per web request)
            see https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.2#service-lifetimes</para>
            <para>
            InstancePerLifetimeScope in Autofac (when in a request, means one per web request)
            see https://autofaccn.readthedocs.io/en/latest/lifetime/instance-scope.html#instance-per-lifetime-scope
            Also note that Autofac's InstancePerRequest is the same as this, see https://autofaccn.readthedocs.io/en/latest/lifetime/instance-scope.html#instance-per-request
            it says "Behind the scenes, though, it’s still just instance per matching lifetime scope."
            </para>
            <para>
            LifestyleScoped in Castle Windsor
            </para>
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Composing.Lifetime.Singleton">
            <summary>
            One unique instance per container.
            </summary>
            <remarks>Corresponds to Singleton in LightInject, Castle Windsor
            or MS.DI and to SingleInstance in Autofac.</remarks>
        </member>
        <member name="T:Umbraco.Core.Composing.LightInject.LightInjectContainer">
            <summary>
            Implements DI with LightInject.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.#ctor(LightInject.ServiceContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.LightInject.LightInjectContainer"/> with a LightInject container.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.Create">
            <summary>
            Creates a new instance of the <see cref="T:Umbraco.Core.Composing.LightInject.LightInjectContainer"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.CreateServiceContainer">
            <summary>
            Creates a new instance of the LightInject service container.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.LightInject.LightInjectContainer.Container">
            <summary>
            Gets the LightInject container.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.LightInject.LightInjectContainer.Concrete">
            <inheritdoc cref="T:Umbraco.Core.Composing.IRegister"/>
            <inheritdoc cref="T:Umbraco.Core.Composing.IFactory"/>
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.CreateFactory">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.GetInstance(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.GetInstanceFor``2">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.TryGetInstance(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.GetAllInstances``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.GetAllInstances(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.Release(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.Register(System.Type,Umbraco.Core.Composing.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.Register(System.Type,System.Type,Umbraco.Core.Composing.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.Register``1(System.Func{Umbraco.Core.Composing.IFactory,``0},Umbraco.Core.Composing.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.Register(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.RegisterFor``2(Umbraco.Core.Composing.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.RegisterFor``2(System.Type,Umbraco.Core.Composing.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.RegisterFor``2(System.Func{Umbraco.Core.Composing.IFactory,``0},Umbraco.Core.Composing.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.RegisterFor``2(``0)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.RegisterAuto(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.BeginScope">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.ConfigureForWeb">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectContainer.EnablePerWebRequestScope">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Composing.LightInject.LightInjectException">
            <summary>
            Represents errors that occur due to LightInject.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.LightInject.LightInjectException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.LightInject.LightInjectException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.LightInject.LightInjectException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.LightInject.LightInjectException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectException.TryThrow(System.Exception)">
            <summary>
            Tries to throw the exception with additional details.
            </summary>
            <param name="e">The exception.</param>
            <exception cref="T:Umbraco.Core.Composing.LightInject.LightInjectException"></exception>
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectException.TryThrow(System.Exception,System.Type)">
            <summary>
            Tries to throw the exception with additional details.
            </summary>
            <param name="e">The exception.</param>
            <param name="implementingType">The implementing type.</param>
            <exception cref="T:Umbraco.Core.Composing.LightInject.LightInjectException"></exception>
        </member>
        <member name="M:Umbraco.Core.Composing.LightInject.LightInjectException.WriteDetails(System.InvalidOperationException,System.Text.StringBuilder)">
            <summary>
            Writes the details.
            </summary>
            <param name="ex">The exception.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to write the details to.</param>
        </member>
        <member name="T:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3">
            <summary>
            Implements an ordered collection builder.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.Clear">
            <summary>
            Clears all types in the collection.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.Append``1">
            <summary>
            Appends a type to the collection.
            </summary>
            <typeparam name="T">The type to append.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.Append(System.Type)">
            <summary>
            Appends a type to the collection.
            </summary>
            <param name="type">The type to append.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.Append(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
             Appends types to the collections.
            </summary>
            <param name="types">The types to append.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.Insert``1(System.Int32)">
            <summary>
            Inserts a type into the collection.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="index">The optional index.</param>
            <returns>The builder.</returns>
            <remarks>Throws if the index is out of range.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.Insert(System.Type)">
            <summary>
            Inserts a type into the collection.
            </summary>
            <param name="type">The type to insert.</param>
            <returns>The builder.</returns>
            <remarks>Throws if the index is out of range.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.Insert(System.Int32,System.Type)">
            <summary>
            Inserts a type into the collection.
            </summary>
            <param name="index">The index.</param>
            <param name="type">The type to insert.</param>
            <returns>The builder.</returns>
            <remarks>Throws if the index is out of range.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.InsertBefore``2">
            <summary>
            Inserts a type before another type.
            </summary>
            <typeparam name="TBefore">The other type.</typeparam>
            <typeparam name="T">The type to insert.</typeparam>
            <returns>The builder.</returns>
            <remarks>Throws if both types are identical, or if the other type does not already belong to the collection.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.InsertBefore(System.Type,System.Type)">
            <summary>
            Inserts a type before another type.
            </summary>
            <param name="typeBefore">The other type.</param>
            <param name="type">The type to insert.</param>
            <returns>The builder.</returns>
            <remarks>Throws if both types are identical, or if the other type does not already belong to the collection.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.InsertAfter``2">
            <summary>
            Inserts a type after another type.
            </summary>
            <typeparam name="TAfter">The other type.</typeparam>
            <typeparam name="T">The type to append.</typeparam>
            <returns>The builder.</returns>
            <remarks>Throws if both types are identical, or if the other type does not already belong to the collection.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.InsertAfter(System.Type,System.Type)">
            <summary>
            Inserts a type after another type.
            </summary>
            <param name="typeAfter">The other type.</param>
            <param name="type">The type to insert.</param>
            <returns>The builder.</returns>
            <remarks>Throws if both types are identical, or if the other type does not already belong to the collection.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.Remove``1">
            <summary>
            Removes a type from the collection.
            </summary>
            <typeparam name="T">The type to remove.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.Remove(System.Type)">
            <summary>
            Removes a type from the collection.
            </summary>
            <param name="type">The type to remove.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.Replace``2">
            <summary>
            Replaces a type in the collection.
            </summary>
            <typeparam name="TReplaced">The type to replace.</typeparam>
            <typeparam name="T">The type to insert.</typeparam>
            <returns>The builder.</returns>
            <remarks>Throws if the type to replace does not already belong to the collection.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.OrderedCollectionBuilderBase`3.Replace(System.Type,System.Type)">
            <summary>
            Replaces a type in the collection.
            </summary>
            <param name="typeReplaced">The type to replace.</param>
            <param name="type">The type to insert.</param>
            <returns>The builder.</returns>
            <remarks>Throws if the type to replace does not already belong to the collection.</remarks>
        </member>
        <member name="T:Umbraco.Core.Composing.TargetedServiceFactory`1">
            <summary>
            Provides a base class for targeted service factories.
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Composing.TypeFinder">
            <summary>
            A utility class to find all classes of a certain type by reflection in the current bin folder
            of the web application.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.GetAllAssemblies">
            <summary>
            lazily load a reference to all assemblies and only local assemblies.
            This is a modified version of: http://www.dominicpettifer.co.uk/Blog/44/how-to-get-a-reference-to-all-assemblies-in-the--bin-folder
            </summary>
            <remarks>
            We do this because we cannot use AppDomain.Current.GetAssemblies() as this will return only assemblies that have been
            loaded in the CLR, not all assemblies.
            See these threads:
            http://issues.umbraco.org/issue/U5-198
            http://stackoverflow.com/questions/3552223/asp-net-appdomain-currentdomain-getassemblies-assemblies-missing-after-app
            http://stackoverflow.com/questions/2477787/difference-between-appdomain-getassemblies-and-buildmanager-getreferencedassembl
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.GetAssembliesWithKnownExclusions(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Return a list of found local Assemblies excluding the known assemblies we don't want to scan
            and excluding the ones passed in and excluding the exclusion list filter, the results of this are
            cached for performance reasons.
            </summary>
            <param name="excludeFromResults"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.GetFilteredAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String[])">
            <summary>
            Return a distinct list of found local Assemblies and excluding the ones passed in and excluding the exclusion list filter
            </summary>
            <param name="excludeFromResults"></param>
            <param name="exclusionFilter"></param>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Core.Composing.TypeFinder.KnownAssemblyExclusionFilter">
            <summary>
            this is our assembly filter to filter out known types that def don't contain types we'd like to find or plugins
            </summary>
            <remarks>
            NOTE the comma vs period... comma delimits the name in an Assembly FullName property so if it ends with comma then its an exact name match
            NOTE this means that "foo." will NOT exclude "foo.dll" but only "foo.*.dll"
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.FindClassesOfTypeWithAttribute``2">
            <summary>
            Finds any classes derived from the type T that contain the attribute TAttribute
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.FindClassesOfTypeWithAttribute``2(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Finds any classes derived from the type T that contain the attribute TAttribute
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.FindClassesOfTypeWithAttribute``2(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Finds any classes derived from the type T that contain the attribute TAttribute
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.FindClassesOfTypeWithAttribute``1(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Finds any classes derived from the assignTypeFrom Type that contain the attribute TAttribute
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="assignTypeFrom"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.FindClassesOfType``1">
            <summary>
            Searches all filtered local assemblies specified for classes of the type passed in.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Returns all types found of in the assemblies specified of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Returns all types found of in the assemblies specified of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.FindClassesWithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Finds the classes with attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies">The assemblies.</param>
            <param name="onlyConcreteClasses">if set to <c>true</c> only concrete classes.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.FindClassesWithAttribute(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Finds any classes with the attribute.
            </summary>
            <param name="attributeType">The attribute type </param>
            <param name="assemblies">The assemblies.</param>
            <param name="onlyConcreteClasses">if set to <c>true</c> only concrete classes.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.FindClassesWithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Finds the classes with attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.FindClassesWithAttribute``1">
            <summary>
            Finds the classes with attribute in filtered local assemblies
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeFinder.GetClassesWithBaseType(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean,System.Func{System.Type,System.Boolean})">
            <summary>
            Finds types that are assignable from the assignTypeFrom parameter and will scan for these types in the assembly
            list passed in, however we will only scan assemblies that have a reference to the assignTypeFrom Type or any type
            deriving from the base type.
            </summary>
            <param name="baseType"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <param name="additionalFilter">An additional filter to apply for what types will actually be included in the return value</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Composing.TypeHelper">
            <summary>
            A utility class for type checking, this provides internal caching so that calls to these methods will be faster
            than doing a manual type check in c#
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.CreateGenericEnumerableFromObject(System.Object)">
            <summary>
            Based on a type we'll check if it is IEnumerable{T} (or similar) and if so we'll return a List{T}, this will also deal with array types and return List{T} for those too.
            If it cannot be done, null is returned.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.IsOverride(System.Reflection.MethodInfo)">
            <summary>
            Checks if the method is actually overriding a base method
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.GetReferencingAssemblies(System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Find all assembly references that are referencing the assignTypeFrom Type's assembly found in the assemblyList
            </summary>
            <param name="assembly">The referenced assembly.</param>
            <param name="assemblies">A list of assemblies.</param>
            <returns></returns>
            <remarks>
            If the assembly of the assignTypeFrom Type is in the App_Code assembly, then we return nothing since things cannot
            reference that assembly, same with the global.asax assembly.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.HasReference(System.Reflection.Assembly,System.String)">
            <summary>
            Determines if an assembly references another assembly.
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.IsNonStaticClass(System.Type)">
            <summary>
            Returns true if the type is a class and is not static
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.IsStaticClass(System.Type)">
            <summary>
            Returns true if the type is a static class
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            In IL a static class is abstract and sealed
            see: http://stackoverflow.com/questions/1175888/determine-if-a-type-is-static
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.GetLowestBaseType(System.Type[])">
            <summary>
            Finds a lowest base class amongst a collection of types
            </summary>
            <param name="types"></param>
            <returns></returns>
            <remarks>
            The term 'lowest' refers to the most base class of the type collection.
            If a base type is not found amongst the type collection then an invalid attempt is returned.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.IsTypeAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether the type <paramref name="implementation"/> is assignable from the specified implementation,
            and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <param name="contract">The type of the contract.</param>
            <param name="implementation">The implementation.</param>
            <returns>
                <c>true</c> if [is type assignable from] [the specified contract]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.IsTypeAssignableFrom``1(System.Type)">
            <summary>
            Determines whether the type <paramref name="implementation"/> is assignable from the specified implementation <typeparamref name="TContract"/>,
            and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.IsTypeAssignableFrom``1(System.Object)">
            <summary>
            Determines whether the object instance <paramref name="implementation"/> is assignable from the specified implementation <typeparamref name="TContract"/>,
            and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.IsValueType(System.Type)">
            <summary>
            A method to determine whether <paramref name="implementation"/> represents a value type.
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.IsImplicitValueType(System.Type)">
            <summary>
            A method to determine whether <paramref name="implementation"/> is an implied value type (<see cref="P:System.Type.IsValueType"/>, <see cref="P:System.Type.IsEnum"/> or a string).
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.GetProperty(System.Type,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns (and caches) a PropertyInfo from a type
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="mustRead"></param>
            <param name="mustWrite"></param>
            <param name="includeIndexed"></param>
            <param name="caseSensitive"> </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.CachedDiscoverableFields(System.Type)">
            <summary>
            Gets (and caches) <see cref="T:System.Reflection.FieldInfo"/> discoverable in the current <see cref="T:System.AppDomain"/> for a given <paramref name="type"/>.
            </summary>
            <param name="type">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeHelper.CachedDiscoverableProperties(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets (and caches) <see cref="T:System.Reflection.PropertyInfo"/> discoverable in the current <see cref="T:System.AppDomain"/> for a given <paramref name="type"/>.
            </summary>
            <param name="type">The source.</param>
            <param name="mustRead">true if the properties discovered are readable</param>
            <param name="mustWrite">true if the properties discovered are writable</param>
            <param name="includeIndexed">true if the properties discovered are indexable</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Composing.TypeLoader">
            <summary>
            Provides methods to find and instantiate types.
            </summary>
            <remarks>
            <para>This class should be used to get all types, the <see cref="T:Umbraco.Core.Composing.TypeFinder"/> class should never be used directly.</para>
            <para>In most cases this class is not used directly but through extension methods that retrieve specific types.</para>
            <para>This class caches the types it knows to avoid excessive assembly scanning and shorten startup times, relying
            on a hash of the DLLs in the ~/bin folder to check for cache expiration.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.#ctor(Umbraco.Core.Cache.IAppPolicyCache,System.String,Umbraco.Core.Logging.IProfilingLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.TypeLoader"/> class.
            </summary>
            <param name="runtimeCache">The application runtime cache.</param>
            <param name="localTempPath">Files storage location.</param>
            <param name="logger">A profiling logger.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.#ctor(Umbraco.Core.Cache.IAppPolicyCache,System.String,Umbraco.Core.Logging.IProfilingLogger,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.TypeLoader"/> class.
            </summary>
            <param name="runtimeCache">The application runtime cache.</param>
            <param name="localTempPath">Files storage location.</param>
            <param name="logger">A profiling logger.</param>
            <param name="detectChanges">Whether to detect changes using hashes.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.#ctor">
            <summary>
            Initializes a new, test/blank, instance of the <see cref="T:Umbraco.Core.Composing.TypeLoader"/> class.
            </summary>
            <remarks>The initialized instance cannot get types.</remarks>
        </member>
        <member name="P:Umbraco.Core.Composing.TypeLoader.AssembliesToScan">
            <summary>
            Gets or sets the set of assemblies to scan.
            </summary>
            <remarks>
            <para>If not explicitly set, defaults to all assemblies except those that are know to not have any of the
            types we might scan. Because we only scan for application types, this means we can safely exclude GAC assemblies
            for example.</para>
            <para>This is for unit tests.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Composing.TypeLoader.TypeLists">
            <summary>
            Gets the type lists.
            </summary>
            <remarks>For unit tests.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.AddTypeList(Umbraco.Core.Composing.TypeLoader.TypeList)">
            <summary>
            Sets a type list.
            </summary>
            <remarks>For unit tests.</remarks>
        </member>
        <member name="P:Umbraco.Core.Composing.TypeLoader.RequiresRescanning">
            <summary>
            Gets a value indicating whether the assemblies in bin, app_code, global.asax, etc... have changed since they were last hashed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.TypeLoader.CachedAssembliesHash">
            <summary>
            Gets the currently cached hash value of the scanned assemblies.
            </summary>
            <value>The cached hash value, or string.Empty if no cache is found.</value>
        </member>
        <member name="P:Umbraco.Core.Composing.TypeLoader.CurrentAssembliesHash">
            <summary>
            Gets the current assemblies hash based on creating a hash from the assemblies in various places.
            </summary>
            <value>The current hash.</value>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.WriteCacheTypesHash">
            <summary>
            Writes the assembly hash file.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.GetFileHash(System.Collections.Generic.IEnumerable{System.Tuple{System.IO.FileSystemInfo,System.Boolean}},Umbraco.Core.Logging.IProfilingLogger)">
            <summary>
            Returns a unique hash for a combination of FileInfo objects.
            </summary>
            <param name="filesAndFolders">A collection of files.</param>
            <param name="logger">A profiling logger.</param>
            <returns>The hash.</returns>
            <remarks>Each file is a tuple containing the FileInfo object and a boolean which indicates whether to hash the
            file properties (false) or the file contents (true).</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.GetFileHash(System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo},Umbraco.Core.Logging.IProfilingLogger)">
            <summary>
            Returns a unique hash for a combination of FileInfo objects.
            </summary>
            <param name="filesAndFolders">A collection of files.</param>
            <param name="logger">A profiling logger.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.ClearTypesCache">
            <summary>
            Removes cache files and internal cache.
            </summary>
            <remarks>Generally only used for resetting cache, for example during the install process.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.GetAssemblyAttributes``1">
            <summary>
            Gets the assembly attributes of the specified type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>
            The assembly attributes of the specified type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.GetAssemblyAttributes">
            <summary>
            Gets all the assembly attributes.
            </summary>
            <returns>
            All assembly attributes.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.GetAssemblyAttributes(System.Type[])">
            <summary>
            Gets the assembly attributes of the specified <paramref name="attributeTypes" />.
            </summary>
            <param name="attributeTypes">The attribute types.</param>
            <returns>
            The assembly attributes of the specified types.
            </returns>
            <exception cref="T:System.ArgumentNullException">attributeTypes</exception>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.GetTypes``1(System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets class types inheriting from or implementing the specified type
            </summary>
            <typeparam name="T">The type to inherit from or implement.</typeparam>
            <param name="cache">Indicates whether to use cache for type resolution.</param>
            <param name="specificAssemblies">A set of assemblies for type resolution.</param>
            <returns>All class types inheriting from or implementing the specified type.</returns>
            <remarks>Caching is disabled when using specific assemblies.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.GetTypesWithAttribute``2(System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets class types inheriting from or implementing the specified type and marked with the specified attribute.
            </summary>
            <typeparam name="T">The type to inherit from or implement.</typeparam>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="cache">Indicates whether to use cache for type resolution.</param>
            <param name="specificAssemblies">A set of assemblies for type resolution.</param>
            <returns>All class types inheriting from or implementing the specified type and marked with the specified attribute.</returns>
            <remarks>Caching is disabled when using specific assemblies.</remarks>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.GetAttributedTypes``1(System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets class types marked with the specified attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="cache">Indicates whether to use cache for type resolution.</param>
            <param name="specificAssemblies">A set of assemblies for type resolution.</param>
            <returns>All class types marked with the specified attribute.</returns>
            <remarks>Caching is disabled when using specific assemblies.</remarks>
        </member>
        <member name="T:Umbraco.Core.Composing.TypeLoader.TypeList">
            <summary>
            Represents a list of types obtained by looking for types inheriting/implementing a
            specified type, and/or marked with a specified attribute type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.TypeList.Add(System.Type)">
            <summary>
            Adds a type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Composing.TypeLoader.TypeList.Types">
            <summary>
            Gets the types.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException">
            <summary>
            Represents the error that occurs when a type was not found in the cache type list with the specified TypeResolutionKind.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Umbraco.Core.Composing.TypeCollectionBuilderBase`3">
            <summary>
            Provides a base class for collections of types.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.WeightAttribute">
            <summary>
            Specifies the weight of pretty much anything.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Composing.WeightAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Composing.WeightAttribute"/> class with a weight.
            </summary>
            <param name="weight"></param>
        </member>
        <member name="P:Umbraco.Core.Composing.WeightAttribute.Weight">
            <summary>
            Gets the weight value.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Composing.WeightedCollectionBuilderBase`3">
            <summary>
            Implements a weighted collection builder.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Composing.WeightedCollectionBuilderBase`3.Clear">
            <summary>
            Clears all types in the collection.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.WeightedCollectionBuilderBase`3.Add``1">
            <summary>
            Adds a type to the collection.
            </summary>
            <typeparam name="T">The type to add.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.WeightedCollectionBuilderBase`3.Add(System.Type)">
            <summary>
            Adds a type to the collection.
            </summary>
            <param name="type">The type to add.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.WeightedCollectionBuilderBase`3.Add(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds types to the collection.
            </summary>
            <param name="types">The types to add.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.WeightedCollectionBuilderBase`3.Remove``1">
            <summary>
            Removes a type from the collection.
            </summary>
            <typeparam name="T">The type to remove.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Core.Composing.WeightedCollectionBuilderBase`3.Remove(System.Type)">
            <summary>
            Removes a type from the collection.
            </summary>
            <param name="type">The type to remove.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:Umbraco.Core.CompositionExtensions">
            <summary>
            Provides extension methods to the <see cref="T:Umbraco.Core.Composing.Composition"/> class.
            </summary>
            <summary>
            Provides extension methods to the <see cref="T:Umbraco.Core.Composing.Composition"/> class.
            </summary>
            <summary>
            Provides extension methods to the <see cref="T:Umbraco.Core.Composing.Composition"/> class.
            </summary>
            <summary>
            Provides extension methods to the <see cref="T:Umbraco.Core.Composing.Composition"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.CacheRefreshers(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the cache refreshers collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.Mappers(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the mappers collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.PackageActions(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the package actions collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.DataEditors(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the data editor collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.DataValueReferenceFactories(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the data value reference factory collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.PropertyValueConverters(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the property value converters collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.UrlSegmentProviders(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the URL segment providers collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.ManifestValueValidators(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the validators collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.ManifestFilters(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the manifest filter collection builder.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.Components(Umbraco.Core.Composing.Composition)">
            <summary>
            Gets the components collection builder.
            </summary>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetCultureDictionaryFactory``1(Umbraco.Core.Composing.Composition)">
            <summary>
            Sets the culture dictionary factory.
            </summary>
            <typeparam name="T">The type of the factory.</typeparam>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetCultureDictionaryFactory(Umbraco.Core.Composing.Composition,System.Func{Umbraco.Core.Composing.IFactory,Umbraco.Core.Dictionary.ICultureDictionaryFactory})">
            <summary>
            Sets the culture dictionary factory.
            </summary>
            <param name="composition">The composition.</param>
            <param name="factory">A function creating a culture dictionary factory.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetCultureDictionaryFactory(Umbraco.Core.Composing.Composition,Umbraco.Core.Dictionary.ICultureDictionaryFactory)">
            <summary>
            Sets the culture dictionary factory.
            </summary>
            <param name="composition">The composition.</param>
            <param name="factory">A factory.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetPublishedContentModelFactory``1(Umbraco.Core.Composing.Composition)">
            <summary>
            Sets the published content model factory.
            </summary>
            <typeparam name="T">The type of the factory.</typeparam>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetPublishedContentModelFactory(Umbraco.Core.Composing.Composition,System.Func{Umbraco.Core.Composing.IFactory,Umbraco.Core.Models.PublishedContent.IPublishedModelFactory})">
            <summary>
            Sets the published content model factory.
            </summary>
            <param name="composition">The composition.</param>
            <param name="factory">A function creating a published content model factory.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetPublishedContentModelFactory(Umbraco.Core.Composing.Composition,Umbraco.Core.Models.PublishedContent.IPublishedModelFactory)">
            <summary>
            Sets the published content model factory.
            </summary>
            <param name="composition">The composition.</param>
            <param name="factory">A published content model factory.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetServerRegistrar``1(Umbraco.Core.Composing.Composition)">
            <summary>
            Sets the server registrar.
            </summary>
            <typeparam name="T">The type of the server registrar.</typeparam>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetServerRegistrar(Umbraco.Core.Composing.Composition,System.Func{Umbraco.Core.Composing.IFactory,Umbraco.Core.Sync.IServerRegistrar})">
            <summary>
            Sets the server registrar.
            </summary>
            <param name="composition">The composition.</param>
            <param name="factory">A function creating a server registrar.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetServerRegistrar(Umbraco.Core.Composing.Composition,Umbraco.Core.Sync.IServerRegistrar)">
            <summary>
            Sets the server registrar.
            </summary>
            <param name="composition">The composition.</param>
            <param name="registrar">A server registrar.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetServerMessenger``1(Umbraco.Core.Composing.Composition)">
            <summary>
            Sets the server messenger.
            </summary>
            <typeparam name="T">The type of the server registrar.</typeparam>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetServerMessenger(Umbraco.Core.Composing.Composition,System.Func{Umbraco.Core.Composing.IFactory,Umbraco.Core.Sync.IServerMessenger})">
            <summary>
            Sets the server messenger.
            </summary>
            <param name="composition">The composition.</param>
            <param name="factory">A function creating a server messenger.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetServerMessenger(Umbraco.Core.Composing.Composition,Umbraco.Core.Sync.IServerMessenger)">
            <summary>
            Sets the server messenger.
            </summary>
            <param name="composition">The composition.</param>
            <param name="registrar">A server messenger.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetDatabaseServerMessengerOptions(Umbraco.Core.Composing.Composition,System.Func{Umbraco.Core.Composing.IFactory,Umbraco.Core.Sync.DatabaseServerMessengerOptions})">
            <summary>
            Sets the database server messenger options.
            </summary>
            <param name="composition">The composition.</param>
            <param name="factory">A function creating the options.</param>
            <remarks>Use DatabaseServerRegistrarAndMessengerComposer.GetDefaultOptions to get the options that Umbraco would use by default.</remarks>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetDatabaseServerMessengerOptions(Umbraco.Core.Composing.Composition,Umbraco.Core.Sync.DatabaseServerMessengerOptions)">
            <summary>
            Sets the database server messenger options.
            </summary>
            <param name="composition">The composition.</param>
            <param name="options">Options.</param>
            <remarks>Use DatabaseServerRegistrarAndMessengerComposer.GetDefaultOptions to get the options that Umbraco would use by default.</remarks>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetShortStringHelper``1(Umbraco.Core.Composing.Composition)">
            <summary>
            Sets the short string helper.
            </summary>
            <typeparam name="T">The type of the short string helper.</typeparam>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetShortStringHelper(Umbraco.Core.Composing.Composition,System.Func{Umbraco.Core.Composing.IFactory,Umbraco.Core.Strings.IShortStringHelper})">
            <summary>
            Sets the short string helper.
            </summary>
            <param name="composition">The composition.</param>
            <param name="factory">A function creating a short string helper.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetShortStringHelper(Umbraco.Core.Composing.Composition,Umbraco.Core.Strings.IShortStringHelper)">
            <summary>
            Sets the short string helper.
            </summary>
            <param name="composition">A composition.</param>
            <param name="helper">A short string helper.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetMediaFileSystem(Umbraco.Core.Composing.Composition,System.Func{Umbraco.Core.Composing.IFactory,Umbraco.Core.IO.IFileSystem})">
            <summary>
            Sets the underlying media filesystem.
            </summary>
            <param name="composition">A composition.</param>
            <param name="filesystemFactory">A filesystem factory.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetMediaFileSystem(Umbraco.Core.Composing.Composition,System.Func{Umbraco.Core.IO.IFileSystem})">
            <summary>
            Sets the underlying media filesystem.
            </summary>
            <param name="composition">A composition.</param>
            <param name="filesystemFactory">A filesystem factory.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetLogViewer``1(Umbraco.Core.Composing.Composition)">
            <summary>
            Sets the log viewer.
            </summary>
            <typeparam name="T">The type of the log viewer.</typeparam>
            <param name="composition">The composition.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetLogViewer(Umbraco.Core.Composing.Composition,System.Func{Umbraco.Core.Composing.IFactory,Umbraco.Core.Logging.Viewer.ILogViewer})">
            <summary>
            Sets the log viewer.
            </summary>
            <param name="composition">The composition.</param>
            <param name="factory">A function creating a log viewer.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.SetLogViewer(Umbraco.Core.Composing.Composition,Umbraco.Core.Logging.Viewer.ILogViewer)">
            <summary>
            Sets the log viewer.
            </summary>
            <param name="composition">A composition.</param>
            <param name="helper">A log viewer.</param>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.RegisterEssentials(Umbraco.Core.Composing.Composition,Umbraco.Core.Logging.ILogger,Umbraco.Core.Logging.IProfiler,Umbraco.Core.Logging.IProfilingLogger,Umbraco.Core.IMainDom,Umbraco.Core.Cache.AppCaches,Umbraco.Core.Persistence.IUmbracoDatabaseFactory,Umbraco.Core.Composing.TypeLoader,Umbraco.Core.IRuntimeState)">
            <summary>
            Registers essential services.
            </summary>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.RegisterFileSystem``2(Umbraco.Core.Composing.Composition)">
            <summary>
            Registers a filesystem.
            </summary>
            <typeparam name="TFileSystem">The type of the filesystem.</typeparam>
            <typeparam name="TImplementing">The implementing type.</typeparam>
            <param name="composition">The composition.</param>
            <returns>The register.</returns>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.RegisterFileSystem``1(Umbraco.Core.Composing.Composition)">
            <summary>
            Registers a filesystem.
            </summary>
            <typeparam name="TFileSystem">The type of the filesystem.</typeparam>
            <param name="composition">The composition.</param>
            <returns>The register.</returns>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.RegisterUnique``1(Umbraco.Core.Composing.Composition)">
            <summary>
            Registers a unique service as its own implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.RegisterUnique``2(Umbraco.Core.Composing.Composition)">
            <summary>
            Registers a unique service with an implementation type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.RegisterUniqueFor``3(Umbraco.Core.Composing.Composition)">
            <summary>
            Registers a unique service with an implementation type, for a target.
            </summary>
        </member>
        <member name="M:Umbraco.Core.CompositionExtensions.RegisterUnique``1(Umbraco.Core.Composing.Composition,``0)">
            <summary>
            Registers a unique service with an implementing instance.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Exceptions.PanicException">
            <summary>
            Represents an internal exception that in theory should never been thrown, it is only thrown in circumstances that should never happen.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Core.Exceptions.PanicException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.PanicException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Exceptions.PanicException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.PanicException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.PanicException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.PanicException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.PanicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.PanicException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Umbraco.Core.Exceptions.ArgumentNullOrEmptyException">
            <summary>
            The exception that is thrown when a null reference, or an empty argument, is passed to a method that does not accept it as a valid argument.
            </summary>
            <seealso cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Umbraco.Core.Exceptions.ArgumentNullOrEmptyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.ArgumentNullOrEmptyException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Exceptions.ArgumentNullOrEmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.ArgumentNullOrEmptyException" /> class with the name of the parameter that caused this exception.
            </summary>
            <param name="paramName">The named of the parameter that caused the exception.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.ArgumentNullOrEmptyException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.ArgumentNullOrEmptyException" /> class with a specified error message and the name of the parameter that caused this exception.
            </summary>
            <param name="paramName">The named of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.ArgumentNullOrEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.ArgumentNullOrEmptyException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for this exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.ArgumentNullOrEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.ArgumentNullOrEmptyException" /> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">An object that describes the source or destination of the serialized data.</param>
        </member>
        <member name="T:Umbraco.Core.Exceptions.AuthorizationException">
            <summary>
            The exception that is thrown when authorization failed.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Core.Exceptions.AuthorizationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.AuthorizationException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Exceptions.AuthorizationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.AuthorizationException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.AuthorizationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.AuthorizationException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.AuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.AuthorizationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Umbraco.Core.Exceptions.BootFailedException">
            <summary>
            An exception that is thrown if the Umbraco application cannot boot.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="F:Umbraco.Core.Exceptions.BootFailedException.DefaultMessage">
            <summary>
            Defines the default boot failed exception message.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Exceptions.BootFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.BootFailedException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Exceptions.BootFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.BootFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message
            and a reference to the inner exception which is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception, or null.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.BootFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.BootFailedException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.BootFailedException.Rethrow(Umbraco.Core.Exceptions.BootFailedException)">
            <summary>
            Rethrows a captured <see cref="T:Umbraco.Core.Exceptions.BootFailedException" />.
            </summary>
            <param name="bootFailedException">The boot failed exception.</param>
            <exception cref="T:Umbraco.Core.Exceptions.BootFailedException">
            </exception>
            <remarks>
            The exception can be null, in which case a default message is used.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Exceptions.DataOperationException`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="P:Umbraco.Core.Exceptions.DataOperationException`1.Operation">
            <summary>
            Gets the operation.
            </summary>
            <value>
            The operation.
            </value>
            <remarks>
            This object should be serializable to prevent a <see cref="T:System.Runtime.Serialization.SerializationException" /> to be thrown.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Exceptions.DataOperationException`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.DataOperationException`1" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Exceptions.DataOperationException`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.DataOperationException`1" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.DataOperationException`1.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.DataOperationException`1" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.DataOperationException`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.DataOperationException`1" /> class.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.DataOperationException`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.DataOperationException`1" /> class.
            </summary>
            <param name="operation">The operation.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.DataOperationException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.DataOperationException`1" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
        </member>
        <member name="M:Umbraco.Core.Exceptions.DataOperationException`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
        </member>
        <member name="T:Umbraco.Core.Exceptions.InvalidCompositionException">
            <summary>
            The exception that is thrown when a composition is invalid.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="P:Umbraco.Core.Exceptions.InvalidCompositionException.ContentTypeAlias">
            <summary>
            Gets the content type alias.
            </summary>
            <value>
            The content type alias.
            </value>
        </member>
        <member name="P:Umbraco.Core.Exceptions.InvalidCompositionException.AddedCompositionAlias">
            <summary>
            Gets the added composition alias.
            </summary>
            <value>
            The added composition alias.
            </value>
        </member>
        <member name="P:Umbraco.Core.Exceptions.InvalidCompositionException.PropertyTypeAliases">
            <summary>
            Gets the property type aliases.
            </summary>
            <value>
            The property type aliases.
            </value>
        </member>
        <member name="M:Umbraco.Core.Exceptions.InvalidCompositionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.InvalidCompositionException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Exceptions.InvalidCompositionException.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.InvalidCompositionException" /> class.
            </summary>
            <param name="contentTypeAlias">The content type alias.</param>
            <param name="propertyTypeAliases">The property type aliases.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.InvalidCompositionException.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.InvalidCompositionException" /> class.
            </summary>
            <param name="contentTypeAlias">The content type alias.</param>
            <param name="addedCompositionAlias">The added composition alias.</param>
            <param name="propertyTypeAliases">The property type aliases.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.InvalidCompositionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.InvalidCompositionException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.InvalidCompositionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.InvalidCompositionException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.InvalidCompositionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.InvalidCompositionException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.InvalidCompositionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
        </member>
        <member name="T:Umbraco.Core.Exceptions.WontImplementException">
            <summary>
            The exception that is thrown when a requested method or operation is not, and will not be, implemented.
            </summary>
            <remarks>
            The <see cref="T:System.NotImplementedException" /> is to be used when some code is not implemented,
            but should eventually be implemented (i.e. work in progress) and is reported by tools such as ReSharper.
            This exception is to be used when some code is not implemented, and is not meant to be, for whatever
            reason.
            </remarks>
            <seealso cref="T:System.NotImplementedException" />
        </member>
        <member name="M:Umbraco.Core.Exceptions.WontImplementException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.WontImplementException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Exceptions.WontImplementException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.WontImplementException" /> class with a specified reason message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.WontImplementException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.WontImplementException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
        </member>
        <member name="M:Umbraco.Core.Exceptions.WontImplementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Exceptions.WontImplementException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Umbraco.Core.FactoryExtensions">
            <summary>
            Provides extension methods to the <see cref="T:Umbraco.Core.Composing.IFactory"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.FactoryExtensions.GetInstance``1(Umbraco.Core.Composing.IFactory)">
            <summary>
            Gets an instance of a service.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
            <param name="factory">The factory.</param>
            <returns>An instance of the specified type.</returns>
            <remarks>Throws an exception if the factory failed to get an instance of the specified type.</remarks>
        </member>
        <member name="M:Umbraco.Core.FactoryExtensions.TryGetInstance``1(Umbraco.Core.Composing.IFactory)">
            <summary>
            Tries to get an instance of a service.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
            <returns>An instance of the specified type, or null.</returns>
            <remarks>Returns null if the factory does not know how to get an instance
            of the specified type. Throws an exception if the factory does know how
            to get an instance of the specified type, but failed to do so.</remarks>
        </member>
        <member name="M:Umbraco.Core.FactoryExtensions.CreateInstance``1(Umbraco.Core.Composing.IFactory,System.Object[])">
            <summary>
            Creates an instance with arguments.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="factory">The factory.</param>
            <param name="args">Arguments.</param>
            <returns>An instance of the specified type.</returns>
            <remarks>
            <para>Throws an exception if the factory failed to get an instance of the specified type.</para>
            <para>The arguments are used as dependencies by the factory.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.FactoryExtensions.CreateInstance(Umbraco.Core.Composing.IFactory,System.Type,System.Object[])">
            <summary>
            Creates an instance of a service, with arguments.
            </summary>
            <param name="factory"></param>
            <param name="type">The type of the instance.</param>
            <param name="args">Named arguments.</param>
            <returns>An instance of the specified type.</returns>
            <remarks>
            <para>The instance type does not need to be registered into the factory.</para>
            <para>The arguments are used as dependencies by the factory. Other dependencies
            are retrieved from the factory.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.IO.MediaPathSchemes.UniqueMediaPathScheme">
            <summary>
            Implements a unique directory media path scheme.
            </summary>
            <remarks>
            <para>This scheme provides deterministic short paths, with potential collisions.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.IO.MediaPathSchemes.UniqueMediaPathScheme.GetFilePath(Umbraco.Core.IO.IMediaFileSystem,System.Guid,System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.IO.MediaPathSchemes.UniqueMediaPathScheme.GetDeleteDirectory(Umbraco.Core.IO.IMediaFileSystem,System.String)">
            <inheritdoc />
            <remarks>
            <para>Returning null so that <see cref="M:Umbraco.Core.IO.MediaFileSystem.DeleteMediaFiles(System.Collections.Generic.IEnumerable{System.String})"/> does *not*
            delete any directory. This is because the above shortening of the Guid to 8 chars
            means we're increasing the risk of collision, and we don't want to delete files
            belonging to other media items.</para>
            <para>And, at the moment, we cannot delete directory "only if it is empty" because of
            race conditions. We'd need to implement locks in <see cref="T:Umbraco.Core.IO.MediaFileSystem"/> for
            this.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.IO.MediaPathSchemes.CombinedGuidsMediaPathScheme">
            <summary>
            Implements a combined-guids media path scheme.
            </summary>
            <remarks>
            <para>Path is "{combinedGuid}/{filename}" where combinedGuid is a combination of itemGuid and propertyGuid.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.IO.MediaPathSchemes.CombinedGuidsMediaPathScheme.GetFilePath(Umbraco.Core.IO.IMediaFileSystem,System.Guid,System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.IO.MediaPathSchemes.CombinedGuidsMediaPathScheme.GetDeleteDirectory(Umbraco.Core.IO.IMediaFileSystem,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.IO.MediaPathSchemes.OriginalMediaPathScheme">
            <summary>
            Implements the original media path scheme.
            </summary>
            <remarks>
            <para>Path is "{number}/{filename}" or "{number}-{filename}" where number is an incremented counter.</para>
            <para>Use '/' or '-' depending on UploadAllowDirectories setting.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.IO.MediaPathSchemes.OriginalMediaPathScheme.GetFilePath(Umbraco.Core.IO.IMediaFileSystem,System.Guid,System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.IO.MediaPathSchemes.OriginalMediaPathScheme.GetDeleteDirectory(Umbraco.Core.IO.IMediaFileSystem,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.IO.MediaPathSchemes.TwoGuidsMediaPathScheme">
            <summary>
            Implements a two-guids media path scheme.
            </summary>
            <remarks>
            <para>Path is "{itemGuid}/{propertyGuid}/{filename}".</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.IO.MediaPathSchemes.TwoGuidsMediaPathScheme.GetFilePath(Umbraco.Core.IO.IMediaFileSystem,System.Guid,System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.IO.MediaPathSchemes.TwoGuidsMediaPathScheme.GetDeleteDirectory(Umbraco.Core.IO.IMediaFileSystem,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.IO.IFileSystems">
            <summary>
            Provides the system filesystems.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IO.IFileSystems.MacroPartialsFileSystem">
            <summary>
            Gets the macro partials filesystem.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IO.IFileSystems.PartialViewsFileSystem">
            <summary>
            Gets the partial views filesystem.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IO.IFileSystems.StylesheetsFileSystem">
            <summary>
            Gets the stylesheets filesystem.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IO.IFileSystems.ScriptsFileSystem">
            <summary>
            Gets the scripts filesystem.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IO.IFileSystems.MvcViewsFileSystem">
            <summary>
            Gets the MVC views filesystem.
            </summary>
        </member>
        <member name="T:Umbraco.Core.IO.IMediaFileSystem">
            <summary>
            Provides methods allowing the manipulation of media files.
            </summary>
        </member>
        <member name="M:Umbraco.Core.IO.IMediaFileSystem.DeleteMediaFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete media files.
            </summary>
            <param name="files">Files to delete (filesystem-relative paths).</param>
        </member>
        <member name="M:Umbraco.Core.IO.IMediaFileSystem.GetMediaPath(System.String,System.Guid,System.Guid)">
            <summary>
            Gets the file path of a media file.
            </summary>
            <param name="filename">The file name.</param>
            <param name="cuid">The unique identifier of the content/media owning the file.</param>
            <param name="puid">The unique identifier of the property type owning the file.</param>
            <returns>The filesystem-relative path to the media file.</returns>
            <remarks>With the old media path scheme, this CREATES a new media path each time it is invoked.</remarks>
        </member>
        <member name="M:Umbraco.Core.IO.IMediaFileSystem.GetMediaPath(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Gets the file path of a media file.
            </summary>
            <param name="filename">The file name.</param>
            <param name="prevpath">A previous file path.</param>
            <param name="cuid">The unique identifier of the content/media owning the file.</param>
            <param name="puid">The unique identifier of the property type owning the file.</param>
            <returns>The filesystem-relative path to the media file.</returns>
            <remarks>In the old, legacy, number-based scheme, we try to re-use the media folder
            specified by <paramref name="prevpath"/>. Else, we CREATE a new one. Each time we are invoked.</remarks>
        </member>
        <member name="M:Umbraco.Core.IO.IMediaFileSystem.StoreFile(Umbraco.Core.Models.IContentBase,Umbraco.Core.Models.PropertyType,System.String,System.IO.Stream,System.String)">
            <summary>
            Stores a media file associated to a property of a content item.
            </summary>
            <param name="content">The content item owning the media file.</param>
            <param name="propertyType">The property type owning the media file.</param>
            <param name="filename">The media file name.</param>
            <param name="filestream">A stream containing the media bytes.</param>
            <param name="oldpath">An optional filesystem-relative filepath to the previous media file.</param>
            <returns>The filesystem-relative filepath to the media file.</returns>
            <remarks>
            <para>The file is considered "owned" by the content/propertyType.</para>
            <para>If an <paramref name="oldpath"/> is provided then that file (and associated thumbnails if any) is deleted
            before the new file is saved, and depending on the media path scheme, the folder may be reused for the new file.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.IO.IMediaFileSystem.CopyFile(Umbraco.Core.Models.IContentBase,Umbraco.Core.Models.PropertyType,System.String)">
            <summary>
            Copies a media file as a new media file, associated to a property of a content item.
            </summary>
            <param name="content">The content item owning the copy of the media file.</param>
            <param name="propertyType">The property type owning the copy of the media file.</param>
            <param name="sourcepath">The filesystem-relative path to the source media file.</param>
            <returns>The filesystem-relative path to the copy of the media file.</returns>
        </member>
        <member name="T:Umbraco.Core.IO.IMediaPathScheme">
            <summary>
            Represents a media file path scheme.
            </summary>
        </member>
        <member name="M:Umbraco.Core.IO.IMediaPathScheme.GetFilePath(Umbraco.Core.IO.IMediaFileSystem,System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Gets a media file path.
            </summary>
            <param name="fileSystem">The media filesystem.</param>
            <param name="itemGuid">The (content, media) item unique identifier.</param>
            <param name="propertyGuid">The property type unique identifier.</param>
            <param name="filename">The file name.</param>
            <param name="previous">A previous filename.</param>
            <returns>The filesystem-relative complete file path.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.IMediaPathScheme.GetDeleteDirectory(Umbraco.Core.IO.IMediaFileSystem,System.String)">
            <summary>
            Gets the directory that can be deleted when the file is deleted.
            </summary>
            <param name="fileSystem">The media filesystem.</param>
            <param name="filepath">The filesystem-relative path of the file.</param>
            <returns>The filesystem-relative path of the directory.</returns>
            <remarks>
            <para>The directory, and anything below it, will be deleted.</para>
            <para>Can return null (or empty) when no directory should be deleted.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.IO.FileSecurityException">
            <summary>
            The exception that is thrown when the caller does not have the required permission to access a file.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Core.IO.FileSecurityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.IO.FileSecurityException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.IO.FileSecurityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.IO.FileSecurityException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.IO.FileSecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.IO.FileSecurityException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Umbraco.Core.IO.FileSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.IO.FileSecurityException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Umbraco.Core.IO.FileSystemExtensions.OpenReadWithRetry(System.IO.FileInfo,System.Int32,System.Int32)">
            <summary>
            Attempts to open the file at <code>filePath</code> up to <code>maxRetries</code> times,
            with a thread sleep time of <code>sleepPerRetryInMilliseconds</code> between retries.
            </summary>
        </member>
        <member name="M:Umbraco.Core.IO.FileSystemExtensions.Unwrap(Umbraco.Core.IO.IFileSystem)">
            <summary>
            Unwraps a filesystem.
            </summary>
            <remarks>
            <para>A filesystem can be wrapped in a <see cref="T:Umbraco.Core.IO.FileSystemWrapper"/> (public) or a <see cref="T:Umbraco.Core.IO.ShadowWrapper"/> (internal),
            and this method deals with the various wrappers and </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.IO.FileSystems.MacroPartialsFileSystem">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.IO.FileSystems.PartialViewsFileSystem">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.IO.FileSystems.StylesheetsFileSystem">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.IO.FileSystems.ScriptsFileSystem">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.IO.FileSystems.MvcViewsFileSystem">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.IO.FileSystems.GetFileSystem``1(Umbraco.Core.IO.IFileSystem)">
            <summary>
            Gets a strongly-typed filesystem.
            </summary>
            <typeparam name="TFileSystem">The type of the filesystem.</typeparam>
            <returns>A strongly-typed filesystem of the specified type.</returns>
            <remarks>
            <para>Note that any filesystem created by this method *after* shadowing begins, will *not* be
            shadowing (and an exception will be thrown by the ShadowWrapper).</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.IO.FileSystemWrapper">
             <summary>
             All custom file systems that are based upon another IFileSystem should inherit from FileSystemWrapper
             </summary>
             <remarks>
             An IFileSystem is generally used as a base file system, for example like a PhysicalFileSystem or an S3FileSystem.
             Then, other custom file systems are wrapped upon these files systems like MediaFileSystem, etc... All of the custom
             file systems must inherit from FileSystemWrapper.
            
             This abstract class just wraps the 'real' IFileSystem object passed in to its constructor.
             </remarks>
        </member>
        <member name="T:Umbraco.Core.IO.IFileSystem">
            <summary>
            Provides methods allowing the manipulation of files.
            </summary>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.GetDirectories(System.String)">
            <summary>
            Gets all directories matching the given path.
            </summary>
            <param name="path">The path to the directories.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the matched directories.
            </returns>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <remarks>Azure blob storage has no real concept of directories so deletion is always recursive.</remarks>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">Whether to remove directories, subdirectories, and files in path.</param>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.DirectoryExists(System.String)">
            <summary>
            Determines whether the specified directory exists.
            </summary>
            <param name="path">The directory to check.</param>
            <returns>
            <c>True</c> if the directory exists and the user has permission to view it; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.AddFile(System.String,System.IO.Stream)">
            <summary>
            Adds a file to the file system.
            </summary>
            <param name="path">The path to the given file.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the file contents.</param>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.AddFile(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Adds a file to the file system.
            </summary>
            <param name="path">The path to the given file.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the file contents.</param>
            <param name="overrideIfExists">Whether to override the file if it already exists.</param>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.GetFiles(System.String)">
            <summary>
            Gets all files matching the given path.
            </summary>
            <param name="path">The path to the files.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the matched files.
            </returns>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.GetFiles(System.String,System.String)">
            <summary>
            Gets all files matching the given path and filter.
            </summary>
            <param name="path">The path to the files.</param>
            <param name="filter">A filter that allows the querying of file extension. <example>*.jpg</example></param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the matched files.
            </returns>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.OpenFile(System.String)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> representing the file at the given path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>
            <see cref="T:System.IO.Stream"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to remove.</param>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns>
            <c>True</c> if the file exists and the user has permission to view it; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.GetRelativePath(System.String)">
            <summary>
            Returns the application relative path to the file.
            </summary>
            <param name="fullPathOrUrl">The full path or URL.</param>
            <returns>
            The <see cref="T:System.String"/> representing the relative path.
            </returns>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.GetFullPath(System.String)">
            <summary>
            Gets the full qualified path to the file.
            </summary>
            <param name="path">The file to return the full path for.</param>
            <returns>
            The <see cref="T:System.String"/> representing the full path.
            </returns>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.GetUrl(System.String)">
            <summary>
            Returns the application relative URL to the file.
            </summary>
            <param name="path">The path to return the URL for.</param>
            <returns>
            <see cref="T:System.String"/> representing the relative URL.
            </returns>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.GetLastModified(System.String)">
            <summary>
            Gets the last modified date/time of the file, expressed as a UTC value.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>
            <see cref="T:System.DateTimeOffset"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.GetCreated(System.String)">
            <summary>
            Gets the created date/time of the file, expressed as a UTC value.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>
            <see cref="T:System.DateTimeOffset"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.GetSize(System.String)">
            <summary>
            Gets the size of a file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The size (in bytes) of the file.</returns>
        </member>
        <member name="P:Umbraco.Core.IO.IFileSystem.CanAddPhysical">
            <summary>
            Gets a value indicating whether the filesystem can add/copy
            a file which is on a physical filesystem.
            </summary>
            <remarks>In other words, whether the filesystem can copy/move a file
            that is on local disk, in a fast and efficient way.</remarks>
        </member>
        <member name="M:Umbraco.Core.IO.IFileSystem.AddFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a file which is on a physical filesystem.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="physicalPath">The absolute physical path to the source file.</param>
            <param name="overrideIfExists">A value indicating what to do if the file already exists.</param>
            <param name="copy">A value indicating whether to move (default) or copy.</param>
        </member>
        <member name="P:Umbraco.Core.IO.IOHelper.ForceNotHosted">
            <summary>
            Gets or sets a value forcing Umbraco to consider it is non-hosted.
            </summary>
            <remarks>This should always be false, unless unit testing.</remarks>
        </member>
        <member name="P:Umbraco.Core.IO.IOHelper.IsHosted">
            <summary>
            Gets a value indicating whether Umbraco is hosted.
            </summary>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.VerifyEditPath(System.String,System.String)">
            <summary>
            Verifies that the current filepath matches a directory where the user is allowed to edit a file.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validDir">The valid directory.</param>
            <returns>A value indicating whether the filepath is valid.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.VerifyEditPath(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Verifies that the current filepath matches one of several directories where the user is allowed to edit a file.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validDirs">The valid directories.</param>
            <returns>A value indicating whether the filepath is valid.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.VerifyFileExtension(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Verifies that the current filepath has one of several authorized extensions.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validFileExtensions">The valid extensions.</param>
            <returns>A value indicating whether the filepath is valid.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.GetRootDirectorySafe">
            <summary>
            Returns the path to the root of the application, by getting the path to where the assembly where this
            method is included is present, then traversing until it's past the /bin directory. Ie. this makes it work
            even if the assembly is in a /bin/debug or /bin/release folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.SetRootDirectory(System.String)">
            <summary>
            Allows you to overwrite RootDirectory, which would otherwise be resolved
            automatically upon application start.
            </summary>
            <remarks>The supplied path should be the absolute path to the root of the umbraco site.</remarks>
            <param name="rootPath"></param>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.SafeFileName(System.String)">
            <summary>
            Check to see if filename passed has any special chars in it and strips them to create a safe filename.  Used to overcome an issue when Umbraco is used in IE in an intranet environment.
            </summary>
            <param name="filePath">The filename passed to the file handler from the upload field.</param>
            <returns>A safe filename without any path specific chars.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.IsFullPath(System.String)">
            <summary>
            Checks if a given path is a full path including drive letter
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.GetRelativePath(System.String)">
            <summary>
            Get properly formatted relative path from an existing absolute or relative path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.EnsurePathIsApplicationRootPrefixed(System.String)">
            <summary>
            Ensures that a path has `~/` as prefix
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.IO.MediaFileSystem">
            <summary>
            A custom file system provider for media
            </summary>
        </member>
        <member name="M:Umbraco.Core.IO.MediaFileSystem.#ctor(Umbraco.Core.IO.IFileSystem,Umbraco.Core.Configuration.UmbracoSettings.IContentSection,Umbraco.Core.IO.IMediaPathScheme,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.IO.MediaFileSystem"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.IO.MediaFileSystem.DeleteMediaFiles(System.Collections.Generic.IEnumerable{System.String})">
            <inheritoc />
        </member>
        <member name="M:Umbraco.Core.IO.MediaFileSystem.GetMediaPath(System.String,System.Guid,System.Guid)">
            <inheritoc />
        </member>
        <member name="M:Umbraco.Core.IO.MediaFileSystem.GetMediaPath(System.String,System.String,System.Guid,System.Guid)">
            <inheritoc />
        </member>
        <member name="M:Umbraco.Core.IO.MediaFileSystem.StoreFile(Umbraco.Core.Models.IContentBase,Umbraco.Core.Models.PropertyType,System.String,System.IO.Stream,System.String)">
            <inheritoc />
        </member>
        <member name="M:Umbraco.Core.IO.MediaFileSystem.CopyFile(Umbraco.Core.Models.IContentBase,Umbraco.Core.Models.PropertyType,System.String)">
            <inheritoc />
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.GetDirectories(System.String)">
            <summary>
            Gets directories in a directory.
            </summary>
            <param name="path">The filesystem-relative path to the directory.</param>
            <returns>The filesystem-relative path to the directories in the directory.</returns>
            <remarks>Filesystem-relative paths use forward-slashes as directory separators.</remarks>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="path">The filesystem-relative path of the directory.</param>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="path">The filesystem-relative path of the directory.</param>
            <param name="recursive">A value indicating whether to recursively delete sub-directories.</param>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.DirectoryExists(System.String)">
            <summary>
            Gets a value indicating whether a directory exists.
            </summary>
            <param name="path">The filesystem-relative path of the directory.</param>
            <returns>A value indicating whether a directory exists.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.AddFile(System.String,System.IO.Stream)">
            <summary>
            Saves a file.
            </summary>
            <param name="path">The filesystem-relative path of the file.</param>
            <param name="stream">A stream containing the file data.</param>
            <remarks>Overrides the existing file, if any.</remarks>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.AddFile(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Saves a file.
            </summary>
            <param name="path">The filesystem-relative path of the file.</param>
            <param name="stream">A stream containing the file data.</param>
            <param name="overrideExisting">A value indicating whether to override the existing file, if any.</param>
            <remarks>If a file exists and <paramref name="overrideExisting"/> is false, an exception is thrown.</remarks>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.GetFiles(System.String)">
            <summary>
            Gets files in a directory.
            </summary>
            <param name="path">The filesystem-relative path of the directory.</param>
            <returns>The filesystem-relative path to the files in the directory.</returns>
            <remarks>Filesystem-relative paths use forward-slashes as directory separators.</remarks>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.GetFiles(System.String,System.String)">
            <summary>
            Gets files in a directory.
            </summary>
            <param name="path">The filesystem-relative path of the directory.</param>
            <param name="filter">A filter.</param>
            <returns>The filesystem-relative path to the matching files in the directory.</returns>
            <remarks>Filesystem-relative paths use forward-slashes as directory separators.</remarks>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.OpenFile(System.String)">
            <summary>
            Opens a file.
            </summary>
            <param name="path">The filesystem-relative path to the file.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The filesystem-relative path to the file.</param>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.FileExists(System.String)">
            <summary>
            Gets a value indicating whether a file exists.
            </summary>
            <param name="path">The filesystem-relative path to the file.</param>
            <returns>A value indicating whether the file exists.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.GetRelativePath(System.String)">
            <summary>
            Gets the filesystem-relative path of a full path or of an URL.
            </summary>
            <param name="fullPathOrUrl">The full path or URL.</param>
            <returns>The path, relative to this filesystem's root.</returns>
            <remarks>
            <para>The relative path is relative to this filesystem's root, not starting with any
            directory separator. All separators are forward-slashes.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.GetFullPath(System.String)">
            <summary>
            Gets the full path.
            </summary>
            <param name="path">The full or filesystem-relative path.</param>
            <returns>The full path.</returns>
            <remarks>
            <para>On the physical filesystem, the full path is the rooted (ie non-relative), safe (ie within this
            filesystem's root) path. All separators are Path.DirectorySeparatorChar.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.GetUrl(System.String)">
            <summary>
            Gets the URL.
            </summary>
            <param name="path">The filesystem-relative path.</param>
            <returns>The URL.</returns>
            <remarks>All separators are forward-slashes.</remarks>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.GetLastModified(System.String)">
            <summary>
            Gets the last-modified date of a directory or file.
            </summary>
            <param name="path">The filesystem-relative path to the directory or the file.</param>
            <returns>The last modified date of the directory or the file.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.GetCreated(System.String)">
            <summary>
            Gets the created date of a directory or file.
            </summary>
            <param name="path">The filesystem-relative path to the directory or the file.</param>
            <returns>The created date of the directory or the file.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.GetSize(System.String)">
            <summary>
            Gets the size of a file.
            </summary>
            <param name="path">The filesystem-relative path to the file.</param>
            <returns>The file of the size, in bytes.</returns>
            <remarks>If the file does not exist, returns -1.</remarks>
        </member>
        <member name="P:Umbraco.Core.IO.SystemDirectories.Root">
            <summary>
            Gets the root path of the application
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Viewer.ILogViewer.GetSavedSearches">
            <summary>
            Get all saved searches from your chosen data source
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Viewer.ILogViewer.AddSavedSearch(System.String,System.String)">
            <summary>
            Adds a new saved search to chosen data source and returns the updated searches
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Viewer.ILogViewer.DeleteSavedSearch(System.String,System.String)">
            <summary>
            Deletes a saved search to chosen data source and returns the remaining searches
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.Logging.Viewer.ILogViewer.GetNumberOfErrors(Umbraco.Core.Logging.Viewer.LogTimePeriod)" -->
        <member name="M:Umbraco.Core.Logging.Viewer.ILogViewer.GetLogLevelCounts(Umbraco.Core.Logging.Viewer.LogTimePeriod)">
            <summary>
            Returns a number of the different log level entries
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Viewer.ILogViewer.GetMessageTemplates(Umbraco.Core.Logging.Viewer.LogTimePeriod)">
            <summary>
            Returns a list of all unique message templates and their counts
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Viewer.ILogViewer.GetLogLevel">
            <summary>
            Gets the current Serilog minimum log level
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Logging.Viewer.ILogViewer.GetLogs(Umbraco.Core.Logging.Viewer.LogTimePeriod,System.Int32,System.Int32,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String,System.String[])">
            <summary>
            Returns the collection of logs
            </summary>
        </member>
        <member name="P:Umbraco.Core.Logging.Viewer.LogMessage.Timestamp">
            <summary>
            The time at which the log event occurred.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Logging.Viewer.LogMessage.Level">
            <summary>
            The level of the event.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Logging.Viewer.LogMessage.MessageTemplateText">
            <summary>
            The message template describing the log event.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Logging.Viewer.LogMessage.RenderedMessage">
            <summary>
            The message template filled with the log event properties.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Logging.Viewer.LogMessage.Properties">
            <summary>
            Properties associated with the log event, including those presented in Serilog.Events.LogEvent.MessageTemplate.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Logging.Viewer.LogMessage.Exception">
            <summary>
            An exception associated with the log event, or null.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Viewer.LogViewerSourceBase.GetLogs(Umbraco.Core.Logging.Viewer.LogTimePeriod,Umbraco.Core.Logging.Viewer.ILogFilter,System.Int32,System.Int32)">
            <summary>
            Get all logs from your chosen data source back as Serilog LogEvents
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Viewer.LogViewerSourceBase.GetLogLevel">
            <summary>
            Get the Serilog minimum-level value from the config file. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Logging.IProfilingLogger">
            <summary>
            Defines the profiling logging service.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.IProfilingLogger.TraceDuration``1(System.String)">
            <summary>
            Profiles an action and log as information messages.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.IProfilingLogger.TraceDuration``1(System.String,System.String,System.String)">
            <summary>
            Profiles an action and log as information messages.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.IProfilingLogger.TraceDuration(System.Type,System.String,System.String,System.String)">
            <summary>
            Profiles an action and log as information messages.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.IProfilingLogger.DebugDuration``1(System.String)">
            <summary>
            Profiles an action and log as debug messages.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.IProfilingLogger.DebugDuration``1(System.String,System.String,System.String,System.Int32)">
            <summary>
            Profiles an action and log as debug messages.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.IProfilingLogger.DebugDuration(System.Type,System.String,System.String,System.String,System.Int32)">
            <summary>
            Profiles an action and log as debug messages.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHttpRequest.TryGetCurrentHttpRequestId(System.Guid@)">
            <summary>
            Retrieve the id assigned to the currently-executing HTTP request, if any.
            </summary>
            <param name="requestId">The request id.</param>
            <returns><c>true</c> if there is a request in progress; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Umbraco.Core.Logging.LogLevel">
            <summary>
            Specifies the level of a log event.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Logging.MessageTemplates">
            <summary>
            Provides tools to support message templates.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.Logging.Serilog.Enrichers.HttpRequestIdEnricher" -->
        <member name="F:Umbraco.Core.Logging.Serilog.Enrichers.HttpRequestIdEnricher.HttpRequestIdPropertyName">
            <summary>
            The property name added to enriched log events.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.Enrichers.HttpRequestIdEnricher.Enrich(Serilog.Events.LogEvent,Serilog.Core.ILogEventPropertyFactory)">
            <summary>
            Enrich the log event with an id assigned to the currently-executing HTTP request, if any.
            </summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.Logging.Serilog.Enrichers.HttpRequestNumberEnricher" -->
        <member name="F:Umbraco.Core.Logging.Serilog.Enrichers.HttpRequestNumberEnricher.HttpRequestNumberPropertyName">
            <summary>
            The property name added to enriched log events.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.Enrichers.HttpRequestNumberEnricher.Enrich(Serilog.Events.LogEvent,Serilog.Core.ILogEventPropertyFactory)">
            <summary>
            Enrich the log event with the number assigned to the currently-executing HTTP request, if any.
            </summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.Logging.Serilog.Enrichers.HttpSessionIdEnricher" -->
        <member name="F:Umbraco.Core.Logging.Serilog.Enrichers.HttpSessionIdEnricher.HttpSessionIdPropertyName">
            <summary>
            The property name added to enriched log events.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.Enrichers.HttpSessionIdEnricher.Enrich(Serilog.Events.LogEvent,Serilog.Core.ILogEventPropertyFactory)">
            <summary>
            Enrich the log event with the current ASP.NET session id, if sessions are enabled.</summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
        </member>
        <member name="T:Umbraco.Core.Logging.Serilog.Enrichers.Log4NetLevelMapperEnricher">
            <summary>
            This is used to create a new property in Logs called 'Log4NetLevel'
            So that we can map Serilog levels to Log4Net levels - so log files stay consistent
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.LoggerConfigExtensions.MinimalConfiguration(Serilog.LoggerConfiguration)">
            <summary>
            This configures Serilog with some defaults
            Such as adding ProcessID, Thread, AppDomain etc
            It is highly recommended that you keep/use this default in your own logging config customizations
            </summary>
            <param name="logConfig">A Serilog LoggerConfiguration</param>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.LoggerConfigExtensions.OutputDefaultTextFile(Serilog.LoggerConfiguration,Serilog.Events.LogEventLevel,System.Nullable{System.Int32})">
            <summary>
            Outputs a .txt format log at /App_Data/Logs/
            </summary>
            <param name="logConfig">A Serilog LoggerConfiguration</param>
            <param name="minimumLevel">The log level you wish the JSON file to collect - default is Verbose (highest)</param>
            <param name="retainedFileCount">The number of days to keep log files. Default is set to null which means all logs are kept</param>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.LoggerConfigExtensions.File(Serilog.Configuration.LoggerSinkConfiguration,Serilog.Formatting.ITextFormatter,System.String,Serilog.Events.LogEventLevel,Serilog.Core.LoggingLevelSwitch,System.Nullable{System.Int64},System.Nullable{System.TimeSpan},Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding)">
            <remarks>
               Used in config - If renamed or moved to other assembly the config file also has be updated.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.LoggerConfigExtensions.OutputDefaultJsonFile(Serilog.LoggerConfiguration,Serilog.Events.LogEventLevel,System.Nullable{System.Int32})">
            <summary>
            Outputs a CLEF format JSON log at /App_Data/Logs/
            </summary>
            <param name="logConfig">A Serilog LoggerConfiguration</param>
            <param name="minimumLevel">The log level you wish the JSON file to collect - default is Verbose (highest)</param>
            <param name="retainedFileCount">The number of days to keep log files. Default is set to null which means all logs are kept</param>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.LoggerConfigExtensions.ReadFromConfigFile(Serilog.LoggerConfiguration)">
            <summary>
            Reads settings from /config/serilog.config
            That allows the main logging pipeline to be configured
            </summary>
            <param name="logConfig">A Serilog LoggerConfiguration</param>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.LoggerConfigExtensions.ReadFromUserConfigFile(Serilog.LoggerConfiguration)">
            <summary>
            Reads settings from /config/serilog.user.config
            That allows a separate logging pipeline to be configured that will not affect the main Umbraco log
            </summary>
            <param name="logConfig">A Serilog LoggerConfiguration</param>
        </member>
        <member name="T:Umbraco.Core.Logging.Serilog.SerilogLogger">
            <summary>
             Implements <see cref="T:Umbraco.Core.Logging.ILogger"/> on top of Serilog.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.#ctor(System.IO.FileInfo)">
            <summary>
            Initialize a new instance of the <see cref="T:Umbraco.Core.Logging.Serilog.SerilogLogger"/> class with a configuration file.
            </summary>
            <param name="logConfigFile"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.CreateWithDefaultConfiguration">
            <summary>
            Creates a logger with some pre-defined configuration and remainder from config file
            </summary>
            <remarks>Used by UmbracoApplicationBase to get its logger.</remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.LoggerFor(System.Type)">
            <summary>
            Gets a contextualized logger.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.MapLevel(Umbraco.Core.Logging.LogLevel)">
            <summary>
            Maps Umbraco's log level to Serilog's.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.IsEnabled(System.Type,Umbraco.Core.Logging.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Fatal(System.Type,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Fatal(System.Type,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Fatal(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Fatal(System.Type,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Fatal(System.Type,System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Error(System.Type,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Error(System.Type,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Error(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Error(System.Type,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Error(System.Type,System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Warn(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Warn(System.Type,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Warn(System.Type,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Warn(System.Type,System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Info(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Info(System.Type,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Debug(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Debug(System.Type,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Verbose(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.Serilog.SerilogLogger.Verbose(System.Type,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Core.Logging.DisposableTimer">
            <summary>
            Starts the timer and invokes a  callback upon disposal. Provides a simple way of timing an operation by wrapping it in a <code>using</code> (C#) statement.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.DisposableTimer.Fail(System.String,System.Exception)">
            <summary>
            Reports a failure.
            </summary>
            <param name="failMessage">The fail message.</param>
            <param name="exception">The exception.</param>
            <remarks>Completion of the timer will be reported as an error, with the specified message and exception.</remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.DisposableTimer.DisposeResources">
             <summary>
            Disposes resources.
             </summary>
             <remarks>Overrides abstract class <see cref="!:DisposableObject"/> which handles required locking.</remarks>
        </member>
        <member name="T:Umbraco.Core.Logging.DebugDiagnosticsLogger">
            <summary>
            Implements <see cref="T:Umbraco.Core.Logging.ILogger"/> on top of <see cref="N:System.Diagnostics"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Fatal(System.Type,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Fatal(System.Type,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Fatal(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Fatal(System.Type,System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Fatal(System.Type,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Error(System.Type,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Error(System.Type,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Error(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Error(System.Type,System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Error(System.Type,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Warn(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Warn(System.Type,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Warn(System.Type,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Warn(System.Type,System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Info(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Info(System.Type,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Debug(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Debug(System.Type,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Verbose(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.DebugDiagnosticsLogger.Verbose(System.Type,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Core.Logging.ILogger">
            <summary>
            Defines the logging service.
            </summary>
            <remarks>
            <para>Message templates in logging methods follow the Message Templates specification
            available at https://messagetemplates.org/ in order to support structured logging.</para>
            <para>Implementations must ensure that they support these templates. Note that the
            specification includes support for traditional C# numeric placeholders.</para>
            <para>For instance, "Processed {Input} in {Time}ms."</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.IsEnabled(System.Type,Umbraco.Core.Logging.LogLevel)">
            <summary>
            Determines if logging is enabled at a specified level, for a reporting type.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Fatal(System.Type,System.Exception,System.String)">
            <summary>
            Logs a fatal message with an exception.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="exception">An exception.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Fatal(System.Type,System.Exception)">
            <summary>
            Logs a fatal exception.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="exception">An exception.</param>
            <remarks>The message string is unspecified and is implementation-specific.</remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Fatal(System.Type,System.String)">
            <summary>
            Logs a fatal message.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Fatal(System.Type,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a fatal message with an exception.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="exception">An exception.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Fatal(System.Type,System.String,System.Object[])">
            <summary>
            Logs a fatal message.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Error(System.Type,System.Exception,System.String)">
            <summary>
            Logs an error message with an exception.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="exception">An exception.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Error(System.Type,System.Exception)">
            <summary>
            Logs an error exception.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="exception">An exception.</param>
            <remarks>The message string is unspecified and is implementation-specific.</remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Error(System.Type,System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Error(System.Type,System.Exception,System.String,System.Object[])">
            <summary>
            Logs an error message with an exception.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="exception">An exception.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Error(System.Type,System.String,System.Object[])">
            <summary>
            Logs an error message.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Warn(System.Type,System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Warn(System.Type,System.String,System.Object[])">
            <summary>
            Logs a warning message.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Warn(System.Type,System.Exception,System.String)">
            <summary>
            Logs a warning message with an exception.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="exception">An exception.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Warn(System.Type,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a warning message with an exception.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="exception">An exception.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Info(System.Type,System.String)">
            <summary>
            Logs an information message.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Info(System.Type,System.String,System.Object[])">
            <summary>
            Logs a info message.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Debug(System.Type,System.String)">
            <summary>
            Logs a debugging message.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Debug(System.Type,System.String,System.Object[])">
            <summary>
            Logs a debug message.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Verbose(System.Type,System.String)">
            <summary>
            Logs a verbose message.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.ILogger.Verbose(System.Type,System.String,System.Object[])">
            <summary>
            Logs a verbose message.
            </summary>
            <param name="reporting">The reporting type.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="T:Umbraco.Core.Logging.IProfiler">
            <summary>
            Defines the profiling service.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.IProfiler.Render">
            <summary>
            Renders the profiling results.
            </summary>
            <returns>The profiling results.</returns>
            <remarks>Generally used for HTML rendering.</remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.IProfiler.Step(System.String)">
            <summary>
            Gets an <see cref="T:System.IDisposable"/> that will time the code between its creation and disposal.
            </summary>
            <param name="name">The name of the step.</param>
            <returns>A step.</returns>
            <remarks>The returned <see cref="T:System.IDisposable"/> is meant to be used within a <c>using (...) {{ ... }}</c> block.</remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.IProfiler.Start">
            <summary>
            Starts the profiler.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.IProfiler.Stop(System.Boolean)">
            <summary>
            Stops the profiler.
            </summary>
            <param name="discardResults">A value indicating whether to discard results.</param>
            <remarks>Set discardResult to true to abandon all profiling - useful when eg someone is not
            authenticated or you want to clear the results, based upon some other mechanism.</remarks>
        </member>
        <member name="T:Umbraco.Core.Logging.LoggerExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Umbraco.Core.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.IsEnabled``1(Umbraco.Core.Logging.ILogger,Umbraco.Core.Logging.LogLevel)">
            <summary>
            Determines if logging is enabled at a specified level, for a reporting type.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Error``1(Umbraco.Core.Logging.ILogger,System.Exception,System.String)">
            <summary>
            Logs an error message with an exception.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="message">A message.</param>
            <param name="exception">An exception.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Error``1(Umbraco.Core.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs an error message with an exception.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="exception">An exception.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Error``1(Umbraco.Core.Logging.ILogger,System.Exception)">
            <summary>
            Logs an error exception.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="exception">An exception.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Error``1(Umbraco.Core.Logging.ILogger,System.String)">
            <summary>
            Logs an error message.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Error``1(Umbraco.Core.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs an error message.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Warn``1(Umbraco.Core.Logging.ILogger,System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Warn``1(Umbraco.Core.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a warning message.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Warn``1(Umbraco.Core.Logging.ILogger,System.Exception,System.String)">
            <summary>
            Logs a warning message with an exception.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="exception">An exception.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Warn``1(Umbraco.Core.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a warning message with an exception.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="exception">An exception.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Info``1(Umbraco.Core.Logging.ILogger,System.String)">
            <summary>
            Logs an information message.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Info``1(Umbraco.Core.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a information message.
            </summary>
            <typeparam name="T">The reporting type</typeparam>
            <param name="logger">The logger.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Debug``1(Umbraco.Core.Logging.ILogger,System.String)">
            <summary>
            Logs a debugging message.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Debug``1(Umbraco.Core.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a debugging message.
            </summary>
            <typeparam name="T">The reporting type</typeparam>
            <param name="logger">The logger.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Verbose``1(Umbraco.Core.Logging.ILogger,System.String)">
            <summary>
            Logs a verbose message.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Verbose``1(Umbraco.Core.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a verbose message.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Fatal``1(Umbraco.Core.Logging.ILogger,System.Exception,System.String)">
            <summary>
            Logs a fatal message.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="exception">An exception.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Fatal``1(Umbraco.Core.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a fatal message.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="logger">The logger.</param>
            <param name="exception">An exception.</param>
            <param name="messageTemplate">A message template.</param>
            <param name="propertyValues">Property values.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggingTaskExtension.LogErrors(System.Threading.Tasks.Task,System.Action{System.String,System.Exception})">
             <summary>
                 This task shouldn't be waited on (as it's not guaranteed to run), and you shouldn't wait on the parent task either (because it might throw an
                 exception that doesn't get handled). If you want to be waiting on something, use LogErrorsWaitable instead.
            
                 None of these methods are suitable for tasks that return a value. If you're wanting a result, you should probably be handling
                 errors yourself.
             </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggingTaskExtension.LogErrorsWaitable(System.Threading.Tasks.Task,System.Action{System.String,System.Exception})">
             <summary>
                 This task can be waited on (as it's guaranteed to run), and you should wait on this rather than the parent task. Because it's
                 guaranteed to run, it may be slower than using LogErrors, and you should consider using that method if you don't want to wait.
            
                 None of these methods are suitable for tasks that return a value. If you're wanting a result, you should probably be handling
                 errors yourself.
             </summary>
        </member>
        <member name="T:Umbraco.Core.Logging.LogProfiler">
            <summary>
            Implements <see cref="T:Umbraco.Core.Logging.IProfiler"/> by writing profiling results to an <see cref="T:Umbraco.Core.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.LogProfiler.Render">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.LogProfiler.Step(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.LogProfiler.Start">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.LogProfiler.Stop(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Core.Logging.OwinLogger.WriteCore(System.Diagnostics.TraceEventType,System.Int32,System.Object,System.Exception,System.Func{System.Object,System.Exception,System.String})">
            <summary>
            Aggregates most logging patterns to a single method.  This must be compatible with the Func representation in the OWIN environment.
                        To check IsEnabled call WriteCore with only TraceEventType and check the return value, no event will be written.
            </summary>
            <param name="eventType"/><param name="eventId"/><param name="state"/><param name="exception"/><param name="formatter"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Logging.OwinLoggerFactory.Create(System.String)">
            <summary>
            Creates a new ILogger instance of the given name.
            </summary>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Logging.ProfilerExtensions.Step``1(Umbraco.Core.Logging.IProfiler,System.String)">
            <summary>
            Gets an <see cref="T:System.IDisposable"/> that will time the code between its creation and disposal,
            prefixing the name of the step with a reporting type name.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="profiler">The profiler.</param>
            <param name="name">The name of the step.</param>
            <returns>A step.</returns>
            <remarks>The returned <see cref="T:System.IDisposable"/> is meant to be used within a <c>using (...) {{ ... }}</c> block.</remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.ProfilerExtensions.Step(Umbraco.Core.Logging.IProfiler,System.Type,System.String)">
            <summary>
            Gets an <see cref="T:System.IDisposable"/> that will time the code between its creation and disposal,
            prefixing the name of the step with a reporting type name.
            </summary>
            <param name="profiler">The profiler.</param>
            <param name="reporting">The reporting type.</param>
            <param name="name">The name of the step.</param>
            <returns>A step.</returns>
            <remarks>The returned <see cref="T:System.IDisposable"/> is meant to be used within a <c>using (...) {{ ... }}</c> block.</remarks>
        </member>
        <member name="T:Umbraco.Core.Logging.ProfilingLogger">
            <summary>
            Provides logging and profiling services.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Logging.ProfilingLogger.Logger">
            <summary>
            Gets the underlying <see cref="T:Umbraco.Core.Logging.ILogger"/> implementation.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Logging.ProfilingLogger.Profiler">
            <summary>
            Gets the underlying <see cref="T:Umbraco.Core.Logging.IProfiler"/> implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.ProfilingLogger.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Logging.IProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Logging.ProfilingLogger"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Manifest.IManifestFilter">
            <summary>
            Provides filtering for package manifests.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.IManifestFilter.Filter(System.Collections.Generic.List{Umbraco.Core.Manifest.PackageManifest})">
            <summary>
            Filters package manifests.
            </summary>
            <param name="manifests">The package manifests.</param>
            <remarks>
            <para>It is possible to remove, change, or add manifests.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Manifest.ManifestFilterCollection">
            <summary>
            Contains the manifest filters.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestFilterCollection.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Manifest.IManifestFilter})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Manifest.ManifestFilterCollection"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestFilterCollection.Filter(System.Collections.Generic.List{Umbraco.Core.Manifest.PackageManifest})">
            <summary>
            Filters package manifests.
            </summary>
            <param name="manifests">The package manifests.</param>
        </member>
        <member name="T:Umbraco.Core.Manifest.DashboardAccessRuleConverter">
            <summary>
            Implements a json read converter for <see cref="T:Umbraco.Core.Dashboards.IAccessRule"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.DashboardAccessRuleConverter.Create(System.Type,System.String,Newtonsoft.Json.Linq.JObject)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Manifest.DashboardAccessRuleConverter.Deserialize(Newtonsoft.Json.Linq.JObject,Umbraco.Core.Dashboards.IAccessRule,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Manifest.ManifestContentAppDefinition">
            <summary>
            Represents a content app definition, parsed from a manifest.
            </summary>
            <remarks>Is used to create an actual <see cref="T:Umbraco.Core.Manifest.ManifestContentAppFactory"/>.</remarks>
        </member>
        <member name="P:Umbraco.Core.Manifest.ManifestContentAppDefinition.Name">
            <summary>
            Gets or sets the name of the content app.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.ManifestContentAppDefinition.Alias">
            <summary>
            Gets or sets the unique alias of the content app.
            </summary>
            <remarks>
            <para>Must be a valid javascript identifier, ie no spaces etc.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Manifest.ManifestContentAppDefinition.Weight">
            <summary>
            Gets or sets the weight of the content app.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.ManifestContentAppDefinition.Icon">
            <summary>
            Gets or sets the icon of the content app.
            </summary>
            <remarks>
            <para>Must be a valid helveticons class name (see http://hlvticons.ch/).</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Manifest.ManifestContentAppDefinition.View">
            <summary>
            Gets or sets the view for rendering the content app.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.ManifestContentAppDefinition.Show">
            <summary>
            Gets or sets the list of 'show' conditions for the content app.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Manifest.ManifestContentAppFactory">
            <summary>
            Represents a content app factory, for content apps parsed from the manifest.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestContentAppFactory.GetContentAppFor(System.Object,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Membership.IReadOnlyUserGroup})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Manifest.ManifestParser">
            <summary>
            Parses the Main.js file and replaces all tokens accordingly.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.#ctor(Umbraco.Core.Cache.AppCaches,Umbraco.Core.PropertyEditors.ManifestValueValidatorCollection,Umbraco.Core.Manifest.ManifestFilterCollection,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Manifest.ManifestParser"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.#ctor(Umbraco.Core.Cache.AppCaches,Umbraco.Core.PropertyEditors.ManifestValueValidatorCollection,Umbraco.Core.Manifest.ManifestFilterCollection,System.String,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Manifest.ManifestParser"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.ManifestParser.Manifest">
            <summary>
            Gets all manifests, merged into a single manifest object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.GetManifests">
            <summary>
            Gets all manifests.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.MergeManifests(System.Collections.Generic.IEnumerable{Umbraco.Core.Manifest.PackageManifest})">
            <summary>
            Merges all manifests into one.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.ParseManifest(System.String)">
            <summary>
            Parses a manifest.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Manifest.ValueValidatorConverter">
            <summary>
            Implements a json read converter for <see cref="T:Umbraco.Core.PropertyEditors.IValueValidator"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.ValueValidatorConverter.#ctor(Umbraco.Core.PropertyEditors.ManifestValueValidatorCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Manifest.ValueValidatorConverter"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Manifest.PackageManifest">
            <summary>
            Represents the content of a package manifest.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.Source">
            <summary>
            Gets the source path of the manifest.
            </summary>
            <remarks>
            <para>Gets the full absolute file path of the manifest,
            using system directory separators.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.Scripts">
            <summary>
            Gets or sets the scripts listed in the manifest.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.Stylesheets">
            <summary>
            Gets or sets the stylesheets listed in the manifest.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.PropertyEditors">
            <summary>
            Gets or sets the property editors listed in the manifest.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.ParameterEditors">
            <summary>
            Gets or sets the parameter editors listed in the manifest.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.GridEditors">
            <summary>
            Gets or sets the grid editors listed in the manifest.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.ContentApps">
            <summary>
            Gets or sets the content apps listed in the manifest.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.Dashboards">
            <summary>
            Gets or sets the dashboards listed in the manifest.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.Sections">
            <summary>
            Gets or sets the sections listed in the manifest.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Manifest.DataEditorConverter">
            <summary>
            Provides a json read converter for <see cref="T:Umbraco.Core.PropertyEditors.IDataEditor"/> in manifests.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.DataEditorConverter.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Manifest.DataEditorConverter"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.DataEditorConverter.Create(System.Type,System.String,Newtonsoft.Json.Linq.JObject)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Manifest.DataEditorConverter.Deserialize(Newtonsoft.Json.Linq.JObject,Umbraco.Core.PropertyEditors.IDataEditor,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Mapping.MapperContext">
            <summary>
            Represents a mapper context.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Mapping.MapperContext.#ctor(Umbraco.Core.Mapping.UmbracoMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Mapping.MapperContext"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Mapping.MapperContext.HasItems">
            <summary>
            Gets a value indicating whether the context has items.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Mapping.MapperContext.Items">
            <summary>
            Gets the context items.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Mapping.MapperContext.Map``1(System.Object)">
            <summary>
            Maps a source object to a new target object.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.MapperContext.Map``2(``0)">
            <summary>
            Maps a source object to a new target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.MapperContext.Map``2(``0,``1)">
            <summary>
            Maps a source object to an existing target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.MapperContext.MapEnumerable``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Maps an enumerable of source objects to a new list of target objects.
            </summary>
            <typeparam name="TSourceElement">The type of the source objects.</typeparam>
            <typeparam name="TTargetElement">The type of the target objects.</typeparam>
            <param name="source">The source objects.</param>
            <returns>A list containing the target objects.</returns>
        </member>
        <member name="T:Umbraco.Core.Mapping.IMapDefinition">
            <summary>
            Defines maps for <see cref="T:Umbraco.Core.Mapping.UmbracoMapper"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Mapping.IMapDefinition.DefineMaps(Umbraco.Core.Mapping.UmbracoMapper)">
            <summary>
            Defines maps.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Mapping.UmbracoMapper">
            <summary>
            Umbraco Mapper.
            </summary>
            <remarks>
            <para>When a map is defined from TSource to TTarget, the mapper automatically knows how to map
            from IEnumerable{TSource} to IEnumerable{TTarget} (using a List{TTarget}) and to TTarget[].</para>
            <para>When a map is defined from TSource to TTarget, the mapper automatically uses that map
            for any source type that inherits from, or implements, TSource.</para>
            <para>When a map is defined from TSource to TTarget, the mapper can map to TTarget exclusively
            and cannot re-use that map for types that would inherit from, or implement, TTarget.</para>
            <para>When using the Map{TSource, TTarget}(TSource source, ...) overloads, TSource is explicit. When
            using the Map{TTarget}(object source, ...) TSource is defined as source.GetType().</para>
            <para>In both cases, TTarget is explicit and not typeof(target).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.#ctor(Umbraco.Core.Mapping.MapDefinitionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Mapping.UmbracoMapper"/> class.
            </summary>
            <param name="profiles"></param>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Define``2">
            <summary>
            Defines a mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Define``2(System.Action{``0,``1,Umbraco.Core.Mapping.MapperContext})">
            <summary>
            Defines a mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="map">A mapping method.</param>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Define``2(System.Func{``0,Umbraco.Core.Mapping.MapperContext,``1})">
            <summary>
            Defines a mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="ctor">A constructor method.</param>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Define``2(System.Func{``0,Umbraco.Core.Mapping.MapperContext,``1},System.Action{``0,``1,Umbraco.Core.Mapping.MapperContext})">
            <summary>
            Defines a mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="ctor">A constructor method.</param>
            <param name="map">A mapping method.</param>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Map``1(System.Object)">
            <summary>
            Maps a source object to a new target object.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Map``1(System.Object,System.Action{Umbraco.Core.Mapping.MapperContext})">
            <summary>
            Maps a source object to a new target object.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="f">A mapper context preparation method.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Map``1(System.Object,Umbraco.Core.Mapping.MapperContext)">
            <summary>
            Maps a source object to a new target object.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="context">A mapper context.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Map``2(``0)">
            <summary>
            Maps a source object to a new target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Map``2(``0,System.Action{Umbraco.Core.Mapping.MapperContext})">
            <summary>
            Maps a source object to a new target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="f">A mapper context preparation method.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Map``2(``0,Umbraco.Core.Mapping.MapperContext)">
            <summary>
            Maps a source object to a new target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="context">A mapper context.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Map``2(``0,``1)">
            <summary>
            Maps a source object to an existing target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Map``2(``0,``1,System.Action{Umbraco.Core.Mapping.MapperContext})">
            <summary>
            Maps a source object to an existing target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <param name="f">A mapper context preparation method.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.Map``2(``0,``1,Umbraco.Core.Mapping.MapperContext)">
            <summary>
            Maps a source object to an existing target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <param name="context">A mapper context.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.MapEnumerable``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Maps an enumerable of source objects to a new list of target objects.
            </summary>
            <typeparam name="TSourceElement">The type of the source objects.</typeparam>
            <typeparam name="TTargetElement">The type of the target objects.</typeparam>
            <param name="source">The source objects.</param>
            <returns>A list containing the target objects.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.MapEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Action{Umbraco.Core.Mapping.MapperContext})">
            <summary>
            Maps an enumerable of source objects to a new list of target objects.
            </summary>
            <typeparam name="TSourceElement">The type of the source objects.</typeparam>
            <typeparam name="TTargetElement">The type of the target objects.</typeparam>
            <param name="source">The source objects.</param>
            <param name="f">A mapper context preparation method.</param>
            <returns>A list containing the target objects.</returns>
        </member>
        <member name="M:Umbraco.Core.Mapping.UmbracoMapper.MapEnumerable``2(System.Collections.Generic.IEnumerable{``0},Umbraco.Core.Mapping.MapperContext)">
            <summary>
            Maps an enumerable of source objects to a new list of target objects.
            </summary>
            <typeparam name="TSourceElement">The type of the source objects.</typeparam>
            <typeparam name="TTargetElement">The type of the target objects.</typeparam>
            <param name="source">The source objects.</param>
            <param name="context">A mapper context.</param>
            <returns>A list containing the target objects.</returns>
        </member>
        <member name="M:Umbraco.Core.PublishedContentExtensions.HasCulture(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Determines whether the content has a culture.
            </summary>
            <remarks>Culture is case-insensitive.</remarks>
        </member>
        <member name="M:Umbraco.Core.PublishedContentExtensions.IsInvariantOrHasCulture(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Determines whether the content is invariant, or has a culture.
            </summary>
            <remarks>Culture is case-insensitive.</remarks>
        </member>
        <member name="M:Umbraco.Core.PublishedContentExtensions.WhereIsInvariantOrHasCulture``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Filters a sequence of <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> to return invariant items, and items that are published for the specified culture.
            </summary>
            <param name="contents">The content items.</param>
            <param name="culture">The specific culture to filter for. If null is used the current culture is used. (Default is null).</param>
        </member>
        <member name="M:Umbraco.Core.PublishedContentExtensions.Name(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the name of the content item.
            </summary>
            <param name="content">The content item.</param>
            <param name="culture">The specific culture to get the name for. If null is used the current culture is used (Default is null).</param>
        </member>
        <member name="M:Umbraco.Core.PublishedContentExtensions.UrlSegment(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the URL segment of the content item.
            </summary>
            <param name="content">The content item.</param>
            <param name="culture">The specific culture to get the URL segment for. If null is used the current culture is used (Default is null).</param>
        </member>
        <member name="M:Umbraco.Core.PublishedContentExtensions.CultureDate(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the culture date of the content item.
            </summary>
            <param name="content">The content item.</param>
            <param name="culture">The specific culture to get the name for. If null is used the current culture is used (Default is null).</param>
        </member>
        <member name="M:Umbraco.Core.PublishedContentExtensions.Children(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the children of the content item.
            </summary>
            <param name="content">The content item.</param>
            <param name="culture">
            The specific culture to get the URL children for. Default is null which will use the current culture in <see cref="T:Umbraco.Core.Models.PublishedContent.VariationContext"/>        
            </param>
            <remarks>
            <para>Gets children that are available for the specified culture.</para>
            <para>Children are sorted by their sortOrder.</para>
            <para>
            For culture, 
            if null is used the current culture is used.
            If an empty string is used only invariant children are returned.
            If "*" is used all children are returned.
            </para>
            <para>
            If a variant culture is specified or there is a current culture in the <see cref="T:Umbraco.Core.Models.PublishedContent.VariationContext"/> then the Children returned
            will include both the variant children matching the culture AND the invariant children because the invariant children flow with the current culture.
            However, if an empty string is specified only invariant children are returned.
            </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PublishedModelFactoryExtensions">
            <summary>
            Provides extension methods for <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedModelFactory"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PublishedModelFactoryExtensions.IsLiveFactory(Umbraco.Core.Models.PublishedContent.IPublishedModelFactory)">
            <summary>
            Returns true if the current <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedModelFactory"/> is an implementation of <see cref="T:Umbraco.Core.Models.PublishedContent.ILivePublishedModelFactory"/>
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PublishedModelFactoryExtensions.IsLiveFactoryEnabled(Umbraco.Core.Models.PublishedContent.IPublishedModelFactory)">
            <summary>
            Returns true if the current <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedModelFactory"/> is an implementation of <see cref="T:Umbraco.Core.Models.PublishedContent.ILivePublishedModelFactory2"/> and is enabled
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PublishedModelFactoryExtensions.WithSafeLiveFactoryReset(Umbraco.Core.Models.PublishedContent.IPublishedModelFactory,System.Action)">
            <summary>
            Sets a flag to reset the ModelsBuilder models if the <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedModelFactory"/> is <see cref="T:Umbraco.Core.Models.PublishedContent.ILivePublishedModelFactory"/>
            </summary>
            <param name="factory"></param>
            <param name="action"></param>
            <remarks>
            This does not recompile the pure live models, only sets a flag to tell models builder to recompile when they are requested.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeLoaderExtensions.GetDataEditors(Umbraco.Core.Composing.TypeLoader)">
            <summary>
            Gets all classes implementing <see cref="T:Umbraco.Core.PropertyEditors.IDataEditor"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.TypeLoaderExtensions.GetCacheRefreshers(Umbraco.Core.Composing.TypeLoader)">
            <summary>
            Gets all classes implementing ICacheRefresher.
            </summary>
        </member>
        <member name="M:Umbraco.Core.TypeLoaderExtensions.GetPackageActions(Umbraco.Core.Composing.TypeLoader)">
            <summary>
            Gets all classes implementing IPackageAction.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.CaseInsensitiveEnumConfigConverter`1">
            <summary>
            A case-insensitive configuration converter for enumerations.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
        </member>
        <member name="T:Umbraco.Core.Configuration.CommaDelimitedConfigurationElement">
            <summary>
            Defines a configuration section that contains inner text that is comma delimited
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.CommaDelimitedConfigurationElement.InnerEnumerator">
            <summary>
            A wrapper for StringEnumerator since it doesn't explicitly implement IEnumerable
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.Configs">
            <summary>
            Represents Umbraco configurations.
            </summary>
            <remarks>
            <para>During composition, use composition.Configs. When running, either inject the required configuration,
            or use Current.Configs.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Configuration.Configs.GetConfig``1">
            <summary>
            Gets a configuration.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.Configs.Add``1(System.Func{``0})">
            <summary>
            Adds a configuration, provided by a factory.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.Configs.Add``1(System.Func{Umbraco.Core.Composing.IFactory,``0})">
            <summary>
            Adds a configuration, provided by a factory.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.Configs.Add``1(System.String)">
            <summary>
            Adds a configuration, provided by a configuration section.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.Configs.RegisterWith(Umbraco.Core.Composing.IRegister)">
            <summary>
            Registers configurations in a register.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.GlobalSettings">
            <summary>
            The GlobalSettings Class contains general settings information for the entire Umbraco instance based on information from  web.config appsettings
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.ResetInternal">
            <summary>
            Used in unit testing to reset all config items that were set with property setters (i.e. did not come from config)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.Reset">
            <summary>
            Resets settings that were set programmatically, to their initial values.
            </summary>
            <remarks>To be used in unit tests.</remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.HasSmtpServer">
            <summary>
            For testing only
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ReservedUrls">
            <summary>
            Gets the reserved URLs from web.config.
            </summary>
            <value>The reserved URLs.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ReservedPaths">
            <summary>
            Gets the reserved paths from web.config
            </summary>
            <value>The reserved paths.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ContentXmlFile">
            <summary>
            Gets the name of the content XML file.
            </summary>
            <value>The content XML.</value>
            <remarks>
            Defaults to ~/App_Data/umbraco.config
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.Path">
            <summary>
            Gets the path to umbraco's root directory (/umbraco by default).
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.IconsPath">
            <summary>
            Gets the path to folder containing the icons used in the umbraco backoffice (/umbraco/assets/icons by default).
            </summary>
            <value>The icons path.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ConfigurationStatus">
            <summary>
            Gets or sets the configuration status. This will return the version number of the currently installed umbraco instance.
            </summary>
            <value>The configuration status.</value>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.SaveSetting(System.String,System.String)">
            <summary>
            Saves a setting into the configuration file.
            </summary>
            <param name="key">Key of the setting to be saved.</param>
            <param name="value">Value of the setting to be saved.</param>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.RemoveSetting(System.String)">
            <summary>
            Removes a setting from the configuration file.
            </summary>
            <param name="key">Key of the setting to be removed.</param>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.DebugMode">
            <summary>
            Gets a value indicating whether umbraco is running in [debug mode].
            </summary>
            <value><c>true</c> if [debug mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.TimeOutInMinutes">
            <summary>
            Gets the time out in minutes.
            </summary>
            <value>The time out in minutes.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.VersionCheckPeriod">
            <summary>
            Returns the number of days that should take place between version checks.
            </summary>
            <value>The version check period in days (0 = never).</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.LocalTempStorageLocation">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.LocalTempPath">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.DefaultUILanguage">
            <summary>
            Gets the default UI language.
            </summary>
            <value>The default UI language.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.HideTopLevelNodeFromPath">
            <summary>
            Gets a value indicating whether umbraco should hide top level nodes from generated URLs.
            </summary>
            <value>
                <c>true</c> if umbraco hides top level nodes from URLs; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.UseHttps">
            <summary>
            Gets a value indicating whether umbraco should force a secure (https) connection to the backoffice.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettingsExtensions.GetUmbracoMvcArea(Umbraco.Core.Configuration.IGlobalSettings)">
             <summary>
             This returns the string of the MVC Area route.
             </summary>
             <remarks>
             This will return the MVC area that we will route all custom routes through like surface controllers, etc...
             We will use the 'Path' (default ~/umbraco) to create it but since it cannot contain '/' and people may specify a path of ~/asdf/asdf/admin
             we will convert the '/' to '-' and use that as the path. its a bit lame but will work.
            
             We also make sure that the virtual directory (SystemDirectories.Root) is stripped off first, otherwise we'd end up with something
             like "MyVirtualDirectory-Umbraco" instead of just "Umbraco".
             </remarks>
        </member>
        <member name="T:Umbraco.Core.Configuration.IGlobalSettings">
            <summary>
            Contains general settings information for the entire Umbraco instance based on information from  web.config appsettings
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.IGlobalSettings.ReservedUrls">
            <summary>
            Gets the reserved URLs from web.config.
            </summary>
            <value>The reserved URLs.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.IGlobalSettings.ReservedPaths">
            <summary>
            Gets the reserved paths from web.config
            </summary>
            <value>The reserved paths.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.IGlobalSettings.Path">
            <summary>
            Gets the path to umbraco's root directory (/umbraco by default).
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.IGlobalSettings.IconsPath">
            <summary>
            Gets the path to umbraco's icons directory (/umbraco/assets/icons by default).
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.IGlobalSettings.ConfigurationStatus">
            <summary>
            Gets or sets the configuration status. This will return the version number of the currently installed umbraco instance.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.IGlobalSettings.TimeOutInMinutes">
            <summary>
            Gets the time out in minutes.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.IGlobalSettings.DefaultUILanguage">
            <summary>
            Gets the default UI language.
            </summary>
            <value>The default UI language.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.IGlobalSettings.HideTopLevelNodeFromPath">
            <summary>
            Gets a value indicating whether umbraco should hide top level nodes from generated URLs.
            </summary>
            <value>
            	<c>true</c> if umbraco hides top level nodes from URLs; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Core.Configuration.IGlobalSettings.UseHttps">
            <summary>
            Gets a value indicating whether umbraco should force a secure (https) connection to the backoffice.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.IGlobalSettings.VersionCheckPeriod">
            <summary>
            Returns a string value to determine if umbraco should skip version-checking.
            </summary>
            <value>The version check period in days (0 = never).</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.IGlobalSettings.LocalTempStorageLocation">
            <summary>
            Gets the configuration for the location of temporary files.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.IGlobalSettings.LocalTempPath">
            <summary>
            Gets the location of temporary files.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.InnerTextConfigurationElement`1">
            <summary>
            A full config section is required for any full element and we have some elements that are defined like this:
            {element}MyValue{/element} instead of as attribute values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Umbraco.Core.Configuration.InnerTextConfigurationElement`1.RawValue">
            <summary>
            Exposes the raw string value
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.InnerTextConfigurationElement`1.op_Implicit(Umbraco.Core.Configuration.InnerTextConfigurationElement{`0})~`0">
            <summary>
            Implicit operator so we don't need to use the 'Value' property explicitly
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Configuration.InnerTextConfigurationElement`1.ToString">
            <summary>
            Return the string value of Value
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Configuration.OptionalCommaDelimitedConfigurationElement">
            <summary>
            Used for specifying default values for comma delimited config
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.OptionalInnerTextConfigurationElement`1">
            <summary>
            This is used to supply optional/default values when using InnerTextConfigurationElement
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Configuration.RawXmlConfigurationElement">
            <summary>
            A configuration section that simply exposes the entire raw xml of the section itself which inheritors can use
            to do with as they please.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.IUmbracoConfigurationSection">
            <summary>
            Represents an Umbraco configuration section which can be used to pass to UmbracoConfiguration.For{T}
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.UmbracoConfigurationSection">
            <summary>
            Represents an Umbraco section within the configuration file.
            </summary>
            <remarks>
            <para>The requirement for these sections is to be read-only.</para>
            <para>However for unit tests purposes it is internally possible to override some values, and
            then calling <c>>ResetSection</c> should cancel these changes and bring the section back to
            what it was originally.</para>
            <para>The <c>UmbracoSettings.For{T}</c> method will return a section, either one that
            is in the configuration file, or a section that was created with default values.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoConfigurationSection.IsPresent">
            <summary>
            Gets a value indicating whether the section actually is in the configuration file.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoSettings.ContentSectionExtensions.IsImageFile(Umbraco.Core.Configuration.UmbracoSettings.IContentSection,System.String)">
            <summary>
            Gets a value indicating whether the file extension corresponds to an image.
            </summary>
            <param name="extension">The file extension.</param>
            <param name="contentConfig"></param>
            <returns>A value indicating whether the file extension corresponds to an image.</returns>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoSettings.ContentSectionExtensions.IsFileAllowedForUpload(Umbraco.Core.Configuration.UmbracoSettings.IContentSection,System.String)">
            <summary>
            Determines if file extension is allowed for upload based on (optional) white list and black list
            held in settings.
            Allow upload if extension is whitelisted OR if there is no whitelist and extension is NOT blacklisted.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoSettings.ContentSectionExtensions.GetConfig(Umbraco.Core.Configuration.UmbracoSettings.IContentSection,System.String)">
            <summary>
            Gets the auto-fill configuration for a specified property alias.
            </summary>
            <param name="contentSection"></param>
            <param name="propertyTypeAlias">The property type alias.</param>
            <returns>The auto-fill configuration for the specified property alias, or null.</returns>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.IContentSection.ShowDeprecatedPropertyEditors">
            <summary>
            Gets a value indicating whether to show deprecated property editors in
            a datatype list of available editors.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.Alias">
            <summary>
            Allow setting internally so we can create a default
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ImagingAutoFillUploadFieldElement.Alias">
            <summary>
            Allow setting internally so we can create a default
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.AllowPasswordReset">
            <summary>
            Used to enable/disable the forgot password functionality on the back office login screen
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.UsernameIsEmail">
            <summary>
            A boolean indicating that by default the email address will be the username
            </summary>
            <remarks>
            Even if this is true and the username is different from the email in the database, the username field will still be shown.
            When this is false, the username and email fields will be shown in the user section.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.SecurityElement.AllowPasswordReset">
            <summary>
            Used to enable/disable the forgot password functionality on the back office login screen
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.SecurityElement.UsernameIsEmail">
            <summary>
            A boolean indicating that by default the email address will be the username
            </summary>
            <remarks>
            Even if this is true and the username is different from the email in the database, the username field will still be shown.
            When this is false, the username and email fields will be shown in the user section.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.SecurityElement.Umbraco#Core#Configuration#UmbracoSettings#ISecuritySection#AllowPasswordReset">
            <summary>
            Used to enable/disable the forgot password functionality on the back office login screen
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.SecurityElement.Umbraco#Core#Configuration#UmbracoSettings#ISecuritySection#UsernameIsEmail">
            <summary>
            A boolean indicating that by default the email address will be the username
            </summary>
            <remarks>
            Even if this is true and the username is different from the email in the database, the username field will still be shown.
            When this is false, the username and email fields will be shown in the user section.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Configuration.UmbracoSettings.UmbracoConfigurationElement">
            <summary>
            Base class with shared helper methods
            </summary>
        </member>
        <member name="F:Umbraco.Core.Configuration.UmbracoSettings.UmbracoConfigurationElement._rawElements">
            <summary>
            Used so the RawElement types are not re-created every time they are accessed
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.UmbracoVersion">
            <summary>
            Represents the version of the executing code.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoVersion.Current">
            <summary>
            Gets the non-semantic version of the Umbraco code.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoVersion.Comment">
            <summary>
            Gets the semantic version comments of the Umbraco code.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoVersion.AssemblyVersion">
            <summary>
            Gets the assembly version of the Umbraco code.
            </summary>
            <remarks>
            <para>The assembly version is the value of the <see cref="T:System.Reflection.AssemblyVersionAttribute"/>.</para>
            <para>Is the one that the CLR checks for compatibility. Therefore, it changes only on
            hard-breaking changes (for instance, on new major versions).</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoVersion.AssemblyFileVersion">
            <summary>
            Gets the assembly file version of the Umbraco code.
            </summary>
            <remarks>
            <para>The assembly version is the value of the <see cref="T:System.Reflection.AssemblyFileVersionAttribute"/>.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoVersion.SemanticVersion">
            <summary>
            Gets the semantic version of the Umbraco code.
            </summary>
            <remarks>
            <para>The semantic version is the value of the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/>.</para>
            <para>It is the full version of Umbraco, including comments.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoVersion.LocalVersion">
            <summary>
            Gets the "local" version of the site.
            </summary>
            <remarks>
            <para>Three things have a version, really: the executing code, the database model,
            and the site/files. The database model version is entirely managed via migrations,
            and changes during an upgrade. The executing code version changes when new code is
            deployed. The site/files version changes during an upgrade.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.ConfigsExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Umbraco.Core.Configuration.Configs"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Core.RegisterExtensions">
            <summary>
            Provides extension methods to the <see cref="T:Umbraco.Core.Composing.IRegister"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.RegisterExtensions.Register``2(Umbraco.Core.Composing.IRegister,Umbraco.Core.Composing.Lifetime)">
            <summary>
            Registers a service with an implementation type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.RegisterExtensions.RegisterFor``3(Umbraco.Core.Composing.IRegister,Umbraco.Core.Composing.Lifetime)">
            <summary>
            Registers a service with an implementation type, for a target.
            </summary>
        </member>
        <member name="M:Umbraco.Core.RegisterExtensions.Register``1(Umbraco.Core.Composing.IRegister,Umbraco.Core.Composing.Lifetime)">
            <summary>
            Registers a service as its own implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Core.RegisterExtensions.Register``1(Umbraco.Core.Composing.IRegister,``0)">
            <summary>
            Registers a service with an implementing instance.
            </summary>
        </member>
        <member name="M:Umbraco.Core.RegisterExtensions.RegisterAuto``1(Umbraco.Core.Composing.IRegister)">
            <summary>
            Registers a base type for auto-registration.
            </summary>
        </member>
        <member name="T:Umbraco.Core.ContentVariationExtensions">
            <summary>
            Provides extension methods for content variations.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByNothing(Umbraco.Core.Models.ISimpleContentType)">
            <summary>
            Determines whether the content type is invariant.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            A value indicating whether the content type is invariant.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByNothing(Umbraco.Core.Models.IContentTypeBase)">
            <summary>
            Determines whether the content type is invariant.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            A value indicating whether the content type is invariant.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByNothing(Umbraco.Core.Models.PublishedContent.IPublishedContentType)">
            <summary>
            Determines whether the content type is invariant.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            A value indicating whether the content type is invariant.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByNothing(Umbraco.Core.Models.PropertyType)">
            <summary>
            Determines whether the property type is invariant.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
            A value indicating whether the property type is invariant.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByNothing(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
            Determines whether the property type is invariant.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
            A value indicating whether the property type is invariant.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByNothing(Umbraco.Core.Models.ContentVariation)">
            <summary>
            Determines whether a variation is invariant.
            </summary>
            <param name="variation">The variation.</param>
            <returns>
            A value indicating whether the variation is invariant.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByCulture(Umbraco.Core.Models.ISimpleContentType)">
            <summary>
            Determines whether the content type varies by culture.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            A value indicating whether the content type varies by culture.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByCulture(Umbraco.Core.Models.IContentTypeBase)">
            <summary>
            Determines whether the content type varies by culture.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            A value indicating whether the content type varies by culture.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByCulture(Umbraco.Core.Models.PublishedContent.IPublishedContentType)">
            <summary>
            Determines whether the content type varies by culture.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            A value indicating whether the content type varies by culture.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByCulture(Umbraco.Core.Models.PropertyType)">
            <summary>
            Determines whether the property type varies by culture.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
            A value indicating whether the property type varies by culture.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByCulture(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
            Determines whether the property type varies by culture.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
            A value indicating whether the property type varies by culture.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByCulture(Umbraco.Core.Models.ContentVariation)">
            <summary>
            Determines whether a variation varies by culture.
            </summary>
            <param name="variation">The variation.</param>
            <returns>
            A value indicating whether the variation varies by culture.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesBySegment(Umbraco.Core.Models.ISimpleContentType)">
            <summary>
            Determines whether the content type varies by segment.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            A value indicating whether the content type varies by segment.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesBySegment(Umbraco.Core.Models.IContentTypeBase)">
            <summary>
            Determines whether the content type varies by segment.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            A value indicating whether the content type varies by segment.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesBySegment(Umbraco.Core.Models.PublishedContent.IPublishedContentType)">
            <summary>
            Determines whether the content type varies by segment.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            A value indicating whether the content type varies by segment.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesBySegment(Umbraco.Core.Models.PropertyType)">
            <summary>
            Determines whether the property type varies by segment.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
            A value indicating whether the property type varies by segment.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesBySegment(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
            Determines whether the property type varies by segment.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
            A value indicating whether the property type varies by segment.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesBySegment(Umbraco.Core.Models.ContentVariation)">
            <summary>
            Determines whether a variation varies by segment.
            </summary>
            <param name="variation">The variation.</param>
            <returns>
            A value indicating whether the variation varies by segment.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByCultureAndSegment(Umbraco.Core.Models.ISimpleContentType)">
            <summary>
            Determines whether the content type varies by culture and segment.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            A value indicating whether the content type varies by culture and segment.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByCultureAndSegment(Umbraco.Core.Models.IContentTypeBase)">
            <summary>
            Determines whether the content type varies by culture and segment.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            A value indicating whether the content type varies by culture and segment.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByCultureAndSegment(Umbraco.Core.Models.PublishedContent.IPublishedContentType)">
            <summary>
            Determines whether the content type varies by culture and segment.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            A value indicating whether the content type varies by culture and segment.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByCultureAndSegment(Umbraco.Core.Models.PropertyType)">
            <summary>
            Determines whether the property type varies by culture and segment.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
            A value indicating whether the property type varies by culture and segment.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByCultureAndSegment(Umbraco.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
            Determines whether the property type varies by culture and segment.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
            A value indicating whether the property type varies by culture and segment.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.VariesByCultureAndSegment(Umbraco.Core.Models.ContentVariation)">
            <summary>
            Determines whether a variation varies by culture and segment.
            </summary>
            <param name="variation">The variation.</param>
            <returns>
            A value indicating whether the variation varies by culture and segment.
            </returns>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.SetVariesBy(Umbraco.Core.Models.IContentTypeBase,Umbraco.Core.Models.ContentVariation,System.Boolean)">
            <summary>
            Sets or removes the content type variation depending on the specified value.
            </summary>
            <param name="contentType">The content type.</param>
            <param name="variation">The variation to set or remove.</param>
            <param name="value">If set to <c>true</c> sets the variation; otherwise, removes the variation.</param>
            <remarks>
            This method does not support setting the variation to nothing.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.SetVariesBy(Umbraco.Core.Models.PropertyType,Umbraco.Core.Models.ContentVariation,System.Boolean)">
            <summary>
            Sets or removes the property type variation depending on the specified value.
            </summary>
            <param name="propertyType">The property type.</param>
            <param name="variation">The variation to set or remove.</param>
            <param name="value">If set to <c>true</c> sets the variation; otherwise, removes the variation.</param>
            <remarks>
            This method does not support setting the variation to nothing.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.SetFlag(Umbraco.Core.Models.ContentVariation,Umbraco.Core.Models.ContentVariation,System.Boolean)">
            <summary>
            Returns the variations with the variation set or removed depending on the specified value.
            </summary>
            <param name="variations">The existing variations.</param>
            <param name="variation">The variation to set or remove.</param>
            <param name="value">If set to <c>true</c> sets the variation; otherwise, removes the variation.</param>
            <returns>
            The variations with the variation set or removed.
            </returns>
            <remarks>
            This method does not support setting the variation to nothing.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ContentVariationExtensions.ValidateVariation(Umbraco.Core.Models.ContentVariation,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Validates that a combination of culture and segment is valid for the variation.
            </summary>
            <param name="variation">The variation.</param>
            <param name="culture">The culture.</param>
            <param name="segment">The segment.</param>
            <param name="exact">A value indicating whether to perform exact validation.</param>
            <param name="wildcards">A value indicating whether to support wildcards.</param>
            <param name="throwIfInvalid">A value indicating whether to throw a <see cref="T:System.NotSupportedException" /> when the combination is invalid.</param>
            <returns>
              <c>true</c> if the combination is valid; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.NotSupportedException">Occurs when the combination is invalid, and <paramref name="throwIfInvalid" /> is true.</exception>
            <remarks>
            <para>When validation is exact, the combination must match the variation exactly. For instance, if the variation is Culture, then
            a culture is required. When validation is not strict, the combination must be equivalent, or more restrictive: if the variation is
            Culture, an invariant combination is ok.</para>
            <para>Basically, exact is for one content type, or one property type, and !exact is for "all property types" of one content type.</para>
            <para>Both <paramref name="culture" /> and <paramref name="segment" /> can be "*" to indicate "all of them".</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Dashboards.AccessRule">
            <summary>
            Implements <see cref="T:Umbraco.Core.Dashboards.IAccessRule"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Dashboards.AccessRule.Type">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Dashboards.AccessRule.Value">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Dashboards.AccessRuleType">
            <summary>
            Defines dashboard access rules type.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Dashboards.AccessRuleType.Unknown">
            <summary>
            Unknown (default value).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Dashboards.AccessRuleType.Grant">
            <summary>
            Grant access to the dashboard if user belongs to the specified user group.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Dashboards.AccessRuleType.Deny">
            <summary>
            Deny access to the dashboard if user belongs to the specified user group.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Dashboards.AccessRuleType.GrantBySection">
            <summary>
            Grant access to the dashboard if user has access to the specified section.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dashboards.IAccessRule">
            <summary>
            Represents an access rule.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Dashboards.IAccessRule.Type">
            <summary>
            Gets or sets the rule type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Dashboards.IAccessRule.Value">
            <summary>
            Gets or sets the value for the rule.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dashboards.IDashboard">
            <summary>
            Represents a dashboard.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Dashboards.IDashboard.Sections">
            <summary>
            Gets the aliases of sections/applications where this dashboard appears.
            </summary>
            <remarks>
            <para>This field is *not* needed by the UI and therefore we want to exclude
            it from serialization, but it is deserialized as part of the manifest,
            therefore we cannot plainly ignore it.</para>
            <para>So, it has to remain a data member, plus we use our special
            JsonDontSerialize attribute (see attribute for more details).</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Dashboards.IDashboard.AccessRules">
            <summary>
            Gets the access rule determining the visibility of the dashboard.
            </summary>
            <remarks>
            <para>This field is *not* needed by the UI and therefore we want to exclude
            it from serialization, but it is deserialized as part of the manifest,
            therefore we cannot plainly ignore it.</para>
            <para>So, it has to remain a data member, plus we use our special
            JsonDontSerialize attribute (see attribute for more details).</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Dashboards.IDashboardSlim">
            <summary>
            Represents a dashboard with only minimal data.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Dashboards.IDashboardSlim.Alias">
            <summary>
            Gets the alias of the dashboard.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Dashboards.IDashboardSlim.View">
            <summary>
            Gets the view used to render the dashboard.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Deploy.IDataTypeConfigurationConnector">
            <summary>
            Defines methods that can convert data type configuration to / from an environment-agnostic string.
            </summary>
            <remarks>Configuration may contain values such as content identifiers, that would be local
            to one environment, and need to be converted in order to be deployed.</remarks>
        </member>
        <member name="P:Umbraco.Core.Deploy.IDataTypeConfigurationConnector.PropertyEditorAliases">
            <summary>
            Gets the property editor aliases that the value converter supports by default.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Deploy.IDataTypeConfigurationConnector.ToArtifact(Umbraco.Core.Models.IDataType,System.Collections.Generic.ICollection{Umbraco.Core.Deploy.ArtifactDependency})">
            <summary>
            Gets the artifact datatype configuration corresponding to the actual datatype configuration.
            </summary>
            <param name="dataType">The datatype.</param>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="M:Umbraco.Core.Deploy.IDataTypeConfigurationConnector.FromArtifact(Umbraco.Core.Models.IDataType,System.String)">
            <summary>
            Gets the actual datatype configuration corresponding to the artifact configuration.
            </summary>
            <param name="dataType">The datatype.</param>
            <param name="configuration">The artifact configuration.</param>
        </member>
        <member name="T:Umbraco.Core.Deploy.ArtifactBase`1">
            <summary>
            Provides a base class to all artifacts.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Deploy.ArtifactDependency">
            <summary>
            Represents an artifact dependency.
            </summary>
            <remarks>
            <para>Dependencies have an order property which indicates whether it must be respected when ordering artifacts.</para>
            <para>Dependencies have a mode which can be <c>Match</c> or <c>Exist</c> depending on whether the checksum should match.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.ArtifactDependency.#ctor(Umbraco.Core.Udi,System.Boolean,Umbraco.Core.Deploy.ArtifactDependencyMode)">
            <summary>
            Initializes a new instance of the ArtifactDependency class with an entity identifier and a mode.
            </summary>
            <param name="udi">The entity identifier of the artifact that is a dependency.</param>
            <param name="ordering">A value indicating whether the dependency is ordering.</param>
            <param name="mode">The dependency mode.</param>
        </member>
        <member name="P:Umbraco.Core.Deploy.ArtifactDependency.Udi">
            <summary>
            Gets the entity id of the artifact that is a dependency.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Deploy.ArtifactDependency.Ordering">
            <summary>
            Gets a value indicating whether the dependency is ordering.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Deploy.ArtifactDependency.Mode">
            <summary>
            Gets the dependency mode.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Deploy.ArtifactDependencyCollection">
            <summary>
            Represents a collection of distinct <see cref="T:Umbraco.Core.Deploy.ArtifactDependency"/>.
            </summary>
            <remarks>The collection cannot contain duplicates and modes are properly managed.</remarks>
        </member>
        <member name="T:Umbraco.Core.Deploy.ArtifactDependencyMode">
            <summary>
            Indicates the mode of the dependency.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Deploy.ArtifactDependencyMode.Match">
            <summary>
            The dependency must match exactly.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Deploy.ArtifactDependencyMode.Exist">
            <summary>
            The dependency must exist.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Deploy.ArtifactDeployState">
            <summary>
            Represent the state of an artifact being deployed.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Deploy.ArtifactDeployState.Create``2(``0,``1,Umbraco.Core.Deploy.IServiceConnector,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Umbraco.Core.Deploy.ArtifactDeployState"/> class from an artifact and an entity.
            </summary>
            <typeparam name="TArtifact">The type of the artifact.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="art">The artifact.</param>
            <param name="entity">The entity.</param>
            <param name="connector">The service connector deploying the artifact.</param>
            <param name="nextPass">The next pass number.</param>
            <returns>A deploying artifact.</returns>
        </member>
        <member name="P:Umbraco.Core.Deploy.ArtifactDeployState.Artifact">
            <summary>
            Gets the artifact.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Deploy.ArtifactDeployState.GetArtifactAsIArtifact">
            <summary>
            Gets the artifact as an <see cref="T:Umbraco.Core.Deploy.IArtifact"/>.
            </summary>
            <returns>The artifact, as an <see cref="T:Umbraco.Core.Deploy.IArtifact"/>.</returns>
            <remarks>This is because classes that inherit from this class cannot override the Artifact property
            with a property that specializes the return type, and so they need to 'new' the property.</remarks>
        </member>
        <member name="P:Umbraco.Core.Deploy.ArtifactDeployState.Connector">
            <summary>
            Gets or sets the service connector in charge of deploying the artifact.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Deploy.ArtifactDeployState.NextPass">
            <summary>
            Gets or sets the next pass number.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Deploy.ArtifactDeployState`2">
            <summary>
            Represent the state of an artifact being deployed.
            </summary>
            <typeparam name="TArtifact">The type of the artifact.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Deploy.ArtifactDeployState`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Deploy.ArtifactDeployState`2"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Deploy.ArtifactDeployState`2.#ctor(`0,`1,Umbraco.Core.Deploy.IServiceConnector,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Deploy.ArtifactDeployState`2"/> class.
            </summary>
            <param name="art">The artifact.</param>
            <param name="entity">The entity.</param>
            <param name="connector">The service connector deploying the artifact.</param>
            <param name="nextPass">The next pass number.</param>
        </member>
        <member name="P:Umbraco.Core.Deploy.ArtifactDeployState`2.Artifact">
            <summary>
            Gets or sets the artifact.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Deploy.ArtifactDeployState`2.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Deploy.ArtifactDeployState`2.GetArtifactAsIArtifact">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Core.Deploy.IArtifact">
            <summary>
            Represents an artifact ie an object that can be transfered between environments.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Deploy.IArtifactSignature">
            <summary>
            Represents the signature of an artifact.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Deploy.IArtifactSignature.Udi">
            <summary>
            Gets the entity unique identifier of this artifact.
            </summary>
            <remarks>
            <para>The project identifier is independent from the state of the artifact, its data
            values, dependencies, anything. It never changes and fully identifies the artifact.</para>
            <para>What an entity uses as a unique identifier will influence what we can transfer
            between environments. Eg content type "Foo" on one environment is not necessarily the
            same as "Foo" on another environment, if guids are used as unique identifiers. What is
            used should be documented for each entity, along with the consequences of the choice.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Deploy.IArtifactSignature.Checksum">
            <summary>
            Gets the checksum of this artifact.
            </summary>
            <remarks>
            <para>The checksum depends on the artifact's properties, and on the identifiers of all its dependencies,
            but not on their checksums. So the checksum changes when any of the artifact's properties changes,
            or when the list of dependencies changes. But not if one of these dependencies change.</para>
            <para>It is assumed that checksum collisions cannot happen ie that no two different artifact's
            states will ever produce the same checksum, so that if two artifacts have the same checksum then
            they are identical.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Deploy.IArtifactSignature.Dependencies">
            <summary>
            Gets the dependencies of this artifact.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Deploy.IDeployContext">
            <summary>
            Represents a deployment context.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Deploy.IDeployContext.SessionId">
            <summary>
            Gets the unique identifier of the deployment.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Deploy.IDeployContext.FileSource">
            <summary>
            Gets the file source.
            </summary>
            <remarks>The file source is used to obtain files from the source environment.</remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IDeployContext.NextSeq">
            <summary>
            Gets the next number in a numerical sequence.
            </summary>
            <returns>The next sequence number.</returns>
            <remarks>Can be used to uniquely number things during a deployment.</remarks>
        </member>
        <member name="P:Umbraco.Core.Deploy.IDeployContext.Items">
            <summary>
            Gets items.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Deploy.IDeployContext.Item``1(System.String)">
            <summary>
            Gets item.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="key">The key of the item.</param>
            <returns>The item with the specified key and type, if any, else null.</returns>
        </member>
        <member name="T:Umbraco.Core.Deploy.IFileSource">
            <summary>
            Represents a file source, ie a mean for a target environment involved in a
            deployment to obtain the content of files being deployed.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Deploy.IFileSource.GetFileStream(Umbraco.Core.StringUdi)">
            <summary>
            Gets the content of a file as a stream.
            </summary>
            <param name="udi">A file entity identifier.</param>
            <returns>A stream with read access to the file content.</returns>
            <remarks>
            <para>Returns null if no content could be read.</para>
            <para>The caller should ensure that the stream is properly closed/disposed.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IFileSource.GetFileStreamAsync(Umbraco.Core.StringUdi,System.Threading.CancellationToken)">
            <summary>
            Gets the content of a file as a stream.
            </summary>
            <param name="udi">A file entity identifier.</param>
            <param name="token">A cancellation token.</param>
            <returns>A stream with read access to the file content.</returns>
            <remarks>
            <para>Returns null if no content could be read.</para>
            <para>The caller should ensure that the stream is properly closed/disposed.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IFileSource.GetFileContent(Umbraco.Core.StringUdi)">
            <summary>
            Gets the content of a file as a string.
            </summary>
            <param name="udi">A file entity identifier.</param>
            <returns>A string containing the file content.</returns>
            <remarks>Returns null if no content could be read.</remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IFileSource.GetFileContentAsync(Umbraco.Core.StringUdi,System.Threading.CancellationToken)">
            <summary>
            Gets the content of a file as a string.
            </summary>
            <param name="udi">A file entity identifier.</param>
            <param name="token">A cancellation token.</param>
            <returns>A string containing the file content.</returns>
            <remarks>Returns null if no content could be read.</remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IFileSource.GetFileLength(Umbraco.Core.StringUdi)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="udi">A file entity identifier.</param>
            <returns>The length of the file, or -1 if the file does not exist.</returns>
        </member>
        <member name="M:Umbraco.Core.Deploy.IFileSource.GetFileLengthAsync(Umbraco.Core.StringUdi,System.Threading.CancellationToken)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="udi">A file entity identifier.</param>
            <param name="token">A cancellation token.</param>
            <returns>The length of the file, or -1 if the file does not exist.</returns>
        </member>
        <member name="M:Umbraco.Core.Deploy.IFileSource.GetFiles(System.Collections.Generic.IEnumerable{Umbraco.Core.StringUdi},Umbraco.Core.Deploy.IFileTypeCollection)">
            <summary>
            Gets files and store them using a file store.
            </summary>
            <param name="udis">The udis of the files to get.</param>
            <param name="fileTypes">A collection of file types which can store the files.</param>
        </member>
        <member name="M:Umbraco.Core.Deploy.IFileSource.GetFilesAsync(System.Collections.Generic.IEnumerable{Umbraco.Core.StringUdi},Umbraco.Core.Deploy.IFileTypeCollection,System.Threading.CancellationToken)">
            <summary>
            Gets files and store them using a file store.
            </summary>
            <param name="udis">The udis of the files to get.</param>
            <param name="fileTypes">A collection of file types which can store the files.</param>
            <param name="token">A cancellation token.</param>
        </member>
        <member name="T:Umbraco.Core.Deploy.IGridCellValueConnector">
            <summary>
            Defines methods that can convert a grid cell value to / from an environment-agnostic string.
            </summary>
            <remarks>Grid cell values may contain values such as content identifiers, that would be local
            to one environment, and need to be converted in order to be deployed.</remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IGridCellValueConnector.IsConnector(System.String)">
            <summary>
            Gets a value indicating whether the connector supports a specified grid editor view.
            </summary>
            <param name="view">The grid editor view. It needs to be the view instead of the alias as the view is really what identifies what kind of connector should be used. Alias can be anything and you can have multiple different aliases using the same kind of view.</param>
            <remarks>A value indicating whether the connector supports the grid editor view.</remarks>
            <remarks>Note that <paramref name="view" /> can be string.Empty to indicate the "default" connector.</remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IGridCellValueConnector.GetValue(Umbraco.Core.Models.GridValue.GridControl,System.Collections.Generic.ICollection{Umbraco.Core.Deploy.ArtifactDependency})">
            <summary>
            Gets the value to be deployed from the control value as a string.
            </summary>
            <param name="gridControl">The control containing the value.</param>
            <param name="dependencies">The dependencies of the property.</param>
            <returns>The grid cell value to be deployed.</returns>
            <remarks>Note that </remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IGridCellValueConnector.SetValue(Umbraco.Core.Models.GridValue.GridControl)">
            <summary>
            Allows you to modify the value of a control being deployed.
            </summary>
            <param name="gridControl">The control being deployed.</param>
            <remarks>Follows the pattern of the property value connectors (<see cref="T:Umbraco.Core.Deploy.IValueConnector"/>). The SetValue method is used to modify the value of the <paramref name="gridControl"/>.</remarks>
        </member>
        <member name="T:Umbraco.Core.Deploy.IImageSourceParser">
            <summary>
            Provides methods to parse image tag sources in property values.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Deploy.IImageSourceParser.ToArtifact(System.String,System.Collections.Generic.ICollection{Umbraco.Core.Udi})">
            <summary>
            Parses an Umbraco property value and produces an artifact property value.
            </summary>
            <param name="value">The property value.</param>
            <param name="dependencies">A list of dependencies.</param>
            <returns>The parsed value.</returns>
            <remarks>Turns src="/media/..." into src="umb://media/..." and adds the corresponding udi to the dependencies.</remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IImageSourceParser.FromArtifact(System.String)">
            <summary>
            Parses an artifact property value and produces an Umbraco property value.
            </summary>
            <param name="value">The artifact property value.</param>
            <returns>The parsed value.</returns>
            <remarks>Turns umb://media/... into /media/....</remarks>
        </member>
        <member name="T:Umbraco.Core.Deploy.ILocalLinkParser">
            <summary>
            Provides methods to parse local link tags in property values.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Deploy.ILocalLinkParser.ToArtifact(System.String,System.Collections.Generic.ICollection{Umbraco.Core.Udi})">
            <summary>
            Parses an Umbraco property value and produces an artifact property value.
            </summary>
            <param name="value">The property value.</param>
            <param name="dependencies">A list of dependencies.</param>
            <returns>The parsed value.</returns>
            <remarks>Turns {{localLink:1234}} into {{localLink:umb://{type}/{id}}} and adds the corresponding udi to the dependencies.</remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.ILocalLinkParser.FromArtifact(System.String)">
            <summary>
            Parses an artifact property value and produces an Umbraco property value.
            </summary>
            <param name="value">The artifact property value.</param>
            <returns>The parsed value.</returns>
            <remarks>Turns {{localLink:umb://{type}/{id}}} into {{localLink:1234}}.</remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IMacroParser.ToArtifact(System.String,System.Collections.Generic.ICollection{Umbraco.Core.Udi})">
            <summary>
            Parses an Umbraco property value and produces an artifact property value.
            </summary>
            <param name="value">Property value.</param>
            <param name="dependencies">A list of dependencies.</param>
            <returns>Parsed value.</returns>
        </member>
        <member name="M:Umbraco.Core.Deploy.IMacroParser.FromArtifact(System.String)">
            <summary>
            Parses an artifact property value and produces an Umbraco property value.
            </summary>
            <param name="value">Artifact property value.</param>
            <returns>Parsed value.</returns>
        </member>
        <member name="M:Umbraco.Core.Deploy.IMacroParser.ReplaceAttributeValue(System.String,System.String,System.Collections.Generic.ICollection{Umbraco.Core.Udi},Umbraco.Core.Deploy.Direction)">
            <summary>
            Tries to replace the value of the attribute/parameter with a value containing a converted identifier.
            </summary>
            <param name="value">Value to attempt to convert</param>
            <param name="editorAlias">Alias of the editor used for the parameter</param>
            <param name="dependencies">Collection to add dependencies to when performing ToArtifact</param>
            <param name="direction">Indicates which action is being performed (to or from artifact)</param>
            <returns>Value with converted identifiers</returns>
        </member>
        <member name="T:Umbraco.Core.Deploy.IServiceConnector">
            <summary>
            Connects to an Umbraco service.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Deploy.IServiceConnector.GetArtifact(Umbraco.Core.Udi)">
            <summary>
            Gets an artifact.
            </summary>
            <param name="udi">The entity identifier of the artifact.</param>
            <returns>The corresponding artifact, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Deploy.IServiceConnector.GetArtifact(System.Object)">
            <summary>
            Gets an artifact.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The corresponding artifact.</returns>
        </member>
        <member name="M:Umbraco.Core.Deploy.IServiceConnector.ProcessInit(Umbraco.Core.Deploy.IArtifact,Umbraco.Core.Deploy.IDeployContext)">
            <summary>
            Initializes processing for an artifact.
            </summary>
            <param name="art">The artifact.</param>
            <param name="context">The deploy context.</param>
            <returns>The mapped artifact.</returns>
        </member>
        <member name="M:Umbraco.Core.Deploy.IServiceConnector.Process(Umbraco.Core.Deploy.ArtifactDeployState,Umbraco.Core.Deploy.IDeployContext,System.Int32)">
            <summary>
            Processes an artifact.
            </summary>
            <param name="dart">The mapped artifact.</param>
            <param name="context">The deploy context.</param>
            <param name="pass">The processing pass number.</param>
        </member>
        <member name="M:Umbraco.Core.Deploy.IServiceConnector.Explode(Umbraco.Core.UdiRange,System.Collections.Generic.List{Umbraco.Core.Udi})">
            <summary>
            Explodes a range into udis.
            </summary>
            <param name="range">The range.</param>
            <param name="udis">The list of udis where to add the new udis.</param>
            <remarks>Also, it's cool to have a method named Explode. Kaboom!</remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IServiceConnector.GetRange(Umbraco.Core.Udi,System.String)">
            <summary>
            Gets a named range for a specified udi and selector.
            </summary>
            <param name="udi">The udi.</param>
            <param name="selector">The selector.</param>
            <returns>The named range for the specified udi and selector.</returns>
        </member>
        <member name="M:Umbraco.Core.Deploy.IServiceConnector.GetRange(System.String,System.String,System.String)">
            <summary>
            Gets a named range for specified entity type, identifier and selector.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="sid">The identifier.</param>
            <param name="selector">The selector.</param>
            <returns>The named range for the specified entity type, identifier and selector.</returns>
            <remarks>
            <para>This is temporary. At least we thought it would be, in sept. 2016. What day is it now?</para>
            <para>At the moment our UI has a hard time returning proper udis, mainly because Core's tree do
            not manage guids but only ints... so we have to provide a way to support it. The string id here
            can be either a real string (for string udis) or an "integer as a string", using the value "-1" to
            indicate the "root" i.e. an open udi.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IServiceConnector.Compare(Umbraco.Core.Deploy.IArtifact,Umbraco.Core.Deploy.IArtifact,System.Collections.Generic.ICollection{Umbraco.Core.Deploy.Difference})">
            <summary>
            Compares two artifacts.
            </summary>
            <param name="art1">The first artifact.</param>
            <param name="art2">The second artifact.</param>
            <param name="differences">A collection of differences to append to, if not null.</param>
            <returns>A boolean value indicating whether the artifacts are identical.</returns>
            <remarks>ServiceConnectorBase{TArtifact} provides a very basic default implementation.</remarks>
        </member>
        <member name="T:Umbraco.Core.Deploy.IUniqueIdentifyingServiceConnector">
            <summary>
            Provides a method to retrieve an artifact's unique identifier.
            </summary>
            <remarks>
            Artifacts are uniquely identified by their <see cref="T:Umbraco.Core.Udi"/>, however they represent
            elements in Umbraco that may be uniquely identified by another value. For example,
            a content type is uniquely identified by its alias. If someone creates a new content
            type, and tries to deploy it to a remote environment where a content type with the
            same alias already exists, both content types end up having different <see cref="T:Umbraco.Core.Udi"/>
            but the same alias. By default, Deploy would fail and throw when trying to save the
            new content type (duplicate alias). However, if the connector also implements this
            interface, the situation can be detected beforehand and reported in a nicer way.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Deploy.IUniqueIdentifyingServiceConnector.GetUniqueIdentifier(Umbraco.Core.Deploy.IArtifact)">
            <summary>
            Gets the unique identifier of the specified artifact.
            </summary>
            <param name="artifact">The artifact.</param>
            <returns>The unique identifier.</returns>
        </member>
        <member name="T:Umbraco.Core.Deploy.IValueConnector">
            <summary>
            Defines methods that can convert a property value to / from an environment-agnostic string.
            </summary>
            <remarks>Property values may contain values such as content identifiers, that would be local
            to one environment, and need to be converted in order to be deployed. Connectors also deal
            with serializing to / from string.</remarks>
        </member>
        <member name="P:Umbraco.Core.Deploy.IValueConnector.PropertyEditorAliases">
            <summary>
            Gets the property editor aliases that the value converter supports by default.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Deploy.IValueConnector.ToArtifact(System.Object,Umbraco.Core.Models.PropertyType,System.Collections.Generic.ICollection{Umbraco.Core.Deploy.ArtifactDependency})">
            <summary>
            Gets the deploy property value corresponding to a content property value, and gather dependencies.
            </summary>
            <param name="value">The content property value.</param>
            <param name="propertyType">The value property type</param>
            <param name="dependencies">The content dependencies.</param>
            <returns>The deploy property value.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.Deploy.IValueConnector.FromArtifact(System.String,Umbraco.Core.Models.PropertyType,System.Object)" -->
        <member name="T:Umbraco.Core.DisposableObjectSlim">
             <summary>
             Abstract implementation of managed IDisposable.
             </summary>
             <remarks>
             This is for objects that do NOT have unmanaged resources. Use <see cref="!:DisposableObject"/>
             for objects that DO have unmanaged resources and need to deal with them when disposing.
            
             Can also be used as a pattern for when inheriting is not possible.
            
             See also: https://msdn.microsoft.com/en-us/library/b1yfkh5e%28v=vs.110%29.aspx
             See also: https://lostechies.com/chrispatterson/2012/11/29/idisposable-done-right/
            
             Note: if an object's ctor throws, it will never be disposed, and so if that ctor
             has allocated disposable objects, it should take care of disposing them.
             </remarks>
        </member>
        <member name="T:Umbraco.Core.EnumExtensions">
            <summary>
            Provides extension methods to <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.EnumExtensions.HasFlagAll``1(``0,``0)">
            <summary>
            Determines whether all the flags/bits are set within the enum value.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <param name="value">The enum value.</param>
            <param name="flags">The flags.</param>
            <returns>
              <c>true</c> if all the flags/bits are set within the enum value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.EnumExtensions.HasFlagAny``1(``0,``0)">
            <summary>
            Determines whether any of the flags/bits are set within the enum value.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <param name="value">The value.</param>
            <param name="flags">The flags.</param>
            <returns>
              <c>true</c> if any of the flags/bits are set within the enum value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Umbraco.Core.Events.CancellableEnumerableObjectEventArgs`1">
            <summary>
            Represents event data, for events that support cancellation, and expose impacted objects.
            </summary>
            <typeparam name="TEventObject">The type of the exposed, impacted objects.</typeparam>
        </member>
        <member name="T:Umbraco.Core.Events.CancellableObjectEventArgs`1">
            <summary>
            Represent event data, for events that support cancellation, and expose an impacted object.
            </summary>
            <typeparam name="TEventObject">The type of the exposed, impacted object.</typeparam>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableObjectEventArgs`1.EventObject">
            <summary>
            Gets or sets the impacted object.
            </summary>
            <remarks>
            This is protected so that inheritors can expose it with their own name
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Events.ContentPublishedEventArgs">
            <summary>
            Represents event data for the Published event.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ContentPublishedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Events.ContentPublishedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ContentPublishedEventArgs.HasPublishedCulture(Umbraco.Core.Models.IContent,System.String)">
            <summary>
            Determines whether a culture has been published, during a Published event.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ContentPublishedEventArgs.HasUnpublishedCulture(Umbraco.Core.Models.IContent,System.String)">
            <summary>
            Determines whether a culture has been unpublished, during a Published event.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.ContentPublishingEventArgs">
            <summary>
            Represents event data for the Publishing event.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ContentPublishingEventArgs.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},Umbraco.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Events.ContentPublishingEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ContentPublishingEventArgs.IsPublishingCulture(Umbraco.Core.Models.IContent,System.String)">
            <summary>
            Determines whether a culture is being published, during a Publishing event.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ContentPublishingEventArgs.IsUnpublishingCulture(Umbraco.Core.Models.IContent,System.String)">
            <summary>
            Determines whether a culture is being unpublished, during a Publishing event.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.ContentSavedEventArgs">
            <summary>
            Represents event data for the Saved event.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ContentSavedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},Umbraco.Core.Events.EventMessages,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Events.ContentSavedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ContentSavedEventArgs.HasSavedCulture(Umbraco.Core.Models.IContent,System.String)">
            <summary>
            Determines whether a culture has been saved, during a Saved event.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.ContentSavingEventArgs">
            <summary>
            Represent event data for the Saving event.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ContentSavingEventArgs.ToContentSavedEventArgs">
            <summary>
            Converts <see cref="T:Umbraco.Core.Events.ContentSavingEventArgs"/> to <see cref="T:Umbraco.Core.Events.ContentSavedEventArgs"/> while preserving all args state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Events.ContentSavingEventArgs.ToContentPublishedEventArgs">
            <summary>
            Converts <see cref="T:Umbraco.Core.Events.ContentSavingEventArgs"/> to <see cref="T:Umbraco.Core.Events.ContentPublishedEventArgs"/> while preserving all args state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Events.ContentSavingEventArgs.ToContentPublishingEventArgs">
            <summary>
            Converts <see cref="T:Umbraco.Core.Events.ContentSavingEventArgs"/> to <see cref="T:Umbraco.Core.Events.ContentPublishingEventArgs"/> while preserving all args state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Events.ContentSavingEventArgs.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},Umbraco.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Events.ContentSavingEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ContentSavingEventArgs.#ctor(Umbraco.Core.Models.IContent,Umbraco.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Events.ContentSavingEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ContentSavingEventArgs.IsSavingCulture(Umbraco.Core.Models.IContent,System.String)">
            <summary>
            Determines whether a culture is being saved, during a Saving event.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.CancellableEventArgs">
            <summary>
            Represents event data for events that support cancellation.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableEventArgs.CanCancel">
            <summary>
            Flag to determine if this instance will support being cancellable
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableEventArgs.Cancel">
            <summary>
            If this instance supports cancellation, this gets/sets the cancel value
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.CancellableEventArgs.CancelOperation(Umbraco.Core.Events.EventMessage)">
            <summary>
            if this instance supports cancellation, this will set Cancel to true with an affiliated cancellation message
            </summary>
            <param name="cancelationMessage"></param>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableEventArgs.Messages">
            <summary>
            Returns the EventMessages object which is used to add messages to the message collection for this event
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableEventArgs.AdditionalData">
            <summary>
            In some cases raised evens might need to contain additional arbitrary readonly data which can be read by event subscribers
            </summary>
            <remarks>
            This allows for a bit of flexibility in our event raising - it's not pretty but we need to maintain backwards compatibility
            so we cannot change the strongly typed nature for some events.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableEventArgs.EventState">
            <summary>
            This can be used by event subscribers to store state in the event args so they easily deal with custom state data between a starting ("ing")
            event and an ending ("ed") event
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.CancellableObjectEventArgs">
            <summary>
            Provides a base class for classes representing event data, for events that support cancellation, and expose an impacted object.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableObjectEventArgs.EventObject">
            <summary>
            Gets or sets the impacted object.
            </summary>
            <remarks>
            This is protected so that inheritors can expose it with their own name
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Events.CopyEventArgs`1.Copy">
            <summary>
            The copied entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CopyEventArgs`1.Original">
            <summary>
            The original entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CopyEventArgs`1.ParentId">
            <summary>
            Gets or Sets the Id of the objects new parent.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(`0,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(`0,System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(`0)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="P:Umbraco.Core.Events.DeleteEventArgs`1.DeletedEntities">
            <summary>
            Returns all entities that were deleted during the operation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.DeleteEventArgs`1.MediaFilesToDelete">
            <summary>
            A list of media files that can be added to during a deleted operation for which Umbraco will ensure are removed
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.DeleteEventArgs.Id">
            <summary>
            Gets the Id of the object being deleted.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.DeleteRevisionsEventArgs.IsDeletingSpecificRevision">
            <summary>
            Returns true if we are deleting a specific revision
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.EventDefinitionFilter">
            <summary>
            The filter used in the <see cref="T:Umbraco.Core.Events.IEventDispatcher"/> GetEvents method which determines
            how the result list is filtered
            </summary>
        </member>
        <member name="F:Umbraco.Core.Events.EventDefinitionFilter.All">
            <summary>
            Returns all events tracked
            </summary>
        </member>
        <member name="F:Umbraco.Core.Events.EventDefinitionFilter.FirstIn">
            <summary>
            Deduplicates events and only returns the first duplicate instance tracked
            </summary>
        </member>
        <member name="F:Umbraco.Core.Events.EventDefinitionFilter.LastIn">
            <summary>
            Deduplicates events and only returns the last duplicate instance tracked
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.EventExtensions">
            <summary>
            Extension methods for cancellable event operations
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.EventExtensions.IsRaisedEventCancelled``2(Umbraco.Core.Events.TypedEventHandler{``0,``1},``1,``0)">
            <summary>
            Raises a cancelable event and returns a value indicating whether the event should be cancelled.
            </summary>
            <typeparam name="TSender">The type of the event source.</typeparam>
            <typeparam name="TArgs">The type of the event data.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="args">The event source.</param>
            <param name="sender">The event data.</param>
            <returns>A value indicating whether the cancelable event should be cancelled</returns>
            <remarks>A cancelable event is raised by a component when it is about to perform an action that can be canceled.</remarks>
        </member>
        <member name="M:Umbraco.Core.Events.EventExtensions.RaiseEvent``2(Umbraco.Core.Events.TypedEventHandler{``0,``1},``1,``0)">
            <summary>
            Raises an event.
            </summary>
            <typeparam name="TSender">The type of the event source.</typeparam>
            <typeparam name="TArgs">The type of the event data.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="args">The event source.</param>
            <param name="sender">The event data.</param>
        </member>
        <member name="T:Umbraco.Core.Events.EventMessage">
            <summary>
            An event message
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.EventMessage.#ctor(System.String,System.String,Umbraco.Core.Events.EventMessageType)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Events.EventMessage"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.EventMessage.IsDefaultEventMessage">
            <summary>
            This is used to track if this message should be used as a default message so that Umbraco doesn't also append it's own default messages
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.EventMessages">
            <summary>
            Event messages collection
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.EventMessageType">
            <summary>
            The type of event message
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.EventNameExtractor">
             <summary>
             There is actually no way to discover an event name in c# at the time of raising the event. It is possible
             to get the event name from the handler that is being executed based on the event being raised, however that is not
             what we want in this case. We need to find the event name before it is being raised - you would think that it's possible
             with reflection or anything but that is not the case, the delegate that defines an event has no info attached to it, it
             is literally just an event.
            
             So what this does is take the sender and event args objects, looks up all public/static events on the sender that have
             a generic event handler with generic arguments (but only) one, then we match the type of event arguments with the ones
             being passed in. As it turns out, in our services this will work for the majority of our events! In some cases it may not
             work and we'll have to supply a string but hopefully this saves a bit of magic strings.
            
             We can also write tests to validate these are all working correctly for all services.
             </summary>
        </member>
        <member name="M:Umbraco.Core.Events.EventNameExtractor.FindEvent(System.Type,System.Type,System.Func{System.String,System.Boolean})">
            <summary>
            Finds the event name on the sender that matches the args type
            </summary>
            <param name="senderType"></param>
            <param name="argsType"></param>
            <param name="exclude">
            A filter to exclude matched event names, this filter should return true to exclude the event name from being matched
            </param>
            <returns>
            null if not found or an ambiguous match
            </returns>
        </member>
        <member name="M:Umbraco.Core.Events.EventNameExtractor.FindEvent(System.Object,System.Object,System.Func{System.String,System.Boolean})">
            <summary>
            Finds the event name on the sender that matches the args type
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <param name="exclude">
            A filter to exclude matched event names, this filter should return true to exclude the event name from being matched
            </param>
            <returns>
            null if not found or an ambiguous match
            </returns>
        </member>
        <member name="M:Umbraco.Core.Events.EventNameExtractor.MatchIngNames(System.String)">
            <summary>
            Return true if the event is named with an ING name such as "Saving" or "RollingBack"
            </summary>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Events.EventNameExtractor.MatchNonIngNames(System.String)">
            <summary>
            Return true if the event is not named with an ING name such as "Saving" or "RollingBack"
            </summary>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Core.Events.EventNameExtractor.CandidateEvents">
            <summary>
            Used to cache all candidate events for a given type so we don't re-look them up
            </summary>
        </member>
        <member name="F:Umbraco.Core.Events.EventNameExtractor.MatchedEventNames">
            <summary>
            Used to cache all matched event names by (sender type + arg type) so we don't re-look them up
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.IEventDispatcher">
            <summary>
            Dispatches events from within a scope.
            </summary>
            <remarks>
            <para>The name of the event is auto-magically discovered by matching the sender type, args type, and
            eventHandler type. If the match is not unique, then the name parameter must be used to specify the
            name in an explicit way.</para>
            <para>What happens when an event is dispatched depends on the scope settings. It can be anything from
            "trigger immediately" to "just ignore". Refer to the scope documentation for more details.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Events.IEventDispatcher.DispatchCancelable(System.EventHandler,System.Object,Umbraco.Core.Events.CancellableEventArgs,System.String)">
            <summary>
            Dispatches a cancelable event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event data.</param>
            <param name="name">The optional name of the event.</param>
            <returns>A value indicating whether the cancelable event was cancelled.</returns>
            <remarks>See general remarks on the interface.</remarks>
        </member>
        <member name="M:Umbraco.Core.Events.IEventDispatcher.DispatchCancelable``1(System.EventHandler{``0},System.Object,``0,System.String)">
            <summary>
            Dispatches a cancelable event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event data.</param>
            <param name="name">The optional name of the event.</param>
            <returns>A value indicating whether the cancelable event was cancelled.</returns>
            <remarks>See general remarks on the interface.</remarks>
        </member>
        <member name="M:Umbraco.Core.Events.IEventDispatcher.DispatchCancelable``2(Umbraco.Core.Events.TypedEventHandler{``0,``1},``0,``1,System.String)">
            <summary>
            Dispatches a cancelable event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event data.</param>
            <param name="name">The optional name of the event.</param>
            <returns>A value indicating whether the cancelable event was cancelled.</returns>
            <remarks>See general remarks on the interface.</remarks>
        </member>
        <member name="M:Umbraco.Core.Events.IEventDispatcher.Dispatch(System.EventHandler,System.Object,System.EventArgs,System.String)">
            <summary>
            Dispatches an event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event data.</param>
            <param name="name">The optional name of the event.</param>
            <remarks>See general remarks on the interface.</remarks>
        </member>
        <member name="M:Umbraco.Core.Events.IEventDispatcher.Dispatch``1(System.EventHandler{``0},System.Object,``0,System.String)">
            <summary>
            Dispatches an event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event data.</param>
            <param name="name">The optional name of the event.</param>
            <remarks>See general remarks on the interface.</remarks>
        </member>
        <member name="M:Umbraco.Core.Events.IEventDispatcher.Dispatch``2(Umbraco.Core.Events.TypedEventHandler{``0,``1},``0,``1,System.String)">
            <summary>
            Dispatches an event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event data.</param>
            <param name="name">The optional name of the event.</param>
            <remarks>See general remarks on the interface.</remarks>
        </member>
        <member name="M:Umbraco.Core.Events.IEventDispatcher.ScopeExit(System.Boolean)">
            <summary>
            Notifies the dispatcher that the scope is exiting.
            </summary>
            <param name="completed">A value indicating whether the scope completed.</param>
        </member>
        <member name="M:Umbraco.Core.Events.IEventDispatcher.GetEvents(Umbraco.Core.Events.EventDefinitionFilter)">
            <summary>
            Gets the collected events.
            </summary>
            <returns>The collected events.</returns>
        </member>
        <member name="T:Umbraco.Core.Events.IEventMessagesFactory">
            <summary>
            Event messages factory
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Name">
            <summary>
            Name of the faulting macro.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Alias">
            <summary>
            Alias of the faulting macro.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.MacroSource">
            <summary>
            Filename, file path, fully qualified class name, or other key used by the macro engine to do it's processing of the faulting macro.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Exception">
            <summary>
            Exception raised.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Behaviour">
            <summary>
            Gets or sets the desired behaviour when a matching macro causes an error. See
            <see cref="T:Umbraco.Core.Macros.MacroErrorBehaviour"/> for definitions. By setting this in your event
            you can override the default behaviour defined in UmbracoSettings.config.
            </summary>
            <value>Macro error behaviour enum.</value>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Html">
            <summary>
            The HTML code to display when Behavior is Content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MigrationEventArgs.MigrationsTypes">
            <summary>
            Returns all migrations that were used in the migration runner
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MigrationEventArgs.ConfiguredSemVersion">
            <summary>
            Gets the origin version of the migration, i.e. the one that is currently installed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MigrationEventArgs.TargetSemVersion">
            <summary>
            Gets the target version of the migration.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MigrationEventArgs.ProductName">
            <summary>
            Gets the product name.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MigrationEventArgs.MigrationContext">
            <summary>
            Gets the migration context.
            </summary>
            <remarks>Is only available after migrations have run, for post-migrations.</remarks>
        </member>
        <member name="M:Umbraco.Core.Events.MoveEventArgs`1.#ctor(System.Boolean,Umbraco.Core.Events.EventMessages,Umbraco.Core.Events.MoveEventInfo{`0}[])">
            <summary>
            Constructor accepting a collection of MoveEventInfo objects
            </summary>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
            <param name="moveInfo">
            A collection of MoveEventInfo objects that exposes all entities that have been moved during a single move operation
            </param>
        </member>
        <member name="M:Umbraco.Core.Events.MoveEventArgs`1.#ctor(Umbraco.Core.Events.EventMessages,Umbraco.Core.Events.MoveEventInfo{`0}[])">
            <summary>
            Constructor accepting a collection of MoveEventInfo objects
            </summary>
            <param name="eventMessages"></param>
            <param name="moveInfo">
            A collection of MoveEventInfo objects that exposes all entities that have been moved during a single move operation
            </param>
        </member>
        <member name="M:Umbraco.Core.Events.MoveEventArgs`1.#ctor(System.Boolean,Umbraco.Core.Events.MoveEventInfo{`0}[])">
            <summary>
            Constructor accepting a collection of MoveEventInfo objects
            </summary>
            <param name="canCancel"></param>
            <param name="moveInfo">
            A collection of MoveEventInfo objects that exposes all entities that have been moved during a single move operation
            </param>
        </member>
        <member name="M:Umbraco.Core.Events.MoveEventArgs`1.#ctor(Umbraco.Core.Events.MoveEventInfo{`0}[])">
            <summary>
            Constructor accepting a collection of MoveEventInfo objects
            </summary>
            <param name="moveInfo">
            A collection of MoveEventInfo objects that exposes all entities that have been moved during a single move operation
            </param>
        </member>
        <member name="P:Umbraco.Core.Events.MoveEventArgs`1.MoveInfoCollection">
            <summary>
            Gets all MoveEventInfo objects used to create the object
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.NewEventArgs`1.Entity">
            <summary>
            The entity being created
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.NewEventArgs`1.Alias">
            <summary>
            Gets or Sets the Alias.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.NewEventArgs`1.ParentId">
            <summary>
            Gets or Sets the Id of the parent.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.NewEventArgs`1.Parent">
            <summary>
            Gets or Sets the parent IContent object.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.PassThroughEventDispatcher">
            <summary>
            An IEventDispatcher that immediately raise all events.
            </summary>
            <remarks>This means that events will be raised during the scope transaction,
            whatever happens, and the transaction could roll back in the end.</remarks>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(`0,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(`0,System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Boolean)">
            <summary>
            Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="isAllPublished"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(`0)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(`0,System.Boolean,System.Boolean)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="isAllPublished"></param>
        </member>
        <member name="P:Umbraco.Core.Events.PublishEventArgs`1.PublishedEntities">
            <summary>
            Returns all entities that were published during the operation
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.QueuingEventDispatcher">
            <summary>
            An IEventDispatcher that queues events, and raise them when the scope
            exits and has been completed.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.QueuingEventDispatcherBase">
            <summary>
            An IEventDispatcher that queues events.
            </summary>
            <remarks>
            <para>Can raise, or ignore, cancelable events, depending on option.</para>
            <para>Implementations must override ScopeExitCompleted to define what
            to do with the events when the scope exits and has been completed.</para>
            <para>If the scope exits without being completed, events are ignored.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Events.RecycleBinEventArgs.NodeObjectType">
            <summary>
            Gets the Id of the node object type of the items
            being deleted from the Recycle Bin.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.RecycleBinEventArgs.RecycleBinEmptiedSuccessfully">
            <summary>
            Boolean indicating whether the Recycle Bin was emptied successfully
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.RecycleBinEventArgs.IsContentRecycleBin">
            <summary>
            Boolean indicating whether this event was fired for the Content's Recycle Bin.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.RecycleBinEventArgs.IsMediaRecycleBin">
            <summary>
            Boolean indicating whether this event was fired for the Media's Recycle Bin.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.RollbackEventArgs`1.Entity">
            <summary>
            The entity being rolledback
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,Umbraco.Core.Events.EventMessages,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="messages"></param>
            <param name="additionalData"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(`0,System.Boolean,Umbraco.Core.Events.EventMessages,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="messages"></param>
            <param name="additionalData"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(`0,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(`0,System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(`0)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="P:Umbraco.Core.Events.SaveEventArgs`1.SavedEntities">
            <summary>
            Returns all entities that were saved during the operation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.SendToPublishEventArgs`1.Entity">
            <summary>
            The entity being sent to publish
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.SupersedeEventAttribute">
            <summary>
            This is used to know if the event arg attributed should supersede another event arg type when
            tracking events for the same entity. If one event args supersedes another then the event args that have been superseded
            will mean that the event will not be dispatched or the args will be filtered to exclude the entity.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.TransientEventMessagesFactory">
            <summary>
            A simple/default transient messages factory
            </summary>
        </member>
        <member name="T:Umbraco.Core.IMainDom">
            <summary>
            Represents the main AppDomain running for a given application.
            </summary>
            <remarks>
            <para>There can be only one "main" AppDomain running for a given application at a time.</para>
            <para>It is possible to register against the MainDom and be notified when it is released.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.IMainDom.IsMainDom">
            <summary>
            Gets a value indicating whether the current domain is the main domain.
            </summary>
            <remarks>
            When the first call is made to this there will generally be some logic executed to acquire a distributed lock lease.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.IMainDom.Register(System.Action,System.Int32)">
            <summary>
            Registers a resource that requires the current AppDomain to be the main domain to function.
            </summary>
            <param name="release">An action to execute before the AppDomain releases the main domain status.</param>
            <param name="weight">An optional weight (lower goes first).</param>
            <returns>A value indicating whether it was possible to register.</returns>
        </member>
        <member name="M:Umbraco.Core.IMainDom.Register(System.Action,System.Action,System.Int32)">
            <summary>
            Registers a resource that requires the current AppDomain to be the main domain to function.
            </summary>
            <param name="install">An action to execute when registering.</param>
            <param name="release">An action to execute before the AppDomain releases the main domain status.</param>
            <param name="weight">An optional weight (lower goes first).</param>
            <returns>A value indicating whether it was possible to register.</returns>
            <remarks>If registering is successful, then the <paramref name="install"/> action
            is guaranteed to execute before the AppDomain releases the main domain status.</remarks>
        </member>
        <member name="T:Umbraco.Core.GuidUtils">
            <summary>
            Utility methods for the <see cref="T:System.Guid"/> struct.
            </summary>
        </member>
        <member name="M:Umbraco.Core.GuidUtils.Combine(System.Guid,System.Guid)">
            <summary>
            Combines two guid instances utilizing an exclusive disjunction.
            The resultant guid is not guaranteed to be unique since the number of unique bits is halved.
            </summary>
            <param name="a">The first guid.</param>
            <param name="b">The seconds guid.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.GuidUtils.DecomposedGuid">
            <summary>
            A decomposed guid. Allows access to the high and low bits without unsafe code.
            </summary>
        </member>
        <member name="M:Umbraco.Core.GuidUtils.ToBase32String(System.Guid,System.Int32)">
            <summary>
            Converts a Guid into a base-32 string.
            </summary>
            <param name="guid">A Guid.</param>
            <param name="length">The string length.</param>
            <returns>A base-32 encoded string.</returns>
            <remarks>
            <para>A base-32 string representation of a Guid is the shortest, efficient, representation
            that is case insensitive (base-64 is case sensitive).</para>
            <para>Length must be 1-26, anything else becomes 26.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.HexEncoder">
            <summary>
            Provides methods for encoding byte arrays into hexadecimal strings.
            </summary>
        </member>
        <member name="M:Umbraco.Core.HexEncoder.Encode(System.Byte[])">
            <summary>
            Converts a <see cref="T:byte[]"/> to a hexadecimal formatted <see cref="T:System.String"/> padded to 2 digits.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Umbraco.Core.HexEncoder.Encode(System.Byte[],System.Char,System.Int32,System.Int32)">
            <summary>
            Converts a <see cref="T:byte[]"/> to a hexadecimal formatted <see cref="T:System.String"/> padded to 2 digits
            and split into blocks with the given char separator.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="separator">The separator.</param>
            <param name="blockSize">The block size.</param>
            <param name="blockCount">The block count.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.KeyValuePairExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> struct.
            </summary>
        </member>
        <member name="M:Umbraco.Core.KeyValuePairExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Implements key/value pair deconstruction.
            </summary>
            <remarks>Allows for <c>foreach ((var k, var v) in ...)</c>.</remarks>
        </member>
        <member name="T:Umbraco.Core.PackageActions.AllowDoctype">
            <summary>
            This class implements the IPackageAction Interface, used to execute code when packages are installed.
            All IPackageActions only takes a PackageName and a XmlNode as input, and executes based on the data in the xmlnode.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PackageActions.AllowDoctype.Execute(System.String,System.Xml.Linq.XElement)">
            <summary>
            Allows a documentType to be created below another documentType.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="xmlData">The XML data.</param>
            <example><code>
            <Action runat="install" alias="allowDocumenttype" documentTypeAlias="MyNewDocumentType" parentDocumentTypeAlias="HomePage"  />
            </code></example>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:Umbraco.Core.PackageActions.AllowDoctype.Undo(System.String,System.Xml.Linq.XElement)">
            <summary>
            This action has no undo.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="xmlData">The XML data.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PackageActions.AllowDoctype.Alias">
            <summary>
            Action Alias.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PackageActions.PublishRootDocument">
            <summary>
            This class implements the IPackageAction Interface, used to execute code when packages are installed.
            All IPackageActions only takes a PackageName and a XmlNode as input, and executes based on the data in the xmlnode.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PackageActions.PublishRootDocument.Execute(System.String,System.Xml.Linq.XElement)">
            <summary>
            Executes the specified package action.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="xmlData">The XML data.</param>
            <example>
            <Action runat="install" alias="publishRootDocument" documentName="News"  />
            </example>
            <returns>True if executed succesfully</returns>
        </member>
        <member name="M:Umbraco.Core.PackageActions.PublishRootDocument.Undo(System.String,System.Xml.Linq.XElement)">
            <summary>
            This action has no undo.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="xmlData">The XML data.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PackageActions.PublishRootDocument.Alias">
            <summary>
            Action alias
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Packaging.CompiledPackageXmlParser">
            <summary>
            Parses the xml document contained in a compiled (zip) Umbraco package
            </summary>
        </member>
        <member name="M:Umbraco.Core.Packaging.CompiledPackageXmlParser.ExtractSourceDestinationFileInformation(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Packaging.CompiledPackageFile})">
            <summary>
            Returns a tuple of the zip file's unique file name and it's application relative path
            </summary>
            <param name="packageFiles"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.CompiledPackageXmlParser.GetPackageActions(System.Xml.Linq.XElement,System.String)">
            <summary>
            Parses the package actions stored in the package definition
            </summary>
            <param name="actionsElement"></param>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Packaging.ICreatedPackagesRepository">
            <summary>
            Manages the storage of created package definitions
            </summary>
        </member>
        <member name="M:Umbraco.Core.Packaging.ICreatedPackagesRepository.ExportPackage(Umbraco.Core.Models.Packaging.PackageDefinition)">
            <summary>
            Creates the package file and returns it's physical path
            </summary>
            <param name="definition"></param>
        </member>
        <member name="T:Umbraco.Core.Packaging.IInstalledPackagesRepository">
            <summary>
            Manages the storage of installed package definitions
            </summary>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageActionRunner.RunPackageAction(System.String,System.String,System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Runs the package action with the specified action alias.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="actionAlias">The action alias.</param>
            <param name="actionXml">The action XML.</param>
            <param name="errors"></param>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageActionRunner.UndoPackageAction(System.String,System.String,System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Undos the package action with the specified action alias.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="actionAlias">The action alias.</param>
            <param name="actionXml">The action XML.</param>
            <param name="errors"></param>
        </member>
        <member name="T:Umbraco.Core.Packaging.IPackageDefinitionRepository">
            <summary>
            Defines methods for persisting package definitions to storage
            </summary>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageDefinitionRepository.SavePackage(Umbraco.Core.Models.Packaging.PackageDefinition)">
            <summary>
            Persists a package definition to storage
            </summary>
            <returns>
            true if creating/updating the package was successful, otherwise false
            </returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageInstallation.UninstallPackage(Umbraco.Core.Models.Packaging.PackageDefinition,System.Int32)">
            <summary>
            This will run the uninstall sequence for this <see cref="T:Umbraco.Core.Models.Packaging.PackageDefinition"/>
            </summary>
            <param name="packageDefinition"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageInstallation.InstallPackageData(Umbraco.Core.Models.Packaging.PackageDefinition,Umbraco.Core.Models.Packaging.CompiledPackage,System.Int32)">
            <summary>
            Installs a packages data and entities
            </summary>
            <param name="packageDefinition"></param>
            <param name="compiledPackage"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageInstallation.InstallPackageFiles(Umbraco.Core.Models.Packaging.PackageDefinition,Umbraco.Core.Models.Packaging.CompiledPackage,System.Int32)">
            <summary>
            Installs a packages files
            </summary>
            <param name="packageDefinition"></param>
            <param name="compiledPackage"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageInstallation.ReadPackage(System.IO.FileInfo)">
            <summary>
            Reads the package (zip) file and returns the <see cref="T:Umbraco.Core.Models.Packaging.CompiledPackage"/> model
            </summary>
            <param name="packageFile"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Packaging.PackageActionRunner">
            <summary>
            Package actions are executed on package install / uninstall.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageActionRunner.RunPackageAction(System.String,System.String,System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.String}@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageActionRunner.UndoPackageAction(System.String,System.String,System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.String}@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageDataInstallation.ImportContent(Umbraco.Core.Models.Packaging.CompiledPackageDocument,System.Int32,System.Collections.Generic.IDictionary{System.String,Umbraco.Core.Models.IContentType},System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IContent"/>
            </summary>
            <param name="packageDocument">Xml to import</param>
            <param name="parentId">Optional parent Id for the content being imported</param>
            <param name="importedDocumentTypes">A dictionary of already imported document types (basically used as a cache)</param>
            <param name="userId">Optional Id of the user performing the import</param>
            <returns>An enumerable list of generated content</returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageDataInstallation.ImportDocumentTypes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="docTypeElements">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <returns>An enumerable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageDataInstallation.ImportDocumentTypes(System.Collections.Generic.IReadOnlyCollection{System.Xml.Linq.XElement},System.Boolean,System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="unsortedDocumentTypes">Xml to import</param>
            <param name="importStructure">Boolean indicating whether or not to import the </param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <returns>An enumerable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageDataInstallation.FindContentTypeByAlias(System.String)">
            <summary>
            Used during Content import to ensure that the ContentType of a content item exists
            </summary>
            <param name="contentTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageDataInstallation.ImportDataTypes(System.Collections.Generic.IReadOnlyCollection{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IDataType"/>
            </summary>
            <param name="dataTypeElements">Xml to import</param>
            <param name="userId">Optional id of the user</param>
            <returns>An enumerable list of generated DataTypeDefinitions</returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageDataInstallation.ImportDictionaryItems(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves the 'DictionaryItems' part of the package xml as a list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="dictionaryItemElementList">Xml to import</param>
            <param name="userId"></param>
            <returns>An enumerable list of dictionary items</returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageDataInstallation.ImportLanguages(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves the 'Languages' part of a package xml as a list of <see cref="T:Umbraco.Core.Models.ILanguage"/>
            </summary>
            <param name="languageElements">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation</param>
            <returns>An enumerable list of generated languages</returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageDataInstallation.ImportMacros(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves the 'Macros' part of a package xml as a list of <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macroElements">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageDataInstallation.ImportTemplates(System.Collections.Generic.IReadOnlyCollection{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="templateElements">Xml to import</param>
            <param name="userId">Optional user id</param>
            <returns>An enumerable list of generated Templates</returns>
        </member>
        <member name="T:Umbraco.Core.Packaging.PackageDefinitionXmlParser">
            <summary>
            Converts a <see cref="T:Umbraco.Core.Models.Packaging.PackageDefinition"/> to and from XML
            </summary>
        </member>
        <member name="T:Umbraco.Core.Packaging.PackageFileInstallation">
            <summary>
            Installs package files
            </summary>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageFileInstallation.InstallFiles(Umbraco.Core.Models.Packaging.CompiledPackage,System.IO.FileInfo,System.String)">
            <summary>
            Returns a list of all installed file paths
            </summary>
            <param name="compiledPackage"></param>
            <param name="packageFile"></param>
            <param name="targetRootFolder">
            The absolute path of where to extract the package files (normally the application root)
            </param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Packaging.PackagesRepository">
            <summary>
            Manages the storage of installed/created package definitions
            </summary>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackagesRepository.#ctor(Umbraco.Core.Services.IContentService,Umbraco.Core.Services.IContentTypeService,Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Services.IFileService,Umbraco.Core.Services.IMacroService,Umbraco.Core.Services.ILocalizationService,Umbraco.Core.Services.IEntityXmlSerializer,Umbraco.Core.Logging.ILogger,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="contentService"></param>
            <param name="contentTypeService"></param>
            <param name="dataTypeService"></param>
            <param name="fileService"></param>
            <param name="macroService"></param>
            <param name="languageService"></param>
            <param name="serializer"></param>
            <param name="logger"></param>
            <param name="packageRepositoryFileName">
            The file name for storing the package definitions (i.e. "createdPackages.config")
            </param>
            <param name="tempFolderPath"></param>
            <param name="packagesFolderPath"></param>
            <param name="mediaFolderPath"></param>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackagesRepository.ZipPackage(System.String,System.String)">
            <summary>
            Zips the package.
            </summary>
            <param name="path">The path.</param>
            <param name="savePath">The save path.</param>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackagesRepository.AppendFileToPackage(System.String,System.String,System.Xml.Linq.XContainer)">
            <summary>
            Appends a file to package and copies the file to the correct folder.
            </summary>
            <param name="path">The path.</param>
            <param name="packageDirectory">The package directory.</param>
            <param name="filesXml">The files xml node</param>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackagesRepository.GetStylesheetXml(System.String,System.Boolean)">
            <summary>
            Converts a umbraco stylesheet to a package xml node
            </summary>
            <param name="name">The name of the stylesheet.</param>
            <param name="includeProperties">if set to <c>true</c> [include properties].</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageInstallation.#ctor(Umbraco.Core.Packaging.PackageDataInstallation,Umbraco.Core.Packaging.PackageFileInstallation,Umbraco.Core.Packaging.CompiledPackageXmlParser,Umbraco.Core.Packaging.IPackageActionRunner,System.IO.DirectoryInfo)">
            <summary>
            Constructor
            </summary>
            <param name="packageDataInstallation"></param>
            <param name="packageFileInstallation"></param>
            <param name="parser"></param>
            <param name="packageActionRunner"></param>
            <param name="applicationRootFolder">
            The root folder of the application
            </param>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageInstallation.UninstallPackage(Umbraco.Core.Models.Packaging.PackageDefinition,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.ReadLock">
            <summary>
            Provides a convenience methodology for implementing locked access to resources.
            </summary>
            <remarks>
            <para>Intended as an infrastructure class.</para>
            <para>This is a very inefficient way to lock as it allocates one object each time we lock,
            so it's OK to use this class for things that happen once, where it is convenient, but not
            for performance-critical code!</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ReadLock"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Core.ReflectionUtilities">
            <summary>
            Provides utilities to simplify reflection.
            </summary>
            <summary>
            Provides utilities to simplify reflection.
            </summary>
            <remarks>
            <para>Readings:
            * CIL instructions: https://en.wikipedia.org/wiki/List_of_CIL_instructions
            * ECMA 335: https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf
            * MSIL programming: http://www.blackbeltcoder.com/Articles/net/msil-programming-part-1
            </para>
            <para>Supports emitting constructors, instance and static methods, instance property getters and
            setters. Does not support static properties yet.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitFieldGetter``2(System.String)">
            <summary>
            Emits a field getter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <returns>
            A field getter function.
            </returns>
            <exception cref="T:System.ArgumentNullException">fieldName</exception>
            <exception cref="T:System.ArgumentException">Value can't be empty or consist only of white-space characters. - <paramref name="fieldName" />
            or
            Value type <typeparamref name="TValue" /> does not match field <typeparamref name="TDeclaring" />.<paramref name="fieldName" /> type.</exception>
            <exception cref="T:System.InvalidOperationException">Could not find field <typeparamref name="TDeclaring" />.<paramref name="fieldName" />.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitFieldSetter``2(System.String)">
            <summary>
            Emits a field setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <returns>
            A field setter action.
            </returns>
            <exception cref="T:System.ArgumentNullException">fieldName</exception>
            <exception cref="T:System.ArgumentException">Value can't be empty or consist only of white-space characters. - <paramref name="fieldName" />
            or
            Value type <typeparamref name="TValue" /> does not match field <typeparamref name="TDeclaring" />.<paramref name="fieldName" /> type.</exception>
            <exception cref="T:System.InvalidOperationException">Could not find field <typeparamref name="TDeclaring" />.<paramref name="fieldName" />.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitFieldGetterAndSetter``2(System.String)">
            <summary>
            Emits a field getter and setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <returns>
            A field getter and setter functions.
            </returns>
            <exception cref="T:System.ArgumentNullException">fieldName</exception>
            <exception cref="T:System.ArgumentException">Value can't be empty or consist only of white-space characters. - <paramref name="fieldName" />
            or
            Value type <typeparamref name="TValue" /> does not match field <typeparamref name="TDeclaring" />.<paramref name="fieldName" /> type.</exception>
            <exception cref="T:System.InvalidOperationException">Could not find field <typeparamref name="TDeclaring" />.<paramref name="fieldName" />.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.GetField``2(System.String)">
            <summary>
            Gets the field.
            </summary>
            <typeparam name="TDeclaring">The type of the declaring.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">fieldName</exception>
            <exception cref="T:System.ArgumentException">Value can't be empty or consist only of white-space characters. - <paramref name="fieldName" />
            or
            Value type <typeparamref name="TValue" /> does not match field <typeparamref name="TDeclaring" />.<paramref name="fieldName" /> type.</exception>
            <exception cref="T:System.InvalidOperationException">Could not find field <typeparamref name="TDeclaring" />.<paramref name="fieldName" />.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitPropertyGetter``2(System.String,System.Boolean)">
            <summary>
            Emits a property getter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="mustExist">A value indicating whether the property and its getter must exist.</param>
            <returns>
            A property getter function. If <paramref name="mustExist" /> is <c>false</c>, returns null when the property or its getter does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">propertyName</exception>
            <exception cref="T:System.ArgumentException">Value can't be empty or consist only of white-space characters. - <paramref name="propertyName" />
            or
            Value type <typeparamref name="TValue" /> does not match property <typeparamref name="TDeclaring" />.<paramref name="propertyName" /> type.</exception>
            <exception cref="T:System.InvalidOperationException">Could not find property getter for <typeparamref name="TDeclaring" />.<paramref name="propertyName" />.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitPropertySetter``2(System.String,System.Boolean)">
            <summary>
            Emits a property setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="mustExist">A value indicating whether the property and its setter must exist.</param>
            <returns>
            A property setter function. If <paramref name="mustExist" /> is <c>false</c>, returns null when the property or its setter does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">propertyName</exception>
            <exception cref="T:System.ArgumentException">Value can't be empty or consist only of white-space characters. - <paramref name="propertyName" />
            or
            Value type <typeparamref name="TValue" /> does not match property <typeparamref name="TDeclaring" />.<paramref name="propertyName" /> type.</exception>
            <exception cref="T:System.InvalidOperationException">Could not find property setter for <typeparamref name="TDeclaring" />.<paramref name="propertyName" />.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitPropertyGetterAndSetter``2(System.String,System.Boolean)">
            <summary>
            Emits a property getter and setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="mustExist">A value indicating whether the property and its getter and setter must exist.</param>
            <returns>
            A property getter and setter functions. If <paramref name="mustExist" /> is <c>false</c>, returns null when the property or its getter or setter does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">propertyName</exception>
            <exception cref="T:System.ArgumentException">Value can't be empty or consist only of white-space characters. - <paramref name="propertyName" />
            or
            Value type <typeparamref name="TValue" /> does not match property <typeparamref name="TDeclaring" />.<paramref name="propertyName" /> type.</exception>
            <exception cref="T:System.InvalidOperationException">Could not find property getter and setter for <typeparamref name="TDeclaring" />.<paramref name="propertyName" />.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitPropertyGetter``2(System.Reflection.PropertyInfo)">
            <summary>
            Emits a property getter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyInfo">The property info.</param>
            <returns>A property getter function.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Occurs when the property has no getter.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <typeparamref name="TValue"/> does not match the type of the property.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitPropertySetter``2(System.Reflection.PropertyInfo)">
            <summary>
            Emits a property setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyInfo">The property info.</param>
            <returns>A property setter function.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Occurs when the property has no setter.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <typeparamref name="TValue"/> does not match the type of the property.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitPropertyGetterAndSetter``2(System.Reflection.PropertyInfo)">
            <summary>
            Emits a property getter and setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyInfo">The property info.</param>
            <returns>A property getter and setter functions.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Occurs when the property has no getter or no setter.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <typeparamref name="TValue"/> does not match the type of the property.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitPropertySetterUnsafe``2(System.Reflection.PropertyInfo)">
            <summary>
            Emits a property setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyInfo">The property info.</param>
            <returns>A property setter function.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Occurs when the property has no setter.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <typeparamref name="TValue"/> does not match the type of the property.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitConstructor``1(System.Boolean,System.Type)">
            <summary>
            Emits a constructor.
            </summary>
            <typeparam name="TLambda">A lambda representing the constructor.</typeparam>
            <param name="mustExist">A value indicating whether the constructor must exist.</param>
            <param name="declaring">The optional type of the class to construct.</param>
            <returns>A constructor function. If <paramref name="mustExist"/> is <c>false</c>, returns null when the constructor does not exist.</returns>
            <remarks>
            <para>When <paramref name="declaring"/> is not specified, it is the type returned by <typeparamref name="TLambda"/>.</para>
            <para>The constructor arguments are determined by <typeparamref name="TLambda"/> generic arguments.</para>
            <para>The type returned by <typeparamref name="TLambda"/> does not need to be exactly <paramref name="declaring"/>,
            when e.g. that type is not known at compile time, but it has to be a parent type (eg an interface, or <c>object</c>).</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Occurs when the constructor does not exist and <paramref name="mustExist"/> is <c>true</c>.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <typeparamref name="TLambda"/> is not a Func or when <paramref name="declaring"/>
            is specified and does not match the function's returned type.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitConstructor``1(System.Reflection.ConstructorInfo)">
            <summary>
            Emits a constructor.
            </summary>
            <typeparam name="TLambda">A lambda representing the constructor.</typeparam>
            <param name="ctor">The constructor info.</param>
            <returns>A constructor function.</returns>
            <exception cref="T:System.ArgumentException">Occurs when <typeparamref name="TLambda"/> is not a Func or when its generic
            arguments do not match those of <paramref name="ctor"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="ctor"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitConstructorUnsafe``1(System.Reflection.ConstructorInfo)">
            <summary>
            Emits a constructor.
            </summary>
            <typeparam name="TLambda">A lambda representing the constructor.</typeparam>
            <param name="ctor">The constructor info.</param>
            <returns>A constructor function.</returns>
            <remarks>
            <para>The constructor is emitted in an unsafe way, using the lambda arguments without verifying
            them at all. This assumes that the calling code is taking care of all verifications, in order
            to avoid cast errors.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">Occurs when <typeparamref name="TLambda"/> is not a Func or when its generic
            arguments do not match those of <paramref name="ctor"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="ctor"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitMethod``2(System.String,System.Boolean)">
            <summary>
            Emits a static method.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TLambda">A lambda representing the method.</typeparam>
            <param name="methodName">The name of the method.</param>
            <param name="mustExist">A value indicating whether the constructor must exist.</param>
            <returns>
            The method. If <paramref name="mustExist" /> is <c>false</c>, returns null when the method does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">methodName</exception>
            <exception cref="T:System.ArgumentException">Value can't be empty or consist only of white-space characters. - <paramref name="methodName" />
            or
            Occurs when <typeparamref name="TLambda" /> does not match the method signature..</exception>
            <exception cref="T:System.InvalidOperationException">Occurs when no proper method with name <paramref name="methodName" /> could be found.</exception>
            <remarks>
            The method arguments are determined by <typeparamref name="TLambda" /> generic arguments.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitMethod``1(System.Type,System.String,System.Boolean)">
            <summary>
            Emits a static method.
            </summary>
            <typeparam name="TLambda">A lambda representing the method.</typeparam>
            <param name="declaring">The declaring type.</param>
            <param name="methodName">The name of the method.</param>
            <param name="mustExist">A value indicating whether the constructor must exist.</param>
            <returns>
            The method. If <paramref name="mustExist" /> is <c>false</c>, returns null when the method does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">methodName</exception>
            <exception cref="T:System.ArgumentException">Value can't be empty or consist only of white-space characters. - <paramref name="methodName" />
            or
            Occurs when <typeparamref name="TLambda" /> does not match the method signature..</exception>
            <exception cref="T:System.InvalidOperationException">Occurs when no proper method with name <paramref name="methodName" /> could be found.</exception>
            <remarks>
            The method arguments are determined by <typeparamref name="TLambda" /> generic arguments.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitMethod``1(System.Reflection.MethodInfo)">
            <summary>
            Emits a method.
            </summary>
            <typeparam name="TLambda">A lambda representing the method.</typeparam>
            <param name="method">The method info.</param>
            <returns>The method.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Occurs when Occurs when <typeparamref name="TLambda"/> does not match the method signature.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitMethodUnsafe``1(System.Reflection.MethodInfo)">
            <summary>
            Emits a method.
            </summary>
            <typeparam name="TLambda">A lambda representing the method.</typeparam>
            <param name="method">The method info.</param>
            <returns>The method.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Occurs when Occurs when <typeparamref name="TLambda"/> does not match the method signature.</exception>
        </member>
        <member name="M:Umbraco.Core.ReflectionUtilities.EmitMethod``1(System.String,System.Boolean)">
            <summary>
            Emits an instance method.
            </summary>
            <typeparam name="TLambda">A lambda representing the method.</typeparam>
            <param name="methodName">The name of the method.</param>
            <param name="mustExist">A value indicating whether the constructor must exist.</param>
            <returns>
            The method. If <paramref name="mustExist" /> is <c>false</c>, returns null when the method does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">methodName</exception>
            <exception cref="T:System.ArgumentException">Value can't be empty or consist only of white-space characters. - <paramref name="methodName" />
            or
            Occurs when <typeparamref name="TLambda" /> does not match the method signature..</exception>
            <exception cref="T:System.InvalidOperationException">Occurs when no proper method with name <paramref name="methodName" /> could be found.</exception>
            <remarks>
            The method arguments are determined by <typeparamref name="TLambda" /> generic arguments.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.RuntimeLevelReason">
            <summary>
            Describes the reason for the runtime level.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevelReason.Unknown">
            <summary>
            The reason is unknown.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevelReason.BootFailedCannotDowngrade">
            <summary>
            The code version is lower than the version indicated in web.config, and
            downgrading Umbraco is not supported.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevelReason.BootFailedCannotConnectToDatabase">
            <summary>
            The runtime cannot connect to the configured database.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevelReason.BootFailedCannotCheckUpgradeState">
            <summary>
            The runtime can connect to the configured database, but it cannot
            retrieve the migrations status.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevelReason.BootFailedOnException">
            <summary>
            An exception was thrown during boot.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevelReason.InstallNoVersion">
            <summary>
            Umbraco is not installed at all.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevelReason.InstallNoDatabase">
            <summary>
            A version is specified in web.config but the database is not configured.
            </summary>
            <remarks>This is a weird state.</remarks>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevelReason.InstallMissingDatabase">
            <summary>
            A version is specified in web.config and a database is configured, but the
            database is missing, and installing over a missing database has been enabled.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevelReason.InstallEmptyDatabase">
            <summary>
            A version is specified in web.config and a database is configured, but the
            database is empty, and installing over an empty database has been enabled.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevelReason.UpgradeOldVersion">
            <summary>
            Umbraco runs an old version.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevelReason.UpgradeMigrations">
            <summary>
            Umbraco runs the current version but some migrations have not run.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevelReason.Run">
            <summary>
            Umbraco is running.
            </summary>
        </member>
        <member name="T:Umbraco.Core.RuntimeOptions">
            <summary>
            Provides static options for the runtime.
            </summary>
            <remarks>
            These options can be configured in PreApplicationStart or via appSettings.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.RuntimeOptions.InstallMissingDatabase">
            <summary>
            Gets a value indicating whether the runtime should enter Install level when the database is missing.
            </summary>
            <remarks>
            <para>By default, when a database connection string is configured but it is not possible to
            connect to the database, the runtime enters the BootFailed level. If this options is set to true,
            it enters the Install level instead.</para>
            <para>It is then up to the implementor, that is setting this value, to take over the installation
            sequence.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.RuntimeOptions.InstallEmptyDatabase">
            <summary>
            Gets a value indicating whether the runtime should enter Install level when the database is empty.
            </summary>
            <remarks>
            <para>By default, when a database connection string is configured and it is possible to connect to
            the database, but the database is empty, the runtime enters the BootFailed level. If this options
            is set to true, it enters the Install level instead.</para>
            <para>It is then up to the implementor, that is setting this value, to take over the installation
            sequence.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.RuntimeOptions.DoRuntimeBoot(Umbraco.Core.Logging.IProfilingLogger)">
            <summary>
            Executes the RuntimeBoot handlers.
            </summary>
        </member>
        <member name="M:Umbraco.Core.RuntimeOptions.DoRuntimeEssentials(Umbraco.Core.Composing.Composition,Umbraco.Core.Cache.AppCaches,Umbraco.Core.Composing.TypeLoader,Umbraco.Core.Persistence.IUmbracoDatabaseFactory)">
            <summary>
            Executes the RuntimeEssentials handlers.
            </summary>
        </member>
        <member name="M:Umbraco.Core.RuntimeOptions.OnRuntimeBoot(System.Action{Umbraco.Core.Logging.IProfilingLogger})">
            <summary>
            Registers a RuntimeBoot handler.
            </summary>
            <remarks>
            <para>A RuntimeBoot handler runs when the runtime boots, right after the
            loggers have been created, but before anything else.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.RuntimeOptions.OnRuntimeEssentials(System.Action{Umbraco.Core.Composing.Composition,Umbraco.Core.Cache.AppCaches,Umbraco.Core.Composing.TypeLoader,Umbraco.Core.Persistence.IUmbracoDatabaseFactory})">
            <summary>
            Registers a RuntimeEssentials handler.
            </summary>
            <remarks>
            <para>A RuntimeEssentials handler runs after the runtime has created a few
            essential things (AppCaches, a TypeLoader, and a database factory) but
            before anything else.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.CustomBooleanTypeConverter">
            <summary>
            Allows for converting string representations of 0 and 1 to boolean
            </summary>
        </member>
        <member name="T:Umbraco.Core.DataTableExtensions">
            <summary>
            Static and extension methods for the DataTable object
            </summary>
        </member>
        <member name="M:Umbraco.Core.DataTableExtensions.GenerateDataTable(System.String,System.Func{System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Func{System.Collections.Generic.IEnumerable{System.Tuple{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}}}})">
            <summary>
            Creates a DataTable with the specified alias and columns and uses a callback to populate the headers.
            </summary>
            <param name="tableAlias"></param>
            <param name="getHeaders"></param>
            <param name="rowData"> </param>
            <returns></returns>
            <remarks>
            This has been migrated from the Node class and uses proper locking now. It is now used by the Node class and the
            DynamicPublishedContent extensions for legacy reasons.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DataTableExtensions.CreateTableData">
            <summary>
            Helper method to return this ugly object
            </summary>
            <returns></returns>
            <remarks>
            This is for legacy code, I didn't want to go creating custom classes for these
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DataTableExtensions.AddRowData(System.Collections.Generic.List{System.Tuple{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Helper method to deal with these ugly objects
            </summary>
            <param name="rowData"></param>
            <param name="standardVals"></param>
            <param name="userVals"></param>
            <remarks>
            This is for legacy code, I didn't want to go creating custom classes for these
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DateTimeExtensions.ToIsoString(System.DateTime)">
            <summary>
            Returns the DateTime as an ISO formatted string that is globally expectable
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DateTimeExtensions.PeriodicMinutesFrom(System.DateTime,System.String)">
            <summary>
            Calculates the number of minutes from a date time, on a rolling daily basis (so if
            date time is before the time, calculate onto next day)
            </summary>
            <param name="fromDateTime">Date to start from</param>
            <param name="scheduledTime">Time to compare against (in Hmm form, e.g. 330, 2200)</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.DecimalExtensions">
            <summary>
            Provides extension methods for System.Decimal.
            </summary>
            <remarks>See System.Decimal on MSDN and also
            http://stackoverflow.com/questions/4298719/parse-decimal-and-filter-extra-0-on-the-right/4298787#4298787.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DecimalExtensions.Normalize(System.Decimal)">
            <summary>
            Gets the normalized value.
            </summary>
            <param name="value">The value to normalize.</param>
            <returns>The normalized value.</returns>
            <remarks>Normalizing changes the scaling factor and removes trailing zeros,
            so 1.2500m comes out as 1.25m.</remarks>
        </member>
        <member name="T:Umbraco.Core.DelegateEqualityComparer`1">
            <summary>
            A custom equality comparer that excepts a delegate to do the comparison operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.DelegateEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type <paramref name="T"/> to compare.</param><param name="y">The second object of type <paramref name="T"/> to compare.</param>
        </member>
        <member name="M:Umbraco.Core.DelegateEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.DictionaryExtensions" -->
        <member name="M:Umbraco.Core.DictionaryExtensions.GetOrCreate``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Method to Get a value by the key. If the key doesn't exist it will create a new TVal object for the key and return it.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVal"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.TryUpdate``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``1,``1})">
             <summary>
             Updates an item with the specified key with the specified value
             </summary>
             <typeparam name="TKey"></typeparam>
             <typeparam name="TValue"></typeparam>
             <param name="dict"></param>
             <param name="key"></param>
             <param name="updateFactory"></param>
             <returns></returns>
             <remarks>
             Taken from: http://stackoverflow.com/questions/12240219/is-there-a-way-to-use-concurrentdictionary-tryupdate-with-a-lambda-expression
            
             If there is an item in the dictionary with the key, it will keep trying to update it until it can
             </remarks>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.TryUpdateOptimisitic``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``1,``1})">
             <summary>
             Updates an item with the specified key with the specified value
             </summary>
             <typeparam name="TKey"></typeparam>
             <typeparam name="TValue"></typeparam>
             <param name="dict"></param>
             <param name="key"></param>
             <param name="updateFactory"></param>
             <returns></returns>
             <remarks>
             Taken from: http://stackoverflow.com/questions/12240219/is-there-a-way-to-use-concurrentdictionary-tryupdate-with-a-lambda-expression
            
             WARNING: If the value changes after we've retrieved it, then the item will not be updated
             </remarks>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ConvertTo``2(System.Collections.IDictionary)">
            <summary>
            Converts a dictionary to another type by only using direct casting
            </summary>
            <typeparam name="TKeyOut"></typeparam>
            <typeparam name="TValOut"></typeparam>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ConvertTo``2(System.Collections.IDictionary,System.Func{System.Object,``0},System.Func{System.Object,``1})">
            <summary>
            Converts a dictionary to another type using the specified converters
            </summary>
            <typeparam name="TKeyOut"></typeparam>
            <typeparam name="TValOut"></typeparam>
            <param name="d"></param>
            <param name="keyConverter"></param>
            <param name="valConverter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts a dictionary to a NameValueCollection
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.MergeLeft``3(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``1,``2}},System.Boolean)">
            <summary>
            Merges all key/values from the sources dictionaries into the destination dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="destination">The source dictionary to merge other dictionaries into</param>
            <param name="overwrite">
            By default all values will be retained in the destination if the same keys exist in the sources but
            this can changed if overwrite = true, then any key/value found in any of the sources will overwritten in the destination. Note that
            it will just use the last found key/value if this is true.
            </param>
            <param name="sources">The other dictionaries to merge values from</param>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.MergeLeft``3(``0,System.Collections.Generic.IDictionary{``1,``2},System.Boolean)">
            <summary>
            Merges all key/values from the sources dictionaries into the destination dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="destination">The source dictionary to merge other dictionaries into</param>
            <param name="overwrite">
            By default all values will be retained in the destination if the same keys exist in the sources but
            this can changed if overwrite = true, then any key/value found in any of the sources will overwritten in the destination. Note that
            it will just use the last found key/value if this is true.
            </param>
            <param name="source">The other dictionary to merge values from</param>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value of the key value based on the key, if the key is not found, a null value is returned
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TVal">The type of the val.</typeparam>
            <param name="d">The d.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.GetValueAsString``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the value of the key value based on the key as it's string value, if the key is not found, then an empty string is returned
            </summary>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.GetValueAsString``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String)">
            <summary>
            Returns the value of the key value based on the key as it's string value, if the key is not found or is an empty string, then the provided default value is returned
            </summary>
            <param name="d"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ContainsKeyIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>contains key ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <typeparam name="TValue">Value Type</typeparam>
            <returns>The contains key ignore case.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.DictionaryExtensions.ToQueryString(System.Collections.Generic.IDictionary{System.String,System.Object})" -->
        <member name="M:Umbraco.Core.DictionaryExtensions.GetValueIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>The get entry ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <typeparam name="TValue">The type</typeparam>
            <returns>The entry</returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.GetValueIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>The get entry ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <typeparam name="TValue">The type</typeparam>
            <returns>The entry</returns>
        </member>
        <member name="T:Umbraco.Core.Dictionary.ICultureDictionary">
            <summary>
            Represents a dictionary based on a specific culture
            </summary>
        </member>
        <member name="P:Umbraco.Core.Dictionary.ICultureDictionary.Item(System.String)">
            <summary>
            Returns the dictionary value based on the key supplied
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Dictionary.ICultureDictionary.Culture">
            <summary>
            Returns the current culture
            </summary>
        </member>
        <member name="M:Umbraco.Core.Dictionary.ICultureDictionary.GetChildren(System.String)">
            <summary>
            Returns the child dictionary entries for a given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.EmailSender">
            <summary>
            A utility class for sending emails
            </summary>
        </member>
        <member name="M:Umbraco.Core.EmailSender.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Umbraco.Core.EmailSender.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends the message non-async
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Umbraco.Core.EmailSender.SendAsync(System.Net.Mail.MailMessage)">
            <summary>
            Sends the message async
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.EmailSender.CanSendRequiredEmail">
            <summary>
            Returns true if the application should be able to send a required application email
            </summary>
            <remarks>
            We assume this is possible if either an event handler is registered or an smtp server is configured
            </remarks>
        </member>
        <member name="P:Umbraco.Core.EmailSender.EventHandlerRegistered">
            <summary>
            returns true if an event handler has been registered
            </summary>
        </member>
        <member name="E:Umbraco.Core.EmailSender.SendEmail">
            <summary>
            An event that is raised when no smtp server is configured if events are enabled
            </summary>
        </member>
        <member name="T:Umbraco.Core.Enum`1">
            <summary>
            Provides utility methods for handling enumerations.
            </summary>
            <remarks>
            Taken from http://damieng.com/blog/2010/10/17/enums-better-syntax-improved-performance-and-tryparse-in-net-3-5
            </remarks>
        </member>
        <member name="T:Umbraco.Core.EnumerableExtensions">
            <summary>
             Extensions for enumerable sources
            </summary>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.Yield``1(``0)">
            <summary>
            Wraps this object instance into an IEnumerable{T} consisting of a single item.
            </summary>
            <typeparam name="T"> Type of the object. </typeparam>
            <param name="item"> The instance that will be wrapped. </param>
            <returns> An IEnumerable{T} consisting of a single item. </returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>The distinct by.</summary>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TKey">Key type</typeparam>
            <returns>the unique list</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.Range``1(System.Func{System.Int32,``0},System.Int32)">
            <summary>
            Returns a sequence of length <paramref name="count"/> whose elements are the result of invoking <paramref name="factory"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.IfNotNull``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>The if not null.</summary>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">The type</typeparam>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if all items in the other collection exist in this collection
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if the source contains any of the items in the other list
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all matching items from an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all matching items from an <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters a sequence of values to ignore those which are null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coll">The coll.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the index of the first item matching an expression in an enumerable.
            </summary>
            <typeparam name="T">The type of the enumerated objects.</typeparam>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1.</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Finds the index of the first item matching an expression in an enumerable.
            </summary>
            <typeparam name="T">The type of the enumerated objects.</typeparam>
            <param name="items">The enumerable to search.</param>
            <param name="startIndex">The index to start at.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1.</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the first occurrence of an item in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the first matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.UnsortedSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Determines if 2 lists have equal elements within them regardless of how they are sorted
             </summary>
             <typeparam name="T"></typeparam>
             <param name="source"></param>
             <param name="other"></param>
             <returns></returns>
             <remarks>
             The logic for this is taken from:
             http://stackoverflow.com/questions/4576723/test-whether-two-ienumerablet-have-the-same-values-with-the-same-frequencies
            
             There's a few answers, this one seems the best for it's simplicity and based on the comment of Eamon
             </remarks>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.Transform``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Transforms an enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.EmptyNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a null IEnumerable as an empty IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.ExpressionHelper">
            <summary>
            A set of helper methods for dealing with expressions
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetPropertyInfo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> object from an expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="source">The source.</param>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> object from an expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from an <see cref="!:Expression&lt;Action&lt;T&gt;&gt;"/> provided it refers to a method call.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fromExpression">From expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> or null if <paramref name="fromExpression"/> is null or cannot be converted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the method info.
            </summary>
            <typeparam name="TReturn">The return type of the method.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the method info.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMethod(System.Linq.Expressions.Expression)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from an <see cref="T:System.Linq.Expressions.Expression"/> provided it refers to a method call.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> or null if <paramref name="expression"/> cannot be converted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberInfo"/> from an <see cref="!:Expression&lt;Func&lt;T, TReturn&gt;&gt;"/> provided it refers to member access.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/> or null if <paramref name="fromExpression"/> cannot be converted to <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.IsMethodSignatureEqualTo(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Determines whether the MethodInfo is the same based on signature, not based on the equality operator or HashCode.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
              <c>true</c> if [is method signature equal to] [the specified left]; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This is useful for comparing Expression methods that may contain different generic types
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberInfo"/> from an <see cref="T:System.Linq.Expressions.Expression"/> provided it refers to member access.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetStaticMethodInfo(System.Delegate)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from a <see cref="T:System.Delegate"/>
            </summary>
            <param name="fromMethodGroup">From method group.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.IsMethod(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a method.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is method; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.IsMember(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a member.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is member; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.IsConstant(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a constant.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is constant; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetFirstValueFromArguments(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Gets the first value from the supplied arguments of an expression, for those arguments that can be cast to <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Core.FileResources.Files">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Umbraco.Core.FileResources.Files.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.FileResources.Files.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.FileResources.Files.BlockingWebConfig">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            
            &lt;!-- Blocks public downloading of anything in this folder and sub folders --&gt;
            
            &lt;configuration&gt;
              &lt;system.web&gt;
                &lt;httpHandlers&gt;
                  &lt;add path=&quot;*&quot; verb=&quot;*&quot; type=&quot;System.Web.HttpNotFoundHandler&quot;/&gt;
                &lt;/httpHandlers&gt;
              &lt;/system.web&gt;
              &lt;system.webServer&gt;
                &lt;validation validateIntegratedModeConfiguration=&quot;false&quot; /&gt;
                &lt;handlers&gt;
                  &lt;remove name=&quot;BlockViewHandler&quot;/&gt;
                  &lt;add name=&quot;BlockViewHandler&quot; path=&quot;*&quot; verb=&quot;*&quot; preCondition=&quot;integratedMode&quot; type=&quot;System.Web.H [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Umbraco.Core.GuidUdi">
            <summary>
            Represents a guid-based entity identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Core.GuidUdi.Guid">
            <summary>
            The guid part of the identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Core.GuidUdi.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the GuidUdi class with an entity type and a guid.
            </summary>
            <param name="entityType">The entity type part of the udi.</param>
            <param name="guid">The guid part of the udi.</param>
        </member>
        <member name="M:Umbraco.Core.GuidUdi.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the GuidUdi class with an uri value.
            </summary>
            <param name="uriValue">The uri value of the udi.</param>
        </member>
        <member name="M:Umbraco.Core.GuidUdi.Parse(System.String)">
            <summary>
            Converts the string representation of an entity identifier into the equivalent GuidUdi instance.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>A GuidUdi instance that contains the value that was parsed.</returns>
        </member>
        <member name="P:Umbraco.Core.GuidUdi.IsRoot">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Core.HashCodeCombiner">
             <summary>
             Used to create a .NET HashCode from multiple objects.
             </summary>
             <remarks>
             .Net has a class the same as this: System.Web.Util.HashCodeCombiner and of course it works for all sorts of things
             which we've not included here as we just need a quick easy class for this in order to create a unique
             hash of directories/files to see if they have changed.
            
             NOTE: It's probably best to not relying on the hashing result across AppDomains! If you need a constant/reliable hash value
             between AppDomains use SHA1. This is perfect for hashing things in a very fast way for a single AppDomain.
             </remarks>
        </member>
        <member name="M:Umbraco.Core.HashCodeCombiner.GetCombinedHashCode">
            <summary>
            Returns the hex code of the combined hash code
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.HashCodeHelper">
            <summary>
            Borrowed from http://stackoverflow.com/a/2575444/694494
            </summary>
        </member>
        <member name="M:Umbraco.Core.HashCodeHelper.GetHashCodeForOrderNoMatterCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a hashcode for a collection for that the order of items
            does not matter.
            So {1, 2, 3} and {3, 2, 1} will get same hash code.
            </summary>
        </member>
        <member name="M:Umbraco.Core.HashCodeHelper.CombineHashCode``1(System.Int32,``0)">
            <summary>
            Alternative way to get a hashcode is to use a fluent
            interface like this:<br />
            return 0.CombineHashCode(field1).CombineHashCode(field2).
                CombineHashCode(field3);
            </summary>
        </member>
        <member name="T:Umbraco.Core.HashGenerator">
            <summary>
            Used to generate a string hash using crypto libraries over multiple objects
            </summary>
            <remarks>
            This should be used to generate a reliable hash that survives AppDomain restarts.
            This will use the crypto libs to generate the hash and will try to ensure that
            strings, etc... are not re-allocated so it's not consuming much memory.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.HashGenerator.GenerateHash">
            <summary>
            Returns the generated hash output of all added objects
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.IDisposeOnRequestEnd">
            <summary>
            Any class implementing this interface that is added to the httpcontext.items keys or values will be disposed of at the end of the request.
            </summary>
        </member>
        <member name="T:Umbraco.Core.IEmailSender">
            <summary>
            Simple abstraction to send an email message
            </summary>
        </member>
        <member name="T:Umbraco.Core.IfExtensions">
            <summary>
            Extension methods for 'If' checking like checking If something is null or not null
            </summary>
        </member>
        <member name="M:Umbraco.Core.IfExtensions.IfNotNull``1(``0,System.Action{``0})">
            <summary>The if not null.</summary>
            <param name="item">The item.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">The type</typeparam>
        </member>
        <member name="M:Umbraco.Core.IfExtensions.IfTrue(System.Boolean,System.Action)">
            <summary>The if true.</summary>
            <param name="predicate">The predicate.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Umbraco.Core.IfExtensions.IfNotNull``2(``1,System.Func{``1,``0},``0)">
            <summary>
            Checks if the item is not null, and if so returns an action on that item, or a default value
            </summary>
            <typeparam name="TResult">the result type</typeparam>
            <typeparam name="TItem">The type</typeparam>
            <param name="item">The item.</param>
            <param name="action">The action.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IfExtensions.IfNull``1(``0,System.Func{``0,``0})">
            <summary>
            Checks if the value is null, if it is it returns the value specified, otherwise returns the non-null value
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="item"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IntExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Does something 'x' amount of times
            </summary>
            <param name="n"></param>
            <param name="action"></param>
        </member>
        <member name="M:Umbraco.Core.IntExtensions.ToGuid(System.Int32)">
            <summary>
            Creates a Guid based on an integer value
            </summary>
            <param name="value"><see cref="T:System.Int32"/> value to convert</param>
            <returns><see cref="T:System.Guid"/></returns>
        </member>
        <member name="T:Umbraco.Core.IRuntime">
            <summary>
            Defines the Umbraco runtime.
            </summary>
        </member>
        <member name="M:Umbraco.Core.IRuntime.Boot(Umbraco.Core.Composing.IRegister)">
            <summary>
            Boots the runtime.
            </summary>
            <param name="register">The application register.</param>
            <returns>The application factory.</returns>
        </member>
        <member name="P:Umbraco.Core.IRuntime.State">
            <summary>
            Gets the runtime state.
            </summary>
        </member>
        <member name="M:Umbraco.Core.IRuntime.Terminate">
            <summary>
            Terminates the runtime.
            </summary>
        </member>
        <member name="T:Umbraco.Core.IRuntimeState">
            <summary>
            Represents the state of the Umbraco runtime.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.Version">
            <summary>
            Gets the version of the executing code.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.VersionComment">
            <summary>
            Gets the version comment of the executing code.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.SemanticVersion">
            <summary>
            Gets the semantic version of the executing code.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.Debug">
            <summary>
            Gets a value indicating whether the application is running in debug mode.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.IsMainDom">
            <summary>
            Gets a value indicating whether the runtime is the current main domain.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.ServerRole">
            <summary>
            Get the server's current role.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.ApplicationUrl">
            <summary>
            Gets the Umbraco application URL.
            </summary>
            <remarks>This is eg "http://www.example.com".</remarks>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.ApplicationVirtualPath">
            <summary>
            Gets the Umbraco application virtual path.
            </summary>
            <remarks>This is either "/" or eg "/virtual".</remarks>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.Level">
            <summary>
            Gets the runtime level of execution.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.Reason">
            <summary>
            Gets the reason for the runtime level of execution.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.CurrentMigrationState">
            <summary>
            Gets the current migration state.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.FinalMigrationState">
            <summary>
            Gets the final migration state.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IRuntimeState.BootFailedException">
            <summary>
            Gets the exception that caused the boot to fail.
            </summary>
        </member>
        <member name="T:Umbraco.Core.LambdaExpressionCacheKey">
            <summary>
            Represents a simple <see cref="T:System.Linq.Expressions.LambdaExpression"/> in a form which is suitable for using as a dictionary key
            by exposing the return type, argument types and expression string form in a single concatenated string.
            </summary>
        </member>
        <member name="F:Umbraco.Core.LambdaExpressionCacheKey.ArgTypes">
            <summary>
            The argument type names of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="F:Umbraco.Core.LambdaExpressionCacheKey.ReturnType">
            <summary>
            The return type of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="F:Umbraco.Core.LambdaExpressionCacheKey.ExpressionAsString">
            <summary>
            The original string representation of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.LambdaExpressionCacheKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Umbraco.Core.LambdaExpressionCacheKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.LambdaExpressionCacheKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Umbraco.Core.ListExtensions">
            <summary>
            Provides extensions to the List type.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Macros.MacroErrorBehaviour.Inline">
            <summary>
            Default umbraco behavior - show an inline error within the
            macro but allow the page to continue rendering.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Macros.MacroErrorBehaviour.Silent">
            <summary>
            Silently eat the error and do not display the offending macro.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Macros.MacroErrorBehaviour.Throw">
            <summary>
            Throw an exception which can be caught by the global error handler
            defined in Application_OnError. If no such error handler is defined
            then you'll see the Yellow Screen Of Death (YSOD) error page.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Macros.MacroErrorBehaviour.Content">
            <summary>
            Silently eat the error and display the custom content reported in
            the error event args
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.IEmbedProvider.ApiEndpoint">
            <summary>
            The OEmbed API Endpoint
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.IEmbedProvider.UrlSchemeRegex">
            <summary>
            A string array of Regex patterns to match against the pasted OEmbed URL
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Umbraco.Core.Media.IEmbedProvider.RequestParams" -->
        <member name="M:Umbraco.Core.ContentExtensions.GetStatus(Umbraco.Core.Models.IContent,System.String)">
            <summary>
            Gets the current status of the Content
            </summary>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.SanitizeEntityPropertiesForXmlStorage(Umbraco.Core.Models.IContentBase)">
            <summary>
            Removes characters that are not valid XML characters from all entity properties
            of type string. See: http://stackoverflow.com/a/961504/5018
            </summary>
            <returns></returns>
            <remarks>
            If this is not done then the xml cache can get corrupt and it will throw YSODs upon reading it.
            </remarks>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.HasChildren(Umbraco.Core.Models.IContentBase,Umbraco.Core.Services.ServiceContext)">
            <summary>
            Checks if the IContentBase has children
            </summary>
            <param name="content"></param>
            <param name="services"></param>
            <returns></returns>
            <remarks>
            This is a bit of a hack because we need to type check!
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.GetPropertiesByEditor(Umbraco.Core.Models.IContentBase,System.String)">
            <summary>
            Returns all properties based on the editorAlias
            </summary>
            <param name="content"></param>
            <param name="editorAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.GetNonGroupedProperties(Umbraco.Core.Models.IContentBase)">
            <summary>
            Returns properties that do not belong to a group
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.GetPropertiesForGroup(Umbraco.Core.Models.IContentBase,Umbraco.Core.Models.PropertyGroup)">
            <summary>
            Returns the Property object for the given property group
            </summary>
            <param name="content"></param>
            <param name="propertyGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.SetValue(Umbraco.Core.Models.IContentBase,Umbraco.Core.Services.IContentTypeBaseServiceProvider,System.String,System.String,System.Web.HttpPostedFileBase,System.String,System.String)">
            <summary>
            Sets the posted file value of a property.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.SetValue(Umbraco.Core.Models.IContentBase,Umbraco.Core.Services.IContentTypeBaseServiceProvider,System.String,System.String,System.IO.Stream,System.String,System.String)">
            <summary>
            Sets the posted file value of a property.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.StoreFile(Umbraco.Core.Models.IContentBase,Umbraco.Core.Services.IContentTypeBaseServiceProvider,System.String,System.String,System.IO.Stream,System.String)">
            <summary>
            Stores a file.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContentBase"/>A content item.</param>
            <param name="propertyTypeAlias">The property alias.</param>
            <param name="filename">The name of the file.</param>
            <param name="filestream">A stream containing the file data.</param>
            <param name="filepath">The original file path, if any.</param>
            <returns>The path to the file, relative to the media filesystem.</returns>
            <remarks>
            <para>Does NOT set the property value, so one should probably store the file and then do
            something alike: property.Value = MediaHelper.FileSystem.GetUrl(filepath).</para>
            <para>The original file path is used, in the old media file path scheme, to try and reuse
            the "folder number" that was assigned to the previous file referenced by the property,
            if any.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.GetCreatorProfile(Umbraco.Core.Models.IMedia,Umbraco.Core.Services.IUserService)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the Creator of this media item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.GetCreatorProfile(Umbraco.Core.Models.IContentBase,Umbraco.Core.Services.IUserService)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the Creator of this content item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.GetWriterProfile(Umbraco.Core.Models.IContent,Umbraco.Core.Services.IUserService)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the Writer of this content.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.GetWriterProfile(Umbraco.Core.Models.IMedia,Umbraco.Core.Services.IUserService)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the Writer of this content.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.ToDeepXml(Umbraco.Core.Models.IContent,Umbraco.Core.Services.IEntityXmlSerializer)">
            <summary>
            Creates the full xml representation for the <see cref="T:Umbraco.Core.Models.IContent"/> object and all of it's descendants
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <param name="serializer"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.ToXml(Umbraco.Core.Models.IContent,Umbraco.Core.Services.IEntityXmlSerializer)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <param name="serializer"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.ToXml(Umbraco.Core.Models.IMedia,Umbraco.Core.Services.IEntityXmlSerializer)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <param name="serializer"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.ContentExtensions.ToXml(Umbraco.Core.Models.IMember,Umbraco.Core.Services.IEntityXmlSerializer)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IMember"/> object
            </summary>
            <param name="member"><see cref="T:Umbraco.Core.Models.IMember"/> to generate xml for</param>
            <param name="serializer"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="T:Umbraco.Core.MonitorLock">
            <summary>
            Provides an equivalent to the c# lock statement, to be used in a using block.
            </summary>
            <remarks>Ie replace <c>lock (o) {...}</c> by <c>using (new MonitorLock(o)) { ... }</c></remarks>
        </member>
        <member name="M:Umbraco.Core.MonitorLock.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.MonitorLock"/> class with an object to lock.
            </summary>
            <param name="locker">The object to lock.</param>
            <remarks>Should always be used within a using block.</remarks>
        </member>
        <member name="T:Umbraco.Core.NamedUdiRange">
            <summary>
            Represents a <see cref="T:Umbraco.Core.UdiRange"/> complemented with a name.
            </summary>
        </member>
        <member name="M:Umbraco.Core.NamedUdiRange.#ctor(Umbraco.Core.Udi,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.NamedUdiRange"/> class  with a <see cref="T:Umbraco.Core.Udi"/> and an optional selector.
            </summary>
            <param name="udi">A <see cref="T:Umbraco.Core.Udi"/>.</param>
            <param name="selector">An optional selector.</param>
        </member>
        <member name="M:Umbraco.Core.NamedUdiRange.#ctor(Umbraco.Core.Udi,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.NamedUdiRange"/> class  with a <see cref="T:Umbraco.Core.Udi"/>, a name, and an optional selector.
            </summary>
            <param name="udi">A <see cref="T:Umbraco.Core.Udi"/>.</param>
            <param name="name">A name.</param>
            <param name="selector">An optional selector.</param>
        </member>
        <member name="P:Umbraco.Core.NamedUdiRange.Name">
            <summary>
            Gets or sets the name of the range.
            </summary>
        </member>
        <member name="T:Umbraco.Core.NetworkHelper">
            <summary>
            Currently just used to get the machine name in med trust and to format a machine name for use with file names
            </summary>
        </member>
        <member name="P:Umbraco.Core.NetworkHelper.FileSafeMachineName">
            <summary>
            Returns the machine name that is safe to use in file paths.
            </summary>
        </member>
        <member name="P:Umbraco.Core.NetworkHelper.MachineName">
            <summary>
            Returns the current machine name
            </summary>
            <remarks>
            Tries to resolve the machine name, if it cannot it uses the config section.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.ObjectExtensions">
            <summary>
            Provides object extension methods.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.AsEnumerableOfOne``1(``0)">
             <summary>
            
             </summary>
             <param name="input"></param>
             <typeparam name="T"></typeparam>
             <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.DisposeIfDisposable(System.Object)">
             <summary>
            
             </summary>
             <param name="input"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.SafeCast``1(System.Object)">
            <summary>
            Provides a shortcut way of safely casting an input when you cannot guarantee the <typeparamref name="T"/> is
            an instance type (i.e., when the C# AS keyword is not applicable).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.TryConvertTo``1(System.Object)">
            <summary>
            Attempts to convert the input object to the output type.
            </summary>
            <remarks>This code is an optimized version of the original Umbraco method</remarks>
            <typeparam name="T">The type to convert to</typeparam>
            <param name="input">The input.</param>
            <returns>The <see cref="T:Umbraco.Core.Attempt`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.TryConvertTo(System.Object,System.Type)">
            <summary>
            Attempts to convert the input object to the output type.
            </summary>
            <remarks>This code is an optimized version of the original Umbraco method</remarks>
            <param name="input">The input.</param>
            <param name="target">The type to convert to</param>
            <returns>The <see cref="T:Umbraco.Core.Attempt`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.TryConvertToFromString(System.String,System.Type)">
            <summary>
            Attempts to convert the input string to the output type.
            </summary>
            <remarks>This code is an optimized version of the original Umbraco method</remarks>
            <param name="input">The input.</param>
            <param name="target">The type to convert to</param>
            <returns>The <see cref="T:System.Nullable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.ToDictionary``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Converts an object into a dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TVal"> </typeparam>
            <param name="o"></param>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.ToDictionary``1(System.Object,System.String[])">
            <summary>
            Turns object into dictionary
            </summary>
            <param name="o"></param>
            <param name="ignoreProperties">Properties to ignore</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.ToObjectDictionary``1(``0,System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
            Converts an object's properties into a dictionary.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="namer">A property namer function.</param>
            <returns>A dictionary containing each properties.</returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.TryConvertToXmlString(System.Object,System.Type)">
            <summary>
            Attempts to serialize the value to an XmlString using ToXmlString
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.ToXmlString(System.Object,System.Type)">
            <summary>
            Returns an XmlSerialized safe string representation for the value
            </summary>
            <param name="value"></param>
            <param name="type">The Type can only be a primitive type or Guid and byte[] otherwise an exception is thrown</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.ToXmlString``1(System.Object)">
            <summary>
            Returns an XmlSerialized safe string representation for the value and type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.RuntimeLevel">
            <summary>
            Describes the levels in which the runtime can run.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevel.BootFailed">
            <summary>
            The runtime has failed to boot and cannot run.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevel.Unknown">
            <summary>
            The level is unknown.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevel.Boot">
            <summary>
            The runtime is booting.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevel.Install">
            <summary>
            The runtime has detected that Umbraco is not installed at all, ie there is
            no database, and is currently installing Umbraco.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevel.Upgrade">
            <summary>
            The runtime has detected an Umbraco install which needed to be upgraded, and
            is currently upgrading Umbraco.
            </summary>
        </member>
        <member name="F:Umbraco.Core.RuntimeLevel.Run">
            <summary>
            The runtime has detected an up-to-date Umbraco install and is running.
            </summary>
        </member>
        <member name="T:Umbraco.Core.RuntimeState">
            <summary>
            Represents the state of the Umbraco runtime.
            </summary>
        </member>
        <member name="M:Umbraco.Core.RuntimeState.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection,Umbraco.Core.Configuration.IGlobalSettings,System.Lazy{Umbraco.Core.IMainDom},System.Lazy{Umbraco.Core.Sync.IServerRegistrar})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.RuntimeState"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.RuntimeState.ServerRegistrar">
            <summary>
            Gets the server registrar.
            </summary>
            <remarks>
            <para>This is NOT exposed in the interface.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.RuntimeState.MainDom">
            <summary>
            Gets the application MainDom.
            </summary>
            <remarks>
            <para>This is NOT exposed in the interface as MainDom is internal.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.RuntimeState.Version">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.RuntimeState.VersionComment">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.RuntimeState.SemanticVersion">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.RuntimeState.Debug">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.RuntimeState.IsMainDom">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.RuntimeState.ServerRole">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.RuntimeState.ApplicationUrl">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.RuntimeState.ApplicationVirtualPath">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.RuntimeState.CurrentMigrationState">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.RuntimeState.FinalMigrationState">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.RuntimeState.Level">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.RuntimeState.Reason">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.RuntimeState.EnsureApplicationUrl(System.Web.HttpRequestBase)">
            <summary>
            Ensures that the <see cref="P:Umbraco.Core.RuntimeState.ApplicationUrl"/> property has a value.
            </summary>
            <param name="request"></param>
        </member>
        <member name="P:Umbraco.Core.RuntimeState.BootFailedException">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.RuntimeState.DetermineRuntimeLevel(Umbraco.Core.Persistence.IUmbracoDatabaseFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Determines the runtime level.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Scoping.IInstanceIdentifiable">
            <summary>
            Exposes an instance unique identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Scoping.IInstanceIdentifiable.InstanceId">
            <summary>
            Gets the instance unique identifier.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Scoping.IScope">
            <summary>
            Represents a scope.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Scoping.IScope.Database">
            <summary>
            Gets the scope database.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Scoping.IScope.SqlContext">
            <summary>
            Gets the Sql context.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Scoping.IScope.Messages">
            <summary>
            Gets the scope event messages.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Scoping.IScope.Events">
            <summary>
            Gets the scope event dispatcher.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Scoping.IScope.RepositoryCacheMode">
            <summary>
            Gets the repositories cache mode.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Scoping.IScope.IsolatedCaches">
            <summary>
            Gets the scope isolated cache.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Scoping.IScope.Complete">
            <summary>
            Completes the scope.
            </summary>
            <returns>A value indicating whether the scope has been successfully completed.</returns>
            <remarks>Can return false if any child scope has not completed.</remarks>
        </member>
        <member name="M:Umbraco.Core.Scoping.IScope.ReadLock(System.Int32[])">
            <summary>
            Read-locks some lock objects.
            </summary>
            <param name="lockIds">The lock object identifiers.</param>
        </member>
        <member name="M:Umbraco.Core.Scoping.IScope.WriteLock(System.Int32[])">
            <summary>
            Write-locks some lock objects.
            </summary>
            <param name="lockIds">The lock object identifiers.</param>
        </member>
        <member name="T:Umbraco.Core.Scoping.IScopeAccessor">
            <summary>
            Provides access to the ambient scope.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Scoping.IScopeAccessor.AmbientScope">
            <summary>
            Gets the ambient scope.
            </summary>
            <remarks>Returns <c>null</c> if there is no ambient scope.</remarks>
        </member>
        <member name="T:Umbraco.Core.Scoping.IScopeContext">
            <summary>
            Represents a scope context.
            </summary>
            <remarks>A scope context can enlist objects that will be attached to the scope, and available
            for the duration of the scope. In addition, it can enlist actions, that will run when the
            scope is exiting, and after the database transaction has been committed.</remarks>
        </member>
        <member name="M:Umbraco.Core.Scoping.IScopeContext.Enlist(System.String,System.Action{System.Boolean},System.Int32)">
            <summary>
            Enlists an action.
            </summary>
            <param name="key">The action unique identifier.</param>
            <param name="action">The action.</param>
            <param name="priority">The optional action priority (default is 100, lower runs first).</param>
            <remarks>
            <para>It is ok to enlist multiple action with the same key but only the first one will run.</para>
            <para>The action boolean parameter indicates whether the scope completed or not.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Scoping.IScopeContext.Enlist``1(System.String,System.Func{``0},System.Action{System.Boolean,``0},System.Int32)">
            <summary>
            Enlists an object and action.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="key">The object unique identifier.</param>
            <param name="creator">A function providing the object.</param>
            <param name="action">The optional action.</param>
            <param name="priority">The optional action priority (default is 100, lower runs first).</param>
            <returns>The object.</returns>
            <remarks>
            <para>On the first time an object is enlisted with a given key, the object is actually
            created. Next calls just return the existing object. It is ok to enlist multiple objects
            and action with the same key but only the first one is used, the others are ignored.</para>
            <para>The action boolean parameter indicates whether the scope completed or not.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Scoping.IScopeContext.GetEnlisted``1(System.String)">
            <summary>
            Gets an enlisted object.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="key">The object unique identifier.</param>
            <returns>The enlisted object, if any, else the default value.</returns>
        </member>
        <member name="T:Umbraco.Core.Scoping.IScopeProvider">
            <summary>
            Provides scopes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Scoping.IScopeProvider.CreateScope(System.Data.IsolationLevel,Umbraco.Core.Scoping.RepositoryCacheMode,Umbraco.Core.Events.IEventDispatcher,System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Creates an ambient scope.
            </summary>
            <param name="isolationLevel">The transaction isolation level.</param>
            <param name="repositoryCacheMode">The repositories cache mode.</param>
            <param name="eventDispatcher">An optional events dispatcher.</param>
            <param name="scopeFileSystems">A value indicating whether to scope the filesystems.</param>
            <param name="callContext">A value indicating whether this scope should always be registered in the call context.</param>
            <param name="autoComplete">A value indicating whether this scope is auto-completed.</param>
            <returns>The created ambient scope.</returns>
            <remarks>
            <para>The created scope becomes the ambient scope.</para>
            <para>If an ambient scope already exists, it becomes the parent of the created scope.</para>
            <para>When the created scope is disposed, the parent scope becomes the ambient scope again.</para>
            <para>Parameters must be specified on the outermost scope, or must be compatible with the parents.</para>
            <para>Auto-completed scopes should be used for read-only operations ONLY. Do not use them if you do not
            understand the associated issues, such as the scope being completed even though an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Scoping.IScopeProvider.CreateDetachedScope(System.Data.IsolationLevel,Umbraco.Core.Scoping.RepositoryCacheMode,Umbraco.Core.Events.IEventDispatcher,System.Nullable{System.Boolean})">
            <summary>
            Creates a detached scope.
            </summary>
            <returns>A detached scope.</returns>
            <param name="isolationLevel">The transaction isolation level.</param>
            <param name="repositoryCacheMode">The repositories cache mode.</param>
            <param name="eventDispatcher">An optional events dispatcher.</param>
            <param name="scopeFileSystems">A value indicating whether to scope the filesystems.</param>
            <remarks>
            <para>A detached scope is not ambient and has no parent.</para>
            <para>It is meant to be attached by <see cref="M:Umbraco.Core.Scoping.IScopeProvider.AttachScope(Umbraco.Core.Scoping.IScope,System.Boolean)"/>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Scoping.IScopeProvider.AttachScope(Umbraco.Core.Scoping.IScope,System.Boolean)">
            <summary>
            Attaches a scope.
            </summary>
            <param name="scope">The scope to attach.</param>
            <param name="callContext">A value indicating whether to force usage of call context.</param>
            <remarks>
            <para>Only a scope created by <see cref="M:Umbraco.Core.Scoping.IScopeProvider.CreateDetachedScope(System.Data.IsolationLevel,Umbraco.Core.Scoping.RepositoryCacheMode,Umbraco.Core.Events.IEventDispatcher,System.Nullable{System.Boolean})"/> can be attached.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Scoping.IScopeProvider.DetachScope">
            <summary>
            Detaches a scope.
            </summary>
            <returns>The detached scope.</returns>
            <remarks>
            <para>Only a scope previously attached by <see cref="M:Umbraco.Core.Scoping.IScopeProvider.AttachScope(Umbraco.Core.Scoping.IScope,System.Boolean)"/> can be detached.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Scoping.IScopeProvider.Context">
            <summary>
            Gets the scope context.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Scoping.IScopeProvider.SqlContext">
            <summary>
            Gets the sql context.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Scoping.RepositoryCacheMode">
            <summary>
            Specifies the cache mode of repositories.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Scoping.RepositoryCacheMode.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Scoping.RepositoryCacheMode.Default">
            <summary>
            Default, full L2 cache.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Scoping.RepositoryCacheMode.Scoped">
            <summary>
            Scoped cache.
            </summary>
            <remarks>
            <para>Reads from, and writes to, a scope-local cache.</para>
            <para>Upon scope completion, clears the global L2 cache.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Scoping.RepositoryCacheMode.None">
            <summary>
            No cache.
            </summary>
            <remarks>
            <para>Bypasses caches entirely.</para>
            <para>Upon scope completion, clears the global L2 cache.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Scoping.Scope">
            <summary>
            Implements <see cref="T:Umbraco.Core.Scoping.IScope"/>.
            </summary>
            <remarks>Not thread-safe obviously.</remarks>
        </member>
        <member name="P:Umbraco.Core.Scoping.Scope.RepositoryCacheMode">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Scoping.Scope.IsolatedCaches">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Scoping.Scope.Database">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Scoping.Scope.Messages">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Scoping.Scope.Events">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Scoping.Scope.Complete">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Scoping.Scope.ReadLock(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Scoping.Scope.WriteLock(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Scoping.ScopeContextualBase">
            <summary>
            Provides a base class for scope contextual objects.
            </summary>
            <remarks>
            <para>A scope contextual object is enlisted in the current scope context,
            if any, and released when the context exists. It must be used in a 'using'
            block, and will be released when disposed, if not part of a scope.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Scoping.ScopeContextualBase.Get``1(Umbraco.Core.Scoping.IScopeProvider,System.String,System.Func{System.Boolean,``0})">
            <summary>
            Gets a contextual object.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="scopeProvider">A scope provider.</param>
            <param name="key">A context key for the object.</param>
            <param name="ctor">A function producing the contextual object.</param>
            <returns>The contextual object.</returns>
            <remarks>
            <para></para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Scoping.ScopeContextualBase.Dispose">
            <inheritdoc />
            <remarks>
            <para>If not scoped, then this releases the contextual object.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Scoping.ScopeContextualBase.Release(System.Boolean)">
            <summary>
            Releases the contextual object.
            </summary>
            <param name="completed">A value indicating whether the scoped operation completed.</param>
        </member>
        <member name="T:Umbraco.Core.Scoping.ScopeProvider">
            <summary>
            Implements <see cref="T:Umbraco.Core.Scoping.IScopeProvider"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Scoping.ScopeProvider.CreateDetachedScope(System.Data.IsolationLevel,Umbraco.Core.Scoping.RepositoryCacheMode,Umbraco.Core.Events.IEventDispatcher,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Scoping.ScopeProvider.AttachScope(Umbraco.Core.Scoping.IScope,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Scoping.ScopeProvider.DetachScope">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Scoping.ScopeProvider.CreateScope(System.Data.IsolationLevel,Umbraco.Core.Scoping.RepositoryCacheMode,Umbraco.Core.Events.IEventDispatcher,System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Core.Scoping.ScopeProvider.Context">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.Scoping.ScopeReference">
            <summary>
            References a scope.
            </summary>
            <remarks>Should go into HttpContext to indicate there is also an IScope in context
            that needs to be disposed at the end of the request (the scope, and the entire scopes
            chain).</remarks>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.GetUmbracoIdentity(System.Security.Principal.IPrincipal)">
            <summary>
            This will return the current back office identity if the IPrincipal is the correct type
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.EnsureCulture(System.Security.Principal.IIdentity)">
            <summary>
            Ensures that the thread culture is set based on the back office user's culture
            </summary>
            <param name="identity"></param>
        </member>
        <member name="F:Umbraco.Core.Security.AuthenticationExtensions.UserCultures">
            <summary>
            Used so that we aren't creating a new CultureInfo object for every single request
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Umbraco.Core.DisposableObjectSlim"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.CreateAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Insert a new user
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.UpdateAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Update a user
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.DeleteAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Delete a user
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.FindByIdAsync(System.Int32)">
            <summary>
            Finds a user
            </summary>
            <param name="userId"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.FindByNameAsync(System.String)">
            <summary>
            Find a user by name
            </summary>
            <param name="userName"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetPasswordHashAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Set the user password hash
            </summary>
            <param name="user"/><param name="passwordHash"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetPasswordHashAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Get the user password hash
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.HasPasswordAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns true if a user has a password set
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetEmailAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Set the user email
            </summary>
            <param name="user"/><param name="email"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetEmailAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Get the user email
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetEmailConfirmedAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns true if the user email is confirmed
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetEmailConfirmedAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.Boolean)">
            <summary>
            Sets whether the user email is confirmed
            </summary>
            <param name="user"/><param name="confirmed"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.FindByEmailAsync(System.String)">
            <summary>
            Returns the user associated with this email
            </summary>
            <param name="email"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.AddLoginAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Adds a user login with the specified provider and key
            </summary>
            <param name="user"/><param name="login"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.RemoveLoginAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Removes the user login with the specified combination if it exists
            </summary>
            <param name="user"/><param name="login"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetLoginsAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns the linked accounts for this user
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.FindAsync(Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Returns the user associated with this login
            </summary>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.AddToRoleAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Adds a user to a role (user group)
            </summary>
            <param name="user"/><param name="roleName"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.RemoveFromRoleAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Removes the role (user group) for the user
            </summary>
            <param name="user"/><param name="roleName"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetRolesAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns the roles (user groups) for this user
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.IsInRoleAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Returns true if a user is in the role
            </summary>
            <param name="user"/><param name="roleName"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetSecurityStampAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Set the security stamp for the user
            </summary>
            <param name="user"/><param name="stamp"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetSecurityStampAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Get the user security stamp
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetTwoFactorEnabledAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.Boolean)">
            <summary>
            Sets whether two factor authentication is enabled for the user
            </summary>
            <param name="user"/><param name="enabled"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetTwoFactorEnabledAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns whether two factor authentication is enabled for the user
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetLockoutEndDateAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns the DateTimeOffset that represents the end of a user's lockout, any time in the past should be considered not locked out.
            </summary>
            <param name="user"/>
            <returns/>
            <remarks>
            Currently we do not support a timed lock out, when they are locked out, an admin will  have to reset the status
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetLockoutEndDateAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.DateTimeOffset)">
            <summary>
            Locks a user out until the specified end date (set to a past date, to unlock a user)
            </summary>
            <param name="user"/><param name="lockoutEnd"/>
            <returns/>
            <remarks>
            Currently we do not support a timed lock out, when they are locked out, an admin will  have to reset the status
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.IncrementAccessFailedCountAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Used to record when an attempt to access the user has failed
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.ResetAccessFailedCountAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Used to reset the access failed count, typically after the account is successfully accessed
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetAccessFailedCountAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns the current number of failed access attempts.  This number usually will be reset whenever the password is
                            verified or the account is locked out.
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetLockoutEnabledAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns true
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetLockoutEnabledAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.Boolean)">
            <summary>
            Doesn't actually perform any function, users can always be locked out
            </summary>
            <param name="user"/><param name="enabled"/>
            <returns/>
        </member>
        <member name="T:Umbraco.Core.Security.BackOfficeUserValidator`1">
            <summary>
            Custom validator to not validate a user's username or email if they haven't changed
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Security.ContentPermissionsHelper.CheckPermissions(System.Int32,Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Services.IUserService,Umbraco.Core.Services.IEntityService,Umbraco.Core.Models.Entities.IUmbracoEntity@,System.Char[])">
            <summary>
            Checks if the user has access to the specified node and permissions set
            </summary>
            <param name="nodeId"></param>
            <param name="user"></param>
            <param name="userService"></param>
            <param name="entityService"></param>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.Entities.IUmbracoEntity"/> item resolved if one was found for the id</param>
            <param name="permissionsToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.ContentPermissionsHelper.CheckPermissions(System.Int32,Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Services.IUserService,Umbraco.Core.Services.IContentService,Umbraco.Core.Services.IEntityService,Umbraco.Core.Models.IContent@,System.Char[])">
            <summary>
            Checks if the user has access to the specified node and permissions set
            </summary>
            <param name="nodeId"></param>
            <param name="user"></param>
            <param name="userService"></param>
            <param name="contentService"></param>
            <param name="entityService"></param>
            <param name="contentItem">The <see cref="T:Umbraco.Core.Models.IContent"/> item resolved if one was found for the id</param>
            <param name="permissionsToCheck"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Security.EmailService">
            <summary>
            The <see cref="T:Microsoft.AspNet.Identity.IIdentityMessageService"/> implementation for Umbraco
            </summary>
        </member>
        <member name="T:Umbraco.Core.Security.IMembershipProviderPasswordHasher">
            <summary>
            A password hasher that is based on the rules configured for a membership provider
            </summary>
        </member>
        <member name="T:Umbraco.Core.Security.IUmbracoMemberTypeMembershipProvider">
            <summary>
            An interface for exposing the content type properties for storing membership data in when
            a membership provider's data is backed by an Umbraco content type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Security.IUserAwarePasswordHasher`2">
            <summary>
            A password hasher that is User aware so that it can process the hashing based on the user's settings
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TUser"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Security.IUserSessionStore`2">
            <summary>
            An IUserStore interface part to implement if the store supports validating user session Ids
            </summary>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Security.IUsersMembershipProvider">
            <summary>
            A marker interface used internally to identify Umbraco built-in Users membership providers
            </summary>
        </member>
        <member name="T:Umbraco.Core.Security.MachineKeyGenerator">
            <summary>
            Used to generate a machine key
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.Security.MachineKeyGenerator.GenerateConfigurationBlock" -->
        <member name="T:Umbraco.Core.Security.MembershipProviderBase">
            <summary>
            A base membership provider class offering much of the underlying functionality for initializing and password encryption/hashing.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.DefaultMinPasswordLength">
            <summary>
            Providers can override this setting, default is 10
            </summary>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.DefaultMinNonAlphanumericChars">
            <summary>
            Providers can override this setting, default is 0
            </summary>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.DefaultUseLegacyEncoding">
            <summary>
            Providers can override this setting, default is false to use better security
            </summary>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.AllowManuallyChangingPassword">
            <summary>
            Providers can override this setting, by default this is false which means that the provider will
            authenticate the username + password when ChangePassword is called. This property exists purely for
            backwards compatibility.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.GetRawPassword(System.String)">
            <summary>
            Returns the raw password value for a given user
            </summary>
            <param name="username"></param>
            <returns></returns>
            <remarks>
            By default this will return an invalid attempt, inheritors will need to override this to support it
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.EnablePasswordReset">
            <summary>
            Indicates whether the membership provider is configured to allow users to reset their passwords.
            </summary>
            <value></value>
            <returns>true if the membership provider supports password reset; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.EnablePasswordRetrieval">
            <summary>
            Indicates whether the membership provider is configured to allow users to retrieve their passwords.
            </summary>
            <value></value>
            <returns>true if the membership provider is configured to support password retrieval; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.MaxInvalidPasswordAttempts">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
            <value></value>
            <returns>The number of invalid password or password-answer attempts allowed before the membership user is locked out.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets the minimum number of special characters that must be present in a valid password.
            </summary>
            <value></value>
            <returns>The minimum number of special characters that must be present in a valid password.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.MinRequiredPasswordLength">
            <summary>
            Gets the minimum length required for a password.
            </summary>
            <value></value>
            <returns>The minimum length required for a password. </returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
            <value></value>
            <returns>The number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.PasswordFormat">
            <summary>
            Gets a value indicating the format for storing passwords in the membership data store.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.Web.Security.MembershipPasswordFormat"></see> values indicating the format for storing passwords in the data store.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password.
            </summary>
            <value></value>
            <returns>A regular expression used to evaluate a password.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
            <value></value>
            <returns>true if a password answer is required for password reset and retrieval; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the membership provider is configured to require a unique e-mail address for each user name.
            </summary>
            <value></value>
            <returns>true if the membership provider requires a unique e-mail address; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.ApplicationName">
            <summary>
            The name of the application using the custom membership provider.
            </summary>
            <value></value>
            <returns>The name of the application using the custom membership provider.</returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call
            <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider
            has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.OnValidatingPassword(System.Web.Security.ValidatePasswordEventArgs)">
            <summary>
            Override this method to ensure the password is valid before raising the event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">Required to change a user password if the user is not new and AllowManuallyChangingPassword is false</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
            <remarks>
            Checks to ensure the AllowManuallyChangingPassword rule is adhered to
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.PerformChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">This property is ignore for this provider</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
            <remarks>
            Performs the basic validation before passing off to PerformChangePasswordQuestionAndAnswer
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.PerformChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
            <remarks>
            Ensures the ValidatingPassword event is executed before executing PerformCreateUser and performs basic membership provider validation of values.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.ValidateNewUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Performs the validation of the information for creating a new user
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="email"></param>
            <param name="passwordQuestion"></param>
            <param name="passwordAnswer"></param>
            <param name="isApproved"></param>
            <param name="providerUserKey"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.PerformCreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.GetPassword(System.String,System.String)">
            <summary>
            Gets the members password if password retrieval is enabled
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.PerformGetPassword(System.String,System.String)">
            <summary>
            Gets the members password if password retrieval is enabled
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.GetDefaultAppName">
            <summary>
            Gets the name of the default app.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.FormatPasswordForStorage(System.String,System.String)">
            <summary>
            If the password format is a hashed keyed algorithm then we will pre-pend the salt used to hash the password
            to the hashed password itself.
            </summary>
            <param name="pass"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.CheckPassword(System.String,System.String)">
            <summary>
            Checks the password.
            </summary>
            <param name="password">The password.</param>
            <param name="dbPassword">The dbPassword.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.EncryptOrHashNewPassword(System.String,System.String@)">
            <summary>
            Encrypt/hash a new password with a new salt
            </summary>
            <param name="newPassword"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.StoredPassword(System.String,System.String@)">
            <summary>
            Returns the hashed password without the salt if it is hashed
            </summary>
            <param name="storedString"></param>
            <param name="salt">returns the salt</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.LegacyEncodePassword(System.String)">
            <summary>
            Encodes the password.
            </summary>
            <param name="password">The password.</param>
            <returns>The encoded password.</returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.LegacyUnEncodePassword(System.String)">
            <summary>
            Unencode password.
            </summary>
            <param name="encodedPassword">The encoded password.</param>
            <returns>The unencoded password.</returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.GetCurrentRequestIpAddress">
            <summary>
            Returns the current request IP address for logging if there is one
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.CanResetPassword(System.Web.Security.MembershipProvider,Umbraco.Core.Services.IUserService)">
            <summary>
            Extension method to check if a password can be reset based on a given provider and the current request (logged in user)
            </summary>
            <param name="provider"></param>
            <param name="userService"></param>
            <returns></returns>
            <remarks>
            An Admin can always reset the password
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.GetMembersMembershipProvider">
            <summary>
            Method to get the Umbraco Members membership provider based on its alias
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.GetUsersMembershipProvider">
            <summary>
            Method to get the Umbraco Users membership provider based on its alias
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.GetCurrentUserOnline(System.Web.Security.MembershipProvider)">
            <summary>
            Returns the currently logged in MembershipUser and flags them as being online - use sparingly (i.e. login)
            </summary>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.GetCurrentUser(System.Web.Security.MembershipProvider)">
            <summary>
            Returns the currently logged in MembershipUser
            </summary>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.GetCurrentUserName(System.Web.Security.MembershipProvider)">
            <summary>
            Just returns the current user's login name (just a wrapper).
            </summary>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.IsUmbracoUsersProvider(System.Web.Security.MembershipProvider)">
            <summary>
            Returns true if the provider specified is a built-in Umbraco users provider
            </summary>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.IsUmbracoMembershipProvider(System.Web.Security.MembershipProvider)">
            <summary>
            Returns true if the provider specified is a built-in Umbraco membership provider
            </summary>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Security.MembershipProviderPasswordHasher">
            <summary>
            A password hasher that conforms to the password hashing done with membership providers
            </summary>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderPasswordHasher.MembershipProvider">
            <summary>
            Exposes the underlying MembershipProvider
            </summary>
        </member>
        <member name="T:Umbraco.Core.Security.MembershipProviderPasswordValidator">
            <summary>
            Ensure that both the normal password validator rules are processed along with the underlying membership provider rules
            </summary>
        </member>
        <member name="T:Umbraco.Core.Security.UmbracoBackOfficeIdentity">
            <summary>
            A custom user identity for the Umbraco backoffice
            </summary>
            <remarks>
            This inherits from FormsIdentity for backwards compatibility reasons since we still support the forms auth cookie, in v8 we can
            change over to 'pure' asp.net identity and just inherit from ClaimsIdentity.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoBackOfficeIdentity.#ctor(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new UmbracoBackOfficeIdentity
            </summary>
            <param name="userId"></param>
            <param name="username"></param>
            <param name="realName"></param>
            <param name="startContentNodes"></param>
            <param name="startMediaNodes"></param>
            <param name="culture"></param>
            <param name="sessionId"></param>
            <param name="securityStamp"></param>
            <param name="allowedApps"></param>
            <param name="roles"></param>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoBackOfficeIdentity.#ctor(System.Security.Claims.ClaimsIdentity,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new UmbracoBackOfficeIdentity
            </summary>
            <param name="childIdentity">
            The original identity created by the ClaimsIdentityFactory
            </param>
            <param name="userId"></param>
            <param name="username"></param>
            <param name="realName"></param>
            <param name="startContentNodes"></param>
            <param name="startMediaNodes"></param>
            <param name="culture"></param>
            <param name="sessionId"></param>
            <param name="securityStamp"></param>
            <param name="allowedApps"></param>
            <param name="roles"></param>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoBackOfficeIdentity.#ctor(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Create a back office identity based on an existing claims identity
            </summary>
            <param name="identity"></param>
        </member>
        <member name="P:Umbraco.Core.Security.UmbracoBackOfficeIdentity.RequiredBackOfficeIdentityClaimTypes">
            <summary>
            Returns the required claim types for a back office identity
            </summary>
            <remarks>
            This does not include the role claim type or allowed apps type since that is a collection and in theory could be empty
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoBackOfficeIdentity.AddRequiredClaims(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds claims based on the ctor data
            </summary>
        </member>
        <member name="P:Umbraco.Core.Security.UmbracoBackOfficeIdentity.AuthenticationType">
            <inheritdoc />
            <summary>
            Gets the type of authenticated identity.
            </summary>
            <returns>
            The type of authenticated identity. This property always returns "UmbracoBackOffice".
            </returns>
        </member>
        <member name="T:Umbraco.Core.Security.UmbracoEmailMessage">
            <summary>
            A custom implementation for IdentityMessage that allows the customization of how an email is sent
            </summary>
        </member>
        <member name="T:Umbraco.Core.Security.UmbracoMembershipProviderBase">
            <summary>
            A base membership provider class for umbraco providers
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoMembershipProviderBase.PerformCreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoMembershipProviderBase.CreateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="memberTypeAlias">The member type alias to use when creating the member</param>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoMembershipProviderBase.PerformCreateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="memberTypeAlias">The member type alias to use when creating the member</param>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="T:Umbraco.Core.Security.UserAwareMembershipProviderPasswordHasher">
            <summary>
            The default password hasher that is User aware so that it can process the hashing based on the user's settings
            </summary>
        </member>
        <member name="P:Umbraco.Core.Serialization.AbstractSerializationService.Formatters">
            <summary>
              A sequence of <see cref="T:Umbraco.Core.Serialization.IFormatter" /> registered with this serialization service.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Serialization.AbstractSerializationService.FromStream(System.IO.Stream,System.Type,System.String)">
            <summary>
              Finds an <see cref="T:Umbraco.Core.Serialization.IFormatter" /> with a matching <paramref name="intent" /> , and deserializes the <see cref="T:System.IO.Stream" /> <paramref
               name="input" /> to an object graph.
            </summary>
            <param name="input"> </param>
            <param name="outputType"> </param>
            <param name="intent"> </param>
            <returns> </returns>
        </member>
        <member name="M:Umbraco.Core.Serialization.AbstractSerializationService.ToStream(System.Object,System.String)">
            <summary>
              Finds an <see cref="T:Umbraco.Core.Serialization.IFormatter" /> with a matching <paramref name="intent" /> , and serializes the <paramref
               name="input" /> object graph to an <see cref="T:Umbraco.Core.Serialization.IStreamedResult" /> .
            </summary>
            <param name="input"> </param>
            <param name="intent"> </param>
            <returns> </returns>
        </member>
        <member name="T:Umbraco.Core.Serialization.CaseInsensitiveDictionaryConverter`1">
            <summary>
            Marks dictionaries so they are deserialized as case-insensitive.
            </summary>
            <example>
            [JsonConverter(typeof(CaseInsensitiveDictionaryConverter{PropertyData[]}))]
            public Dictionary{string, PropertyData[]} PropertyData {{ get; set; }}
            </example>
        </member>
        <member name="T:Umbraco.Core.Serialization.JsonReadConverter`1">
            <summary>
            Provides a base class for custom <see cref="T:Newtonsoft.Json.JsonConverter"/> implementations.
            </summary>
            <typeparam name="T">The type of the converted object.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Serialization.JsonReadConverter`1.Create(System.Type,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Create an instance of objectType, based properties in the JSON object
            </summary>
            <param name="objectType">type of object expected</param>
            <param name="path">The path of the current json token.</param>
            <param name="jObject">contents of JSON object that will be deserialized</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Serialization.JsonReadConverter`1.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Serialization.JsonReadConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Serialization.JsonReadConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.Serialization.JsonNetSerializer.FromStream(System.IO.Stream,System.Type)">
            <summary>
            Deserialize input stream to object
            </summary>
            <param name="input"></param>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Serialization.JsonNetSerializer.ToStream(System.Object)">
            <summary>
            Serialize object to streamed result
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Serialization.JsonToStringConverter">
            <summary>
            This is used in order to deserialize a json object on a property into a json string since the property's type is 'string'
            </summary>
        </member>
        <member name="T:Umbraco.Core.Serialization.NoTypeConverterJsonConverter`1">
             <summary>
             This is required if we want to force JSON.Net to not use .Net TypeConverters during serialization/deserialization
             </summary>
             <typeparam name="T"></typeparam>
             <remarks>
             In some cases this is required if your model has an explicit type converter, see: http://stackoverflow.com/a/31328131/694494
            
             NOTE: I was going to use this for the ImageCropDataSetConverter to convert to String, which would have worked by putting this attribute:
             [JsonConverter(typeof(NoTypeConverterJsonConverter{ImageCropDataSet}))] on top of the ImageCropDataSet class, however it turns out we
             don't require this because to convert to string, we just override ToString().
             I'll leave this class here for the future though.
             </remarks>
        </member>
        <member name="M:Umbraco.Core.Serialization.SerializationService.FromStream(System.IO.Stream,System.Type,System.String)">
            <summary>
              Finds an <see cref="T:Umbraco.Core.Serialization.IFormatter" /> with a matching <paramref name="intent" /> , and deserializes the <see cref="T:System.IO.Stream" /> <paramref
               name="input" /> to an object graph.
            </summary>
            <param name="input"> </param>
            <param name="outputType"> </param>
            <param name="intent"> </param>
            <returns> </returns>
        </member>
        <member name="M:Umbraco.Core.Serialization.SerializationService.ToStream(System.Object,System.String)">
            <summary>
              Finds an <see cref="T:Umbraco.Core.Serialization.IFormatter" /> with a matching <paramref name="intent" /> , and serializes the <paramref
               name="input" /> object graph to an <see cref="T:Umbraco.Core.Serialization.IStreamedResult" /> .
            </summary>
            <param name="input"> </param>
            <param name="intent"> </param>
            <returns> </returns>
        </member>
        <member name="T:Umbraco.Core.Settable`1">
            <summary>
            Represents a value that can be assigned a value.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="M:Umbraco.Core.Settable`1.Set(`0)">
            <summary>
            Assigns a value to this <see cref="T:Umbraco.Core.Settable`1"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Umbraco.Core.Settable`1.Set(Umbraco.Core.Settable{`0})">
            <summary>
            Assigns a value to this <see cref="T:Umbraco.Core.Settable`1"/> instance by copying the value
            of another instance, if the other instance has a value.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:Umbraco.Core.Settable`1.Clear">
            <summary>
            Clears the value.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Settable`1.HasValue">
            <summary>
            Gets a value indicating whether a value has been assigned to this <see cref="T:Umbraco.Core.Settable`1"/> instance.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Settable`1.Value">
            <summary>
            Gets the value assigned to this <see cref="T:Umbraco.Core.Settable`1"/> instance.
            </summary>
            <remarks>An exception is thrown if the HasValue property is false.</remarks>
            <exception cref="T:System.InvalidOperationException">No value has been assigned to this instance.</exception>
        </member>
        <member name="M:Umbraco.Core.Settable`1.ValueOrDefault">
            <summary>
            Gets the value assigned to this <see cref="T:Umbraco.Core.Settable`1"/> instance, if a value has been assigned,
            otherwise the default value of <typeparamref name="T"/>.
            </summary>
            <returns>The value assigned to this <see cref="T:Umbraco.Core.Settable`1"/> instance, if a value has been assigned,
            else the default value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Umbraco.Core.Settable`1.ValueOrDefault(`0)">
            <summary>
            Gets the value assigned to this <see cref="T:Umbraco.Core.Settable`1"/> instance, if a value has been assigned,
            otherwise a specified default value.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>The value assigned to this <see cref="T:Umbraco.Core.Settable`1"/> instance, if a value has been assigned,
            else <paramref name="defaultValue" />.</returns>
        </member>
        <member name="M:Umbraco.Core.Settable`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.SimpleMainDom">
            <summary>
            Provides a simple implementation of <see cref="T:Umbraco.Core.IMainDom"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.SimpleMainDom.IsMainDom">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.SimpleMainDom.Register(System.Action,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Core.SimpleMainDom.Register(System.Action,System.Action,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Core.StringExtensions">
            <summary>
             String extension methods
            </summary>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.GetIdsFromPathReversed(System.String)">
            <summary>
            Convert a path to node ids in the order from right to left (deepest to shallowest)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.StripWhitespace(System.String)">
            <summary>
            Removes new lines and tabs
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.GetFileExtension(System.String)">
            <summary>
            Determines the extension of the path or URL
            </summary>
            <param name="file"></param>
            <returns>Extension of the file</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.DetectIsJavaScriptPath(System.String)">
            <summary>
            Based on the input string, this will detect if the string is a JS path or a JS snippet.
            If a path cannot be determined, then it is assumed to be a snippet the original text is returned
            with an invalid attempt, otherwise a valid attempt is returned with the resolved path
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            This is only used for legacy purposes for the Action.JsSource stuff and shouldn't be needed in v8
            </remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.DetectIsJson(System.String)">
            <summary>
            This tries to detect a json string, this is not a fail safe way but it is quicker than doing
            a try/catch when deserializing when it is not json.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ConvertToJsonIfPossible(System.String)">
            <summary>
            Returns a JObject/JArray instance if the string can be converted to json, otherwise returns the string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.CleanForXss(System.String,System.Char[])">
            <summary>
            Cleans string to aid in preventing xss attacks.
            </summary>
            <param name="input"></param>
            <param name="ignoreFromClean"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.GenerateStreamFromString(System.String)">
            <summary>
            Returns a stream from a string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.StringExtensions.AppendQueryStringToUrl(System.String,System.String[])" -->
        <member name="M:Umbraco.Core.StringExtensions.EncryptWithMachineKey(System.String)">
            <summary>
            Encrypt the string using the MachineKey in medium trust
            </summary>
            <param name="value">The string value to be encrypted.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.DecryptWithMachineKey(System.String)">
            <summary>
            Decrypt the encrypted string using the Machine key in medium trust
            </summary>
            <param name="value">The string value to be decrypted</param>
            <returns>The decrypted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.Trim(System.String,System.String)">
            <summary>
            Trims the specified value from a string; accepts a string input whereas the in-built implementation only accepts char or char[].
            </summary>
            <param name="value">The value.</param>
            <param name="forRemoving">For removing.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>Indicates whether a specified string is null, empty, or
            consists only of white-space characters.</summary>
            <param name="value">The value to check.</param>
            <returns>Returns <see langword="true"/> if the value is null,
            empty, or consists only of white-space characters, otherwise
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToDelimitedList(System.String,System.String)">
            <summary>The to delimited list.</summary>
            <param name="list">The list.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>the list</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.EnumTryParse``1(System.String,System.Boolean,``0@)">
            <summary>enum try parse.</summary>
            <param name="strType">The str type.</param>
            <param name="ignoreCase">The ignore case.</param>
            <param name="result">The result.</param>
            <typeparam name="T">The type</typeparam>
            <returns>The enum try parse.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.EnumParse``1(System.String,System.Boolean)">
            <summary>
            Parse string to Enum
            </summary>
            <typeparam name="T">The enum type</typeparam>
            <param name="strType">The string to parse</param>
            <param name="ignoreCase">The ignore case</param>
            <returns>The parsed enum</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.StripHtml(System.String)">
            <summary>
            Strips all HTML from a string.
            </summary>
            <param name="text">The text.</param>
            <returns>Returns the string without any HTML tags.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.EncodeAsGuid(System.String)">
            <summary>
            Encodes as GUID.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ConvertToHex(System.String)">
            <summary>
            Converts to hex.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToUrlBase64(System.String)">
            <summary>
             Encodes a string to a safe URL base64 string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.FromUrlBase64(System.String)">
            <summary>
            Decodes a URL safe base64 string back
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.InvariantFormat(System.String,System.Object[])">
            <summary>
            formats the string with invariant culture
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToInvariantString(System.Int32)">
            <summary>
            Converts an integer to an invariant formatted string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.InvariantEquals(System.String,System.String)">
            <summary>
            Compares 2 strings with invariant culture and case ignored
            </summary>
            <param name="compare">The compare.</param>
            <param name="compareTo">The compare to.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ParseInto``1(System.String)">
            <summary>
            Tries to parse a string into the supplied type by finding and using the Type's "Parse" method
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ParseInto(System.String,System.Type)">
            <summary>
            Tries to parse a string into the supplied type by finding and using the Type's "Parse" method
            </summary>
            <param name="val"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.GenerateHash(System.String)">
            <summary>
            Generates a hash of a string based on the FIPS compliance setting.
            </summary>
            <param name="str">The <see cref="T:System.String" /> to hash.</param>
            <returns>
            The hashed string.
            </returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.GenerateHash``1(System.String)">
            <summary>
            Generate a hash of a string based on the specified hash algorithm.
            </summary>
            <typeparam name="T">The hash algorithm implementation to use.</typeparam>
            <param name="str">The <see cref="T:System.String" /> to hash.</param>
            <returns>
            The hashed string.
            </returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.GenerateHash(System.String,System.String)">
            <summary>
            Generate a hash of a string based on the specified <paramref name="hashType" />.
            </summary>
            <param name="str">The <see cref="T:System.String" /> to hash.</param>
            <param name="hashType">The hash algorithm implementation to use.</param>
            <returns>
            The hashed string.
            </returns>
            <exception cref="T:System.InvalidOperationException">No hashing type found by name <paramref name="hashType" />.</exception>
            <seealso cref="!:https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.hashalgorithm.create#System_Security_Cryptography_HashAlgorithm_Create_System_String_" />
        </member>
        <member name="M:Umbraco.Core.StringExtensions.UrlTokenDecode(System.String)">
            <summary>
            Decodes a string that was encoded with UrlTokenEncode
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.UrlTokenEncode(System.Byte[])">
            <summary>
            Encodes a string so that it is 'safe' for URLs, files, etc..
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.NormaliseDirectoryPath(System.String)">
            <summary>
            Ensures that the folder path ends with a DirectorySeparatorChar
            </summary>
            <param name="currentFolder"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Truncates the specified text string.
            </summary>
            <param name="text">The text.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="suffix">The suffix.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.StripNewLines(System.String)">
            <summary>
            Strips carrage returns and line feeds from the specified text.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSingleLine(System.String)">
            <summary>
            Converts to single line by replacing line breaks with spaces.
            </summary>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFirstUpper(System.String)">
            <summary>
            Returns a copy of the string with the first character converted to uppercase.
            </summary>
            <param name="input">The string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFirstLower(System.String)">
            <summary>
            Returns a copy of the string with the first character converted to lowercase.
            </summary>
            <param name="input">The string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFirstUpper(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a copy of the string with the first character converted to uppercase using the casing rules of the specified culture.
            </summary>
            <param name="input">The string.</param>
            <param name="culture">The culture.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFirstLower(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a copy of the string with the first character converted to lowercase using the casing rules of the specified culture.
            </summary>
            <param name="input">The string.</param>
            <param name="culture">The culture.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFirstUpperInvariant(System.String)">
            <summary>
            Returns a copy of the string with the first character converted to uppercase using the casing rules of the invariant culture.
            </summary>
            <param name="input">The string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFirstLowerInvariant(System.String)">
            <summary>
            Returns a copy of the string with the first character converted to lowercase using the casing rules of the invariant culture.
            </summary>
            <param name="input">The string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ReplaceMany(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Returns a new string in which all occurrences of specified strings are replaced by other specified strings.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="replacements">The replacements definition.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ReplaceMany(System.String,System.Char[],System.Char)">
            <summary>
            Returns a new string in which all occurrences of specified characters are replaced by a specified character.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="chars">The characters to replace.</param>
            <param name="replacement">The replacement character.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeAlias(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="alias">The text to filter.</param>
            <returns>The safe alias.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeAlias(System.String,System.Boolean)">
            <summary>
            Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="alias">The text to filter.</param>
            <param name="camel">A value indicating that we want to camel-case the alias.</param>
            <returns>The safe alias.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeAlias(System.String,System.String)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an alias.
            </summary>
            <param name="alias">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe alias.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToUrlSegment(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an URL segment.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe URL segment.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToUrlSegment(System.String,System.String)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an URL segment.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe URL segment.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToCleanString(System.String,Umbraco.Core.Strings.CleanStringType)">
            <summary>
            Cleans a string.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the ICurrent.ShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToCleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Char)">
            <summary>
            Cleans a string, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the ICurrent.ShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToCleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.String)">
            <summary>
            Cleans a string in the context of a specified culture.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToCleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Char,System.String)">
            <summary>
            Cleans a string in the context of a specified culture, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.SplitPascalCasing(System.String)">
            <summary>
            Splits a Pascal cased string into a phrase separated by spaces.
            </summary>
            <param name="phrase">The text to split.</param>
            <returns>The split text.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeFileName(System.String)">
            <summary>
            Cleans a string, in the context of the invariant culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a URL).
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe filename.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeFileName(System.String,System.String)">
            <summary>
            Cleans a string, in the context of the invariant culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a URL).
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe filename.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            An extension method that returns a new string in which all occurrences of a
            specified string in the current instance are replaced with another specified string.
            StringComparison specifies the type of search to use for the specified string.
            </summary>
            <param name="source">Current instance of the string</param>
            <param name="oldString">Specified string to replace</param>
            <param name="newString">Specified string to inject</param>
            <param name="stringComparison">String Comparison object to specify search type</param>
            <returns>Updated string</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToCSharpString(System.String)">
            <summary>
            Converts a literal string into a C# expression.
            </summary>
            <param name="s">Current instance of the string.</param>
            <returns>The string in a C# format.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
            Checks whether a string "haystack" contains within it any of the strings in the "needles" collection and returns true if it does or false if it doesn't
            </summary>
            <param name="haystack">The string to check</param>
            <param name="needles">The collection of strings to check are contained within the first string</param>
            <param name="comparison">The type of comparison to perform - defaults to <see cref="F:System.StringComparison.CurrentCulture"/></param>
            <returns>True if any of the needles are contained with haystack; otherwise returns false</returns>
            Added fix to ensure the comparison is used - see http://issues.umbraco.org/issue/U4-11313
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFriendlyName(System.String)">
            <summary>
            Converts a file name to a friendly name for a content item
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToValidXmlString(System.String)">
             <summary>
             An extension method that returns a new string in which all occurrences of an
             unicode characters that are invalid in XML files are replaced with an empty string.
             </summary>
             <param name="text">Current instance of the string</param>
             <returns>Updated string</returns>
            
             <summary>
             removes any unusual unicode characters that can't be encoded into XML
             </summary>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToGuid(System.String)">
            <summary>
            Converts a string to a Guid - WARNING, depending on the string, this may not be unique
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Core.StringExtensions.UrlNamespace">
             <summary>
             The namespace for URLs (from RFC 4122, Appendix C).
            
             See <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>
             </summary>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.CreateGuidFromHash(System.Guid,System.String,System.Int32)">
             <summary>
             Creates a name-based UUID using the algorithm from RFC 4122 §4.3.
            
             See <a href="https://github.com/LogosBible/Logos.Utility/blob/master/src/Logos.Utility/GuidUtility.cs#L34">GuidUtility.cs</a> for original implementation.
             </summary>
             <param name="namespaceId">The ID of the namespace.</param>
             <param name="name">The name (within that namespace).</param>
             <param name="version">The version number of the UUID to create; this value must be either
             3 (for MD5 hashing) or 5 (for SHA-1 hashing).</param>
             <returns>A UUID derived from the namespace and name.</returns>
             <remarks>See <a href="http://code.logos.com/blog/2011/04/generating_a_deterministic_guid.html">Generating a deterministic GUID</a>.</remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.NullOrWhiteSpaceAsNull(System.String)">
            <summary>
            Turns an null-or-whitespace string into a null string.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Strings.CleanStringType">
            <summary>
            Specifies the type of a clean string.
            </summary>
            <remarks>
            <para>Specifies its casing, and its encoding.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.None">
            <summary>
            No value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.CaseMask">
            <summary>
            Flag mask for casing.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.PascalCase">
            <summary>
            Pascal casing eg "PascalCase".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.CamelCase">
            <summary>
            Camel casing eg "camelCase".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.Unchanged">
            <summary>
            Unchanged casing eg "UncHanGed".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.LowerCase">
            <summary>
            Lower casing eg "lowercase".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.UpperCase">
            <summary>
            Upper casing eg "UPPERCASE".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.UmbracoCase">
            <summary>
            Umbraco "safe alias" case.
            </summary>
            <remarks>Uppercases the first char of each term except for the first
            char of the string, everything else including the first char of the
            string is unchanged.</remarks>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.CodeMask">
            <summary>
            Flag mask for encoding.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.Utf8">
            <summary>
            Utf8 encoding.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.Ascii">
            <summary>
            Ascii encoding.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.TryAscii">
            <summary>
            Ascii encoding, if possible.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.RoleMask">
            <summary>
            Flag mask for role.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.UrlSegment">
            <summary>
             Url role.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.Alias">
            <summary>
            Alias role.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.FileName">
            <summary>
            FileName role.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.ConvertCase">
            <summary>
            ConvertCase role.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.UnderscoreAlias">
            <summary>
            UnderscoreAlias role.
            </summary>
            <remarks>This is Alias + leading underscore.</remarks>
        </member>
        <member name="T:Umbraco.Core.Strings.ContentBaseExtensions">
            <summary>
            Provides extension methods to IContentBase to get URL segments.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Strings.ContentBaseExtensions.GetUrlSegment(Umbraco.Core.Models.IContentBase,System.Collections.Generic.IEnumerable{Umbraco.Core.Strings.IUrlSegmentProvider},System.String)">
            <summary>
            Gets the URL segment for a specified content and culture.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The culture.</param>
            <param name="urlSegmentProviders"></param>
            <returns>The URL segment.</returns>
        </member>
        <member name="T:Umbraco.Core.Strings.DefaultShortStringHelper">
            <summary>
            New default implementation of string functions for short strings such as aliases or URL segments.
            </summary>
            <remarks>
            <para>Not optimized to work on large bodies of text.</para>
            <para>Meant to replace <c>LegacyShortStringHelper</c> where/when backward compatibility is not an issue.</para>
            <para>NOTE: pre-filters run _before_ the string is re-encoded.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanStringForSafeAlias(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe alias.</returns>
            <remarks>
            <para>The string will be cleaned in the context of the default culture.</para>
            <para>Safe aliases are Ascii only.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanStringForSafeAlias(System.String,System.String)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe alias.</returns>
            <remarks>
            <para>Safe aliases are Ascii only.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanStringForUrlSegment(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an URL segment.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe URL segment.</returns>
            <remarks>
            <para>The string will be cleaned in the context of the default culture.</para>
            <para>Url segments are Ascii only (no accents...).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanStringForUrlSegment(System.String,System.String)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an URL segment.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe URL segment.</returns>
            <remarks>
            <para>Url segments are Ascii only (no accents...).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanStringForSafeFileName(System.String)">
            <summary>
            Cleans a string, in the context of the default culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a URL).
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe filename.</returns>
            <remarks>Legacy says this was used to "overcome an issue when Umbraco is used in IE in an intranet environment" but that issue is not documented.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanStringForSafeFileName(System.String,System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a URL).
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe filename.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType)">
            <summary>
            Cleans a string.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Char)">
            <summary>
            Cleans a string, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.String)">
            <summary>
            Cleans a string in the context of a specified culture.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Char,System.String)">
            <summary>
            Cleans a string in the context of a specified culture, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.SplitPascalCasing(System.String,System.Char)">
            <summary>
            Splits a Pascal-cased string into a phrase separated by a separator.
            </summary>
            <param name="text">The text to split.</param>
            <param name="separator">The separator, which defaults to a whitespace.</param>
            <returns>The split text.</returns>
            <remarks>Supports Utf8 and Ascii strings, not Unicode strings.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelperConfig.WithDefault(Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection)">
            <summary>
            Sets the default configuration.
            </summary>
            <returns>The short string helper.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelperConfig.ApplyUrlReplaceCharacters(System.String)">
            <summary>
            Returns a new string in which characters have been replaced according to the Umbraco settings UrlReplaceCharacters.
            </summary>
            <param name="s">The string to filter.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="T:Umbraco.Core.Strings.DefaultUrlSegmentProvider">
            <summary>
            Default implementation of IUrlSegmentProvider.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultUrlSegmentProvider.GetUrlSegment(Umbraco.Core.Models.IContentBase,System.String)">
            <summary>
            Gets the URL segment for a specified content and culture.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The culture.</param>
            <returns>The URL segment.</returns>
        </member>
        <member name="T:Umbraco.Core.Strings.Diff">
             <summary>
             This Class implements the Difference Algorithm published in
             "An O(ND) Difference Algorithm and its Variations" by Eugene Myers
             Algorithmica Vol. 1 No. 2, 1986, p 251.
            
             The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
             each line is converted into a (hash) number. See DiffText().
            
             diff.cs: A port of the algorithm to C#
             Copyright (c) by Matthias Hertel, http://www.mathertel.de
             This work is licensed under a BSD style license. See http://www.mathertel.de/License.aspx
             </summary>
        </member>
        <member name="T:Umbraco.Core.Strings.Diff.DiffData">
            <summary>Data on one input file being compared.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.DiffData.Length">
            <summary>Number of elements (lines).</summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.DiffData.Data">
            <summary>Buffer of numbers that will be compared.</summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.DiffData.Modified">
            <summary>
            Array of booleans that flag for modified data.
            This is the result of the diff.
            This means deletedA in the first Data or inserted in the second Data.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffData.#ctor(System.Int32[])">
            <summary>
            Initialize the Diff-Data buffer.
            </summary>
            <param name="initData">reference to the buffer</param>
        </member>
        <member name="T:Umbraco.Core.Strings.Diff.Item">
            <summary>details of one difference.</summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.Item.StartA">
            <summary>Start Line number in Data A.</summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.Item.StartB">
            <summary>Start Line number in Data B.</summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.Item.DeletedA">
            <summary>Number of changes in Data A.</summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.Item.InsertedB">
            <summary>Number of changes in Data B.</summary>
        </member>
        <member name="T:Umbraco.Core.Strings.Diff.Smsrd">
            <summary>
            Shortest Middle Snake Return Data
            </summary>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffText(System.String,System.String)">
            <summary>
            Find the difference in 2 texts, comparing by text lines.
            </summary>
            <param name="textA">A-version of the text (usually the old one)</param>
            <param name="textB">B-version of the text (usually the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffText1(System.String,System.String)">
            <summary>
            Find the difference in 2 texts, comparing by text lines.
            This method uses the DiffInt internally by 1st converting the string into char codes
            then uses the diff int method
            </summary>
            <param name="textA">A-version of the text (usually the old one)</param>
            <param name="textB">B-version of the text (usually the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffText(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Find the difference in 2 text documents, comparing by text lines.
            The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
            each line is converted into a (hash) number. This hash-value is computed by storing all
            text lines into a common Hashtable so i can find duplicates in there, and generating a
            new number each time a new text line is inserted.
            </summary>
            <param name="textA">A-version of the text (usually the old one)</param>
            <param name="textB">B-version of the text (usually the new one)</param>
            <param name="trimSpace">When set to true, all leading and trailing whitespace characters are stripped out before the comparison is done.</param>
            <param name="ignoreSpace">When set to true, all whitespace characters are converted to a single space character before the comparison is done.</param>
            <param name="ignoreCase">When set to true, all characters are converted to their lowercase equivalence before the comparison is done.</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffCharCodes(System.String,System.Boolean)">
            <summary>
            Diffs the char codes.
            </summary>
            <param name="aText">A text.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.Optimize(Umbraco.Core.Strings.Diff.DiffData)">
            <summary>
            If a sequence of modified lines starts with a line that contains the same content
            as the line that appends the changes, the difference sequence is modified so that the
            appended line and not the starting line is marked as modified.
            This leads to more readable diff sequences when comparing text files.
            </summary>
            <param name="data">A Diff data buffer containing the identified changes.</param>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffInt(System.Int32[],System.Int32[])">
            <summary>
            Find the difference in 2 arrays of integers.
            </summary>
            <param name="arrayA">A-version of the numbers (usually the old one)</param>
            <param name="arrayB">B-version of the numbers (usually the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffCodes(System.String,System.Collections.IDictionary,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function converts all text lines of the text into unique numbers for every unique text line
            so further work can work only with simple numbers.
            </summary>
            <param name="aText">the input text</param>
            <param name="h">This extern initialized Hashtable is used for storing all ever used text lines.</param>
            <param name="trimSpace">ignore leading and trailing space characters</param>
            <param name="ignoreSpace"></param>
            <param name="ignoreCase"></param>
            <returns>a array of integers.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.Sms(Umbraco.Core.Strings.Diff.DiffData,System.Int32,System.Int32,Umbraco.Core.Strings.Diff.DiffData,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            This is the algorithm to find the Shortest Middle Snake (SMS).
            </summary>
            <param name="dataA">sequence A</param>
            <param name="lowerA">lower bound of the actual range in DataA</param>
            <param name="upperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="dataB">sequence B</param>
            <param name="lowerB">lower bound of the actual range in DataB</param>
            <param name="upperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="downVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="upVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
            <returns>a MiddleSnakeData record containing x,y and u,v</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.Lcs(Umbraco.Core.Strings.Diff.DiffData,System.Int32,System.Int32,Umbraco.Core.Strings.Diff.DiffData,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            This is the divide-and-conquer implementation of the longest common-subsequence (LCS)
            algorithm.
            The published algorithm passes recursively parts of the A and B sequences.
            To avoid copying these arrays the lower and upper bounds are passed while the sequences stay constant.
            </summary>
            <param name="dataA">sequence A</param>
            <param name="lowerA">lower bound of the actual range in DataA</param>
            <param name="upperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="dataB">sequence B</param>
            <param name="lowerB">lower bound of the actual range in DataB</param>
            <param name="upperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="downVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="upVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.CreateDiffs(Umbraco.Core.Strings.Diff.DiffData,Umbraco.Core.Strings.Diff.DiffData)">
            <summary>Scan the tables of which lines are inserted and deleted,
            producing an edit script in forward order.
            </summary>
            dynamic array
        </member>
        <member name="T:Umbraco.Core.Strings.IShortStringHelper">
            <summary>
            Provides string functions for short strings such as aliases or URL segments.
            </summary>
            <remarks>Not necessarily optimized to work on large bodies of text.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanStringForSafeAlias(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe alias.</returns>
            <remarks>
            <para>The string will be cleaned in the context of the IShortStringHelper default culture.</para>
            <para>A safe alias is [a-z][a-zA-Z0-9_]* although legacy will also accept '-', and '_' at the beginning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanStringForSafeAlias(System.String,System.String)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe alias.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanStringForUrlSegment(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an URL segment.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe URL segment.</returns>
            <remarks>The string will be cleaned in the context of the IShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanStringForUrlSegment(System.String,System.String)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an URL segment.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe URL segment.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanStringForSafeFileName(System.String)">
            <summary>
            Cleans a string, in the context of the invariant culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a URL).
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe filename.</returns>
            <remarks>Legacy says this was used to "overcome an issue when Umbraco is used in IE in an intranet environment" but that issue is not documented.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanStringForSafeFileName(System.String,System.String)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a URL).
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe filename.</returns>
            <remarks>Legacy says this was used to "overcome an issue when Umbraco is used in IE in an intranet environment" but that issue is not documented.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.SplitPascalCasing(System.String,System.Char)">
            <summary>
            Splits a pascal-cased string by inserting a separator in between each term.
            </summary>
            <param name="text">The text to split.</param>
            <param name="separator">The separator.</param>
            <returns>The split string.</returns>
            <remarks>Supports Utf8 and Ascii strings, not Unicode strings.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType)">
            <summary>
            Cleans a string.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the IShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Char)">
            <summary>
            Cleans a string, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the IShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.String)">
            <summary>
            Cleans a string in the context of a specified culture.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Char,System.String)">
            <summary>
            Cleans a string in the context of a specified culture, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="T:Umbraco.Core.Strings.IUrlSegmentProvider">
            <summary>
            Provides URL segments for content.
            </summary>
            <remarks>Url segments should comply with IETF RFCs regarding content, encoding, etc.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IUrlSegmentProvider.GetUrlSegment(Umbraco.Core.Models.IContentBase,System.String)">
            <summary>
            Gets the URL segment for a specified content and culture.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The culture.</param>
            <returns>The URL segment.</returns>
            <remarks>This is for when Umbraco is capable of managing more than one URL
            per content, in 1-to-1 multilingual configurations. Then there would be one
            URL per culture.</remarks>
        </member>
        <member name="T:Umbraco.Core.Strings.Utf8ToAsciiConverter">
            <summary>
            Provides methods to convert Utf8 text to Ascii.
            </summary>
            <remarks>
            <para>Tries to match characters such as accented eg "é" to Ascii equivalent eg "e".</para>
            <para>Converts all "whitespace" characters to a single whitespace.</para>
            <para>Removes all non-Utf8 (unicode) characters, so in fact it can sort-of "convert" Unicode to Ascii.</para>
            <para>Replaces symbols with '?'.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.Utf8ToAsciiConverter.ToAsciiString(System.String,System.Char)">
            <summary>
            Converts an Utf8 string into an Ascii string.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="fail">The character to use to replace characters that cannot properly be converted.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Utf8ToAsciiConverter.ToAsciiCharArray(System.String,System.Char)">
            <summary>
            Converts an Utf8 string into an array of Ascii characters.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="fail">The character to use to replace characters that cannot properly be converted.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Utf8ToAsciiConverter.ToAscii(System.Char[],System.Char[],System.Char)">
            <summary>
            Converts an array of Utf8 characters into an array of Ascii characters.
            </summary>
            <param name="input">The input array.</param>
            <param name="output">The output array.</param>
            <param name="fail">The character to use to replace characters that cannot properly be converted.</param>
            <returns>The number of characters in the output array.</returns>
            <remarks>The caller must ensure that the output array is big enough.</remarks>
            <exception cref="T:System.OverflowException">The output array is not big enough.</exception>
        </member>
        <member name="M:Umbraco.Core.Strings.Utf8ToAsciiConverter.ToAscii(System.Char[],System.Int32,System.Char[],System.Int32@,System.Char)">
            <summary>
            Converts the character at position <paramref name="ipos"/> in input array of Utf8 characters <paramref name="input"/>
            and writes the converted value to output array of Ascii characters <paramref name="output"/> at position <paramref name="opos"/>,
            and increments that position accordingly.
            </summary>
            <param name="input">The input array.</param>
            <param name="ipos">The input position.</param>
            <param name="output">The output array.</param>
            <param name="opos">The output position.</param>
            <param name="fail">The character to use to replace characters that cannot properly be converted.</param>
            <remarks>
            <para>Adapted from various sources on the 'net including <c>Lucene.Net.Analysis.ASCIIFoldingFilter</c>.</para>
            <para>Input should contain Utf8 characters exclusively and NOT Unicode.</para>
            <para>Removes controls, normalizes whitespaces, replaces symbols by '?'.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.StringUdi">
            <summary>
            Represents a string-based entity identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Core.StringUdi.Id">
            <summary>
            The string part of the identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Core.StringUdi.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the StringUdi class with an entity type and a string id.
            </summary>
            <param name="entityType">The entity type part of the udi.</param>
            <param name="id">The string id part of the udi.</param>
        </member>
        <member name="M:Umbraco.Core.StringUdi.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the StringUdi class with a uri value.
            </summary>
            <param name="uriValue">The uri value of the udi.</param>
        </member>
        <member name="M:Umbraco.Core.StringUdi.Parse(System.String)">
            <summary>
            Converts the string representation of an entity identifier into the equivalent StringUdi instance.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>A StringUdi instance that contains the value that was parsed.</returns>
        </member>
        <member name="P:Umbraco.Core.StringUdi.IsRoot">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Core.Sync.ApplicationUrlHelper">
            <summary>
            A helper used to determine the current server umbraco application URL.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.ApplicationUrlHelper.ApplicationUrlProvider">
            <summary>
            Gets or sets a custom provider for the umbraco application URL.
            </summary>
            <remarks>
            <para>Receives the current request as a parameter, and it may be null. Must return a properly
            formatted URL with scheme and umbraco dir and no trailing slash eg "http://www.mysite.com/umbraco",
            or <c>null</c>. To be used in auto-load-balancing scenarios where the application URL is not
            in config files but is determined programmatically.</para>
            <para>Must be assigned before resolution is frozen.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Sync.DatabaseServerMessenger">
            <summary>
            An <see cref="T:Umbraco.Core.Sync.IServerMessenger"/> that works by storing messages in the database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.Boot">
            <summary>
            Boots the messenger.
            </summary>
            <remarks>
            Thread safety: this is NOT thread safe. Because it is NOT meant to run multi-threaded.
            Callers MUST ensure thread-safety.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.Initialize(Umbraco.Core.Persistence.IUmbracoDatabase)">
            <summary>
            Initializes a server that has never synchronized before.
            </summary>
            <remarks>
            Thread safety: this is NOT thread safe. Because it is NOT meant to run multi-threaded.
            Callers MUST ensure thread-safety.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.Sync">
            <summary>
            Synchronize the server (throttled).
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.ProcessDatabaseInstructions(Umbraco.Core.Persistence.IUmbracoDatabase)">
            <summary>
            Process instructions from the database.
            </summary>
            <remarks>
            Thread safety: this is NOT thread safe. Because it is NOT meant to run multi-threaded.
            </remarks>
            <returns>
            Returns the number of processed instructions
            </returns>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.ProcessDatabaseInstructions(System.Collections.Generic.IReadOnlyCollection{Umbraco.Core.Sync.RefreshInstruction},Umbraco.Core.Persistence.Dtos.CacheInstructionDto,System.Collections.Generic.HashSet{Umbraco.Core.Sync.RefreshInstruction},System.Int32@)">
            <summary>
            Processes the instruction batch and checks for errors
            </summary>
            <param name="instructionBatch"></param>
            <param name="dto"></param>
            <param name="processed">
            Tracks which instructions have already been processed to avoid duplicates
            </param>
            <param name="lastId"></param>
            <returns>
            returns true if all instructions in the batch were processed, otherwise false if they could not be due to the app being shut down
            </returns>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.PruneOldInstructions(Umbraco.Core.Persistence.IUmbracoDatabase)">
            <summary>
            Remove old instructions from the database
            </summary>
            <remarks>
            Always leave the last (most recent) record in the db table, this is so that not all instructions are removed which would cause
            the site to cold boot if there's been no instruction activity for more than DaysToRetainInstructions.
            See: http://issues.umbraco.org/issue/U4-7643#comment=67-25085
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.EnsureInstructions(Umbraco.Core.Persistence.IUmbracoDatabase)">
            <summary>
            Ensure that the last instruction that was processed is still in the database.
            </summary>
            <remarks>
            If the last instruction is not in the database anymore, then the messenger
            should not try to process any instructions, because some instructions might be lost,
            and it should instead cold-boot.
            However, if the last synced instruction id is '0' and there are '0' records, then this indicates
            that it's a fresh site and no user actions have taken place, in this circumstance we do not want to cold
            boot. See: http://issues.umbraco.org/issue/U4-8627
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.ReadLastSynced">
            <summary>
            Reads the last-synced id from file into memory.
            </summary>
            <remarks>
            Thread safety: this is NOT thread safe. Because it is NOT meant to run multi-threaded.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.SaveLastSynced(System.Int32)">
            <summary>
            Updates the in-memory last-synced id and persists it to file.
            </summary>
            <param name="id">The id.</param>
            <remarks>
            Thread safety: this is NOT thread safe. Because it is NOT meant to run multi-threaded.
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Sync.DatabaseServerMessenger.LocalIdentity">
            <summary>
            Gets the unique local identity of the executing AppDomain.
            </summary>
            <remarks>
            <para>It is not only about the "server" (machine name and appDomainappId), but also about
            an AppDomain, within a Process, on that server - because two AppDomains running at the same
            time on the same server (eg during a restart) are, practically, a LB setup.</para>
            <para>Practically, all we really need is the guid, the other infos are here for information
            and debugging purposes.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.GetAllInstructions(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Parses out the individual instructions to be processed
            </summary>
            <param name="jsonArray"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.NotifyRefreshers(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.RefreshInstruction},System.Collections.Generic.HashSet{Umbraco.Core.Sync.RefreshInstruction})">
            <summary>
            executes the instructions against the cache refresher instances
            </summary>
            <param name="instructions"></param>
            <param name="processed"></param>
            <returns>
            Returns true if all instructions were processed, otherwise false if the processing was interrupted (i.e. app shutdown)
            </returns>
        </member>
        <member name="T:Umbraco.Core.Sync.DatabaseServerMessengerOptions">
            <summary>
            Provides options to the <see cref="T:Umbraco.Core.Sync.DatabaseServerMessenger"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessengerOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Sync.DatabaseServerMessengerOptions"/> with default values.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerMessengerOptions.MaxProcessingInstructionCount">
            <summary>
            The maximum number of instructions that can be processed at startup; otherwise the server cold-boots (rebuilds its caches).
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerMessengerOptions.InitializingCallbacks">
            <summary>
            A list of callbacks that will be invoked if the lastsynced.txt file does not exist.
            </summary>
            <remarks>
            These callbacks will typically be for eg rebuilding the xml cache file, or examine indexes, based on
            the data in the database to get this particular server node up to date.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerMessengerOptions.DaysToRetainInstructions">
            <summary>
            The number of days to keep instructions in the database; records older than this number will be pruned.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerMessengerOptions.ThrottleSeconds">
            <summary>
            The number of seconds to wait between each sync operations.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerMessengerOptions.PruneThrottleSeconds">
            <summary>
            The number of seconds to wait between each prune operations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.DatabaseServerRegistrar">
            <summary>
            A registrar that stores registered server nodes in the database.
            </summary>
            <remarks>
            This is the default registrar which determines a server's role by using a master election process.
            The master election process doesn't occur until just after startup so this election process doesn't really affect the primary startup phase.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerRegistrar.Options">
            <summary>
            Gets or sets the registrar options.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerRegistrar.#ctor(System.Lazy{Umbraco.Core.Services.IServerRegistrationService},Umbraco.Core.Sync.DatabaseServerRegistrarOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Sync.DatabaseServerRegistrar"/> class.
            </summary>
            <param name="registrationService">The registration service.</param>
            <param name="options">Some options.</param>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerRegistrar.Registrations">
            <summary>
            Gets the registered servers.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerRegistrar.GetCurrentServerRole">
            <summary>
            Gets the role of the current server in the application environment.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerRegistrar.GetCurrentServerUmbracoApplicationUrl">
            <summary>
            Gets the current umbraco application URL.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.DatabaseServerRegistrarOptions">
            <summary>
            Provides options to the <see cref="T:Umbraco.Core.Sync.DatabaseServerRegistrar"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerRegistrarOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Sync.DatabaseServerRegistrarOptions"/> class with default values.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerRegistrarOptions.RecurringSeconds">
            <summary>
            The amount of seconds to wait between calls to the database on the background thread
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerRegistrarOptions.StaleServerTimeout">
            <summary>
            The time span to wait before considering a server stale, after it has last been accessed.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.IServerAddress">
            <summary>
            Provides the address of a server.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.IServerAddress.ServerAddress">
            <summary>
            Gets the server address.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.IServerMessenger">
            <summary>
            Broadcasts distributed cache notifications to all servers of a load balanced environment.
            </summary>
            <remarks>Also ensures that the notification is processed on the local environment.</remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefresh``1(Umbraco.Core.Cache.ICacheRefresher,``0[])">
            <summary>
            Notifies the distributed cache, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="payload">The notification content.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefresh(Umbraco.Core.Cache.ICacheRefresher,System.String)">
            <summary>
            Notifies the distributed cache, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="jsonPayload">The notification content.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefresh``1(Umbraco.Core.Cache.ICacheRefresher,System.Func{``0,System.Int32},``0[])">
            <summary>
            Notifies the distributed cache of specified item invalidation, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <typeparam name="T">The type of the invalidated items.</typeparam>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="getNumericId">A function returning the unique identifier of items.</param>
            <param name="instances">The invalidated items.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefresh``1(Umbraco.Core.Cache.ICacheRefresher,System.Func{``0,System.Guid},``0[])">
            <summary>
            Notifies the distributed cache of specified item invalidation, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <typeparam name="T">The type of the invalidated items.</typeparam>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="getGuidId">A function returning the unique identifier of items.</param>
            <param name="instances">The invalidated items.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRemove``1(Umbraco.Core.Cache.ICacheRefresher,System.Func{``0,System.Int32},``0[])">
            <summary>
            Notifies all servers of specified items removal, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <typeparam name="T">The type of the removed items.</typeparam>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="getNumericId">A function returning the unique identifier of items.</param>
            <param name="instances">The removed items.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRemove(Umbraco.Core.Cache.ICacheRefresher,System.Int32[])">
            <summary>
            Notifies all servers of specified items removal, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="numericIds">The unique identifiers of the removed items.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefresh(Umbraco.Core.Cache.ICacheRefresher,System.Int32[])">
            <summary>
            Notifies all servers of specified items invalidation, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="numericIds">The unique identifiers of the invalidated items.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefresh(Umbraco.Core.Cache.ICacheRefresher,System.Guid[])">
            <summary>
            Notifies all servers of specified items invalidation, for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="guidIds">The unique identifiers of the invalidated items.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefreshAll(Umbraco.Core.Cache.ICacheRefresher)">
            <summary>
            Notifies all servers of a global invalidation for a specified <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/>.
            </summary>
            <param name="refresher">The ICacheRefresher.</param>
        </member>
        <member name="T:Umbraco.Core.Sync.IServerRegistrar">
            <summary>
            Provides server registrations to the distributed cache.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.IServerRegistrar.Registrations">
            <summary>
            Gets the server registrations.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerRegistrar.GetCurrentServerRole">
            <summary>
            Gets the role of the current server in the application environment.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerRegistrar.GetCurrentServerUmbracoApplicationUrl">
            <summary>
            Gets the current umbraco application URL.
            </summary>
            <remarks>
            <para>If the registrar does not provide the umbraco application URL, should return null.</para>
            <para>Must return null, or a URL that ends with SystemDirectories.Umbraco, and contains a scheme, eg "http://www.mysite.com/umbraco".</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Sync.MessageType">
            <summary>
            The message type to be used for syncing across servers.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.RefreshInstruction.#ctor(Umbraco.Core.Cache.ICacheRefresher,Umbraco.Core.Sync.RefreshMethodType,System.String,System.Int32)">
            <summary>
            A private constructor to create a new instance
            </summary>
            <param name="refresher"></param>
            <param name="refreshType"></param>
            <param name="json"></param>
            <param name="idCount">
            When the refresh method is <see cref="F:Umbraco.Core.Sync.RefreshMethodType.RefreshByIds"/> we know how many Ids are being refreshed so we know the instruction
            count which will be taken into account when we store this count in the database. 
            </param>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.RefreshType">
            <summary>
            Gets or sets the refresh action type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.RefresherId">
            <summary>
            Gets or sets the refresher unique identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.GuidId">
            <summary>
            Gets or sets the Guid data value.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.IntId">
            <summary>
            Gets or sets the int data value.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.JsonIds">
            <summary>
            Gets or sets the ids data value.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.JsonIdCount">
            <summary>
            Gets or sets the number of Ids contained in the JsonIds json value
            </summary>
            <remarks>
            This is used to determine the instruction count per row
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.JsonPayload">
            <summary>
            Gets or sets the payload data value.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.RefreshInstructionEnvelope">
            <summary>
            Used for any 'Batched' <see cref="T:Umbraco.Core.Sync.IServerMessenger"/> instances which specifies a set of <see cref="T:Umbraco.Core.Sync.RefreshInstruction"/> targeting a collection of
            <see cref="T:Umbraco.Core.Sync.IServerAddress"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.RefreshMethodType">
            <summary>
            Describes <see cref="T:Umbraco.Core.Sync.RefreshInstruction"/> refresh action type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.ServerMessengerBase">
            <summary>
            Provides a base class for all <see cref="T:Umbraco.Core.Sync.IServerMessenger"/> implementations.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerMessengerBase.RequiresDistributed(Umbraco.Core.Cache.ICacheRefresher,Umbraco.Core.Sync.MessageType)">
            <summary>
            Determines whether to make distributed calls when messaging a cache refresher.
            </summary>
            <param name="servers">The registered servers.</param>
            <param name="refresher">The cache refresher.</param>
            <param name="messageType">The message type.</param>
            <returns>true if distributed calls are required; otherwise, false, all we have is the local server.</returns>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerMessengerBase.DeliverLocal(Umbraco.Core.Cache.ICacheRefresher,Umbraco.Core.Sync.MessageType,System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            Executes the non strongly typed <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/> on the local/current server
            </summary>
            <param name="refresher"></param>
            <param name="messageType"></param>
            <param name="ids"></param>
            <param name="json"></param>
            <remarks>
            Since this is only for non strongly typed <see cref="T:Umbraco.Core.Cache.ICacheRefresher"/> it will throw for message types that by instance
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerMessengerBase.DeliverLocal``1(Umbraco.Core.Cache.ICacheRefresher,Umbraco.Core.Sync.MessageType,System.Func{``0,System.Object},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Executes the strongly typed <see cref="T:Umbraco.Core.Cache.ICacheRefresher`1"/> on the local/current server
            </summary>
            <typeparam name="T"></typeparam>
            <param name="refresher"></param>
            <param name="messageType"></param>
            <param name="getId"></param>
            <param name="instances"></param>
            <remarks>
            Since this is only for strongly typed <see cref="T:Umbraco.Core.Cache.ICacheRefresher`1"/> it will throw for message types that are not by instance
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Sync.ServerRole">
            <summary>
            The role of a server in an application environment.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Sync.ServerRole.Unknown">
            <summary>
            The server role is unknown.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Sync.ServerRole.Single">
            <summary>
            The server is the single server of a single-server environment.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Sync.ServerRole.Replica">
            <summary>
            In a multi-servers environment, the server is a replica server.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Sync.ServerRole.Master">
            <summary>
            In a multi-servers environment, the server is the master server.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.SingleServerRegistrar">
            <summary>
            Can be used when Umbraco is definitely not operating in a Load Balanced scenario to micro-optimize some startup performance
            </summary>
            <remarks>
            The micro optimization is specifically to avoid a DB query just after the app starts up to determine the <see cref="T:Umbraco.Core.Sync.ServerRole"/>
            which by default is done with master election by a database query. The master election process doesn't occur until just after startup
            so this micro optimization doesn't really affect the primary startup phase.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.SystemUtilities">
            <summary>
            Static helper methods for returning information about the current System
            </summary>
        </member>
        <member name="M:Umbraco.Core.SystemUtilities.GetCurrentTrustLevel">
            <summary>
            Get the current trust level of the hosted application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.GetMemberIgnoreCase(System.Type,System.Object,System.String)">
            <summary>
            Tries to return a value based on a property name for an object but ignores case sensitivity
            </summary>
            <param name="type"></param>
            <param name="target"></param>
            <param name="memberName"></param>
            <returns></returns>
            <remarks>
            Currently this will only work for ProperCase and camelCase properties, see the TODO below to enable complete case insensitivity
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            Checks if the type is an anonymous type
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            reference: http://jclaes.blogspot.com/2011/05/checking-for-anonymous-types.html
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.HasParameters(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Determines whether the specified type is enumerable.
            </summary>
            <param name="method">The type.</param>
            <param name="parameterTypes"></param>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsEnumerable(System.Type)">
            <returns>
              <c>true</c> if the specified type is enumerable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsOfGenericType(System.Type,System.Type)">
            <summary>
            Determines whether [is of generic type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <param name="genericType">Type of the generic.</param>
            <returns>
              <c>true</c> if [is of generic type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.TryGetGenericArguments(System.Type,System.Type,System.Type[]@)">
            <summary>
            Will find the generic type of the 'type' parameter passed in that is equal to the 'genericType' parameter passed in
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <param name="genericArgType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.GetAllProperties(System.Type)">
            <summary>
            Gets all properties in a flat hierarchy
            </summary>
            <remarks>Includes both Public and Non-Public properties</remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.GetPublicProperties(System.Type)">
            <summary>
            Returns all public properties including inherited properties even for interfaces
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            taken from http://stackoverflow.com/questions/358835/getproperties-to-return-all-properties-for-an-interface-inheritance-hierarchy
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsType``1(System.Type)">
            <summary>
            Determines whether the specified actual type is type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actualType">The actual type.</param>
            <returns>
              <c>true</c> if the specified actual type is type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.GetFullNameWithAssembly(System.Type)">
             <summary>
             Returns the full type name with the assembly but without all of the assembly specific version information.
             </summary>
             <param name="type"></param>
             <returns></returns>
             <remarks>
             This method is like an 'in between' of Type.FullName and Type.AssemblyQualifiedName which returns the type and the assembly separated
             by a comma.
             </remarks>
             <example>
             The output of this class would be:
            
             Umbraco.Core.TypeExtensions, Umbraco.Core
             </example>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsAssignableFromGtd(System.Type,System.Type)">
            <summary>
            Determines whether an instance of a specified type can be assigned to the current type instance.
            </summary>
            <param name="type">The current type.</param>
            <param name="c">The type to compare with the current type.</param>
            <returns>A value indicating whether an instance of the specified type can be assigned to the current type instance.</returns>
            <remarks>This extended version supports the current type being a generic type definition, and will
            consider that eg <c>List{int}</c> is "assignable to" <c>IList{}</c>.</remarks>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.GetEnumeratedType(System.Type)">
            <summary>
            If the given <paramref name="type"/> is an array or some other collection
            comprised of 0 or more instances of a "subtype", get that type
            </summary>
            <param name="type">the source type</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Udi">
            <summary>
            Represents an entity identifier.
            </summary>
            <remarks>An Udi can be fully qualified or "closed" eg umb://document/{guid} or "open" eg umb://document.</remarks>
        </member>
        <member name="M:Umbraco.Core.Udi.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Udi class.
            </summary>
            <param name="entityType">The entity type part of the identifier.</param>
            <param name="stringValue">The string value of the identifier.</param>
        </member>
        <member name="M:Umbraco.Core.Udi.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the Udi class.
            </summary>
            <param name="uriValue">The uri value of the identifier.</param>
        </member>
        <member name="P:Umbraco.Core.Udi.EntityType">
            <summary>
            Gets the entity type part of the identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Udi.Parse(System.String)">
            <summary>
            Converts the string representation of an entity identifier into the equivalent Udi instance.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>An Udi instance that contains the value that was parsed.</returns>
        </member>
        <member name="M:Umbraco.Core.Udi.Parse(System.String,System.Boolean)">
            <summary>
            Converts the string representation of an entity identifier into the equivalent Udi instance.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="knownTypes">A value indicating whether to only deal with known types.</param>
            <returns>An Udi instance that contains the value that was parsed.</returns>
            <remarks>
            <para>If <paramref name="knownTypes"/> is <c>true</c>, and the string could not be parsed because
            the entity type was not known, the method succeeds but sets <c>udi</c>to an
            <see cref="T:Umbraco.Core.Udi.UnknownTypeUdi"/> value.</para>
            <para>If <paramref name="knownTypes"/> is <c>true</c>, assemblies are not scanned for types,
            and therefore only builtin types may be known. Unless scanning already took place.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Udi.TryParse(System.String,Umbraco.Core.Udi@)">
            <summary>
            Converts the string representation of an entity identifier into the equivalent Udi instance.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="udi">An Udi instance that contains the value that was parsed.</param>
            <returns>A boolean value indicating whether the string could be parsed.</returns>
        </member>
        <member name="M:Umbraco.Core.Udi.TryParse(System.String,System.Boolean,Umbraco.Core.Udi@)">
            <summary>
            Converts the string representation of an entity identifier into the equivalent Udi instance.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="knownTypes">A value indicating whether to only deal with known types.</param>
            <param name="udi">An Udi instance that contains the value that was parsed.</param>
            <returns>A boolean value indicating whether the string could be parsed.</returns>
            <remarks>
            <para>If <paramref name="knownTypes"/> is <c>true</c>, and the string could not be parsed because
            the entity type was not known, the method returns <c>false</c> but still sets <c>udi</c>
            to an <see cref="T:Umbraco.Core.Udi.UnknownTypeUdi"/> value.</para>
            <para>If <paramref name="knownTypes"/> is <c>true</c>, assemblies are not scanned for types,
            and therefore only builtin types may be known. Unless scanning already took place.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Udi.EnsureScanForUdiTypes">
            <summary>
            When required scan assemblies for known UDI types based on <see cref="T:Umbraco.Core.Deploy.IServiceConnector"/> instances
            </summary>
            <remarks>
            This is only required when needing to resolve root udis
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Udi.Create(System.String)">
            <summary>
            Creates a root Udi for an entity type.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>The root Udi for the entity type.</returns>
        </member>
        <member name="M:Umbraco.Core.Udi.Create(System.String,System.String)">
            <summary>
            Creates a string Udi.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="id">The identifier.</param>
            <returns>The string Udi for the entity type and identifier.</returns>
        </member>
        <member name="M:Umbraco.Core.Udi.Create(System.String,System.Guid)">
            <summary>
            Creates a Guid Udi.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="id">The identifier.</param>
            <returns>The Guid Udi for the entity type and identifier.</returns>
        </member>
        <member name="P:Umbraco.Core.Udi.IsRoot">
            <summary>
            Gets a value indicating whether this Udi is a root Udi.
            </summary>
            <remarks>A root Udi points to the "root of all things" for a given entity type, e.g. the content tree root.</remarks>
        </member>
        <member name="M:Umbraco.Core.Udi.EnsureNotRoot">
            <summary>
            Ensures that this Udi is not a root Udi.
            </summary>
            <returns>This Udi.</returns>
            <exception cref="T:System.Exception">When this Udi is a Root Udi.</exception>
        </member>
        <member name="T:Umbraco.Core.UdiGetterExtensions">
            <summary>
            Provides extension methods that return udis for Umbraco entities.
            </summary>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.ITemplate)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IContentType)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IMediaType)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IMemberType)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IMemberGroup)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IDataType)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.EntityContainer)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IMember)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.Stylesheet)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.Script)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IDictionaryItem)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IMacro)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IPartialView)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IContentBase)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.IRelationType)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.ILanguage)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="M:Umbraco.Core.UdiGetterExtensions.GetUdi(Umbraco.Core.Models.Entities.IEntity)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity identifier of the entity.</returns>
        </member>
        <member name="T:Umbraco.Core.UdiRange">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Udi"/> range.
            </summary>
            <remarks>
            <remarks>A Udi range is composed of a <see cref="T:Umbraco.Core.Udi"/> which represents the base of the range,
            plus a selector that can be "." (the Udi), ".*" (the Udi and its children), ".**" (the udi and
            its descendants, "*" (the children of the Udi), and "**" (the descendants of the Udi).</remarks>
            <remarks>The Udi here can be a closed entity, or an open entity.</remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.UdiRange.#ctor(Umbraco.Core.Udi,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.UdiRange"/> class with a <see cref="T:Umbraco.Core.Udi"/> and an optional selector.
            </summary>
            <param name="udi">A <see cref="P:Umbraco.Core.UdiRange.Udi"/>.</param>
            <param name="selector">An optional selector.</param>
        </member>
        <member name="P:Umbraco.Core.UdiRange.Udi">
            <summary>
            Gets the <see cref="P:Umbraco.Core.UdiRange.Udi"/> for this range.
            </summary>
        </member>
        <member name="P:Umbraco.Core.UdiRange.Selector">
            <summary>
            Gets or sets the selector for this range.
            </summary>
        </member>
        <member name="P:Umbraco.Core.UdiRange.EntityType">
            <summary>
            Gets the entity type of the <see cref="T:Umbraco.Core.Udi"/> for this range.
            </summary>
        </member>
        <member name="T:Umbraco.Core.UdiType">
            <summary>
            Defines Udi types.
            </summary>
        </member>
        <member name="T:Umbraco.Core.UdiTypeConverter">
            <summary>
            A custom type converter for UDI
            </summary>
            <remarks>
            Primarily this is used so that WebApi can auto-bind a string parameter to a UDI instance
            </remarks>
        </member>
        <member name="T:Umbraco.Core.UpgradeableReadLock">
            <summary>
            Provides a convenience methodology for implementing locked access to resources.
            </summary>
            <remarks>
            Intended as an infrastructure class.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.UpgradeableReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ReadLock"/> class.
            </summary>
            <param name="rwLock">The rw lock.</param>
        </member>
        <member name="T:Umbraco.Core.UriExtensions">
            <summary>
            Provides extension methods to <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.IsBackOfficeRequest(System.Uri,System.String,Umbraco.Core.Configuration.IGlobalSettings)">
              <summary>
              Checks if the current uri is a back office request
              </summary>
              <param name="url"></param>
              <param name="applicationPath">
              The current application path or VirtualPath
              </param>
             <param name="globalSettings"></param>
             <returns></returns>
              <remarks>
              There are some special routes we need to check to properly determine this:
            
                  If any route has an extension in the path like .aspx = back office
            
                  These are def back office:
                      /Umbraco/BackOffice     = back office
                      /Umbraco/Preview        = back office
                  If it's not any of the above, and there's no extension then we cannot determine if it's back office or front-end
                  so we can only assume that it is not back office. This will occur if people use an UmbracoApiController for the backoffice
                  but do not inherit from UmbracoAuthorizedApiController and do not use [IsBackOffice] attribute.
            
                  These are def front-end:
                      /Umbraco/Surface        = front-end
                      /Umbraco/Api            = front-end
                  But if we've got this far we'll just have to assume it's front-end anyways.
            
              </remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.IsInstallerRequest(System.Uri)">
            <summary>
            Checks if the current uri is an install request
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.IsDefaultBackOfficeRequest(System.Uri,Umbraco.Core.Configuration.IGlobalSettings)">
            <summary>
            Checks if the uri is a request for the default back office page
            </summary>
            <param name="url"></param>
            <param name="globalSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.IsClientSideRequest(System.Uri)">
            <summary>
            This is a performance tweak to check if this not an ASP.Net server file
            .Net will pass these requests through to the module when in integrated mode.
            We want to ignore all of these requests immediately.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.Rewrite(System.Uri,System.String)">
            <summary>
            Rewrites the path of uri.
            </summary>
            <param name="uri">The uri.</param>
            <param name="path">The new path, which must begin with a slash.</param>
            <returns>The rewritten uri.</returns>
            <remarks>Everything else remains unchanged, except for the fragment which is removed.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.Rewrite(System.Uri,System.String,System.String)">
            <summary>
            Rewrites the path and query of a uri.
            </summary>
            <param name="uri">The uri.</param>
            <param name="path">The new path, which must begin with a slash.</param>
            <param name="query">The new query, which must be empty or begin with a question mark.</param>
            <returns>The rewritten uri.</returns>
            <remarks>Everything else remains unchanged, except for the fragment which is removed.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.GetSafeAbsolutePath(System.Uri)">
            <summary>
            Gets the absolute path of the uri, even if the uri is relative.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The absolute path of the uri.</returns>
            <remarks>Default uri.AbsolutePath does not support relative uris.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.GetAbsolutePathDecoded(System.Uri)">
            <summary>
            Gets the decoded, absolute path of the uri.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The absolute path of the uri.</returns>
            <remarks>Only for absolute uris.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.GetSafeAbsolutePathDecoded(System.Uri)">
            <summary>
            Gets the decoded, absolute path of the uri, even if the uri is relative.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The absolute path of the uri.</returns>
            <remarks>Default uri.AbsolutePath does not support relative uris.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.EndPathWithSlash(System.Uri)">
            <summary>
            Rewrites the path of the uri so it ends with a slash.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The rewritten uri.</returns>
            <remarks>Everything else remains unchanged.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.TrimPathEndSlash(System.Uri)">
            <summary>
            Rewrites the path of the uri so it does not end with a slash.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The rewritten uri.</returns>
            <remarks>Everything else remains unchanged.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.MakeAbsolute(System.Uri,System.Uri)">
            <summary>
            Transforms a relative uri into an absolute uri.
            </summary>
            <param name="uri">The relative uri.</param>
            <param name="baseUri">The base absolute uri.</param>
            <returns>The absolute uri.</returns>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.WithoutPort(System.Uri)">
            <summary>
            Removes the port from the uri.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The same uri, without its port.</returns>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.ReplaceHost(System.Uri,System.String)">
            <summary>
            Replaces the host of a uri.
            </summary>
            <param name="uri">The uri.</param>
            <param name="host">A replacement host.</param>
            <returns>The same uri, with its host replaced.</returns>
        </member>
        <member name="T:Umbraco.Core.WriteLock">
            <summary>
            Provides a convenience methodology for implementing locked access to resources.
            </summary>
            <remarks>
            <para>Intended as an infrastructure class.</para>
            <para>This is a very inefficient way to lock as it allocates one object each time we lock,
            so it's OK to use this class for things that happen once, where it is convenient, but not
            for performance-critical code!</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.WriteLock"/> class.
            </summary>
            <param name="rwLock">The rw lock.</param>
        </member>
        <member name="T:Umbraco.Core.XmlExtensions">
            <summary>
            Extension methods for xml objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectNodes(System.Xml.XmlNode,System.String,System.Collections.Generic.IEnumerable{Umbraco.Core.Xml.XPathVariable})">
            <summary>
            Selects a list of XmlNode matching an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The list of XmlNode matching the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectNodes(System.Xml.XmlNode,System.Xml.XPath.XPathExpression,System.Collections.Generic.IEnumerable{Umbraco.Core.Xml.XPathVariable})">
            <summary>
            Selects a list of XmlNode matching an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The list of XmlNode matching the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectNodes(System.Xml.XmlNode,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Selects a list of XmlNode matching an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The list of XmlNode matching the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectNodes(System.Xml.XmlNode,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Selects a list of XmlNode matching an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The list of XmlNode matching the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectSingleNode(System.Xml.XmlNode,System.String,System.Collections.Generic.IEnumerable{Umbraco.Core.Xml.XPathVariable})">
            <summary>
            Selects the first XmlNode that matches an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The first XmlNode that matches the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectSingleNode(System.Xml.XmlNode,System.Xml.XPath.XPathExpression,System.Collections.Generic.IEnumerable{Umbraco.Core.Xml.XPathVariable})">
            <summary>
            Selects the first XmlNode that matches an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The first XmlNode that matches the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectSingleNode(System.Xml.XmlNode,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Selects the first XmlNode that matches an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The first XmlNode that matches the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectSingleNode(System.Xml.XmlNode,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Selects the first XmlNode that matches an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The first XmlNode that matches the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.ToXmlDocument(System.Xml.Linq.XDocument)">
            <summary>
            Converts from an XDocument to an XmlDocument
            </summary>
            <param name="xDocument"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.ToXDocument(System.Xml.XmlDocument)">
            <summary>
            Converts from an XmlDocument to an XDocument
            </summary>
            <param name="xmlDocument"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.ToXElement(System.Xml.XmlNode)">
            <summary>
            Converts from an XmlElement to an XElement
            </summary>
            <param name="xmlElement"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Xml.DynamicContext">
            <summary>
            Provides the evaluation context for fast execution and custom
            variables resolution.
            </summary>
            <remarks>
            This class is responsible for resolving variables during dynamic expression execution.
            <para>Discussed in http://weblogs.asp.net/cazzu/archive/2003/10/07/30888.aspx</para>
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.DynamicContext"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.#ctor(System.Xml.NameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.DynamicContext"/>
            class with the specified <see cref="T:System.Xml.NameTable"/>.
            </summary>
            <param name="table">The NameTable to use.</param>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.#ctor(System.Xml.XmlNamespaceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.DynamicContext"/> class.
            </summary>
            <param name="context">A previously filled context with the namespaces to use.</param>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.#ctor(System.Xml.XmlNamespaceManager,System.Xml.NameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.DynamicContext"/> class.
            </summary>
            <param name="context">A previously filled context with the namespaces to use.</param>
            <param name="table">The NameTable to use.</param>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.CompareDocument(System.String,System.String)">
            <summary>
            Implementation equal to <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.LookupNamespace(System.String)">
            <summary>
            Same as <see cref="T:System.Xml.XmlNamespaceManager"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.LookupPrefix(System.String)">
            <summary>
            Same as <see cref="T:System.Xml.XmlNamespaceManager"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <summary>
            Same as <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.DynamicContext.Whitespace">
            <summary>
            Same as <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.Compile(System.String)">
            <summary>
            Shortcut method that compiles an expression using an empty navigator.
            </summary>
            <param name="xpath">The expression to compile</param>
            <returns>A compiled <see cref="T:System.Xml.XPath.XPathExpression"/>.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.AddVariable(System.String,System.Object)">
            <summary>
            Adds the variable to the dynamic evaluation context.
            </summary>
            <param name="name">The name of the variable to add to the context.</param>
            <param name="value">The value of the variable to add to the context.</param>
            <remarks>
            Value type conversion for XPath evaluation is as follows:
            <list type="table">
                   <listheader>
                       <term>CLR Type</term>
                       <description>XPath type</description>
                   </listheader>
                   <item>
                       <term>System.String</term>
                       <description>XPathResultType.String</description>
                   </item>
                   <item>
                       <term>System.Double (or types that can be converted to)</term>
                       <description>XPathResultType.Number</description>
                   </item>
                   <item>
                       <term>System.Boolean</term>
                       <description>XPathResultType.Boolean</description>
                   </item>
                   <item>
                       <term>System.Xml.XPath.XPathNavigator</term>
                       <description>XPathResultType.Navigator</description>
                   </item>
                   <item>
                       <term>System.Xml.XPath.XPathNodeIterator</term>
                       <description>XPathResultType.NodeSet</description>
                   </item>
                   <item>
                       <term>Others</term>
                       <description>XPathResultType.Any</description>
                   </item>
            </list>
            <note type="note">See the topic "Compile, Select, Evaluate, and Matches with
            XPath and XPathExpressions" in MSDN documentation for additional information.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            See <see cref="T:System.Xml.Xsl.XsltContext"/>. Not used in our implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.ResolveVariable(System.String,System.String)">
            <summary>
            Resolves the dynamic variables added to the context. See <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Xml.DynamicContext.DynamicVariable">
            <summary>
            Represents a variable during dynamic expression execution.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.DynamicVariable.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="T:Umbraco.Core.Xml.UmbracoXPathPathSyntaxParser">
            <summary>
            This is used to parse our customize Umbraco XPath expressions (i.e. that include special tokens like $site) into
            a real XPath statement
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.UmbracoXPathPathSyntaxParser.ParseXPathQuery(System.String,System.Nullable{System.Int32},System.Func{System.Int32,System.Collections.Generic.IEnumerable{System.String}},System.Func{System.Int32,System.Boolean})">
            <summary>
            Parses custom umbraco xpath expression
            </summary>
            <param name="xpathExpression">The Xpath expression</param>
            <param name="nodeContextId">
            The current node id context of executing the query - null if there is no current node, in which case
            some of the parameters like $current, $parent, $site will be disabled
            </param>
            <param name="getPath">The callback to create the nodeId path, given a node Id</param>
            <param name="publishedContentExists">The callback to return whether a published node exists based on Id</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Xml.XmlHelper">
            <summary>
            The XmlHelper class contains general helper methods for working with xml in umbraco.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.SetAttribute(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Creates or sets an attribute on the XmlNode if an Attributes collection is available
            </summary>
            <param name="xml"></param>
            <param name="n"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.IsXmlWhitespace(System.String)">
            <summary>
            Gets a value indicating whether a specified string contains only xml whitespace characters.
            </summary>
            <param name="s">The string.</param>
            <returns><c>true</c> if the string contains only xml whitespace characters.</returns>
            <remarks>As per XML 1.1 specs, space, \t, \r and \n.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.CreateXPathDocument(System.String)">
            <summary>
            Creates a new <c>XPathDocument</c> from an xml string.
            </summary>
            <param name="xml">The xml string.</param>
            <returns>An <c>XPathDocument</c> created from the xml string.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.TryCreateXPathDocument(System.String,System.Xml.XPath.XPathDocument@)">
            <summary>
            Tries to create a new <c>XPathDocument</c> from an xml string.
            </summary>
            <param name="xml">The xml string.</param>
            <param name="doc">The XPath document.</param>
            <returns>A value indicating whether it has been possible to create the document.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.TryCreateXPathDocumentFromPropertyValue(System.Object,System.Xml.XPath.XPathDocument@)">
            <summary>
            Tries to create a new <c>XPathDocument</c> from a property value.
            </summary>
            <param name="value">The value of the property.</param>
            <param name="doc">The XPath document.</param>
            <returns>A value indicating whether it has been possible to create the document.</returns>
            <remarks>The value can be anything... Performance-wise, this is bad.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.SortNodes(System.Xml.XmlNode,System.String,System.Func{System.Xml.XmlNode,System.Int32})">
            <summary>
            Sorts the children of a parentNode.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="childNodesXPath">An XPath expression to select children of <paramref name="parentNode"/> to sort.</param>
            <param name="orderBy">A function returning the value to order the nodes by.</param>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.SortNode(System.Xml.XmlNode,System.String,System.Xml.XmlNode,System.Func{System.Xml.XmlNode,System.Int32})">
            <summary>
            Sorts a single child node of a parentNode.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="childNodesXPath">An XPath expression to select children of <paramref name="parentNode"/> to sort.</param>
            <param name="node">The child node to sort.</param>
            <param name="orderBy">A function returning the value to order the nodes by.</param>
            <returns>A value indicating whether sorting was needed.</returns>
            <remarks>Assuming all nodes but <paramref name="node"/> are sorted, this will move the node to
            the right position without moving all the nodes (as SortNodes would do) - should improve perfs.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.OpenAsXmlDocument(System.String)">
            <summary>
            Opens a file as a XmlDocument.
            </summary>
            <param name="filePath">The relative file path. ie. /config/umbraco.config</param>
            <returns>Returns a XmlDocument class</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.AddAttribute(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            creates a XmlAttribute with the specified name and value
            </summary>
            <param name="xd">The xmldocument.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <returns>a XmlAttribute</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.AddTextNode(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates a text XmlNode with the specified name and value
            </summary>
            <param name="xd">The xmldocument.</param>
            <param name="name">The node name.</param>
            <param name="value">The node value.</param>
            <returns>a XmlNode</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.SetTextNode(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Sets or Creates a text XmlNode with the specified name and value
            </summary>
            <param name="xd">The xmldocument.</param>
            <param name="parent">The node to set or create the child text node on</param>
            <param name="name">The node name.</param>
            <param name="value">The node value.</param>
            <returns>a XmlNode</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.SetInnerXmlNode(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Sets or creates an Xml node from its inner Xml.
            </summary>
            <param name="xd">The xmldocument.</param>
            <param name="parent">The node to set or create the child text node on</param>
            <param name="name">The node name.</param>
            <param name="value">The node inner Xml.</param>
            <returns>a XmlNode</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.AddCDataNode(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates a cdata XmlNode with the specified name and value
            </summary>
            <param name="xd">The xmldocument.</param>
            <param name="name">The node name.</param>
            <param name="value">The node value.</param>
            <returns>A XmlNode</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.SetCDataNode(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Sets or Creates a cdata XmlNode with the specified name and value
            </summary>
            <param name="xd">The xmldocument.</param>
            <param name="parent">The node to set or create the child text node on</param>
            <param name="name">The node name.</param>
            <param name="value">The node value.</param>
            <returns>a XmlNode</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.GetNodeValue(System.Xml.XmlNode)">
            <summary>
            Gets the value of a XmlNode
            </summary>
            <param name="n">The XmlNode.</param>
            <returns>the value as a string</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.CouldItBeXml(System.String)">
            <summary>
            Determines whether the specified string appears to be XML.
            </summary>
            <param name="xml">The XML string.</param>
            <returns>
                <c>true</c> if the specified string appears to be XML; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.Split(System.String,System.String[],System.String,System.String)">
            <summary>
            Splits the specified delimited string into an XML document.
            </summary>
            <param name="data">The data.</param>
            <param name="separator">The separator.</param>
            <param name="rootName">Name of the root.</param>
            <param name="elementName">Name of the element.</param>
            <returns>Returns an <c>System.Xml.XmlDocument</c> representation of the delimited string data.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.Split(System.Xml.XmlDocument,System.String,System.String[],System.String,System.String)">
            <summary>
            Splits the specified delimited string into an XML document.
            </summary>
            <param name="xml">The XML document.</param>
            <param name="data">The delimited string data.</param>
            <param name="separator">The separator.</param>
            <param name="rootName">Name of the root node.</param>
            <param name="elementName">Name of the element node.</param>
            <returns>Returns an <c>System.Xml.XmlDocument</c> representation of the delimited string data.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlHelper.GetAttributesFromElement(System.String)">
            <summary>
            Return a dictionary of attributes found for a string based tag
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Xml.XmlNamespaces">
            <summary>
            Provides public constants for wellknown XML namespaces.
            </summary>
            <remarks>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.Xml">
            <summary>
            The public XML 1.0 namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/2004/REC-xml-20040204/</remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.XmlNs">
            <summary>
            Public Xml Namespaces specification namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/REC-xml-names/</remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.XmlNsPrefix">
            <summary>
            Public Xml Namespaces prefix.
            </summary>
            <remarks>See http://www.w3.org/TR/REC-xml-names/</remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.Xsi">
            <summary>
            XML Schema instance namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/xmlschema-1/</remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.Xsd">
            <summary>
            XML 1.0 Schema namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/xmlschema-1/</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlNodeListFactory.CreateNodeList(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Creates an instance of a <see cref="T:System.Xml.XmlNodeList"/> that allows
            enumerating <see cref="T:System.Xml.XmlNode"/> elements in the iterator.
            </summary>
            <param name="iterator">The result of a previous node selection
            through an <see cref="T:System.Xml.XPath.XPathNavigator"/> query.</param>
            <returns>An initialized list ready to be enumerated.</returns>
            <remarks>The underlying XML store used to issue the query must be
            an object inheriting <see cref="T:System.Xml.XmlNode"/>, such as
            <see cref="T:System.Xml.XmlDocument"/>.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.ReadToEnd">
            <summary>
            Reads the entire iterator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.ReadTo(System.Int32)">
            <summary>
            Reads up to the specified index, or until the
            iterator is consumed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.Done">
            <summary>
            Flags that the iterator has been consumed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.CurrentPosition">
            <summary>
            Current count of nodes in the iterator (read so far).
            </summary>
        </member>
        <member name="T:Umbraco.Core.Xml.XPathNavigatorExtensions">
            <summary>
            Provides extensions to XPathNavigator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPathNavigatorExtensions.Select(System.Xml.XPath.XPathNavigator,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Selects a node set, using the specified XPath expression.
            </summary>
            <param name="navigator">A source XPathNavigator.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>An iterator over the nodes matching the specified expression.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPathNavigatorExtensions.Select(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Selects a node set, using the specified XPath expression.
            </summary>
            <param name="navigator">A source XPathNavigator.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>An iterator over the nodes matching the specified expression.</returns>
        </member>
        <member name="T:Umbraco.Core.Xml.XPathVariable">
            <summary>
            Represents a variable in an XPath query.
            </summary>
            <remarks>The name must be <c>foo</c> in the constructor and <c>$foo</c> in the XPath query.</remarks>
        </member>
        <member name="P:Umbraco.Core.Xml.XPathVariable.Name">
            <summary>
            Gets or sets the name of the variable.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPathVariable.Value">
            <summary>
            Gets or sets the value of the variable.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPathVariable.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.XPathVariable"/> class with a name and a value.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:Umbraco.Core.Xml.XPath.INavigableContent">
            <summary>
            Represents a content that can be navigated via XPath.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableContent.Id">
            <summary>
            Gets the unique identifier of the navigable content.
            </summary>
            <remarks>The root node identifier should be <c>-1</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableContent.ParentId">
            <summary>
            Gets the unique identifier of parent of the navigable content.
            </summary>
            <remarks>The top-level content parent identifiers should be <c>-1</c> ie the identifier
            of the root node, whose parent identifier should in turn be <c>-1</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableContent.Type">
            <summary>
            Gets the type of the navigable content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableContent.ChildIds">
            <summary>
            Gets the unique identifiers of the children of the navigable content.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.INavigableContent.Value(System.Int32)">
            <summary>
            Gets the value of a field of the navigable content for XPath navigation use.
            </summary>
            <param name="index">The field index.</param>
            <returns>The value of the field for XPath navigation use.</returns>
            <remarks>
            <para>Fields are attributes or elements depending on their relative index value compared
            to source.LastAttributeIndex.</para>
            <para>For attributes, the value must be a string.</para>
            <para>For elements, the value should an <c>XPathNavigator</c> instance if the field is xml
            and has content (is not empty), <c>null</c> to indicate that the element is empty, or a string
            which can be empty, whitespace... depending on what the data type wants to expose.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Xml.XPath.INavigableContentType">
            <summary>
            Represents the type of a content that can be navigated via XPath.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableContentType.Name">
            <summary>
            Gets the name of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableContentType.FieldTypes">
            <summary>
            Gets the field types of the content type.
            </summary>
            <remarks>This includes the attributes and the properties.</remarks>
        </member>
        <member name="T:Umbraco.Core.Xml.XPath.INavigableFieldType">
            <summary>
            Represents the type of a field of a content that can be navigated via XPath.
            </summary>
            <remarks>A field can be an attribute or a property.</remarks>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableFieldType.Name">
            <summary>
            Gets the name of the field type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableFieldType.XmlStringConverter">
            <summary>
            Gets a method to convert the field value to a string.
            </summary>
            <remarks>This is for built-in properties, ie attributes. User-defined properties have their
            own way to convert their value for XPath.</remarks>
        </member>
        <member name="T:Umbraco.Core.Xml.XPath.INavigableSource">
            <summary>
            Represents a source of content that can be navigated via XPath.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.INavigableSource.Get(System.Int32)">
            <summary>
            Gets a content identified by its unique identifier.
            </summary>
            <param name="id">The unique identifier.</param>
            <returns>The content identified by the unique identifier, or null.</returns>
            <remarks>When <c>id</c> is <c>-1</c> (root content) implementations should return <c>null</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableSource.LastAttributeIndex">
            <summary>
            Gets the index of the last attribute in the fields collections.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableSource.Root">
            <summary>
            Gets the content at the root of the source.
            </summary>
            <remarks>That content should have unique identifier <c>-1</c> and should not be gettable,
            ie Get(-1) should return null. Its <c>ParentId</c> should be <c>-1</c>. It should provide
            values for the attribute fields.</remarks>
        </member>
        <member name="T:Umbraco.Core.Xml.XPath.MacroNavigator">
            <summary>
            Provides a cursor model for navigating {macro /} as if it were XML.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Xml.XPath.MacroNavigator.MacroParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.XPath.MacroNavigator"/> class with macro parameters.
            </summary>
            <param name="parameters">The macro parameters.</param>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.#ctor(Umbraco.Core.Xml.XPath.MacroNavigator.MacroRoot,System.Xml.XmlNameTable,Umbraco.Core.Xml.XPath.MacroNavigator.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.XPath.MacroNavigator"/> class with a macro node,
            a name table and a state.
            </summary>
            <param name="macro">The macro node.</param>
            <param name="nameTable">The name table.</param>
            <param name="state">The state.</param>
            <remarks>Privately used for cloning a navigator.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.Clone">
            <summary>
            Creates a new XPathNavigator positioned at the same node as this XPathNavigator.
            </summary>
            <returns>A new XPathNavigator positioned at the same node as this XPathNavigator.</returns>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element without an end element tag.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            Determines whether the current XPathNavigator is at the same position as the specified XPathNavigator.
            </summary>
            <param name="nav">The XPathNavigator to compare to this XPathNavigator.</param>
            <returns>true if the two XPathNavigator objects have the same position; otherwise, false.</returns>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.Name">
            <summary>
            Gets the qualified name of the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.LocalName">
            <summary>
            Gets the Name of the current node without any namespace prefix.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Moves the XPathNavigator to the same position as the specified XPathNavigator.
            </summary>
            <param name="nav">The XPathNavigator positioned on the node that you want to move to. </param>
            <returns>Returns true if the XPathNavigator is successful moving to the same position as the specified XPathNavigator;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToFirstAttribute">
            <summary>
            Moves the XPathNavigator to the first attribute of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the first attribute of the current node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToFirstChild">
            <summary>
            Moves the XPathNavigator to the first child node of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the first child node of the current node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the first namespace node that matches the XPathNamespaceScope specified.
            </summary>
            <param name="namespaceScope">An XPathNamespaceScope value describing the namespace scope. </param>
            <returns>Returns true if the XPathNavigator is successful moving to the first namespace node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the next namespace node matching the XPathNamespaceScope specified.
            </summary>
            <param name="namespaceScope">An XPathNamespaceScope value describing the namespace scope. </param>
            <returns>Returns true if the XPathNavigator is successful moving to the next namespace node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToId(System.String)">
            <summary>
            Moves to the node that has an attribute of type ID whose value matches the specified String.
            </summary>
            <param name="id">A String representing the ID value of the node to which you want to move.</param>
            <returns>true if the XPathNavigator is successful moving; otherwise, false.
            If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToNext">
            <summary>
            Moves the XPathNavigator to the next sibling node of the current node.
            </summary>
            <returns>true if the XPathNavigator is successful moving to the next sibling node;
            otherwise, false if there are no more siblings or if the XPathNavigator is currently
            positioned on an attribute node. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToPrevious">
            <summary>
            Moves the XPathNavigator to the previous sibling node of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the previous sibling node;
            otherwise, false if there is no previous sibling node or if the XPathNavigator is currently
            positioned on an attribute node. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToNextAttribute">
            <summary>
            Moves the XPathNavigator to the next attribute.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the next attribute;
            false if there are no more attributes. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToParent">
            <summary>
            Moves the XPathNavigator to the parent node of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the parent node of the current node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToRoot">
            <summary>
            Moves the XPathNavigator to the root node that the current node belongs to.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.BaseURI">
            <summary>
            Gets the base URI for the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.NameTable">
            <summary>
            Gets the XmlNameTable of the XPathNavigator.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.NamespaceURI">
            <summary>
            Gets the namespace URI of the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.NodeType">
            <summary>
            Gets the XPathNodeType of the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.Prefix">
            <summary>
            Gets the namespace prefix associated with the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.Value">
            <summary>
            Gets the string value of the item.
            </summary>
            <remarks>Does not fully behave as per the specs, as we report empty value on root and macro elements, and we start
            reporting values only on parameter elements. This is because, otherwise, we would might dump the whole database
            and it probably does not make sense at Umbraco level.</remarks>
        </member>
        <member name="T:Umbraco.Core.Xml.XPath.NavigableNavigator">
            <summary>
            Provides a cursor model for navigating Umbraco data as if it were XML.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.#ctor(Umbraco.Core.Xml.XPath.INavigableSource,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.XPath.NavigableNavigator"/> class with a content source,
            and an optional root content.
            </summary>
            <param name="source">The content source.</param>
            <param name="rootId">The root content identifier.</param>
            <param name="maxDepth">The maximum depth.</param>
            <remarks>When no root content is supplied then the root of the source is used.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.#ctor(Umbraco.Core.Xml.XPath.NavigableNavigator,Umbraco.Core.Xml.XPath.NavigableNavigator.State,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.XPath.NavigableNavigator"/> class as a clone.
            </summary>
            <param name="orig">The cloned navigator.</param>
            <param name="state">The clone state.</param>
            <param name="maxDepth">The clone maximum depth.</param>
            <remarks>Privately used for cloning a navigator.</remarks>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.UnderlyingObject">
            <summary>
            Gets the underlying content object.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.Clone">
            <summary>
            Creates a new XPathNavigator positioned at the same node as this XPathNavigator.
            </summary>
            <returns>A new XPathNavigator positioned at the same node as this XPathNavigator.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.CloneWithNewRoot(System.String,System.Int32)">
            <summary>
            Creates a new XPathNavigator using the same source but positioned at a new root.
            </summary>
            <returns>A new XPathNavigator using the same source and positioned at a new root.</returns>
            <remarks>The new root can be above this navigator's root.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.CloneWithNewRoot(System.Int32,System.Int32)">
            <summary>
            Creates a new XPathNavigator using the same source but positioned at a new root.
            </summary>
            <returns>A new XPathNavigator using the same source and positioned at a new root.</returns>
            <remarks>The new root can be above this navigator's root.</remarks>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element without an end element tag.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            Determines whether the current XPathNavigator is at the same position as the specified XPathNavigator.
            </summary>
            <param name="nav">The XPathNavigator to compare to this XPathNavigator.</param>
            <returns>true if the two XPathNavigator objects have the same position; otherwise, false.</returns>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.Name">
            <summary>
            Gets the qualified name of the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.LocalName">
            <summary>
            Gets the Name of the current node without any namespace prefix.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Moves the XPathNavigator to the same position as the specified XPathNavigator.
            </summary>
            <param name="nav">The XPathNavigator positioned on the node that you want to move to. </param>
            <returns>Returns true if the XPathNavigator is successful moving to the same position as the specified XPathNavigator;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToFirstAttribute">
            <summary>
            Moves the XPathNavigator to the first attribute of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the first attribute of the current node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToFirstChild">
            <summary>
            Moves the XPathNavigator to the first child node of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the first child node of the current node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the first namespace node that matches the XPathNamespaceScope specified.
            </summary>
            <param name="namespaceScope">An XPathNamespaceScope value describing the namespace scope. </param>
            <returns>Returns true if the XPathNavigator is successful moving to the first namespace node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the next namespace node matching the XPathNamespaceScope specified.
            </summary>
            <param name="namespaceScope">An XPathNamespaceScope value describing the namespace scope. </param>
            <returns>Returns true if the XPathNavigator is successful moving to the next namespace node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToId(System.String)">
            <summary>
            Moves to the node that has an attribute of type ID whose value matches the specified String.
            </summary>
            <param name="id">A String representing the ID value of the node to which you want to move.</param>
            <returns>true if the XPathNavigator is successful moving; otherwise, false.
            If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToNext">
            <summary>
            Moves the XPathNavigator to the next sibling node of the current node.
            </summary>
            <returns>true if the XPathNavigator is successful moving to the next sibling node;
            otherwise, false if there are no more siblings or if the XPathNavigator is currently
            positioned on an attribute node. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToPrevious">
            <summary>
            Moves the XPathNavigator to the previous sibling node of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the previous sibling node;
            otherwise, false if there is no previous sibling node or if the XPathNavigator is currently
            positioned on an attribute node. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToNextAttribute">
            <summary>
            Moves the XPathNavigator to the next attribute.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the next attribute;
            false if there are no more attributes. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToParent">
            <summary>
            Moves the XPathNavigator to the parent node of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the parent node of the current node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToRoot">
            <summary>
            Moves the XPathNavigator to the root node that the current node belongs to.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.BaseURI">
            <summary>
            Gets the base URI for the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.NameTable">
            <summary>
            Gets the XmlNameTable of the XPathNavigator.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.NamespaceURI">
            <summary>
            Gets the namespace URI of the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.NodeType">
            <summary>
            Gets the XPathNodeType of the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.Prefix">
            <summary>
            Gets the namespace prefix associated with the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.Value">
            <summary>
            Gets the string value of the item.
            </summary>
            <remarks>Does not fully behave as per the specs, as we report empty value on content elements, and we start
            reporting values only on property elements. This is because, otherwise, we would dump the whole database
            and it probably does not make sense at Umbraco level.</remarks>
        </member>
    </members>
</doc>
